// Code generated from SV2017Parser.g4 by ANTLR 4.9.2. DO NOT EDIT.

package sv2017 // SV2017Parser
import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 391, 7265,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65,
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 4, 70, 9, 70, 4,
	71, 9, 71, 4, 72, 9, 72, 4, 73, 9, 73, 4, 74, 9, 74, 4, 75, 9, 75, 4, 76,
	9, 76, 4, 77, 9, 77, 4, 78, 9, 78, 4, 79, 9, 79, 4, 80, 9, 80, 4, 81, 9,
	81, 4, 82, 9, 82, 4, 83, 9, 83, 4, 84, 9, 84, 4, 85, 9, 85, 4, 86, 9, 86,
	4, 87, 9, 87, 4, 88, 9, 88, 4, 89, 9, 89, 4, 90, 9, 90, 4, 91, 9, 91, 4,
	92, 9, 92, 4, 93, 9, 93, 4, 94, 9, 94, 4, 95, 9, 95, 4, 96, 9, 96, 4, 97,
	9, 97, 4, 98, 9, 98, 4, 99, 9, 99, 4, 100, 9, 100, 4, 101, 9, 101, 4, 102,
	9, 102, 4, 103, 9, 103, 4, 104, 9, 104, 4, 105, 9, 105, 4, 106, 9, 106,
	4, 107, 9, 107, 4, 108, 9, 108, 4, 109, 9, 109, 4, 110, 9, 110, 4, 111,
	9, 111, 4, 112, 9, 112, 4, 113, 9, 113, 4, 114, 9, 114, 4, 115, 9, 115,
	4, 116, 9, 116, 4, 117, 9, 117, 4, 118, 9, 118, 4, 119, 9, 119, 4, 120,
	9, 120, 4, 121, 9, 121, 4, 122, 9, 122, 4, 123, 9, 123, 4, 124, 9, 124,
	4, 125, 9, 125, 4, 126, 9, 126, 4, 127, 9, 127, 4, 128, 9, 128, 4, 129,
	9, 129, 4, 130, 9, 130, 4, 131, 9, 131, 4, 132, 9, 132, 4, 133, 9, 133,
	4, 134, 9, 134, 4, 135, 9, 135, 4, 136, 9, 136, 4, 137, 9, 137, 4, 138,
	9, 138, 4, 139, 9, 139, 4, 140, 9, 140, 4, 141, 9, 141, 4, 142, 9, 142,
	4, 143, 9, 143, 4, 144, 9, 144, 4, 145, 9, 145, 4, 146, 9, 146, 4, 147,
	9, 147, 4, 148, 9, 148, 4, 149, 9, 149, 4, 150, 9, 150, 4, 151, 9, 151,
	4, 152, 9, 152, 4, 153, 9, 153, 4, 154, 9, 154, 4, 155, 9, 155, 4, 156,
	9, 156, 4, 157, 9, 157, 4, 158, 9, 158, 4, 159, 9, 159, 4, 160, 9, 160,
	4, 161, 9, 161, 4, 162, 9, 162, 4, 163, 9, 163, 4, 164, 9, 164, 4, 165,
	9, 165, 4, 166, 9, 166, 4, 167, 9, 167, 4, 168, 9, 168, 4, 169, 9, 169,
	4, 170, 9, 170, 4, 171, 9, 171, 4, 172, 9, 172, 4, 173, 9, 173, 4, 174,
	9, 174, 4, 175, 9, 175, 4, 176, 9, 176, 4, 177, 9, 177, 4, 178, 9, 178,
	4, 179, 9, 179, 4, 180, 9, 180, 4, 181, 9, 181, 4, 182, 9, 182, 4, 183,
	9, 183, 4, 184, 9, 184, 4, 185, 9, 185, 4, 186, 9, 186, 4, 187, 9, 187,
	4, 188, 9, 188, 4, 189, 9, 189, 4, 190, 9, 190, 4, 191, 9, 191, 4, 192,
	9, 192, 4, 193, 9, 193, 4, 194, 9, 194, 4, 195, 9, 195, 4, 196, 9, 196,
	4, 197, 9, 197, 4, 198, 9, 198, 4, 199, 9, 199, 4, 200, 9, 200, 4, 201,
	9, 201, 4, 202, 9, 202, 4, 203, 9, 203, 4, 204, 9, 204, 4, 205, 9, 205,
	4, 206, 9, 206, 4, 207, 9, 207, 4, 208, 9, 208, 4, 209, 9, 209, 4, 210,
	9, 210, 4, 211, 9, 211, 4, 212, 9, 212, 4, 213, 9, 213, 4, 214, 9, 214,
	4, 215, 9, 215, 4, 216, 9, 216, 4, 217, 9, 217, 4, 218, 9, 218, 4, 219,
	9, 219, 4, 220, 9, 220, 4, 221, 9, 221, 4, 222, 9, 222, 4, 223, 9, 223,
	4, 224, 9, 224, 4, 225, 9, 225, 4, 226, 9, 226, 4, 227, 9, 227, 4, 228,
	9, 228, 4, 229, 9, 229, 4, 230, 9, 230, 4, 231, 9, 231, 4, 232, 9, 232,
	4, 233, 9, 233, 4, 234, 9, 234, 4, 235, 9, 235, 4, 236, 9, 236, 4, 237,
	9, 237, 4, 238, 9, 238, 4, 239, 9, 239, 4, 240, 9, 240, 4, 241, 9, 241,
	4, 242, 9, 242, 4, 243, 9, 243, 4, 244, 9, 244, 4, 245, 9, 245, 4, 246,
	9, 246, 4, 247, 9, 247, 4, 248, 9, 248, 4, 249, 9, 249, 4, 250, 9, 250,
	4, 251, 9, 251, 4, 252, 9, 252, 4, 253, 9, 253, 4, 254, 9, 254, 4, 255,
	9, 255, 4, 256, 9, 256, 4, 257, 9, 257, 4, 258, 9, 258, 4, 259, 9, 259,
	4, 260, 9, 260, 4, 261, 9, 261, 4, 262, 9, 262, 4, 263, 9, 263, 4, 264,
	9, 264, 4, 265, 9, 265, 4, 266, 9, 266, 4, 267, 9, 267, 4, 268, 9, 268,
	4, 269, 9, 269, 4, 270, 9, 270, 4, 271, 9, 271, 4, 272, 9, 272, 4, 273,
	9, 273, 4, 274, 9, 274, 4, 275, 9, 275, 4, 276, 9, 276, 4, 277, 9, 277,
	4, 278, 9, 278, 4, 279, 9, 279, 4, 280, 9, 280, 4, 281, 9, 281, 4, 282,
	9, 282, 4, 283, 9, 283, 4, 284, 9, 284, 4, 285, 9, 285, 4, 286, 9, 286,
	4, 287, 9, 287, 4, 288, 9, 288, 4, 289, 9, 289, 4, 290, 9, 290, 4, 291,
	9, 291, 4, 292, 9, 292, 4, 293, 9, 293, 4, 294, 9, 294, 4, 295, 9, 295,
	4, 296, 9, 296, 4, 297, 9, 297, 4, 298, 9, 298, 4, 299, 9, 299, 4, 300,
	9, 300, 4, 301, 9, 301, 4, 302, 9, 302, 4, 303, 9, 303, 4, 304, 9, 304,
	4, 305, 9, 305, 4, 306, 9, 306, 4, 307, 9, 307, 4, 308, 9, 308, 4, 309,
	9, 309, 4, 310, 9, 310, 4, 311, 9, 311, 4, 312, 9, 312, 4, 313, 9, 313,
	4, 314, 9, 314, 4, 315, 9, 315, 4, 316, 9, 316, 4, 317, 9, 317, 4, 318,
	9, 318, 4, 319, 9, 319, 4, 320, 9, 320, 4, 321, 9, 321, 4, 322, 9, 322,
	4, 323, 9, 323, 4, 324, 9, 324, 4, 325, 9, 325, 4, 326, 9, 326, 4, 327,
	9, 327, 4, 328, 9, 328, 4, 329, 9, 329, 4, 330, 9, 330, 4, 331, 9, 331,
	4, 332, 9, 332, 4, 333, 9, 333, 4, 334, 9, 334, 4, 335, 9, 335, 4, 336,
	9, 336, 4, 337, 9, 337, 4, 338, 9, 338, 4, 339, 9, 339, 4, 340, 9, 340,
	4, 341, 9, 341, 4, 342, 9, 342, 4, 343, 9, 343, 4, 344, 9, 344, 4, 345,
	9, 345, 4, 346, 9, 346, 4, 347, 9, 347, 4, 348, 9, 348, 4, 349, 9, 349,
	4, 350, 9, 350, 4, 351, 9, 351, 4, 352, 9, 352, 4, 353, 9, 353, 4, 354,
	9, 354, 4, 355, 9, 355, 4, 356, 9, 356, 4, 357, 9, 357, 4, 358, 9, 358,
	4, 359, 9, 359, 4, 360, 9, 360, 4, 361, 9, 361, 4, 362, 9, 362, 4, 363,
	9, 363, 4, 364, 9, 364, 4, 365, 9, 365, 4, 366, 9, 366, 4, 367, 9, 367,
	4, 368, 9, 368, 4, 369, 9, 369, 4, 370, 9, 370, 4, 371, 9, 371, 4, 372,
	9, 372, 4, 373, 9, 373, 4, 374, 9, 374, 4, 375, 9, 375, 4, 376, 9, 376,
	4, 377, 9, 377, 4, 378, 9, 378, 4, 379, 9, 379, 4, 380, 9, 380, 4, 381,
	9, 381, 4, 382, 9, 382, 4, 383, 9, 383, 4, 384, 9, 384, 4, 385, 9, 385,
	4, 386, 9, 386, 4, 387, 9, 387, 4, 388, 9, 388, 4, 389, 9, 389, 4, 390,
	9, 390, 4, 391, 9, 391, 4, 392, 9, 392, 4, 393, 9, 393, 4, 394, 9, 394,
	4, 395, 9, 395, 4, 396, 9, 396, 4, 397, 9, 397, 4, 398, 9, 398, 4, 399,
	9, 399, 4, 400, 9, 400, 4, 401, 9, 401, 4, 402, 9, 402, 4, 403, 9, 403,
	4, 404, 9, 404, 4, 405, 9, 405, 4, 406, 9, 406, 4, 407, 9, 407, 4, 408,
	9, 408, 4, 409, 9, 409, 4, 410, 9, 410, 4, 411, 9, 411, 4, 412, 9, 412,
	4, 413, 9, 413, 4, 414, 9, 414, 4, 415, 9, 415, 4, 416, 9, 416, 4, 417,
	9, 417, 4, 418, 9, 418, 4, 419, 9, 419, 4, 420, 9, 420, 4, 421, 9, 421,
	4, 422, 9, 422, 4, 423, 9, 423, 4, 424, 9, 424, 4, 425, 9, 425, 4, 426,
	9, 426, 4, 427, 9, 427, 4, 428, 9, 428, 4, 429, 9, 429, 4, 430, 9, 430,
	4, 431, 9, 431, 4, 432, 9, 432, 4, 433, 9, 433, 4, 434, 9, 434, 4, 435,
	9, 435, 4, 436, 9, 436, 4, 437, 9, 437, 4, 438, 9, 438, 4, 439, 9, 439,
	4, 440, 9, 440, 4, 441, 9, 441, 4, 442, 9, 442, 4, 443, 9, 443, 4, 444,
	9, 444, 4, 445, 9, 445, 4, 446, 9, 446, 4, 447, 9, 447, 4, 448, 9, 448,
	4, 449, 9, 449, 4, 450, 9, 450, 4, 451, 9, 451, 4, 452, 9, 452, 4, 453,
	9, 453, 4, 454, 9, 454, 4, 455, 9, 455, 4, 456, 9, 456, 4, 457, 9, 457,
	4, 458, 9, 458, 4, 459, 9, 459, 4, 460, 9, 460, 4, 461, 9, 461, 4, 462,
	9, 462, 4, 463, 9, 463, 4, 464, 9, 464, 4, 465, 9, 465, 4, 466, 9, 466,
	4, 467, 9, 467, 4, 468, 9, 468, 4, 469, 9, 469, 4, 470, 9, 470, 4, 471,
	9, 471, 4, 472, 9, 472, 4, 473, 9, 473, 4, 474, 9, 474, 4, 475, 9, 475,
	4, 476, 9, 476, 4, 477, 9, 477, 4, 478, 9, 478, 4, 479, 9, 479, 4, 480,
	9, 480, 4, 481, 9, 481, 4, 482, 9, 482, 4, 483, 9, 483, 4, 484, 9, 484,
	4, 485, 9, 485, 4, 486, 9, 486, 4, 487, 9, 487, 4, 488, 9, 488, 4, 489,
	9, 489, 4, 490, 9, 490, 4, 491, 9, 491, 4, 492, 9, 492, 4, 493, 9, 493,
	4, 494, 9, 494, 4, 495, 9, 495, 4, 496, 9, 496, 4, 497, 9, 497, 4, 498,
	9, 498, 4, 499, 9, 499, 4, 500, 9, 500, 4, 501, 9, 501, 4, 502, 9, 502,
	4, 503, 9, 503, 4, 504, 9, 504, 4, 505, 9, 505, 4, 506, 9, 506, 4, 507,
	9, 507, 4, 508, 9, 508, 4, 509, 9, 509, 4, 510, 9, 510, 4, 511, 9, 511,
	4, 512, 9, 512, 4, 513, 9, 513, 4, 514, 9, 514, 4, 515, 9, 515, 4, 516,
	9, 516, 4, 517, 9, 517, 4, 518, 9, 518, 4, 519, 9, 519, 4, 520, 9, 520,
	4, 521, 9, 521, 4, 522, 9, 522, 4, 523, 9, 523, 4, 524, 9, 524, 4, 525,
	9, 525, 4, 526, 9, 526, 4, 527, 9, 527, 4, 528, 9, 528, 4, 529, 9, 529,
	4, 530, 9, 530, 4, 531, 9, 531, 4, 532, 9, 532, 3, 2, 5, 2, 1066, 10, 2,
	3, 2, 7, 2, 1069, 10, 2, 12, 2, 14, 2, 1072, 11, 2, 3, 2, 3, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 7, 3, 1083, 10, 3, 12, 3, 14, 3, 1086,
	11, 3, 3, 3, 3, 3, 5, 3, 1090, 10, 3, 3, 3, 5, 3, 1093, 10, 3, 3, 4, 3,
	4, 3, 4, 5, 4, 1098, 10, 4, 3, 5, 3, 5, 3, 6, 3, 6, 3, 6, 5, 6, 1105, 10,
	6, 3, 7, 3, 7, 3, 8, 3, 8, 3, 8, 3, 8, 5, 8, 1113, 10, 8, 3, 9, 3, 9, 3,
	9, 3, 9, 3, 9, 3, 10, 3, 10, 3, 10, 3, 11, 3, 11, 3, 11, 3, 12, 3, 12,
	3, 13, 3, 13, 3, 14, 3, 14, 3, 15, 3, 15, 5, 15, 1134, 10, 15, 3, 16, 3,
	16, 3, 17, 3, 17, 3, 18, 3, 18, 3, 19, 3, 19, 3, 20, 3, 20, 3, 21, 3, 21,
	3, 21, 5, 21, 1149, 10, 21, 3, 22, 3, 22, 3, 23, 3, 23, 3, 23, 5, 23, 1156,
	10, 23, 3, 23, 5, 23, 1159, 10, 23, 3, 24, 3, 24, 5, 24, 1163, 10, 24,
	3, 24, 3, 24, 5, 24, 1167, 10, 24, 3, 25, 3, 25, 3, 26, 3, 26, 3, 27, 3,
	27, 3, 28, 3, 28, 5, 28, 1177, 10, 28, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29,
	5, 29, 1184, 10, 29, 3, 29, 5, 29, 1187, 10, 29, 3, 29, 3, 29, 3, 29, 3,
	29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 5, 29, 1198, 10, 29, 5, 29, 1200,
	10, 29, 3, 30, 3, 30, 3, 31, 3, 31, 3, 32, 3, 32, 3, 33, 3, 33, 3, 34,
	3, 34, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3,
	35, 3, 35, 5, 35, 1223, 10, 35, 3, 35, 3, 35, 3, 35, 3, 35, 5, 35, 1229,
	10, 35, 5, 35, 1231, 10, 35, 3, 35, 3, 35, 3, 36, 3, 36, 3, 37, 3, 37,
	3, 38, 3, 38, 3, 38, 3, 38, 3, 39, 3, 39, 3, 40, 3, 40, 3, 41, 3, 41, 3,
	42, 3, 42, 3, 43, 3, 43, 5, 43, 1253, 10, 43, 3, 44, 5, 44, 1256, 10, 44,
	3, 44, 3, 44, 5, 44, 1260, 10, 44, 3, 45, 3, 45, 3, 46, 3, 46, 3, 47, 3,
	47, 3, 48, 3, 48, 3, 49, 3, 49, 3, 50, 3, 50, 3, 51, 3, 51, 3, 52, 3, 52,
	3, 53, 3, 53, 3, 54, 3, 54, 3, 55, 3, 55, 3, 56, 3, 56, 3, 57, 3, 57, 3,
	57, 3, 57, 3, 57, 5, 57, 1291, 10, 57, 3, 58, 3, 58, 3, 59, 3, 59, 3, 60,
	3, 60, 3, 61, 3, 61, 3, 62, 3, 62, 3, 63, 3, 63, 3, 64, 3, 64, 3, 65, 7,
	65, 1308, 10, 65, 12, 65, 14, 65, 1311, 11, 65, 3, 65, 3, 65, 3, 65, 3,
	65, 3, 65, 3, 65, 3, 65, 3, 66, 7, 66, 1321, 10, 66, 12, 66, 14, 66, 1324,
	11, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 67, 3, 67,
	3, 67, 5, 67, 1336, 10, 67, 3, 67, 3, 67, 3, 67, 3, 67, 7, 67, 1342, 10,
	67, 12, 67, 14, 67, 1345, 11, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3,
	67, 3, 67, 3, 67, 5, 67, 1355, 10, 67, 3, 67, 7, 67, 1358, 10, 67, 12,
	67, 14, 67, 1361, 11, 67, 3, 67, 5, 67, 1364, 10, 67, 3, 67, 3, 67, 3,
	67, 3, 67, 3, 67, 5, 67, 1371, 10, 67, 5, 67, 1373, 10, 67, 3, 68, 3, 68,
	3, 68, 6, 68, 1378, 10, 68, 13, 68, 14, 68, 1379, 3, 69, 3, 69, 3, 69,
	5, 69, 1385, 10, 69, 3, 69, 3, 69, 3, 70, 7, 70, 1390, 10, 70, 12, 70,
	14, 70, 1393, 11, 70, 3, 70, 3, 70, 3, 70, 3, 70, 3, 70, 5, 70, 1400, 10,
	70, 3, 70, 5, 70, 1403, 10, 70, 3, 71, 7, 71, 1406, 10, 71, 12, 71, 14,
	71, 1409, 11, 71, 3, 71, 3, 71, 3, 71, 3, 72, 7, 72, 1415, 10, 72, 12,
	72, 14, 72, 1418, 11, 72, 3, 72, 3, 72, 3, 72, 3, 73, 3, 73, 5, 73, 1425,
	10, 73, 3, 74, 3, 74, 6, 74, 1429, 10, 74, 13, 74, 14, 74, 1430, 3, 74,
	3, 74, 3, 75, 3, 75, 3, 75, 3, 75, 3, 75, 3, 76, 5, 76, 1441, 10, 76, 3,
	76, 3, 76, 6, 76, 1445, 10, 76, 13, 76, 14, 76, 1446, 3, 76, 3, 76, 3,
	77, 3, 77, 3, 77, 3, 77, 3, 77, 3, 77, 3, 78, 3, 78, 3, 78, 3, 78, 3, 78,
	3, 78, 3, 78, 3, 79, 3, 79, 5, 79, 1466, 10, 79, 3, 80, 6, 80, 1469, 10,
	80, 13, 80, 14, 80, 1470, 3, 81, 7, 81, 1474, 10, 81, 12, 81, 14, 81, 1477,
	11, 81, 3, 81, 3, 81, 7, 81, 1481, 10, 81, 12, 81, 14, 81, 1484, 11, 81,
	3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 5, 82, 1491, 10, 82, 3, 83, 3, 83, 3,
	84, 3, 84, 3, 85, 3, 85, 3, 85, 3, 85, 7, 85, 1501, 10, 85, 12, 85, 14,
	85, 1504, 11, 85, 3, 85, 3, 85, 3, 85, 3, 85, 3, 85, 3, 85, 3, 85, 3, 85,
	5, 85, 1514, 10, 85, 3, 85, 5, 85, 1517, 10, 85, 3, 85, 7, 85, 1520, 10,
	85, 12, 85, 14, 85, 1523, 11, 85, 3, 85, 3, 85, 3, 85, 3, 85, 5, 85, 1529,
	10, 85, 5, 85, 1531, 10, 85, 3, 86, 7, 86, 1534, 10, 86, 12, 86, 14, 86,
	1537, 11, 86, 3, 86, 3, 86, 5, 86, 1541, 10, 86, 3, 86, 3, 86, 7, 86, 1545,
	10, 86, 12, 86, 14, 86, 1548, 11, 86, 3, 86, 5, 86, 1551, 10, 86, 3, 86,
	5, 86, 1554, 10, 86, 3, 86, 3, 86, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 7,
	87, 1563, 10, 87, 12, 87, 14, 87, 1566, 11, 87, 3, 87, 3, 87, 3, 87, 5,
	87, 1571, 10, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87,
	3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3,
	87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87,
	5, 87, 1602, 10, 87, 3, 87, 3, 87, 3, 87, 3, 87, 5, 87, 1608, 10, 87, 3,
	88, 3, 88, 3, 88, 3, 88, 7, 88, 1614, 10, 88, 12, 88, 14, 88, 1617, 11,
	88, 3, 88, 3, 88, 3, 89, 3, 89, 3, 89, 3, 89, 3, 89, 7, 89, 1626, 10, 89,
	12, 89, 14, 89, 1629, 11, 89, 3, 89, 3, 89, 3, 90, 7, 90, 1634, 10, 90,
	12, 90, 14, 90, 1637, 11, 90, 3, 90, 3, 90, 3, 90, 5, 90, 1642, 10, 90,
	3, 91, 3, 91, 3, 91, 3, 92, 3, 92, 3, 92, 3, 92, 7, 92, 1651, 10, 92, 12,
	92, 14, 92, 1654, 11, 92, 3, 93, 3, 93, 5, 93, 1658, 10, 93, 3, 94, 3,
	94, 3, 94, 3, 94, 7, 94, 1664, 10, 94, 12, 94, 14, 94, 1667, 11, 94, 3,
	95, 3, 95, 5, 95, 1671, 10, 95, 3, 96, 3, 96, 7, 96, 1675, 10, 96, 12,
	96, 14, 96, 1678, 11, 96, 3, 96, 5, 96, 1681, 10, 96, 3, 97, 3, 97, 3,
	97, 3, 98, 3, 98, 3, 98, 3, 98, 3, 98, 3, 98, 5, 98, 1692, 10, 98, 3, 99,
	3, 99, 3, 99, 5, 99, 1697, 10, 99, 3, 99, 7, 99, 1700, 10, 99, 12, 99,
	14, 99, 1703, 11, 99, 3, 99, 3, 99, 3, 100, 3, 100, 3, 100, 3, 100, 3,
	100, 3, 100, 3, 100, 5, 100, 1714, 10, 100, 3, 100, 3, 100, 3, 100, 3,
	100, 3, 100, 3, 100, 3, 100, 3, 100, 3, 100, 3, 100, 3, 100, 3, 100, 3,
	100, 3, 100, 3, 100, 3, 100, 3, 100, 3, 100, 5, 100, 1734, 10, 100, 3,
	101, 3, 101, 3, 101, 3, 101, 3, 101, 5, 101, 1741, 10, 101, 3, 101, 3,
	101, 5, 101, 1745, 10, 101, 3, 101, 3, 101, 3, 101, 3, 101, 3, 101, 3,
	101, 5, 101, 1753, 10, 101, 3, 101, 3, 101, 3, 101, 3, 101, 3, 101, 3,
	101, 5, 101, 1761, 10, 101, 3, 102, 3, 102, 3, 102, 3, 102, 3, 102, 3,
	102, 3, 102, 5, 102, 1770, 10, 102, 3, 103, 3, 103, 3, 103, 3, 103, 3,
	103, 3, 104, 3, 104, 3, 104, 3, 105, 3, 105, 3, 105, 3, 106, 3, 106, 3,
	106, 3, 106, 3, 106, 3, 106, 5, 106, 1789, 10, 106, 3, 106, 3, 106, 3,
	106, 3, 106, 3, 106, 5, 106, 1796, 10, 106, 3, 107, 3, 107, 3, 107, 3,
	108, 3, 108, 3, 108, 3, 108, 5, 108, 1805, 10, 108, 3, 109, 3, 109, 3,
	109, 3, 109, 5, 109, 1811, 10, 109, 3, 109, 3, 109, 3, 109, 5, 109, 1816,
	10, 109, 3, 110, 3, 110, 3, 110, 3, 110, 3, 110, 3, 110, 5, 110, 1824,
	10, 110, 3, 110, 5, 110, 1827, 10, 110, 3, 111, 3, 111, 3, 111, 3, 111,
	3, 111, 3, 111, 3, 111, 5, 111, 1836, 10, 111, 5, 111, 1838, 10, 111, 3,
	111, 3, 111, 3, 111, 5, 111, 1843, 10, 111, 3, 112, 3, 112, 3, 112, 3,
	112, 3, 112, 5, 112, 1850, 10, 112, 3, 112, 3, 112, 3, 112, 5, 112, 1855,
	10, 112, 3, 113, 3, 113, 3, 113, 3, 113, 3, 113, 5, 113, 1862, 10, 113,
	3, 114, 3, 114, 3, 114, 3, 114, 3, 114, 3, 114, 5, 114, 1870, 10, 114,
	3, 115, 3, 115, 3, 115, 5, 115, 1875, 10, 115, 3, 115, 3, 115, 3, 116,
	3, 116, 3, 116, 3, 116, 3, 116, 3, 116, 3, 116, 3, 116, 5, 116, 1887, 10,
	116, 3, 117, 3, 117, 3, 117, 3, 117, 3, 118, 3, 118, 3, 118, 3, 118, 3,
	118, 3, 118, 5, 118, 1899, 10, 118, 5, 118, 1901, 10, 118, 3, 119, 3, 119,
	3, 119, 3, 119, 5, 119, 1907, 10, 119, 3, 119, 7, 119, 1910, 10, 119, 12,
	119, 14, 119, 1913, 11, 119, 3, 119, 7, 119, 1916, 10, 119, 12, 119, 14,
	119, 1919, 11, 119, 3, 119, 3, 119, 3, 119, 3, 119, 5, 119, 1925, 10, 119,
	3, 120, 3, 120, 3, 120, 3, 120, 5, 120, 1931, 10, 120, 3, 120, 7, 120,
	1934, 10, 120, 12, 120, 14, 120, 1937, 11, 120, 3, 120, 7, 120, 1940, 10,
	120, 12, 120, 14, 120, 1943, 11, 120, 3, 120, 3, 120, 3, 120, 3, 120, 5,
	120, 1949, 10, 120, 3, 121, 5, 121, 1952, 10, 121, 3, 121, 3, 121, 3, 121,
	3, 121, 3, 121, 3, 121, 6, 121, 1960, 10, 121, 13, 121, 14, 121, 1961,
	3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 6, 121, 1970, 10, 121,
	13, 121, 14, 121, 1971, 3, 121, 6, 121, 1975, 10, 121, 13, 121, 14, 121,
	1976, 5, 121, 1979, 10, 121, 5, 121, 1981, 10, 121, 3, 121, 3, 121, 3,
	122, 3, 122, 3, 123, 3, 123, 5, 123, 1989, 10, 123, 3, 123, 3, 123, 3,
	123, 7, 123, 1994, 10, 123, 12, 123, 14, 123, 1997, 11, 123, 3, 123, 3,
	123, 5, 123, 2001, 10, 123, 3, 123, 3, 123, 3, 124, 3, 124, 5, 124, 2007,
	10, 124, 3, 124, 3, 124, 3, 124, 5, 124, 2012, 10, 124, 3, 124, 3, 124,
	5, 124, 2016, 10, 124, 3, 124, 3, 124, 3, 125, 3, 125, 5, 125, 2022, 10,
	125, 3, 125, 3, 125, 3, 125, 5, 125, 2027, 10, 125, 3, 125, 3, 125, 3,
	126, 3, 126, 6, 126, 2033, 10, 126, 13, 126, 14, 126, 2034, 3, 126, 3,
	126, 3, 127, 3, 127, 3, 127, 3, 127, 3, 128, 3, 128, 3, 128, 5, 128, 2046,
	10, 128, 3, 128, 3, 128, 3, 128, 3, 128, 5, 128, 2052, 10, 128, 7, 128,
	2054, 10, 128, 12, 128, 14, 128, 2057, 11, 128, 3, 129, 5, 129, 2060, 10,
	129, 3, 129, 3, 129, 3, 129, 3, 129, 3, 129, 3, 129, 3, 129, 3, 129, 5,
	129, 2070, 10, 129, 3, 130, 3, 130, 3, 130, 3, 130, 3, 130, 3, 130, 3,
	130, 3, 130, 3, 131, 3, 131, 3, 131, 5, 131, 2083, 10, 131, 3, 131, 3,
	131, 3, 132, 3, 132, 3, 132, 5, 132, 2090, 10, 132, 5, 132, 2092, 10, 132,
	3, 132, 3, 132, 3, 132, 3, 133, 3, 133, 3, 133, 3, 133, 3, 133, 3, 133,
	3, 133, 5, 133, 2104, 10, 133, 3, 133, 3, 133, 5, 133, 2108, 10, 133, 3,
	133, 3, 133, 5, 133, 2112, 10, 133, 5, 133, 2114, 10, 133, 3, 133, 5, 133,
	2117, 10, 133, 3, 133, 3, 133, 3, 133, 3, 133, 3, 133, 3, 133, 3, 133,
	3, 133, 3, 133, 3, 133, 3, 133, 3, 133, 3, 133, 3, 133, 3, 133, 3, 133,
	3, 133, 3, 133, 5, 133, 2137, 10, 133, 3, 134, 3, 134, 3, 134, 7, 134,
	2142, 10, 134, 12, 134, 14, 134, 2145, 11, 134, 3, 135, 3, 135, 3, 135,
	3, 135, 7, 135, 2151, 10, 135, 12, 135, 14, 135, 2154, 11, 135, 5, 135,
	2156, 10, 135, 3, 136, 3, 136, 3, 136, 3, 136, 3, 137, 5, 137, 2163, 10,
	137, 3, 137, 3, 137, 3, 137, 3, 137, 7, 137, 2169, 10, 137, 12, 137, 14,
	137, 2172, 11, 137, 3, 138, 3, 138, 3, 138, 7, 138, 2177, 10, 138, 12,
	138, 14, 138, 2180, 11, 138, 3, 139, 5, 139, 2183, 10, 139, 3, 139, 3,
	139, 5, 139, 2187, 10, 139, 7, 139, 2189, 10, 139, 12, 139, 14, 139, 2192,
	11, 139, 3, 140, 3, 140, 5, 140, 2196, 10, 140, 3, 140, 3, 140, 5, 140,
	2200, 10, 140, 3, 140, 3, 140, 3, 141, 3, 141, 3, 141, 3, 141, 3, 141,
	3, 141, 3, 141, 3, 141, 5, 141, 2212, 10, 141, 3, 141, 3, 141, 3, 141,
	3, 141, 3, 141, 7, 141, 2219, 10, 141, 12, 141, 14, 141, 2222, 11, 141,
	3, 141, 3, 141, 3, 141, 5, 141, 2227, 10, 141, 3, 142, 3, 142, 7, 142,
	2231, 10, 142, 12, 142, 14, 142, 2234, 11, 142, 3, 143, 3, 143, 3, 143,
	3, 143, 3, 143, 3, 143, 3, 143, 3, 144, 3, 144, 3, 144, 7, 144, 2246, 10,
	144, 12, 144, 14, 144, 2249, 11, 144, 3, 144, 3, 144, 3, 144, 7, 144, 2254,
	10, 144, 12, 144, 14, 144, 2257, 11, 144, 5, 144, 2259, 10, 144, 3, 145,
	7, 145, 2262, 10, 145, 12, 145, 14, 145, 2265, 11, 145, 3, 145, 5, 145,
	2268, 10, 145, 3, 146, 7, 146, 2271, 10, 146, 12, 146, 14, 146, 2274, 11,
	146, 3, 146, 3, 146, 3, 146, 3, 146, 3, 146, 5, 146, 2281, 10, 146, 3,
	146, 5, 146, 2284, 10, 146, 5, 146, 2286, 10, 146, 3, 147, 3, 147, 3, 147,
	5, 147, 2291, 10, 147, 3, 148, 3, 148, 3, 148, 3, 148, 3, 148, 3, 148,
	3, 148, 3, 148, 3, 148, 3, 148, 3, 148, 3, 148, 3, 148, 3, 148, 5, 148,
	2307, 10, 148, 3, 148, 3, 148, 3, 148, 3, 148, 3, 148, 3, 148, 5, 148,
	2315, 10, 148, 3, 148, 5, 148, 2318, 10, 148, 3, 148, 3, 148, 3, 148, 3,
	148, 3, 148, 3, 148, 3, 148, 3, 148, 3, 148, 3, 148, 5, 148, 2330, 10,
	148, 3, 149, 3, 149, 3, 149, 3, 149, 5, 149, 2336, 10, 149, 3, 149, 5,
	149, 2339, 10, 149, 3, 150, 3, 150, 3, 150, 5, 150, 2344, 10, 150, 3, 150,
	3, 150, 5, 150, 2348, 10, 150, 3, 151, 3, 151, 5, 151, 2352, 10, 151, 3,
	152, 3, 152, 3, 152, 5, 152, 2357, 10, 152, 3, 153, 3, 153, 3, 153, 3,
	153, 3, 153, 3, 153, 3, 154, 3, 154, 3, 154, 3, 154, 3, 154, 3, 154, 3,
	155, 3, 155, 3, 155, 3, 155, 3, 155, 3, 155, 3, 156, 3, 156, 3, 156, 5,
	156, 2380, 10, 156, 3, 157, 3, 157, 3, 157, 3, 158, 3, 158, 3, 158, 5,
	158, 2388, 10, 158, 3, 158, 3, 158, 3, 158, 3, 158, 3, 158, 3, 159, 3,
	159, 3, 159, 5, 159, 2398, 10, 159, 3, 159, 3, 159, 3, 159, 3, 159, 3,
	159, 3, 160, 3, 160, 3, 160, 5, 160, 2408, 10, 160, 3, 160, 3, 160, 3,
	160, 3, 160, 3, 160, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 5,
	161, 2421, 10, 161, 3, 162, 3, 162, 3, 162, 5, 162, 2426, 10, 162, 3, 162,
	5, 162, 2429, 10, 162, 3, 163, 3, 163, 7, 163, 2433, 10, 163, 12, 163,
	14, 163, 2436, 11, 163, 3, 163, 7, 163, 2439, 10, 163, 12, 163, 14, 163,
	2442, 11, 163, 3, 163, 3, 163, 3, 164, 3, 164, 3, 164, 5, 164, 2449, 10,
	164, 3, 164, 3, 164, 6, 164, 2453, 10, 164, 13, 164, 14, 164, 2454, 3,
	164, 3, 164, 3, 165, 3, 165, 3, 165, 3, 165, 3, 165, 5, 165, 2464, 10,
	165, 3, 166, 3, 166, 3, 166, 3, 166, 3, 166, 3, 166, 3, 166, 3, 166, 5,
	166, 2474, 10, 166, 3, 167, 3, 167, 3, 167, 3, 167, 3, 167, 3, 167, 3,
	168, 3, 168, 3, 168, 3, 168, 3, 168, 6, 168, 2487, 10, 168, 13, 168, 14,
	168, 2488, 3, 168, 3, 168, 3, 169, 3, 169, 5, 169, 2495, 10, 169, 3, 169,
	3, 169, 3, 169, 7, 169, 2500, 10, 169, 12, 169, 14, 169, 2503, 11, 169,
	3, 169, 3, 169, 5, 169, 2507, 10, 169, 3, 169, 3, 169, 3, 169, 3, 170,
	3, 170, 3, 170, 3, 170, 5, 170, 2516, 10, 170, 5, 170, 2518, 10, 170, 3,
	171, 3, 171, 3, 171, 3, 171, 3, 171, 3, 171, 5, 171, 2526, 10, 171, 3,
	171, 3, 171, 6, 171, 2530, 10, 171, 13, 171, 14, 171, 2531, 3, 171, 6,
	171, 2535, 10, 171, 13, 171, 14, 171, 2536, 5, 171, 2539, 10, 171, 3, 172,
	5, 172, 2542, 10, 172, 3, 172, 3, 172, 3, 172, 3, 172, 3, 172, 5, 172,
	2549, 10, 172, 3, 172, 3, 172, 3, 172, 3, 172, 7, 172, 2555, 10, 172, 12,
	172, 14, 172, 2558, 11, 172, 3, 172, 3, 172, 3, 173, 3, 173, 5, 173, 2564,
	10, 173, 3, 174, 3, 174, 3, 174, 7, 174, 2569, 10, 174, 12, 174, 14, 174,
	2572, 11, 174, 3, 175, 7, 175, 2575, 10, 175, 12, 175, 14, 175, 2578, 11,
	175, 3, 175, 5, 175, 2581, 10, 175, 3, 175, 5, 175, 2584, 10, 175, 3, 175,
	5, 175, 2587, 10, 175, 3, 175, 3, 175, 7, 175, 2591, 10, 175, 12, 175,
	14, 175, 2594, 11, 175, 3, 175, 3, 175, 5, 175, 2598, 10, 175, 5, 175,
	2600, 10, 175, 3, 176, 3, 176, 3, 176, 5, 176, 2605, 10, 176, 3, 177, 7,
	177, 2608, 10, 177, 12, 177, 14, 177, 2611, 11, 177, 3, 177, 3, 177, 5,
	177, 2615, 10, 177, 3, 177, 5, 177, 2618, 10, 177, 3, 177, 3, 177, 3, 177,
	3, 178, 3, 178, 7, 178, 2625, 10, 178, 12, 178, 14, 178, 2628, 11, 178,
	3, 178, 3, 178, 5, 178, 2632, 10, 178, 3, 179, 3, 179, 3, 179, 7, 179,
	2637, 10, 179, 12, 179, 14, 179, 2640, 11, 179, 3, 180, 3, 180, 3, 180,
	3, 180, 3, 180, 3, 180, 3, 181, 7, 181, 2649, 10, 181, 12, 181, 14, 181,
	2652, 11, 181, 3, 181, 3, 181, 3, 181, 5, 181, 2657, 10, 181, 3, 181, 3,
	181, 3, 181, 5, 181, 2662, 10, 181, 3, 182, 3, 182, 7, 182, 2666, 10, 182,
	12, 182, 14, 182, 2669, 11, 182, 3, 182, 3, 182, 5, 182, 2673, 10, 182,
	3, 183, 3, 183, 3, 183, 5, 183, 2678, 10, 183, 3, 184, 3, 184, 3, 184,
	7, 184, 2683, 10, 184, 12, 184, 14, 184, 2686, 11, 184, 3, 185, 3, 185,
	3, 185, 7, 185, 2691, 10, 185, 12, 185, 14, 185, 2694, 11, 185, 3, 186,
	3, 186, 3, 186, 5, 186, 2699, 10, 186, 3, 186, 5, 186, 2702, 10, 186, 3,
	187, 3, 187, 3, 187, 3, 188, 3, 188, 3, 188, 3, 189, 3, 189, 3, 189, 3,
	189, 7, 189, 2714, 10, 189, 12, 189, 14, 189, 2717, 11, 189, 3, 189, 3,
	189, 3, 189, 3, 189, 3, 189, 3, 189, 3, 189, 3, 189, 5, 189, 2727, 10,
	189, 3, 189, 5, 189, 2730, 10, 189, 3, 189, 5, 189, 2733, 10, 189, 3, 189,
	3, 189, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 5, 190, 2742, 10, 190,
	3, 190, 3, 190, 3, 191, 3, 191, 3, 191, 3, 191, 5, 191, 2750, 10, 191,
	3, 191, 5, 191, 2753, 10, 191, 3, 191, 3, 191, 3, 191, 3, 191, 3, 192,
	3, 192, 3, 192, 7, 192, 2762, 10, 192, 12, 192, 14, 192, 2765, 11, 192,
	3, 193, 7, 193, 2768, 10, 193, 12, 193, 14, 193, 2771, 11, 193, 3, 193,
	5, 193, 2774, 10, 193, 3, 193, 3, 193, 7, 193, 2778, 10, 193, 12, 193,
	14, 193, 2781, 11, 193, 3, 193, 3, 193, 5, 193, 2785, 10, 193, 3, 194,
	3, 194, 5, 194, 2789, 10, 194, 3, 195, 3, 195, 3, 195, 3, 195, 7, 195,
	2795, 10, 195, 12, 195, 14, 195, 2798, 11, 195, 3, 195, 3, 195, 3, 196,
	3, 196, 3, 196, 3, 196, 5, 196, 2806, 10, 196, 3, 197, 3, 197, 3, 197,
	3, 197, 5, 197, 2812, 10, 197, 3, 197, 3, 197, 3, 197, 3, 197, 3, 197,
	5, 197, 2819, 10, 197, 7, 197, 2821, 10, 197, 12, 197, 14, 197, 2824, 11,
	197, 3, 197, 3, 197, 5, 197, 2828, 10, 197, 6, 197, 2830, 10, 197, 13,
	197, 14, 197, 2831, 5, 197, 2834, 10, 197, 3, 197, 3, 197, 3, 197, 3, 197,
	3, 197, 5, 197, 2841, 10, 197, 3, 197, 3, 197, 7, 197, 2845, 10, 197, 12,
	197, 14, 197, 2848, 11, 197, 3, 198, 3, 198, 5, 198, 2852, 10, 198, 3,
	199, 3, 199, 5, 199, 2856, 10, 199, 3, 200, 3, 200, 3, 200, 5, 200, 2861,
	10, 200, 3, 201, 3, 201, 3, 201, 3, 201, 3, 201, 5, 201, 2868, 10, 201,
	3, 202, 5, 202, 2871, 10, 202, 3, 202, 3, 202, 3, 202, 3, 202, 3, 202,
	3, 202, 5, 202, 2879, 10, 202, 3, 202, 3, 202, 3, 203, 3, 203, 5, 203,
	2885, 10, 203, 3, 203, 3, 203, 3, 203, 3, 203, 3, 203, 3, 203, 3, 203,
	3, 203, 3, 203, 3, 203, 3, 203, 3, 203, 5, 203, 2899, 10, 203, 3, 203,
	3, 203, 3, 203, 3, 203, 3, 203, 6, 203, 2906, 10, 203, 13, 203, 14, 203,
	2907, 3, 203, 3, 203, 3, 203, 3, 203, 3, 203, 5, 203, 2915, 10, 203, 3,
	203, 3, 203, 3, 203, 3, 203, 3, 203, 3, 203, 3, 203, 3, 203, 3, 203, 3,
	203, 3, 203, 3, 203, 3, 203, 3, 203, 3, 203, 3, 203, 5, 203, 2933, 10,
	203, 3, 203, 3, 203, 3, 203, 3, 203, 3, 203, 5, 203, 2940, 10, 203, 3,
	203, 5, 203, 2943, 10, 203, 3, 203, 3, 203, 5, 203, 2947, 10, 203, 3, 203,
	3, 203, 3, 203, 7, 203, 2952, 10, 203, 12, 203, 14, 203, 2955, 11, 203,
	3, 204, 3, 204, 5, 204, 2959, 10, 204, 3, 204, 3, 204, 3, 204, 7, 204,
	2964, 10, 204, 12, 204, 14, 204, 2967, 11, 204, 3, 204, 3, 204, 5, 204,
	2971, 10, 204, 3, 204, 3, 204, 3, 204, 3, 205, 3, 205, 3, 205, 3, 205,
	3, 206, 3, 206, 7, 206, 2982, 10, 206, 12, 206, 14, 206, 2985, 11, 206,
	3, 207, 3, 207, 7, 207, 2989, 10, 207, 12, 207, 14, 207, 2992, 11, 207,
	3, 207, 3, 207, 7, 207, 2996, 10, 207, 12, 207, 14, 207, 2999, 11, 207,
	3, 207, 3, 207, 3, 207, 5, 207, 3004, 10, 207, 3, 207, 3, 207, 3, 207,
	3, 207, 5, 207, 3010, 10, 207, 3, 208, 3, 208, 5, 208, 3014, 10, 208, 3,
	209, 3, 209, 5, 209, 3018, 10, 209, 3, 209, 3, 209, 3, 209, 3, 209, 5,
	209, 3024, 10, 209, 3, 209, 3, 209, 7, 209, 3028, 10, 209, 12, 209, 14,
	209, 3031, 11, 209, 3, 210, 3, 210, 5, 210, 3035, 10, 210, 3, 210, 3, 210,
	3, 210, 7, 210, 3040, 10, 210, 12, 210, 14, 210, 3043, 11, 210, 3, 210,
	3, 210, 3, 211, 3, 211, 3, 211, 5, 211, 3050, 10, 211, 5, 211, 3052, 10,
	211, 3, 211, 3, 211, 3, 211, 5, 211, 3057, 10, 211, 7, 211, 3059, 10, 211,
	12, 211, 14, 211, 3062, 11, 211, 3, 212, 3, 212, 3, 212, 7, 212, 3067,
	10, 212, 12, 212, 14, 212, 3070, 11, 212, 3, 212, 3, 212, 3, 212, 3, 212,
	5, 212, 3076, 10, 212, 3, 213, 3, 213, 3, 213, 3, 213, 3, 213, 5, 213,
	3083, 10, 213, 3, 213, 3, 213, 3, 213, 5, 213, 3088, 10, 213, 5, 213, 3090,
	10, 213, 3, 214, 3, 214, 3, 214, 7, 214, 3095, 10, 214, 12, 214, 14, 214,
	3098, 11, 214, 3, 215, 3, 215, 3, 215, 5, 215, 3103, 10, 215, 3, 216, 3,
	216, 3, 217, 3, 217, 3, 217, 5, 217, 3110, 10, 217, 3, 217, 5, 217, 3113,
	10, 217, 3, 217, 3, 217, 3, 218, 3, 218, 3, 218, 3, 218, 3, 218, 3, 219,
	3, 219, 3, 219, 3, 219, 3, 219, 3, 220, 3, 220, 3, 220, 3, 220, 5, 220,
	3131, 10, 220, 3, 221, 3, 221, 3, 221, 5, 221, 3136, 10, 221, 3, 221, 5,
	221, 3139, 10, 221, 3, 222, 3, 222, 3, 222, 3, 222, 3, 222, 3, 222, 7,
	222, 3147, 10, 222, 12, 222, 14, 222, 3150, 11, 222, 3, 222, 3, 222, 3,
	222, 3, 222, 3, 222, 6, 222, 3157, 10, 222, 13, 222, 14, 222, 3158, 3,
	222, 3, 222, 3, 222, 3, 222, 5, 222, 3165, 10, 222, 3, 222, 3, 222, 3,
	222, 3, 222, 7, 222, 3171, 10, 222, 12, 222, 14, 222, 3174, 11, 222, 3,
	222, 3, 222, 3, 222, 5, 222, 3179, 10, 222, 3, 222, 5, 222, 3182, 10, 222,
	3, 222, 3, 222, 3, 222, 5, 222, 3187, 10, 222, 3, 222, 3, 222, 3, 222,
	3, 222, 3, 222, 3, 222, 6, 222, 3195, 10, 222, 13, 222, 14, 222, 3196,
	5, 222, 3199, 10, 222, 7, 222, 3201, 10, 222, 12, 222, 14, 222, 3204, 11,
	222, 3, 223, 3, 223, 5, 223, 3208, 10, 223, 3, 224, 3, 224, 3, 224, 3,
	224, 3, 225, 3, 225, 5, 225, 3216, 10, 225, 3, 226, 3, 226, 3, 226, 5,
	226, 3221, 10, 226, 3, 226, 3, 226, 3, 227, 3, 227, 3, 227, 5, 227, 3228,
	10, 227, 3, 227, 3, 227, 3, 227, 3, 227, 5, 227, 3234, 10, 227, 3, 227,
	3, 227, 5, 227, 3238, 10, 227, 3, 227, 3, 227, 3, 227, 7, 227, 3243, 10,
	227, 12, 227, 14, 227, 3246, 11, 227, 5, 227, 3248, 10, 227, 3, 227, 3,
	227, 3, 227, 3, 227, 5, 227, 3254, 10, 227, 3, 228, 3, 228, 3, 228, 3,
	228, 3, 228, 5, 228, 3261, 10, 228, 3, 228, 3, 228, 3, 228, 7, 228, 3266,
	10, 228, 12, 228, 14, 228, 3269, 11, 228, 3, 228, 3, 228, 3, 228, 5, 228,
	3274, 10, 228, 5, 228, 3276, 10, 228, 3, 229, 3, 229, 3, 229, 7, 229, 3281,
	10, 229, 12, 229, 14, 229, 3284, 11, 229, 3, 230, 3, 230, 3, 231, 3, 231,
	3, 231, 3, 231, 5, 231, 3292, 10, 231, 3, 231, 3, 231, 5, 231, 3296, 10,
	231, 3, 232, 3, 232, 5, 232, 3300, 10, 232, 3, 232, 3, 232, 5, 232, 3304,
	10, 232, 5, 232, 3306, 10, 232, 3, 232, 3, 232, 5, 232, 3310, 10, 232,
	3, 232, 5, 232, 3313, 10, 232, 3, 233, 3, 233, 5, 233, 3317, 10, 233, 3,
	233, 5, 233, 3320, 10, 233, 3, 234, 3, 234, 3, 234, 3, 234, 3, 234, 3,
	234, 5, 234, 3328, 10, 234, 3, 235, 3, 235, 3, 235, 3, 235, 3, 235, 5,
	235, 3335, 10, 235, 3, 235, 3, 235, 5, 235, 3339, 10, 235, 3, 236, 3, 236,
	3, 236, 3, 236, 3, 236, 3, 236, 7, 236, 3347, 10, 236, 12, 236, 14, 236,
	3350, 11, 236, 3, 236, 3, 236, 5, 236, 3354, 10, 236, 3, 237, 3, 237, 3,
	237, 3, 237, 3, 237, 3, 237, 5, 237, 3362, 10, 237, 3, 237, 5, 237, 3365,
	10, 237, 3, 237, 3, 237, 7, 237, 3369, 10, 237, 12, 237, 14, 237, 3372,
	11, 237, 3, 237, 3, 237, 3, 237, 3, 237, 5, 237, 3378, 10, 237, 3, 238,
	3, 238, 3, 238, 5, 238, 3383, 10, 238, 3, 238, 3, 238, 3, 238, 3, 238,
	3, 238, 3, 238, 3, 238, 5, 238, 3392, 10, 238, 3, 238, 3, 238, 3, 239,
	3, 239, 3, 239, 6, 239, 3399, 10, 239, 13, 239, 14, 239, 3400, 3, 240,
	3, 240, 7, 240, 3405, 10, 240, 12, 240, 14, 240, 3408, 11, 240, 3, 240,
	3, 240, 5, 240, 3412, 10, 240, 3, 241, 3, 241, 3, 241, 3, 241, 5, 241,
	3418, 10, 241, 3, 242, 7, 242, 3421, 10, 242, 12, 242, 14, 242, 3424, 11,
	242, 3, 242, 3, 242, 5, 242, 3428, 10, 242, 3, 243, 3, 243, 3, 243, 3,
	243, 3, 243, 3, 243, 3, 243, 3, 243, 3, 243, 5, 243, 3439, 10, 243, 3,
	244, 3, 244, 3, 244, 3, 244, 3, 244, 3, 244, 5, 244, 3447, 10, 244, 3,
	244, 3, 244, 3, 244, 3, 244, 5, 244, 3453, 10, 244, 5, 244, 3455, 10, 244,
	3, 244, 3, 244, 3, 244, 3, 244, 3, 244, 3, 244, 3, 244, 3, 244, 3, 244,
	3, 244, 5, 244, 3467, 10, 244, 7, 244, 3469, 10, 244, 12, 244, 14, 244,
	3472, 11, 244, 3, 245, 3, 245, 3, 245, 3, 245, 3, 245, 3, 245, 3, 245,
	3, 245, 3, 245, 5, 245, 3483, 10, 245, 3, 246, 3, 246, 3, 246, 5, 246,
	3488, 10, 246, 3, 247, 3, 247, 3, 247, 7, 247, 3493, 10, 247, 12, 247,
	14, 247, 3496, 11, 247, 3, 248, 3, 248, 3, 248, 3, 248, 3, 248, 3, 248,
	3, 248, 5, 248, 3505, 10, 248, 3, 249, 3, 249, 3, 250, 7, 250, 3510, 10,
	250, 12, 250, 14, 250, 3513, 11, 250, 3, 250, 3, 250, 3, 250, 3, 250, 5,
	250, 3519, 10, 250, 3, 251, 3, 251, 3, 251, 3, 251, 3, 251, 3, 251, 3,
	251, 3, 251, 3, 251, 3, 251, 3, 251, 3, 251, 5, 251, 3533, 10, 251, 3,
	252, 3, 252, 5, 252, 3537, 10, 252, 3, 253, 5, 253, 3540, 10, 253, 3, 253,
	3, 253, 3, 253, 5, 253, 3545, 10, 253, 3, 253, 3, 253, 3, 253, 3, 253,
	3, 253, 3, 253, 3, 253, 5, 253, 3554, 10, 253, 3, 253, 3, 253, 3, 254,
	3, 254, 7, 254, 3560, 10, 254, 12, 254, 14, 254, 3563, 11, 254, 3, 254,
	3, 254, 3, 254, 7, 254, 3568, 10, 254, 12, 254, 14, 254, 3571, 11, 254,
	3, 254, 3, 254, 5, 254, 3575, 10, 254, 3, 255, 3, 255, 5, 255, 3579, 10,
	255, 3, 255, 3, 255, 3, 255, 3, 255, 5, 255, 3585, 10, 255, 3, 255, 5,
	255, 3588, 10, 255, 3, 255, 3, 255, 3, 255, 3, 255, 3, 255, 3, 255, 3,
	255, 3, 255, 3, 255, 5, 255, 3599, 10, 255, 3, 255, 3, 255, 3, 255, 3,
	255, 3, 255, 3, 255, 3, 255, 5, 255, 3608, 10, 255, 3, 255, 3, 255, 5,
	255, 3612, 10, 255, 3, 255, 3, 255, 5, 255, 3616, 10, 255, 3, 255, 3, 255,
	3, 255, 3, 255, 3, 255, 3, 255, 3, 255, 5, 255, 3625, 10, 255, 3, 255,
	5, 255, 3628, 10, 255, 3, 255, 3, 255, 5, 255, 3632, 10, 255, 5, 255, 3634,
	10, 255, 3, 255, 3, 255, 3, 255, 3, 255, 3, 255, 5, 255, 3641, 10, 255,
	5, 255, 3643, 10, 255, 3, 256, 3, 256, 3, 256, 3, 256, 3, 256, 3, 256,
	3, 256, 3, 256, 7, 256, 3653, 10, 256, 12, 256, 14, 256, 3656, 11, 256,
	3, 257, 3, 257, 3, 257, 7, 257, 3661, 10, 257, 12, 257, 14, 257, 3664,
	11, 257, 3, 258, 3, 258, 3, 258, 3, 258, 3, 258, 3, 258, 5, 258, 3672,
	10, 258, 3, 259, 3, 259, 3, 259, 5, 259, 3677, 10, 259, 3, 260, 3, 260,
	3, 260, 3, 260, 3, 260, 3, 260, 3, 260, 3, 260, 5, 260, 3687, 10, 260,
	3, 260, 3, 260, 3, 260, 5, 260, 3692, 10, 260, 3, 261, 3, 261, 3, 261,
	3, 261, 3, 261, 3, 261, 3, 261, 7, 261, 3701, 10, 261, 12, 261, 14, 261,
	3704, 11, 261, 3, 262, 3, 262, 3, 262, 3, 262, 3, 262, 5, 262, 3711, 10,
	262, 3, 262, 5, 262, 3714, 10, 262, 3, 263, 5, 263, 3717, 10, 263, 3, 263,
	3, 263, 3, 263, 3, 264, 3, 264, 5, 264, 3724, 10, 264, 3, 265, 3, 265,
	3, 265, 3, 265, 3, 265, 5, 265, 3731, 10, 265, 3, 266, 3, 266, 3, 266,
	3, 266, 3, 266, 7, 266, 3738, 10, 266, 12, 266, 14, 266, 3741, 11, 266,
	3, 266, 3, 266, 3, 266, 3, 266, 5, 266, 3747, 10, 266, 3, 267, 3, 267,
	3, 267, 5, 267, 3752, 10, 267, 3, 268, 3, 268, 3, 268, 5, 268, 3757, 10,
	268, 3, 268, 3, 268, 3, 268, 5, 268, 3762, 10, 268, 3, 268, 5, 268, 3765,
	10, 268, 5, 268, 3767, 10, 268, 3, 269, 3, 269, 5, 269, 3771, 10, 269,
	3, 270, 3, 270, 3, 271, 3, 271, 3, 271, 3, 271, 3, 272, 3, 272, 5, 272,
	3781, 10, 272, 3, 272, 3, 272, 3, 273, 3, 273, 3, 273, 3, 273, 5, 273,
	3789, 10, 273, 3, 273, 3, 273, 3, 274, 3, 274, 3, 274, 5, 274, 3796, 10,
	274, 5, 274, 3798, 10, 274, 3, 275, 3, 275, 5, 275, 3802, 10, 275, 3, 275,
	3, 275, 5, 275, 3806, 10, 275, 3, 275, 5, 275, 3809, 10, 275, 3, 275, 5,
	275, 3812, 10, 275, 3, 275, 5, 275, 3815, 10, 275, 3, 276, 3, 276, 5, 276,
	3819, 10, 276, 3, 276, 5, 276, 3822, 10, 276, 3, 277, 3, 277, 3, 277, 5,
	277, 3827, 10, 277, 3, 277, 3, 277, 3, 277, 3, 277, 7, 277, 3833, 10, 277,
	12, 277, 14, 277, 3836, 11, 277, 3, 277, 3, 277, 3, 277, 3, 277, 3, 277,
	5, 277, 3843, 10, 277, 5, 277, 3845, 10, 277, 3, 277, 3, 277, 6, 277, 3849,
	10, 277, 13, 277, 14, 277, 3850, 3, 277, 3, 277, 3, 277, 5, 277, 3856,
	10, 277, 3, 277, 7, 277, 3859, 10, 277, 12, 277, 14, 277, 3862, 11, 277,
	3, 278, 3, 278, 3, 278, 3, 278, 5, 278, 3868, 10, 278, 3, 278, 3, 278,
	5, 278, 3872, 10, 278, 3, 278, 3, 278, 5, 278, 3876, 10, 278, 3, 278, 3,
	278, 3, 278, 5, 278, 3881, 10, 278, 3, 279, 3, 279, 5, 279, 3885, 10, 279,
	3, 280, 3, 280, 7, 280, 3889, 10, 280, 12, 280, 14, 280, 3892, 11, 280,
	3, 280, 6, 280, 3895, 10, 280, 13, 280, 14, 280, 3896, 5, 280, 3899, 10,
	280, 3, 281, 3, 281, 3, 281, 3, 281, 5, 281, 3905, 10, 281, 3, 281, 3,
	281, 3, 282, 3, 282, 3, 282, 3, 282, 3, 282, 3, 282, 5, 282, 3915, 10,
	282, 7, 282, 3917, 10, 282, 12, 282, 14, 282, 3920, 11, 282, 3, 282, 3,
	282, 5, 282, 3924, 10, 282, 6, 282, 3926, 10, 282, 13, 282, 14, 282, 3927,
	5, 282, 3930, 10, 282, 3, 282, 3, 282, 7, 282, 3934, 10, 282, 12, 282,
	14, 282, 3937, 11, 282, 3, 283, 3, 283, 3, 283, 3, 283, 5, 283, 3943, 10,
	283, 3, 283, 3, 283, 3, 284, 3, 284, 3, 284, 3, 284, 3, 284, 3, 284, 5,
	284, 3953, 10, 284, 7, 284, 3955, 10, 284, 12, 284, 14, 284, 3958, 11,
	284, 3, 284, 3, 284, 5, 284, 3962, 10, 284, 6, 284, 3964, 10, 284, 13,
	284, 14, 284, 3965, 5, 284, 3968, 10, 284, 3, 284, 3, 284, 7, 284, 3972,
	10, 284, 12, 284, 14, 284, 3975, 11, 284, 3, 285, 3, 285, 3, 285, 3, 285,
	3, 285, 3, 285, 3, 285, 5, 285, 3984, 10, 285, 3, 286, 3, 286, 3, 286,
	3, 286, 5, 286, 3990, 10, 286, 3, 286, 3, 286, 3, 287, 3, 287, 5, 287,
	3996, 10, 287, 3, 287, 3, 287, 3, 288, 5, 288, 4001, 10, 288, 3, 288, 3,
	288, 3, 289, 3, 289, 3, 289, 7, 289, 4008, 10, 289, 12, 289, 14, 289, 4011,
	11, 289, 3, 289, 3, 289, 3, 289, 7, 289, 4016, 10, 289, 12, 289, 14, 289,
	4019, 11, 289, 5, 289, 4021, 10, 289, 3, 290, 3, 290, 3, 290, 5, 290, 4026,
	10, 290, 3, 290, 3, 290, 3, 291, 3, 291, 5, 291, 4032, 10, 291, 3, 291,
	3, 291, 3, 291, 5, 291, 4037, 10, 291, 7, 291, 4039, 10, 291, 12, 291,
	14, 291, 4042, 11, 291, 3, 292, 3, 292, 3, 292, 3, 293, 3, 293, 3, 293,
	5, 293, 4050, 10, 293, 3, 294, 3, 294, 3, 295, 3, 295, 3, 296, 3, 296,
	3, 296, 3, 296, 3, 296, 3, 296, 5, 296, 4062, 10, 296, 3, 297, 3, 297,
	3, 297, 3, 297, 5, 297, 4068, 10, 297, 3, 297, 3, 297, 3, 298, 3, 298,
	3, 298, 3, 298, 3, 298, 3, 298, 3, 298, 3, 298, 3, 298, 3, 298, 3, 298,
	3, 298, 5, 298, 4084, 10, 298, 3, 298, 3, 298, 3, 298, 3, 298, 3, 298,
	3, 298, 3, 298, 3, 298, 3, 298, 3, 298, 3, 298, 3, 298, 5, 298, 4098, 10,
	298, 3, 298, 3, 298, 5, 298, 4102, 10, 298, 3, 298, 3, 298, 3, 298, 3,
	298, 3, 298, 3, 298, 5, 298, 4110, 10, 298, 3, 298, 3, 298, 5, 298, 4114,
	10, 298, 3, 298, 3, 298, 5, 298, 4118, 10, 298, 3, 298, 3, 298, 3, 298,
	5, 298, 4123, 10, 298, 3, 298, 3, 298, 3, 298, 3, 298, 3, 298, 3, 298,
	3, 298, 3, 298, 3, 298, 3, 298, 3, 298, 3, 298, 3, 298, 3, 298, 3, 298,
	3, 298, 3, 298, 3, 298, 3, 298, 3, 298, 3, 298, 3, 298, 5, 298, 4147, 10,
	298, 3, 298, 7, 298, 4150, 10, 298, 12, 298, 14, 298, 4153, 11, 298, 3,
	298, 3, 298, 5, 298, 4157, 10, 298, 3, 298, 3, 298, 3, 298, 3, 298, 3,
	298, 3, 298, 5, 298, 4165, 10, 298, 3, 298, 3, 298, 3, 298, 3, 298, 3,
	298, 3, 298, 5, 298, 4173, 10, 298, 3, 298, 7, 298, 4176, 10, 298, 12,
	298, 14, 298, 4179, 11, 298, 3, 298, 3, 298, 3, 298, 3, 298, 3, 298, 7,
	298, 4186, 10, 298, 12, 298, 14, 298, 4189, 11, 298, 3, 299, 3, 299, 3,
	300, 3, 300, 7, 300, 4195, 10, 300, 12, 300, 14, 300, 4198, 11, 300, 3,
	300, 3, 300, 3, 300, 3, 300, 7, 300, 4204, 10, 300, 12, 300, 14, 300, 4207,
	11, 300, 3, 300, 3, 300, 5, 300, 4211, 10, 300, 3, 301, 3, 301, 3, 301,
	3, 301, 3, 301, 3, 301, 3, 301, 3, 301, 3, 301, 5, 301, 4222, 10, 301,
	3, 301, 3, 301, 7, 301, 4226, 10, 301, 12, 301, 14, 301, 4229, 11, 301,
	3, 301, 3, 301, 3, 301, 5, 301, 4234, 10, 301, 3, 301, 3, 301, 3, 301,
	7, 301, 4239, 10, 301, 12, 301, 14, 301, 4242, 11, 301, 3, 301, 3, 301,
	3, 301, 3, 301, 7, 301, 4248, 10, 301, 12, 301, 14, 301, 4251, 11, 301,
	3, 301, 3, 301, 3, 301, 3, 301, 3, 301, 7, 301, 4258, 10, 301, 12, 301,
	14, 301, 4261, 11, 301, 3, 301, 3, 301, 3, 301, 3, 301, 3, 301, 7, 301,
	4268, 10, 301, 12, 301, 14, 301, 4271, 11, 301, 3, 301, 3, 301, 3, 301,
	3, 301, 3, 301, 7, 301, 4278, 10, 301, 12, 301, 14, 301, 4281, 11, 301,
	3, 301, 3, 301, 3, 301, 3, 301, 3, 301, 7, 301, 4288, 10, 301, 12, 301,
	14, 301, 4291, 11, 301, 3, 301, 3, 301, 3, 301, 3, 301, 3, 301, 7, 301,
	4298, 10, 301, 12, 301, 14, 301, 4301, 11, 301, 3, 301, 3, 301, 3, 301,
	3, 301, 7, 301, 4307, 10, 301, 12, 301, 14, 301, 4310, 11, 301, 3, 301,
	3, 301, 3, 301, 3, 301, 3, 301, 7, 301, 4317, 10, 301, 12, 301, 14, 301,
	4320, 11, 301, 3, 301, 3, 301, 3, 301, 3, 301, 7, 301, 4326, 10, 301, 12,
	301, 14, 301, 4329, 11, 301, 3, 301, 3, 301, 3, 301, 3, 301, 7, 301, 4335,
	10, 301, 12, 301, 14, 301, 4338, 11, 301, 3, 301, 3, 301, 3, 301, 3, 301,
	5, 301, 4344, 10, 301, 3, 301, 3, 301, 7, 301, 4348, 10, 301, 12, 301,
	14, 301, 4351, 11, 301, 3, 301, 3, 301, 3, 301, 3, 301, 3, 301, 3, 301,
	3, 301, 7, 301, 4360, 10, 301, 12, 301, 14, 301, 4363, 11, 301, 3, 301,
	3, 301, 3, 301, 3, 301, 3, 301, 3, 301, 3, 301, 3, 301, 3, 301, 3, 301,
	3, 301, 5, 301, 4376, 10, 301, 3, 301, 3, 301, 3, 301, 3, 301, 5, 301,
	4382, 10, 301, 7, 301, 4384, 10, 301, 12, 301, 14, 301, 4387, 11, 301,
	3, 302, 3, 302, 3, 302, 3, 302, 3, 302, 6, 302, 4394, 10, 302, 13, 302,
	14, 302, 4395, 5, 302, 4398, 10, 302, 5, 302, 4400, 10, 302, 3, 302, 3,
	302, 3, 303, 3, 303, 3, 303, 3, 303, 3, 303, 3, 303, 3, 303, 3, 303, 5,
	303, 4412, 10, 303, 3, 304, 3, 304, 3, 304, 3, 304, 5, 304, 4418, 10, 304,
	5, 304, 4420, 10, 304, 3, 305, 3, 305, 3, 305, 3, 305, 5, 305, 4426, 10,
	305, 3, 305, 6, 305, 4429, 10, 305, 13, 305, 14, 305, 4430, 3, 305, 3,
	305, 3, 305, 5, 305, 4436, 10, 305, 5, 305, 4438, 10, 305, 5, 305, 4440,
	10, 305, 3, 306, 3, 306, 3, 306, 3, 306, 7, 306, 4446, 10, 306, 12, 306,
	14, 306, 4449, 11, 306, 3, 306, 3, 306, 3, 307, 3, 307, 3, 308, 3, 308,
	3, 308, 3, 308, 5, 308, 4459, 10, 308, 3, 309, 3, 309, 3, 309, 5, 309,
	4464, 10, 309, 3, 309, 3, 309, 3, 309, 3, 310, 3, 310, 3, 310, 3, 310,
	7, 310, 4473, 10, 310, 12, 310, 14, 310, 4476, 11, 310, 3, 310, 3, 310,
	3, 311, 3, 311, 3, 311, 3, 311, 3, 311, 3, 311, 5, 311, 4486, 10, 311,
	3, 312, 3, 312, 5, 312, 4490, 10, 312, 3, 312, 3, 312, 5, 312, 4494, 10,
	312, 3, 313, 3, 313, 3, 313, 7, 313, 4499, 10, 313, 12, 313, 14, 313, 4502,
	11, 313, 3, 314, 3, 314, 3, 314, 5, 314, 4507, 10, 314, 3, 314, 3, 314,
	3, 314, 5, 314, 4512, 10, 314, 3, 314, 3, 314, 3, 314, 3, 314, 7, 314,
	4518, 10, 314, 12, 314, 14, 314, 4521, 11, 314, 3, 314, 3, 314, 3, 314,
	3, 314, 3, 314, 3, 314, 3, 314, 3, 314, 7, 314, 4531, 10, 314, 12, 314,
	14, 314, 4534, 11, 314, 5, 314, 4536, 10, 314, 3, 314, 3, 314, 3, 314,
	5, 314, 4541, 10, 314, 3, 315, 3, 315, 3, 315, 3, 315, 7, 315, 4547, 10,
	315, 12, 315, 14, 315, 4550, 11, 315, 3, 315, 3, 315, 3, 315, 3, 315, 3,
	315, 3, 315, 3, 315, 3, 315, 7, 315, 4560, 10, 315, 12, 315, 14, 315, 4563,
	11, 315, 3, 315, 3, 315, 3, 315, 3, 315, 3, 315, 3, 315, 3, 315, 3, 315,
	7, 315, 4573, 10, 315, 12, 315, 14, 315, 4576, 11, 315, 3, 315, 3, 315,
	3, 315, 3, 315, 3, 315, 7, 315, 4583, 10, 315, 12, 315, 14, 315, 4586,
	11, 315, 3, 315, 3, 315, 5, 315, 4590, 10, 315, 3, 315, 3, 315, 3, 316,
	3, 316, 5, 316, 4596, 10, 316, 3, 317, 3, 317, 5, 317, 4600, 10, 317, 3,
	318, 3, 318, 3, 318, 3, 318, 5, 318, 4606, 10, 318, 3, 319, 7, 319, 4609,
	10, 319, 12, 319, 14, 319, 4612, 11, 319, 3, 319, 5, 319, 4615, 10, 319,
	3, 319, 3, 319, 3, 319, 3, 319, 3, 320, 3, 320, 5, 320, 4623, 10, 320,
	3, 321, 3, 321, 3, 321, 3, 321, 3, 321, 5, 321, 4630, 10, 321, 3, 321,
	3, 321, 5, 321, 4634, 10, 321, 3, 321, 3, 321, 5, 321, 4638, 10, 321, 3,
	322, 5, 322, 4641, 10, 322, 3, 322, 3, 322, 3, 323, 3, 323, 3, 323, 5,
	323, 4648, 10, 323, 3, 324, 3, 324, 3, 325, 3, 325, 3, 325, 3, 325, 7,
	325, 4656, 10, 325, 12, 325, 14, 325, 4659, 11, 325, 3, 325, 3, 325, 3,
	325, 3, 325, 5, 325, 4665, 10, 325, 3, 325, 3, 325, 5, 325, 4669, 10, 325,
	3, 326, 3, 326, 3, 326, 7, 326, 4674, 10, 326, 12, 326, 14, 326, 4677,
	11, 326, 3, 327, 3, 327, 3, 327, 3, 327, 3, 327, 3, 327, 3, 327, 5, 327,
	4686, 10, 327, 3, 328, 3, 328, 3, 328, 3, 328, 3, 328, 3, 328, 3, 328,
	3, 328, 5, 328, 4696, 10, 328, 3, 328, 3, 328, 3, 328, 3, 328, 5, 328,
	4702, 10, 328, 3, 328, 3, 328, 5, 328, 4706, 10, 328, 3, 328, 3, 328, 3,
	328, 3, 328, 3, 328, 3, 328, 3, 328, 3, 328, 3, 328, 3, 328, 3, 328, 3,
	328, 3, 328, 5, 328, 4721, 10, 328, 3, 328, 3, 328, 5, 328, 4725, 10, 328,
	3, 329, 3, 329, 3, 329, 3, 329, 3, 329, 3, 330, 3, 330, 7, 330, 4734, 10,
	330, 12, 330, 14, 330, 4737, 11, 330, 3, 330, 3, 330, 5, 330, 4741, 10,
	330, 3, 331, 3, 331, 7, 331, 4745, 10, 331, 12, 331, 14, 331, 4748, 11,
	331, 3, 331, 3, 331, 3, 331, 5, 331, 4753, 10, 331, 3, 331, 5, 331, 4756,
	10, 331, 3, 331, 3, 331, 3, 331, 5, 331, 4761, 10, 331, 3, 331, 5, 331,
	4764, 10, 331, 3, 331, 3, 331, 7, 331, 4768, 10, 331, 12, 331, 14, 331,
	4771, 11, 331, 3, 331, 5, 331, 4774, 10, 331, 3, 332, 7, 332, 4777, 10,
	332, 12, 332, 14, 332, 4780, 11, 332, 3, 332, 3, 332, 5, 332, 4784, 10,
	332, 3, 332, 3, 332, 7, 332, 4788, 10, 332, 12, 332, 14, 332, 4791, 11,
	332, 3, 332, 5, 332, 4794, 10, 332, 3, 333, 3, 333, 3, 333, 5, 333, 4799,
	10, 333, 3, 333, 3, 333, 3, 333, 3, 333, 3, 333, 3, 333, 3, 333, 3, 333,
	5, 333, 4809, 10, 333, 3, 333, 3, 333, 5, 333, 4813, 10, 333, 3, 333, 7,
	333, 4816, 10, 333, 12, 333, 14, 333, 4819, 11, 333, 3, 333, 3, 333, 3,
	333, 3, 333, 5, 333, 4825, 10, 333, 5, 333, 4827, 10, 333, 3, 334, 3, 334,
	3, 335, 3, 335, 5, 335, 4833, 10, 335, 3, 335, 3, 335, 5, 335, 4837, 10,
	335, 3, 335, 5, 335, 4840, 10, 335, 3, 336, 3, 336, 5, 336, 4844, 10, 336,
	3, 336, 5, 336, 4847, 10, 336, 3, 337, 3, 337, 5, 337, 4851, 10, 337, 3,
	337, 3, 337, 5, 337, 4855, 10, 337, 3, 337, 3, 337, 5, 337, 4859, 10, 337,
	3, 337, 5, 337, 4862, 10, 337, 3, 338, 3, 338, 3, 338, 7, 338, 4867, 10,
	338, 12, 338, 14, 338, 4870, 11, 338, 3, 339, 3, 339, 3, 339, 7, 339, 4875,
	10, 339, 12, 339, 14, 339, 4878, 11, 339, 3, 340, 3, 340, 3, 340, 7, 340,
	4883, 10, 340, 12, 340, 14, 340, 4886, 11, 340, 3, 341, 3, 341, 3, 341,
	7, 341, 4891, 10, 341, 12, 341, 14, 341, 4894, 11, 341, 3, 342, 3, 342,
	7, 342, 4898, 10, 342, 12, 342, 14, 342, 4901, 11, 342, 3, 343, 3, 343,
	3, 343, 7, 343, 4906, 10, 343, 12, 343, 14, 343, 4909, 11, 343, 3, 344,
	3, 344, 3, 345, 3, 345, 3, 345, 3, 345, 3, 346, 3, 346, 7, 346, 4919, 10,
	346, 12, 346, 14, 346, 4922, 11, 346, 3, 346, 3, 346, 5, 346, 4926, 10,
	346, 3, 347, 3, 347, 3, 347, 3, 347, 3, 347, 5, 347, 4933, 10, 347, 3,
	348, 3, 348, 3, 349, 3, 349, 3, 350, 3, 350, 3, 350, 3, 350, 3, 350, 5,
	350, 4944, 10, 350, 3, 350, 3, 350, 3, 350, 3, 350, 3, 350, 5, 350, 4951,
	10, 350, 3, 350, 3, 350, 3, 351, 3, 351, 3, 351, 5, 351, 4958, 10, 351,
	3, 351, 3, 351, 3, 351, 3, 351, 7, 351, 4964, 10, 351, 12, 351, 14, 351,
	4967, 11, 351, 3, 352, 3, 352, 3, 353, 3, 353, 3, 354, 3, 354, 3, 355,
	3, 355, 3, 355, 3, 355, 3, 355, 5, 355, 4980, 10, 355, 3, 356, 3, 356,
	3, 356, 3, 356, 3, 357, 3, 357, 3, 357, 3, 357, 3, 358, 3, 358, 3, 358,
	5, 358, 4993, 10, 358, 3, 358, 3, 358, 3, 359, 3, 359, 5, 359, 4999, 10,
	359, 3, 359, 3, 359, 3, 359, 3, 360, 3, 360, 3, 360, 3, 360, 3, 360, 5,
	360, 5009, 10, 360, 3, 361, 3, 361, 3, 362, 3, 362, 3, 363, 3, 363, 3,
	363, 7, 363, 5018, 10, 363, 12, 363, 14, 363, 5021, 11, 363, 3, 364, 3,
	364, 3, 364, 3, 364, 3, 364, 3, 364, 5, 364, 5029, 10, 364, 3, 364, 3,
	364, 3, 364, 3, 364, 3, 364, 3, 364, 3, 364, 3, 364, 3, 364, 3, 364, 3,
	364, 3, 364, 3, 364, 3, 364, 3, 364, 3, 364, 3, 364, 3, 364, 3, 364, 3,
	364, 3, 364, 3, 364, 3, 364, 3, 364, 5, 364, 5055, 10, 364, 5, 364, 5057,
	10, 364, 3, 365, 3, 365, 3, 366, 3, 366, 3, 367, 3, 367, 3, 368, 3, 368,
	3, 369, 3, 369, 3, 370, 3, 370, 3, 371, 3, 371, 3, 372, 3, 372, 3, 373,
	3, 373, 3, 374, 3, 374, 3, 375, 3, 375, 3, 376, 3, 376, 3, 377, 3, 377,
	3, 378, 3, 378, 3, 379, 3, 379, 3, 380, 3, 380, 3, 381, 3, 381, 3, 381,
	3, 381, 3, 381, 3, 381, 3, 382, 3, 382, 3, 382, 5, 382, 5100, 10, 382,
	3, 382, 3, 382, 3, 382, 3, 382, 3, 383, 3, 383, 3, 383, 7, 383, 5109, 10,
	383, 12, 383, 14, 383, 5112, 11, 383, 3, 384, 3, 384, 5, 384, 5116, 10,
	384, 3, 384, 3, 384, 3, 384, 3, 385, 3, 385, 5, 385, 5123, 10, 385, 3,
	385, 3, 385, 3, 385, 3, 386, 3, 386, 5, 386, 5130, 10, 386, 3, 386, 3,
	386, 3, 386, 3, 386, 3, 386, 5, 386, 5137, 10, 386, 3, 386, 3, 386, 3,
	386, 3, 386, 3, 386, 3, 387, 3, 387, 5, 387, 5146, 10, 387, 3, 387, 3,
	387, 5, 387, 5150, 10, 387, 3, 387, 3, 387, 3, 387, 3, 387, 5, 387, 5156,
	10, 387, 3, 387, 3, 387, 3, 387, 3, 387, 3, 387, 3, 388, 3, 388, 3, 389,
	5, 389, 5166, 10, 389, 3, 389, 3, 389, 5, 389, 5170, 10, 389, 3, 389, 5,
	389, 5173, 10, 389, 3, 389, 5, 389, 5176, 10, 389, 3, 389, 5, 389, 5179,
	10, 389, 3, 389, 3, 389, 3, 389, 3, 389, 3, 389, 3, 389, 5, 389, 5187,
	10, 389, 3, 390, 3, 390, 3, 391, 3, 391, 3, 391, 3, 391, 3, 391, 3, 391,
	5, 391, 5197, 10, 391, 3, 391, 3, 391, 5, 391, 5201, 10, 391, 3, 392, 3,
	392, 3, 392, 3, 392, 3, 392, 3, 392, 3, 392, 7, 392, 5210, 10, 392, 12,
	392, 14, 392, 5213, 11, 392, 5, 392, 5215, 10, 392, 3, 392, 3, 392, 3,
	393, 3, 393, 3, 393, 3, 393, 3, 394, 3, 394, 5, 394, 5225, 10, 394, 3,
	394, 3, 394, 5, 394, 5229, 10, 394, 3, 394, 3, 394, 7, 394, 5233, 10, 394,
	12, 394, 14, 394, 5236, 11, 394, 3, 394, 3, 394, 3, 394, 7, 394, 5241,
	10, 394, 12, 394, 14, 394, 5244, 11, 394, 5, 394, 5246, 10, 394, 3, 394,
	3, 394, 3, 394, 5, 394, 5251, 10, 394, 3, 394, 5, 394, 5254, 10, 394, 3,
	394, 5, 394, 5257, 10, 394, 3, 394, 5, 394, 5260, 10, 394, 3, 394, 3, 394,
	5, 394, 5264, 10, 394, 5, 394, 5266, 10, 394, 3, 394, 3, 394, 5, 394, 5270,
	10, 394, 3, 394, 3, 394, 3, 395, 3, 395, 3, 395, 3, 395, 5, 395, 5278,
	10, 395, 3, 395, 3, 395, 7, 395, 5282, 10, 395, 12, 395, 14, 395, 5285,
	11, 395, 5, 395, 5287, 10, 395, 3, 395, 3, 395, 3, 396, 3, 396, 3, 396,
	3, 396, 3, 396, 3, 396, 3, 396, 5, 396, 5298, 10, 396, 3, 397, 7, 397,
	5301, 10, 397, 12, 397, 14, 397, 5304, 11, 397, 3, 397, 3, 397, 3, 398,
	3, 398, 3, 398, 3, 398, 5, 398, 5312, 10, 398, 7, 398, 5314, 10, 398, 12,
	398, 14, 398, 5317, 11, 398, 3, 398, 3, 398, 5, 398, 5321, 10, 398, 6,
	398, 5323, 10, 398, 13, 398, 14, 398, 5324, 3, 398, 3, 398, 3, 398, 7,
	398, 5330, 10, 398, 12, 398, 14, 398, 5333, 11, 398, 5, 398, 5335, 10,
	398, 3, 398, 3, 398, 3, 399, 7, 399, 5340, 10, 399, 12, 399, 14, 399, 5343,
	11, 399, 3, 399, 3, 399, 5, 399, 5347, 10, 399, 3, 399, 3, 399, 3, 399,
	5, 399, 5352, 10, 399, 3, 399, 3, 399, 3, 399, 5, 399, 5357, 10, 399, 3,
	399, 3, 399, 3, 399, 3, 399, 5, 399, 5363, 10, 399, 3, 399, 3, 399, 3,
	399, 3, 399, 5, 399, 5369, 10, 399, 3, 399, 5, 399, 5372, 10, 399, 3, 400,
	3, 400, 3, 400, 3, 400, 3, 400, 5, 400, 5379, 10, 400, 3, 400, 3, 400,
	5, 400, 5383, 10, 400, 3, 401, 3, 401, 3, 401, 3, 401, 3, 401, 7, 401,
	5390, 10, 401, 12, 401, 14, 401, 5393, 11, 401, 3, 401, 3, 401, 5, 401,
	5397, 10, 401, 3, 402, 3, 402, 3, 403, 3, 403, 5, 403, 5403, 10, 403, 3,
	403, 3, 403, 3, 403, 5, 403, 5408, 10, 403, 3, 403, 3, 403, 5, 403, 5412,
	10, 403, 5, 403, 5414, 10, 403, 3, 403, 3, 403, 7, 403, 5418, 10, 403,
	12, 403, 14, 403, 5421, 11, 403, 3, 403, 3, 403, 5, 403, 5425, 10, 403,
	3, 403, 5, 403, 5428, 10, 403, 3, 403, 3, 403, 3, 403, 3, 403, 5, 403,
	5434, 10, 403, 3, 403, 3, 403, 5, 403, 5438, 10, 403, 3, 404, 3, 404, 3,
	404, 3, 404, 3, 404, 3, 404, 3, 404, 3, 404, 3, 404, 3, 404, 3, 404, 3,
	404, 5, 404, 5452, 10, 404, 3, 405, 3, 405, 3, 405, 3, 405, 3, 405, 3,
	405, 3, 405, 3, 405, 3, 405, 5, 405, 5463, 10, 405, 5, 405, 5465, 10, 405,
	3, 405, 3, 405, 3, 405, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406,
	3, 406, 3, 406, 3, 406, 5, 406, 5479, 10, 406, 5, 406, 5481, 10, 406, 3,
	406, 3, 406, 3, 406, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 3,
	407, 3, 407, 3, 407, 3, 407, 3, 407, 5, 407, 5497, 10, 407, 3, 407, 3,
	407, 5, 407, 5501, 10, 407, 3, 407, 3, 407, 5, 407, 5505, 10, 407, 3, 407,
	3, 407, 5, 407, 5509, 10, 407, 3, 407, 3, 407, 5, 407, 5513, 10, 407, 5,
	407, 5515, 10, 407, 5, 407, 5517, 10, 407, 5, 407, 5519, 10, 407, 5, 407,
	5521, 10, 407, 5, 407, 5523, 10, 407, 3, 407, 3, 407, 3, 407, 3, 408, 3,
	408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 5, 408, 5537,
	10, 408, 5, 408, 5539, 10, 408, 3, 408, 3, 408, 3, 408, 3, 409, 3, 409,
	3, 409, 3, 409, 3, 409, 3, 409, 3, 409, 3, 409, 3, 409, 5, 409, 5553, 10,
	409, 5, 409, 5555, 10, 409, 3, 409, 3, 409, 3, 409, 3, 410, 3, 410, 3,
	410, 3, 410, 3, 410, 3, 410, 3, 410, 3, 410, 3, 410, 3, 410, 3, 410, 5,
	410, 5571, 10, 410, 3, 410, 3, 410, 5, 410, 5575, 10, 410, 3, 410, 3, 410,
	5, 410, 5579, 10, 410, 3, 410, 3, 410, 5, 410, 5583, 10, 410, 3, 410, 3,
	410, 5, 410, 5587, 10, 410, 5, 410, 5589, 10, 410, 5, 410, 5591, 10, 410,
	5, 410, 5593, 10, 410, 5, 410, 5595, 10, 410, 5, 410, 5597, 10, 410, 3,
	410, 3, 410, 3, 410, 3, 411, 3, 411, 3, 411, 3, 411, 3, 411, 3, 411, 3,
	411, 3, 411, 3, 411, 5, 411, 5611, 10, 411, 5, 411, 5613, 10, 411, 3, 411,
	3, 411, 3, 411, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412,
	3, 412, 3, 412, 5, 412, 5627, 10, 412, 3, 412, 3, 412, 5, 412, 5631, 10,
	412, 3, 412, 3, 412, 5, 412, 5635, 10, 412, 5, 412, 5637, 10, 412, 5, 412,
	5639, 10, 412, 5, 412, 5641, 10, 412, 3, 412, 3, 412, 3, 412, 3, 413, 3,
	413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3,
	413, 5, 413, 5657, 10, 413, 3, 413, 3, 413, 5, 413, 5661, 10, 413, 3, 413,
	3, 413, 5, 413, 5665, 10, 413, 5, 413, 5667, 10, 413, 5, 413, 5669, 10,
	413, 5, 413, 5671, 10, 413, 3, 413, 3, 413, 3, 413, 3, 414, 3, 414, 3,
	414, 3, 414, 3, 414, 3, 414, 3, 414, 5, 414, 5683, 10, 414, 5, 414, 5685,
	10, 414, 3, 414, 3, 414, 3, 414, 3, 415, 3, 415, 3, 415, 3, 415, 3, 415,
	3, 415, 3, 415, 3, 415, 3, 415, 5, 415, 5699, 10, 415, 5, 415, 5701, 10,
	415, 3, 415, 3, 415, 3, 415, 3, 416, 3, 416, 3, 416, 3, 416, 3, 416, 3,
	416, 3, 416, 3, 416, 3, 416, 3, 416, 3, 416, 5, 416, 5717, 10, 416, 5,
	416, 5719, 10, 416, 3, 416, 3, 416, 3, 416, 3, 417, 3, 417, 3, 418, 3,
	418, 3, 419, 3, 419, 3, 419, 3, 419, 3, 419, 5, 419, 5733, 10, 419, 3,
	420, 3, 420, 3, 421, 3, 421, 3, 422, 3, 422, 3, 423, 3, 423, 3, 424, 3,
	424, 3, 425, 3, 425, 3, 426, 3, 426, 3, 427, 3, 427, 3, 428, 5, 428, 5752,
	10, 428, 3, 428, 3, 428, 3, 428, 5, 428, 5757, 10, 428, 3, 429, 3, 429,
	3, 429, 3, 429, 3, 429, 5, 429, 5764, 10, 429, 3, 430, 3, 430, 3, 431,
	3, 431, 3, 431, 3, 431, 5, 431, 5772, 10, 431, 3, 432, 3, 432, 5, 432,
	5776, 10, 432, 3, 433, 3, 433, 3, 433, 3, 433, 5, 433, 5782, 10, 433, 3,
	433, 3, 433, 3, 434, 3, 434, 5, 434, 5788, 10, 434, 3, 434, 5, 434, 5791,
	10, 434, 3, 434, 3, 434, 3, 434, 3, 434, 3, 434, 5, 434, 5798, 10, 434,
	3, 435, 3, 435, 3, 435, 3, 435, 3, 435, 3, 435, 5, 435, 5806, 10, 435,
	3, 436, 3, 436, 3, 436, 3, 436, 3, 436, 3, 436, 3, 436, 5, 436, 5815, 10,
	436, 3, 437, 3, 437, 3, 437, 5, 437, 5820, 10, 437, 3, 437, 3, 437, 5,
	437, 5824, 10, 437, 3, 437, 3, 437, 5, 437, 5828, 10, 437, 3, 437, 3, 437,
	5, 437, 5832, 10, 437, 3, 437, 5, 437, 5835, 10, 437, 3, 437, 3, 437, 3,
	437, 3, 437, 5, 437, 5841, 10, 437, 3, 437, 3, 437, 5, 437, 5845, 10, 437,
	3, 437, 3, 437, 3, 438, 3, 438, 3, 439, 3, 439, 3, 440, 3, 440, 3, 440,
	3, 440, 5, 440, 5857, 10, 440, 3, 440, 3, 440, 3, 440, 7, 440, 5862, 10,
	440, 12, 440, 14, 440, 5865, 11, 440, 3, 440, 3, 440, 3, 440, 3, 440, 3,
	440, 7, 440, 5872, 10, 440, 12, 440, 14, 440, 5875, 11, 440, 5, 440, 5877,
	10, 440, 3, 440, 7, 440, 5880, 10, 440, 12, 440, 14, 440, 5883, 11, 440,
	3, 441, 3, 441, 5, 441, 5887, 10, 441, 3, 441, 3, 441, 3, 441, 3, 441,
	3, 441, 5, 441, 5894, 10, 441, 3, 442, 3, 442, 5, 442, 5898, 10, 442, 3,
	443, 5, 443, 5901, 10, 443, 3, 443, 3, 443, 3, 443, 3, 443, 3, 443, 3,
	444, 3, 444, 7, 444, 5910, 10, 444, 12, 444, 14, 444, 5913, 11, 444, 3,
	444, 3, 444, 3, 445, 3, 445, 3, 445, 7, 445, 5920, 10, 445, 12, 445, 14,
	445, 5923, 11, 445, 3, 446, 7, 446, 5926, 10, 446, 12, 446, 14, 446, 5929,
	11, 446, 3, 446, 5, 446, 5932, 10, 446, 3, 446, 5, 446, 5935, 10, 446,
	3, 446, 3, 446, 7, 446, 5939, 10, 446, 12, 446, 14, 446, 5942, 11, 446,
	3, 446, 3, 446, 5, 446, 5946, 10, 446, 3, 447, 3, 447, 3, 448, 3, 448,
	3, 448, 3, 448, 5, 448, 5954, 10, 448, 3, 448, 5, 448, 5957, 10, 448, 3,
	448, 3, 448, 7, 448, 5961, 10, 448, 12, 448, 14, 448, 5964, 11, 448, 3,
	448, 7, 448, 5967, 10, 448, 12, 448, 14, 448, 5970, 11, 448, 3, 448, 3,
	448, 3, 448, 3, 448, 5, 448, 5976, 10, 448, 3, 449, 5, 449, 5979, 10, 449,
	3, 449, 3, 449, 5, 449, 5983, 10, 449, 3, 449, 3, 449, 5, 449, 5987, 10,
	449, 3, 449, 3, 449, 3, 449, 3, 449, 5, 449, 5993, 10, 449, 3, 449, 5,
	449, 5996, 10, 449, 5, 449, 5998, 10, 449, 3, 449, 3, 449, 3, 449, 3, 449,
	7, 449, 6004, 10, 449, 12, 449, 14, 449, 6007, 11, 449, 5, 449, 6009, 10,
	449, 3, 449, 3, 449, 7, 449, 6013, 10, 449, 12, 449, 14, 449, 6016, 11,
	449, 3, 449, 3, 449, 3, 449, 3, 449, 5, 449, 6022, 10, 449, 3, 450, 3,
	450, 3, 450, 3, 451, 3, 451, 5, 451, 6029, 10, 451, 3, 452, 3, 452, 3,
	452, 3, 452, 5, 452, 6035, 10, 452, 3, 452, 3, 452, 3, 452, 3, 452, 7,
	452, 6041, 10, 452, 12, 452, 14, 452, 6044, 11, 452, 5, 452, 6046, 10,
	452, 3, 452, 3, 452, 7, 452, 6050, 10, 452, 12, 452, 14, 452, 6053, 11,
	452, 3, 452, 3, 452, 3, 452, 3, 452, 5, 452, 6059, 10, 452, 3, 453, 3,
	453, 7, 453, 6063, 10, 453, 12, 453, 14, 453, 6066, 11, 453, 3, 453, 3,
	453, 3, 453, 5, 453, 6071, 10, 453, 3, 453, 5, 453, 6074, 10, 453, 3, 454,
	3, 454, 3, 454, 3, 454, 3, 454, 3, 455, 7, 455, 6082, 10, 455, 12, 455,
	14, 455, 6085, 11, 455, 3, 455, 3, 455, 5, 455, 6089, 10, 455, 3, 455,
	3, 455, 3, 455, 5, 455, 6094, 10, 455, 3, 455, 7, 455, 6097, 10, 455, 12,
	455, 14, 455, 6100, 11, 455, 3, 455, 3, 455, 3, 455, 3, 455, 5, 455, 6106,
	10, 455, 3, 456, 7, 456, 6109, 10, 456, 12, 456, 14, 456, 6112, 11, 456,
	3, 456, 3, 456, 3, 457, 3, 457, 3, 457, 3, 457, 3, 457, 3, 457, 3, 457,
	3, 457, 3, 457, 3, 457, 3, 457, 3, 457, 5, 457, 6128, 10, 457, 3, 457,
	3, 457, 3, 457, 3, 457, 3, 457, 3, 457, 3, 457, 3, 457, 5, 457, 6138, 10,
	457, 3, 458, 3, 458, 3, 458, 3, 458, 7, 458, 6144, 10, 458, 12, 458, 14,
	458, 6147, 11, 458, 3, 458, 3, 458, 3, 458, 3, 458, 3, 458, 3, 458, 3,
	458, 3, 458, 5, 458, 6157, 10, 458, 3, 458, 5, 458, 6160, 10, 458, 3, 458,
	7, 458, 6163, 10, 458, 12, 458, 14, 458, 6166, 11, 458, 3, 458, 3, 458,
	3, 458, 3, 458, 5, 458, 6172, 10, 458, 5, 458, 6174, 10, 458, 3, 459, 7,
	459, 6177, 10, 459, 12, 459, 14, 459, 6180, 11, 459, 3, 459, 3, 459, 5,
	459, 6184, 10, 459, 3, 459, 3, 459, 7, 459, 6188, 10, 459, 12, 459, 14,
	459, 6191, 11, 459, 3, 459, 5, 459, 6194, 10, 459, 3, 459, 5, 459, 6197,
	10, 459, 3, 459, 3, 459, 3, 460, 3, 460, 3, 460, 3, 460, 5, 460, 6205,
	10, 460, 3, 461, 7, 461, 6208, 10, 461, 12, 461, 14, 461, 6211, 11, 461,
	3, 461, 3, 461, 3, 461, 3, 461, 5, 461, 6217, 10, 461, 3, 461, 3, 461,
	3, 461, 3, 461, 3, 461, 3, 461, 3, 461, 3, 461, 3, 461, 3, 461, 3, 461,
	3, 461, 3, 461, 3, 461, 3, 461, 3, 461, 3, 461, 3, 461, 3, 461, 3, 461,
	5, 461, 6239, 10, 461, 3, 461, 3, 461, 5, 461, 6243, 10, 461, 3, 462, 3,
	462, 3, 462, 7, 462, 6248, 10, 462, 12, 462, 14, 462, 6251, 11, 462, 3,
	462, 3, 462, 3, 463, 3, 463, 3, 463, 3, 463, 3, 463, 3, 463, 3, 463, 5,
	463, 6262, 10, 463, 3, 464, 3, 464, 3, 464, 3, 464, 5, 464, 6268, 10, 464,
	3, 464, 5, 464, 6271, 10, 464, 3, 464, 3, 464, 7, 464, 6275, 10, 464, 12,
	464, 14, 464, 6278, 11, 464, 3, 464, 3, 464, 5, 464, 6282, 10, 464, 3,
	464, 3, 464, 3, 464, 3, 464, 5, 464, 6288, 10, 464, 3, 465, 3, 465, 3,
	465, 7, 465, 6293, 10, 465, 12, 465, 14, 465, 6296, 11, 465, 3, 466, 7,
	466, 6299, 10, 466, 12, 466, 14, 466, 6302, 11, 466, 3, 466, 3, 466, 5,
	466, 6306, 10, 466, 5, 466, 6308, 10, 466, 3, 466, 5, 466, 6311, 10, 466,
	3, 466, 3, 466, 7, 466, 6315, 10, 466, 12, 466, 14, 466, 6318, 11, 466,
	3, 466, 3, 466, 5, 466, 6322, 10, 466, 3, 467, 3, 467, 3, 467, 3, 467,
	5, 467, 6328, 10, 467, 3, 467, 5, 467, 6331, 10, 467, 3, 467, 3, 467, 7,
	467, 6335, 10, 467, 12, 467, 14, 467, 6338, 11, 467, 3, 467, 3, 467, 5,
	467, 6342, 10, 467, 3, 467, 3, 467, 3, 467, 3, 467, 5, 467, 6348, 10, 467,
	3, 468, 3, 468, 3, 468, 7, 468, 6353, 10, 468, 12, 468, 14, 468, 6356,
	11, 468, 3, 469, 7, 469, 6359, 10, 469, 12, 469, 14, 469, 6362, 11, 469,
	3, 469, 3, 469, 5, 469, 6366, 10, 469, 5, 469, 6368, 10, 469, 3, 469, 5,
	469, 6371, 10, 469, 3, 469, 3, 469, 7, 469, 6375, 10, 469, 12, 469, 14,
	469, 6378, 11, 469, 3, 469, 3, 469, 5, 469, 6382, 10, 469, 3, 470, 3, 470,
	5, 470, 6386, 10, 470, 3, 470, 5, 470, 6389, 10, 470, 3, 470, 3, 470, 3,
	470, 3, 470, 5, 470, 6395, 10, 470, 3, 470, 3, 470, 3, 471, 5, 471, 6400,
	10, 471, 3, 471, 3, 471, 3, 471, 3, 471, 3, 471, 3, 471, 3, 471, 3, 471,
	3, 471, 3, 471, 5, 471, 6412, 10, 471, 3, 471, 3, 471, 3, 471, 3, 471,
	3, 471, 3, 471, 3, 471, 5, 471, 6421, 10, 471, 3, 472, 5, 472, 6424, 10,
	472, 3, 472, 5, 472, 6427, 10, 472, 3, 472, 3, 472, 3, 472, 3, 472, 3,
	473, 3, 473, 5, 473, 6435, 10, 473, 3, 474, 5, 474, 6438, 10, 474, 3, 474,
	3, 474, 3, 474, 3, 474, 3, 475, 3, 475, 5, 475, 6446, 10, 475, 3, 475,
	3, 475, 3, 475, 3, 475, 3, 475, 5, 475, 6453, 10, 475, 3, 475, 3, 475,
	7, 475, 6457, 10, 475, 12, 475, 14, 475, 6460, 11, 475, 3, 475, 3, 475,
	3, 475, 3, 475, 3, 475, 5, 475, 6467, 10, 475, 3, 475, 5, 475, 6470, 10,
	475, 3, 475, 5, 475, 6473, 10, 475, 3, 475, 7, 475, 6476, 10, 475, 12,
	475, 14, 475, 6479, 11, 475, 3, 475, 3, 475, 3, 475, 5, 475, 6484, 10,
	475, 3, 476, 3, 476, 7, 476, 6488, 10, 476, 12, 476, 14, 476, 6491, 11,
	476, 3, 476, 3, 476, 3, 476, 3, 476, 5, 476, 6497, 10, 476, 3, 476, 3,
	476, 3, 476, 7, 476, 6502, 10, 476, 12, 476, 14, 476, 6505, 11, 476, 3,
	476, 5, 476, 6508, 10, 476, 3, 477, 3, 477, 3, 477, 7, 477, 6513, 10, 477,
	12, 477, 14, 477, 6516, 11, 477, 3, 477, 3, 477, 3, 477, 3, 477, 3, 477,
	7, 477, 6523, 10, 477, 12, 477, 14, 477, 6526, 11, 477, 3, 477, 3, 477,
	3, 477, 3, 477, 5, 477, 6532, 10, 477, 3, 477, 7, 477, 6535, 10, 477, 12,
	477, 14, 477, 6538, 11, 477, 3, 477, 3, 477, 3, 477, 5, 477, 6543, 10,
	477, 5, 477, 6545, 10, 477, 3, 478, 3, 478, 3, 478, 3, 478, 3, 478, 3,
	478, 5, 478, 6553, 10, 478, 3, 478, 3, 478, 3, 479, 7, 479, 6558, 10, 479,
	12, 479, 14, 479, 6561, 11, 479, 3, 479, 3, 479, 3, 479, 3, 479, 3, 479,
	5, 479, 6568, 10, 479, 3, 479, 3, 479, 5, 479, 6572, 10, 479, 3, 479, 5,
	479, 6575, 10, 479, 3, 480, 3, 480, 3, 480, 3, 480, 3, 481, 3, 481, 5,
	481, 6583, 10, 481, 3, 481, 3, 481, 5, 481, 6587, 10, 481, 5, 481, 6589,
	10, 481, 3, 481, 3, 481, 3, 481, 7, 481, 6594, 10, 481, 12, 481, 14, 481,
	6597, 11, 481, 3, 481, 3, 481, 5, 481, 6601, 10, 481, 3, 481, 5, 481, 6604,
	10, 481, 3, 481, 3, 481, 3, 481, 7, 481, 6609, 10, 481, 12, 481, 14, 481,
	6612, 11, 481, 3, 481, 3, 481, 5, 481, 6616, 10, 481, 3, 481, 5, 481, 6619,
	10, 481, 3, 481, 3, 481, 3, 481, 7, 481, 6624, 10, 481, 12, 481, 14, 481,
	6627, 11, 481, 3, 481, 3, 481, 5, 481, 6631, 10, 481, 3, 481, 5, 481, 6634,
	10, 481, 3, 481, 3, 481, 3, 481, 7, 481, 6639, 10, 481, 12, 481, 14, 481,
	6642, 11, 481, 3, 481, 3, 481, 5, 481, 6646, 10, 481, 3, 481, 5, 481, 6649,
	10, 481, 3, 481, 3, 481, 3, 481, 7, 481, 6654, 10, 481, 12, 481, 14, 481,
	6657, 11, 481, 3, 481, 3, 481, 5, 481, 6661, 10, 481, 3, 481, 3, 481, 3,
	481, 7, 481, 6666, 10, 481, 12, 481, 14, 481, 6669, 11, 481, 3, 481, 3,
	481, 3, 481, 3, 481, 7, 481, 6675, 10, 481, 12, 481, 14, 481, 6678, 11,
	481, 5, 481, 6680, 10, 481, 3, 481, 3, 481, 3, 482, 5, 482, 6685, 10, 482,
	3, 482, 3, 482, 3, 482, 3, 482, 3, 482, 3, 482, 3, 482, 3, 482, 5, 482,
	6695, 10, 482, 3, 482, 3, 482, 3, 483, 5, 483, 6700, 10, 483, 3, 483, 3,
	483, 3, 483, 3, 483, 6, 483, 6706, 10, 483, 13, 483, 14, 483, 6707, 3,
	483, 3, 483, 3, 484, 5, 484, 6713, 10, 484, 3, 484, 3, 484, 3, 484, 3,
	484, 7, 484, 6719, 10, 484, 12, 484, 14, 484, 6722, 11, 484, 3, 484, 3,
	484, 3, 484, 3, 484, 3, 485, 5, 485, 6729, 10, 485, 3, 485, 3, 485, 3,
	485, 3, 485, 3, 485, 3, 485, 3, 486, 5, 486, 6738, 10, 486, 3, 486, 3,
	486, 3, 486, 3, 486, 3, 486, 3, 486, 3, 486, 3, 486, 3, 487, 5, 487, 6749,
	10, 487, 3, 487, 3, 487, 3, 487, 3, 487, 3, 488, 3, 488, 3, 488, 3, 488,
	5, 488, 6759, 10, 488, 3, 488, 3, 488, 3, 488, 3, 488, 5, 488, 6765, 10,
	488, 3, 488, 3, 488, 3, 489, 3, 489, 3, 489, 3, 489, 3, 489, 3, 489, 3,
	489, 3, 489, 5, 489, 6777, 10, 489, 5, 489, 6779, 10, 489, 3, 489, 3, 489,
	3, 490, 3, 490, 3, 491, 3, 491, 3, 492, 3, 492, 3, 493, 3, 493, 3, 494,
	3, 494, 3, 494, 5, 494, 6794, 10, 494, 3, 494, 5, 494, 6797, 10, 494, 3,
	494, 3, 494, 5, 494, 6801, 10, 494, 5, 494, 6803, 10, 494, 3, 494, 3, 494,
	3, 494, 7, 494, 6808, 10, 494, 12, 494, 14, 494, 6811, 11, 494, 3, 494,
	3, 494, 3, 495, 5, 495, 6816, 10, 495, 3, 495, 3, 495, 3, 496, 3, 496,
	3, 496, 3, 496, 6, 496, 6824, 10, 496, 13, 496, 14, 496, 6825, 3, 496,
	3, 496, 3, 497, 3, 497, 5, 497, 6832, 10, 497, 3, 497, 3, 497, 3, 497,
	7, 497, 6837, 10, 497, 12, 497, 14, 497, 6840, 11, 497, 3, 497, 3, 497,
	3, 498, 3, 498, 3, 498, 3, 498, 3, 498, 3, 499, 3, 499, 3, 499, 7, 499,
	6852, 10, 499, 12, 499, 14, 499, 6855, 11, 499, 3, 499, 3, 499, 3, 499,
	7, 499, 6860, 10, 499, 12, 499, 14, 499, 6863, 11, 499, 5, 499, 6865, 10,
	499, 3, 500, 7, 500, 6868, 10, 500, 12, 500, 14, 500, 6871, 11, 500, 3,
	500, 5, 500, 6874, 10, 500, 3, 501, 7, 501, 6877, 10, 501, 12, 501, 14,
	501, 6880, 11, 501, 3, 501, 3, 501, 3, 501, 3, 501, 3, 501, 5, 501, 6887,
	10, 501, 3, 501, 5, 501, 6890, 10, 501, 5, 501, 6892, 10, 501, 3, 502,
	3, 502, 3, 502, 3, 502, 5, 502, 6898, 10, 502, 3, 502, 5, 502, 6901, 10,
	502, 3, 502, 3, 502, 3, 503, 3, 503, 7, 503, 6907, 10, 503, 12, 503, 14,
	503, 6910, 11, 503, 3, 504, 3, 504, 3, 504, 7, 504, 6915, 10, 504, 12,
	504, 14, 504, 6918, 11, 504, 3, 505, 3, 505, 5, 505, 6922, 10, 505, 3,
	506, 3, 506, 3, 506, 3, 506, 3, 506, 3, 506, 7, 506, 6930, 10, 506, 12,
	506, 14, 506, 6933, 11, 506, 3, 506, 3, 506, 7, 506, 6937, 10, 506, 12,
	506, 14, 506, 6940, 11, 506, 3, 506, 3, 506, 3, 506, 3, 506, 5, 506, 6946,
	10, 506, 3, 507, 3, 507, 3, 507, 3, 507, 5, 507, 6952, 10, 507, 3, 507,
	7, 507, 6955, 10, 507, 12, 507, 14, 507, 6958, 11, 507, 3, 507, 3, 507,
	3, 508, 3, 508, 3, 508, 3, 508, 5, 508, 6966, 10, 508, 3, 508, 3, 508,
	5, 508, 6970, 10, 508, 5, 508, 6972, 10, 508, 3, 508, 3, 508, 3, 509, 3,
	509, 3, 509, 3, 510, 3, 510, 3, 510, 7, 510, 6982, 10, 510, 12, 510, 14,
	510, 6985, 11, 510, 3, 511, 3, 511, 3, 511, 3, 511, 5, 511, 6991, 10, 511,
	3, 511, 3, 511, 3, 512, 3, 512, 7, 512, 6997, 10, 512, 12, 512, 14, 512,
	7000, 11, 512, 3, 513, 3, 513, 3, 513, 3, 513, 5, 513, 7006, 10, 513, 3,
	513, 3, 513, 3, 513, 3, 513, 7, 513, 7012, 10, 513, 12, 513, 14, 513, 7015,
	11, 513, 5, 513, 7017, 10, 513, 3, 513, 3, 513, 3, 513, 7, 513, 7022, 10,
	513, 12, 513, 14, 513, 7025, 11, 513, 5, 513, 7027, 10, 513, 3, 513, 3,
	513, 5, 513, 7031, 10, 513, 3, 514, 3, 514, 3, 514, 3, 514, 6, 514, 7037,
	10, 514, 13, 514, 14, 514, 7038, 3, 514, 3, 514, 3, 515, 3, 515, 7, 515,
	7045, 10, 515, 12, 515, 14, 515, 7048, 11, 515, 3, 515, 3, 515, 3, 516,
	3, 516, 7, 516, 7054, 10, 516, 12, 516, 14, 516, 7057, 11, 516, 3, 516,
	3, 516, 3, 517, 3, 517, 3, 518, 3, 518, 3, 518, 3, 518, 3, 518, 3, 518,
	3, 518, 3, 518, 3, 518, 3, 518, 3, 519, 5, 519, 7074, 10, 519, 3, 519,
	3, 519, 3, 519, 3, 519, 3, 520, 3, 520, 3, 520, 3, 520, 3, 520, 5, 520,
	7085, 10, 520, 3, 520, 3, 520, 3, 520, 5, 520, 7090, 10, 520, 3, 521, 3,
	521, 5, 521, 7094, 10, 521, 3, 522, 3, 522, 3, 522, 3, 522, 3, 522, 3,
	522, 3, 522, 3, 522, 5, 522, 7104, 10, 522, 3, 523, 3, 523, 3, 523, 3,
	523, 3, 523, 6, 523, 7111, 10, 523, 13, 523, 14, 523, 7112, 3, 523, 3,
	523, 3, 524, 3, 524, 5, 524, 7119, 10, 524, 3, 524, 3, 524, 3, 524, 7,
	524, 7124, 10, 524, 12, 524, 14, 524, 7127, 11, 524, 3, 524, 3, 524, 5,
	524, 7131, 10, 524, 3, 524, 3, 524, 3, 525, 3, 525, 3, 525, 5, 525, 7138,
	10, 525, 3, 525, 3, 525, 3, 525, 3, 525, 5, 525, 7144, 10, 525, 3, 525,
	7, 525, 7147, 10, 525, 12, 525, 14, 525, 7150, 11, 525, 3, 525, 3, 525,
	3, 525, 3, 525, 5, 525, 7156, 10, 525, 3, 526, 3, 526, 5, 526, 7160, 10,
	526, 3, 527, 7, 527, 7163, 10, 527, 12, 527, 14, 527, 7166, 11, 527, 3,
	527, 3, 527, 3, 527, 3, 527, 3, 527, 5, 527, 7173, 10, 527, 3, 528, 3,
	528, 3, 528, 3, 528, 5, 528, 7179, 10, 528, 3, 529, 3, 529, 3, 529, 3,
	529, 3, 529, 5, 529, 7186, 10, 529, 5, 529, 7188, 10, 529, 3, 529, 5, 529,
	7191, 10, 529, 3, 529, 3, 529, 3, 529, 5, 529, 7196, 10, 529, 3, 529, 5,
	529, 7199, 10, 529, 5, 529, 7201, 10, 529, 3, 529, 3, 529, 3, 530, 3, 530,
	3, 530, 3, 530, 3, 530, 3, 530, 3, 530, 5, 530, 7212, 10, 530, 3, 530,
	3, 530, 3, 530, 3, 530, 3, 530, 3, 530, 3, 530, 3, 530, 3, 530, 3, 530,
	3, 530, 3, 530, 3, 530, 3, 530, 3, 530, 3, 530, 3, 530, 3, 530, 3, 530,
	3, 530, 3, 530, 3, 530, 3, 530, 3, 530, 3, 530, 3, 530, 3, 530, 5, 530,
	7241, 10, 530, 3, 531, 3, 531, 5, 531, 7245, 10, 531, 3, 532, 3, 532, 7,
	532, 7249, 10, 532, 12, 532, 14, 532, 7252, 11, 532, 3, 532, 3, 532, 3,
	532, 3, 532, 3, 532, 3, 532, 3, 532, 3, 532, 3, 532, 5, 532, 7263, 10,
	532, 3, 532, 2, 8, 404, 442, 486, 520, 594, 600, 533, 2, 4, 6, 8, 10, 12,
	14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48,
	50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84,
	86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116,
	118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146,
	148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176,
	178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206,
	208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236,
	238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266,
	268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296,
	298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326,
	328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356,
	358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386,
	388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416,
	418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446,
	448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476,
	478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506,
	508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536,
	538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566,
	568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596,
	598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626,
	628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656,
	658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 686,
	688, 690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716,
	718, 720, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746,
	748, 750, 752, 754, 756, 758, 760, 762, 764, 766, 768, 770, 772, 774, 776,
	778, 780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806,
	808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836,
	838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 866,
	868, 870, 872, 874, 876, 878, 880, 882, 884, 886, 888, 890, 892, 894, 896,
	898, 900, 902, 904, 906, 908, 910, 912, 914, 916, 918, 920, 922, 924, 926,
	928, 930, 932, 934, 936, 938, 940, 942, 944, 946, 948, 950, 952, 954, 956,
	958, 960, 962, 964, 966, 968, 970, 972, 974, 976, 978, 980, 982, 984, 986,
	988, 990, 992, 994, 996, 998, 1000, 1002, 1004, 1006, 1008, 1010, 1012,
	1014, 1016, 1018, 1020, 1022, 1024, 1026, 1028, 1030, 1032, 1034, 1036,
	1038, 1040, 1042, 1044, 1046, 1048, 1050, 1052, 1054, 1056, 1058, 1060,
	1062, 2, 71, 3, 2, 297, 298, 4, 2, 340, 340, 345, 356, 5, 2, 89, 89, 164,
	164, 183, 183, 9, 2, 176, 176, 199, 199, 221, 221, 234, 234, 263, 263,
	301, 301, 303, 305, 7, 2, 63, 63, 143, 144, 157, 157, 224, 224, 250, 250,
	5, 2, 58, 58, 156, 156, 205, 205, 4, 2, 202, 203, 225, 225, 9, 2, 170,
	170, 241, 242, 256, 261, 273, 273, 280, 280, 286, 286, 289, 289, 5, 2,
	322, 328, 359, 359, 361, 361, 3, 2, 370, 371, 3, 2, 296, 297, 4, 2, 22,
	39, 306, 306, 4, 2, 227, 227, 268, 268, 4, 2, 52, 52, 233, 233, 5, 2, 139,
	140, 178, 178, 204, 204, 3, 2, 44, 47, 3, 2, 148, 150, 4, 2, 185, 185,
	266, 267, 6, 2, 189, 189, 237, 237, 241, 241, 282, 282, 6, 2, 190, 190,
	238, 238, 242, 242, 283, 283, 5, 2, 151, 151, 160, 160, 228, 228, 4, 2,
	139, 140, 178, 178, 4, 2, 56, 56, 133, 134, 5, 2, 154, 154, 188, 188, 233,
	233, 3, 2, 196, 197, 4, 2, 115, 115, 195, 195, 4, 2, 72, 72, 201, 201,
	4, 2, 61, 62, 173, 174, 5, 2, 168, 168, 182, 182, 211, 212, 7, 2, 48, 48,
	163, 163, 169, 169, 177, 177, 290, 291, 4, 2, 60, 60, 172, 172, 4, 2, 214,
	215, 254, 255, 4, 2, 213, 213, 253, 253, 3, 2, 375, 377, 3, 2, 357, 358,
	6, 2, 89, 89, 164, 164, 183, 183, 292, 292, 4, 2, 113, 113, 137, 137, 4,
	2, 321, 321, 364, 365, 3, 2, 316, 319, 3, 2, 341, 344, 3, 2, 334, 339,
	3, 2, 326, 328, 3, 2, 367, 368, 4, 2, 358, 358, 390, 390, 3, 2, 64, 66,
	4, 2, 208, 208, 284, 284, 4, 2, 49, 49, 51, 51, 4, 2, 236, 236, 281, 281,
	4, 2, 373, 374, 379, 380, 4, 2, 111, 111, 216, 216, 5, 2, 42, 42, 206,
	206, 243, 244, 4, 2, 167, 167, 218, 218, 4, 2, 44, 44, 217, 217, 8, 2,
	48, 48, 131, 131, 136, 136, 177, 177, 219, 220, 269, 270, 4, 2, 177, 177,
	329, 329, 6, 2, 48, 48, 147, 147, 177, 177, 288, 288, 4, 2, 360, 360, 362,
	362, 5, 2, 340, 340, 364, 364, 368, 368, 4, 2, 54, 54, 91, 91, 3, 2, 316,
	317, 4, 2, 158, 158, 162, 162, 3, 2, 193, 194, 4, 2, 171, 171, 226, 226,
	4, 2, 222, 222, 275, 275, 4, 2, 301, 301, 304, 304, 4, 2, 124, 124, 247,
	247, 4, 2, 76, 76, 195, 195, 4, 2, 140, 140, 178, 178, 5, 2, 22, 22, 26,
	26, 38, 38, 2, 8020, 2, 1065, 3, 2, 2, 2, 4, 1092, 3, 2, 2, 2, 6, 1097,
	3, 2, 2, 2, 8, 1099, 3, 2, 2, 2, 10, 1104, 3, 2, 2, 2, 12, 1106, 3, 2,
	2, 2, 14, 1112, 3, 2, 2, 2, 16, 1114, 3, 2, 2, 2, 18, 1119, 3, 2, 2, 2,
	20, 1122, 3, 2, 2, 2, 22, 1125, 3, 2, 2, 2, 24, 1127, 3, 2, 2, 2, 26, 1129,
	3, 2, 2, 2, 28, 1133, 3, 2, 2, 2, 30, 1135, 3, 2, 2, 2, 32, 1137, 3, 2,
	2, 2, 34, 1139, 3, 2, 2, 2, 36, 1141, 3, 2, 2, 2, 38, 1143, 3, 2, 2, 2,
	40, 1148, 3, 2, 2, 2, 42, 1150, 3, 2, 2, 2, 44, 1158, 3, 2, 2, 2, 46, 1166,
	3, 2, 2, 2, 48, 1168, 3, 2, 2, 2, 50, 1170, 3, 2, 2, 2, 52, 1172, 3, 2,
	2, 2, 54, 1176, 3, 2, 2, 2, 56, 1199, 3, 2, 2, 2, 58, 1201, 3, 2, 2, 2,
	60, 1203, 3, 2, 2, 2, 62, 1205, 3, 2, 2, 2, 64, 1207, 3, 2, 2, 2, 66, 1209,
	3, 2, 2, 2, 68, 1211, 3, 2, 2, 2, 70, 1234, 3, 2, 2, 2, 72, 1236, 3, 2,
	2, 2, 74, 1238, 3, 2, 2, 2, 76, 1242, 3, 2, 2, 2, 78, 1244, 3, 2, 2, 2,
	80, 1246, 3, 2, 2, 2, 82, 1248, 3, 2, 2, 2, 84, 1252, 3, 2, 2, 2, 86, 1259,
	3, 2, 2, 2, 88, 1261, 3, 2, 2, 2, 90, 1263, 3, 2, 2, 2, 92, 1265, 3, 2,
	2, 2, 94, 1267, 3, 2, 2, 2, 96, 1269, 3, 2, 2, 2, 98, 1271, 3, 2, 2, 2,
	100, 1273, 3, 2, 2, 2, 102, 1275, 3, 2, 2, 2, 104, 1277, 3, 2, 2, 2, 106,
	1279, 3, 2, 2, 2, 108, 1281, 3, 2, 2, 2, 110, 1283, 3, 2, 2, 2, 112, 1290,
	3, 2, 2, 2, 114, 1292, 3, 2, 2, 2, 116, 1294, 3, 2, 2, 2, 118, 1296, 3,
	2, 2, 2, 120, 1298, 3, 2, 2, 2, 122, 1300, 3, 2, 2, 2, 124, 1302, 3, 2,
	2, 2, 126, 1304, 3, 2, 2, 2, 128, 1309, 3, 2, 2, 2, 130, 1322, 3, 2, 2,
	2, 132, 1372, 3, 2, 2, 2, 134, 1374, 3, 2, 2, 2, 136, 1384, 3, 2, 2, 2,
	138, 1391, 3, 2, 2, 2, 140, 1407, 3, 2, 2, 2, 142, 1416, 3, 2, 2, 2, 144,
	1424, 3, 2, 2, 2, 146, 1426, 3, 2, 2, 2, 148, 1434, 3, 2, 2, 2, 150, 1440,
	3, 2, 2, 2, 152, 1450, 3, 2, 2, 2, 154, 1456, 3, 2, 2, 2, 156, 1465, 3,
	2, 2, 2, 158, 1468, 3, 2, 2, 2, 160, 1475, 3, 2, 2, 2, 162, 1490, 3, 2,
	2, 2, 164, 1492, 3, 2, 2, 2, 166, 1494, 3, 2, 2, 2, 168, 1530, 3, 2, 2,
	2, 170, 1535, 3, 2, 2, 2, 172, 1607, 3, 2, 2, 2, 174, 1609, 3, 2, 2, 2,
	176, 1620, 3, 2, 2, 2, 178, 1635, 3, 2, 2, 2, 180, 1643, 3, 2, 2, 2, 182,
	1646, 3, 2, 2, 2, 184, 1657, 3, 2, 2, 2, 186, 1659, 3, 2, 2, 2, 188, 1670,
	3, 2, 2, 2, 190, 1680, 3, 2, 2, 2, 192, 1682, 3, 2, 2, 2, 194, 1685, 3,
	2, 2, 2, 196, 1696, 3, 2, 2, 2, 198, 1733, 3, 2, 2, 2, 200, 1735, 3, 2,
	2, 2, 202, 1762, 3, 2, 2, 2, 204, 1771, 3, 2, 2, 2, 206, 1776, 3, 2, 2,
	2, 208, 1779, 3, 2, 2, 2, 210, 1795, 3, 2, 2, 2, 212, 1797, 3, 2, 2, 2,
	214, 1804, 3, 2, 2, 2, 216, 1806, 3, 2, 2, 2, 218, 1826, 3, 2, 2, 2, 220,
	1828, 3, 2, 2, 2, 222, 1844, 3, 2, 2, 2, 224, 1861, 3, 2, 2, 2, 226, 1863,
	3, 2, 2, 2, 228, 1871, 3, 2, 2, 2, 230, 1886, 3, 2, 2, 2, 232, 1888, 3,
	2, 2, 2, 234, 1900, 3, 2, 2, 2, 236, 1902, 3, 2, 2, 2, 238, 1926, 3, 2,
	2, 2, 240, 1951, 3, 2, 2, 2, 242, 1984, 3, 2, 2, 2, 244, 2000, 3, 2, 2,
	2, 246, 2015, 3, 2, 2, 2, 248, 2026, 3, 2, 2, 2, 250, 2030, 3, 2, 2, 2,
	252, 2038, 3, 2, 2, 2, 254, 2042, 3, 2, 2, 2, 256, 2059, 3, 2, 2, 2, 258,
	2071, 3, 2, 2, 2, 260, 2079, 3, 2, 2, 2, 262, 2091, 3, 2, 2, 2, 264, 2136,
	3, 2, 2, 2, 266, 2138, 3, 2, 2, 2, 268, 2155, 3, 2, 2, 2, 270, 2157, 3,
	2, 2, 2, 272, 2162, 3, 2, 2, 2, 274, 2173, 3, 2, 2, 2, 276, 2182, 3, 2,
	2, 2, 278, 2199, 3, 2, 2, 2, 280, 2226, 3, 2, 2, 2, 282, 2228, 3, 2, 2,
	2, 284, 2235, 3, 2, 2, 2, 286, 2258, 3, 2, 2, 2, 288, 2263, 3, 2, 2, 2,
	290, 2272, 3, 2, 2, 2, 292, 2290, 3, 2, 2, 2, 294, 2329, 3, 2, 2, 2, 296,
	2338, 3, 2, 2, 2, 298, 2347, 3, 2, 2, 2, 300, 2351, 3, 2, 2, 2, 302, 2356,
	3, 2, 2, 2, 304, 2358, 3, 2, 2, 2, 306, 2364, 3, 2, 2, 2, 308, 2370, 3,
	2, 2, 2, 310, 2379, 3, 2, 2, 2, 312, 2381, 3, 2, 2, 2, 314, 2384, 3, 2,
	2, 2, 316, 2394, 3, 2, 2, 2, 318, 2404, 3, 2, 2, 2, 320, 2420, 3, 2, 2,
	2, 322, 2422, 3, 2, 2, 2, 324, 2430, 3, 2, 2, 2, 326, 2445, 3, 2, 2, 2,
	328, 2463, 3, 2, 2, 2, 330, 2465, 3, 2, 2, 2, 332, 2475, 3, 2, 2, 2, 334,
	2481, 3, 2, 2, 2, 336, 2506, 3, 2, 2, 2, 338, 2511, 3, 2, 2, 2, 340, 2538,
	3, 2, 2, 2, 342, 2541, 3, 2, 2, 2, 344, 2563, 3, 2, 2, 2, 346, 2565, 3,
	2, 2, 2, 348, 2576, 3, 2, 2, 2, 350, 2604, 3, 2, 2, 2, 352, 2609, 3, 2,
	2, 2, 354, 2622, 3, 2, 2, 2, 356, 2633, 3, 2, 2, 2, 358, 2641, 3, 2, 2,
	2, 360, 2650, 3, 2, 2, 2, 362, 2663, 3, 2, 2, 2, 364, 2674, 3, 2, 2, 2,
	366, 2679, 3, 2, 2, 2, 368, 2687, 3, 2, 2, 2, 370, 2701, 3, 2, 2, 2, 372,
	2703, 3, 2, 2, 2, 374, 2706, 3, 2, 2, 2, 376, 2709, 3, 2, 2, 2, 378, 2736,
	3, 2, 2, 2, 380, 2745, 3, 2, 2, 2, 382, 2758, 3, 2, 2, 2, 384, 2769, 3,
	2, 2, 2, 386, 2788, 3, 2, 2, 2, 388, 2790, 3, 2, 2, 2, 390, 2801, 3, 2,
	2, 2, 392, 2833, 3, 2, 2, 2, 394, 2851, 3, 2, 2, 2, 396, 2855, 3, 2, 2,
	2, 398, 2860, 3, 2, 2, 2, 400, 2862, 3, 2, 2, 2, 402, 2870, 3, 2, 2, 2,
	404, 2946, 3, 2, 2, 2, 406, 2970, 3, 2, 2, 2, 408, 2975, 3, 2, 2, 2, 410,
	2979, 3, 2, 2, 2, 412, 2986, 3, 2, 2, 2, 414, 3011, 3, 2, 2, 2, 416, 3017,
	3, 2, 2, 2, 418, 3034, 3, 2, 2, 2, 420, 3051, 3, 2, 2, 2, 422, 3068, 3,
	2, 2, 2, 424, 3089, 3, 2, 2, 2, 426, 3091, 3, 2, 2, 2, 428, 3102, 3, 2,
	2, 2, 430, 3104, 3, 2, 2, 2, 432, 3106, 3, 2, 2, 2, 434, 3116, 3, 2, 2,
	2, 436, 3121, 3, 2, 2, 2, 438, 3126, 3, 2, 2, 2, 440, 3132, 3, 2, 2, 2,
	442, 3186, 3, 2, 2, 2, 444, 3207, 3, 2, 2, 2, 446, 3209, 3, 2, 2, 2, 448,
	3215, 3, 2, 2, 2, 450, 3220, 3, 2, 2, 2, 452, 3247, 3, 2, 2, 2, 454, 3275,
	3, 2, 2, 2, 456, 3277, 3, 2, 2, 2, 458, 3285, 3, 2, 2, 2, 460, 3295, 3,
	2, 2, 2, 462, 3312, 3, 2, 2, 2, 464, 3319, 3, 2, 2, 2, 466, 3321, 3, 2,
	2, 2, 468, 3329, 3, 2, 2, 2, 470, 3340, 3, 2, 2, 2, 472, 3355, 3, 2, 2,
	2, 474, 3382, 3, 2, 2, 2, 476, 3395, 3, 2, 2, 2, 478, 3411, 3, 2, 2, 2,
	480, 3417, 3, 2, 2, 2, 482, 3422, 3, 2, 2, 2, 484, 3429, 3, 2, 2, 2, 486,
	3454, 3, 2, 2, 2, 488, 3473, 3, 2, 2, 2, 490, 3484, 3, 2, 2, 2, 492, 3489,
	3, 2, 2, 2, 494, 3504, 3, 2, 2, 2, 496, 3506, 3, 2, 2, 2, 498, 3511, 3,
	2, 2, 2, 500, 3532, 3, 2, 2, 2, 502, 3536, 3, 2, 2, 2, 504, 3544, 3, 2,
	2, 2, 506, 3574, 3, 2, 2, 2, 508, 3642, 3, 2, 2, 2, 510, 3644, 3, 2, 2,
	2, 512, 3657, 3, 2, 2, 2, 514, 3665, 3, 2, 2, 2, 516, 3673, 3, 2, 2, 2,
	518, 3691, 3, 2, 2, 2, 520, 3693, 3, 2, 2, 2, 522, 3713, 3, 2, 2, 2, 524,
	3716, 3, 2, 2, 2, 526, 3721, 3, 2, 2, 2, 528, 3730, 3, 2, 2, 2, 530, 3746,
	3, 2, 2, 2, 532, 3748, 3, 2, 2, 2, 534, 3766, 3, 2, 2, 2, 536, 3770, 3,
	2, 2, 2, 538, 3772, 3, 2, 2, 2, 540, 3774, 3, 2, 2, 2, 542, 3778, 3, 2,
	2, 2, 544, 3784, 3, 2, 2, 2, 546, 3797, 3, 2, 2, 2, 548, 3814, 3, 2, 2,
	2, 550, 3821, 3, 2, 2, 2, 552, 3855, 3, 2, 2, 2, 554, 3880, 3, 2, 2, 2,
	556, 3884, 3, 2, 2, 2, 558, 3898, 3, 2, 2, 2, 560, 3900, 3, 2, 2, 2, 562,
	3929, 3, 2, 2, 2, 564, 3938, 3, 2, 2, 2, 566, 3967, 3, 2, 2, 2, 568, 3983,
	3, 2, 2, 2, 570, 3985, 3, 2, 2, 2, 572, 3995, 3, 2, 2, 2, 574, 4000, 3,
	2, 2, 2, 576, 4020, 3, 2, 2, 2, 578, 4022, 3, 2, 2, 2, 580, 4029, 3, 2,
	2, 2, 582, 4043, 3, 2, 2, 2, 584, 4046, 3, 2, 2, 2, 586, 4051, 3, 2, 2,
	2, 588, 4053, 3, 2, 2, 2, 590, 4055, 3, 2, 2, 2, 592, 4063, 3, 2, 2, 2,
	594, 4122, 3, 2, 2, 2, 596, 4190, 3, 2, 2, 2, 598, 4210, 3, 2, 2, 2, 600,
	4233, 3, 2, 2, 2, 602, 4388, 3, 2, 2, 2, 604, 4403, 3, 2, 2, 2, 606, 4413,
	3, 2, 2, 2, 608, 4421, 3, 2, 2, 2, 610, 4441, 3, 2, 2, 2, 612, 4452, 3,
	2, 2, 2, 614, 4458, 3, 2, 2, 2, 616, 4460, 3, 2, 2, 2, 618, 4468, 3, 2,
	2, 2, 620, 4479, 3, 2, 2, 2, 622, 4487, 3, 2, 2, 2, 624, 4495, 3, 2, 2,
	2, 626, 4540, 3, 2, 2, 2, 628, 4542, 3, 2, 2, 2, 630, 4595, 3, 2, 2, 2,
	632, 4599, 3, 2, 2, 2, 634, 4605, 3, 2, 2, 2, 636, 4610, 3, 2, 2, 2, 638,
	4622, 3, 2, 2, 2, 640, 4624, 3, 2, 2, 2, 642, 4640, 3, 2, 2, 2, 644, 4647,
	3, 2, 2, 2, 646, 4649, 3, 2, 2, 2, 648, 4668, 3, 2, 2, 2, 650, 4670, 3,
	2, 2, 2, 652, 4685, 3, 2, 2, 2, 654, 4724, 3, 2, 2, 2, 656, 4726, 3, 2,
	2, 2, 658, 4740, 3, 2, 2, 2, 660, 4742, 3, 2, 2, 2, 662, 4778, 3, 2, 2,
	2, 664, 4826, 3, 2, 2, 2, 666, 4828, 3, 2, 2, 2, 668, 4839, 3, 2, 2, 2,
	670, 4846, 3, 2, 2, 2, 672, 4861, 3, 2, 2, 2, 674, 4863, 3, 2, 2, 2, 676,
	4871, 3, 2, 2, 2, 678, 4879, 3, 2, 2, 2, 680, 4887, 3, 2, 2, 2, 682, 4895,
	3, 2, 2, 2, 684, 4902, 3, 2, 2, 2, 686, 4910, 3, 2, 2, 2, 688, 4912, 3,
	2, 2, 2, 690, 4916, 3, 2, 2, 2, 692, 4932, 3, 2, 2, 2, 694, 4934, 3, 2,
	2, 2, 696, 4936, 3, 2, 2, 2, 698, 4938, 3, 2, 2, 2, 700, 4954, 3, 2, 2,
	2, 702, 4968, 3, 2, 2, 2, 704, 4970, 3, 2, 2, 2, 706, 4972, 3, 2, 2, 2,
	708, 4979, 3, 2, 2, 2, 710, 4981, 3, 2, 2, 2, 712, 4985, 3, 2, 2, 2, 714,
	4992, 3, 2, 2, 2, 716, 4998, 3, 2, 2, 2, 718, 5008, 3, 2, 2, 2, 720, 5010,
	3, 2, 2, 2, 722, 5012, 3, 2, 2, 2, 724, 5014, 3, 2, 2, 2, 726, 5056, 3,
	2, 2, 2, 728, 5058, 3, 2, 2, 2, 730, 5060, 3, 2, 2, 2, 732, 5062, 3, 2,
	2, 2, 734, 5064, 3, 2, 2, 2, 736, 5066, 3, 2, 2, 2, 738, 5068, 3, 2, 2,
	2, 740, 5070, 3, 2, 2, 2, 742, 5072, 3, 2, 2, 2, 744, 5074, 3, 2, 2, 2,
	746, 5076, 3, 2, 2, 2, 748, 5078, 3, 2, 2, 2, 750, 5080, 3, 2, 2, 2, 752,
	5082, 3, 2, 2, 2, 754, 5084, 3, 2, 2, 2, 756, 5086, 3, 2, 2, 2, 758, 5088,
	3, 2, 2, 2, 760, 5090, 3, 2, 2, 2, 762, 5096, 3, 2, 2, 2, 764, 5105, 3,
	2, 2, 2, 766, 5113, 3, 2, 2, 2, 768, 5122, 3, 2, 2, 2, 770, 5127, 3, 2,
	2, 2, 772, 5143, 3, 2, 2, 2, 774, 5162, 3, 2, 2, 2, 776, 5186, 3, 2, 2,
	2, 778, 5188, 3, 2, 2, 2, 780, 5200, 3, 2, 2, 2, 782, 5202, 3, 2, 2, 2,
	784, 5218, 3, 2, 2, 2, 786, 5269, 3, 2, 2, 2, 788, 5273, 3, 2, 2, 2, 790,
	5297, 3, 2, 2, 2, 792, 5302, 3, 2, 2, 2, 794, 5307, 3, 2, 2, 2, 796, 5341,
	3, 2, 2, 2, 798, 5382, 3, 2, 2, 2, 800, 5396, 3, 2, 2, 2, 802, 5398, 3,
	2, 2, 2, 804, 5437, 3, 2, 2, 2, 806, 5451, 3, 2, 2, 2, 808, 5453, 3, 2,
	2, 2, 810, 5469, 3, 2, 2, 2, 812, 5485, 3, 2, 2, 2, 814, 5527, 3, 2, 2,
	2, 816, 5543, 3, 2, 2, 2, 818, 5559, 3, 2, 2, 2, 820, 5601, 3, 2, 2, 2,
	822, 5617, 3, 2, 2, 2, 824, 5645, 3, 2, 2, 2, 826, 5675, 3, 2, 2, 2, 828,
	5689, 3, 2, 2, 2, 830, 5705, 3, 2, 2, 2, 832, 5723, 3, 2, 2, 2, 834, 5725,
	3, 2, 2, 2, 836, 5727, 3, 2, 2, 2, 838, 5734, 3, 2, 2, 2, 840, 5736, 3,
	2, 2, 2, 842, 5738, 3, 2, 2, 2, 844, 5740, 3, 2, 2, 2, 846, 5742, 3, 2,
	2, 2, 848, 5744, 3, 2, 2, 2, 850, 5746, 3, 2, 2, 2, 852, 5748, 3, 2, 2,
	2, 854, 5751, 3, 2, 2, 2, 856, 5763, 3, 2, 2, 2, 858, 5765, 3, 2, 2, 2,
	860, 5767, 3, 2, 2, 2, 862, 5775, 3, 2, 2, 2, 864, 5777, 3, 2, 2, 2, 866,
	5785, 3, 2, 2, 2, 868, 5799, 3, 2, 2, 2, 870, 5807, 3, 2, 2, 2, 872, 5844,
	3, 2, 2, 2, 874, 5848, 3, 2, 2, 2, 876, 5850, 3, 2, 2, 2, 878, 5856, 3,
	2, 2, 2, 880, 5884, 3, 2, 2, 2, 882, 5897, 3, 2, 2, 2, 884, 5900, 3, 2,
	2, 2, 886, 5907, 3, 2, 2, 2, 888, 5916, 3, 2, 2, 2, 890, 5927, 3, 2, 2,
	2, 892, 5947, 3, 2, 2, 2, 894, 5949, 3, 2, 2, 2, 896, 5978, 3, 2, 2, 2,
	898, 6023, 3, 2, 2, 2, 900, 6026, 3, 2, 2, 2, 902, 6030, 3, 2, 2, 2, 904,
	6073, 3, 2, 2, 2, 906, 6075, 3, 2, 2, 2, 908, 6083, 3, 2, 2, 2, 910, 6110,
	3, 2, 2, 2, 912, 6137, 3, 2, 2, 2, 914, 6173, 3, 2, 2, 2, 916, 6178, 3,
	2, 2, 2, 918, 6204, 3, 2, 2, 2, 920, 6242, 3, 2, 2, 2, 922, 6244, 3, 2,
	2, 2, 924, 6261, 3, 2, 2, 2, 926, 6263, 3, 2, 2, 2, 928, 6289, 3, 2, 2,
	2, 930, 6300, 3, 2, 2, 2, 932, 6323, 3, 2, 2, 2, 934, 6349, 3, 2, 2, 2,
	936, 6360, 3, 2, 2, 2, 938, 6383, 3, 2, 2, 2, 940, 6420, 3, 2, 2, 2, 942,
	6423, 3, 2, 2, 2, 944, 6434, 3, 2, 2, 2, 946, 6437, 3, 2, 2, 2, 948, 6443,
	3, 2, 2, 2, 950, 6507, 3, 2, 2, 2, 952, 6544, 3, 2, 2, 2, 954, 6546, 3,
	2, 2, 2, 956, 6574, 3, 2, 2, 2, 958, 6576, 3, 2, 2, 2, 960, 6679, 3, 2,
	2, 2, 962, 6684, 3, 2, 2, 2, 964, 6699, 3, 2, 2, 2, 966, 6712, 3, 2, 2,
	2, 968, 6728, 3, 2, 2, 2, 970, 6737, 3, 2, 2, 2, 972, 6748, 3, 2, 2, 2,
	974, 6754, 3, 2, 2, 2, 976, 6768, 3, 2, 2, 2, 978, 6782, 3, 2, 2, 2, 980,
	6784, 3, 2, 2, 2, 982, 6786, 3, 2, 2, 2, 984, 6788, 3, 2, 2, 2, 986, 6790,
	3, 2, 2, 2, 988, 6815, 3, 2, 2, 2, 990, 6819, 3, 2, 2, 2, 992, 6829, 3,
	2, 2, 2, 994, 6843, 3, 2, 2, 2, 996, 6864, 3, 2, 2, 2, 998, 6869, 3, 2,
	2, 2, 1000, 6878, 3, 2, 2, 2, 1002, 6893, 3, 2, 2, 2, 1004, 6904, 3, 2,
	2, 2, 1006, 6911, 3, 2, 2, 2, 1008, 6921, 3, 2, 2, 2, 1010, 6923, 3, 2,
	2, 2, 1012, 6947, 3, 2, 2, 2, 1014, 6971, 3, 2, 2, 2, 1016, 6975, 3, 2,
	2, 2, 1018, 6978, 3, 2, 2, 2, 1020, 6986, 3, 2, 2, 2, 1022, 6994, 3, 2,
	2, 2, 1024, 7001, 3, 2, 2, 2, 1026, 7032, 3, 2, 2, 2, 1028, 7042, 3, 2,
	2, 2, 1030, 7051, 3, 2, 2, 2, 1032, 7060, 3, 2, 2, 2, 1034, 7062, 3, 2,
	2, 2, 1036, 7073, 3, 2, 2, 2, 1038, 7089, 3, 2, 2, 2, 1040, 7093, 3, 2,
	2, 2, 1042, 7095, 3, 2, 2, 2, 1044, 7105, 3, 2, 2, 2, 1046, 7130, 3, 2,
	2, 2, 1048, 7137, 3, 2, 2, 2, 1050, 7159, 3, 2, 2, 2, 1052, 7172, 3, 2,
	2, 2, 1054, 7178, 3, 2, 2, 2, 1056, 7200, 3, 2, 2, 2, 1058, 7240, 3, 2,
	2, 2, 1060, 7244, 3, 2, 2, 2, 1062, 7262, 3, 2, 2, 2, 1064, 1066, 5, 56,
	29, 2, 1065, 1064, 3, 2, 2, 2, 1065, 1066, 3, 2, 2, 2, 1066, 1070, 3, 2,
	2, 2, 1067, 1069, 5, 4, 3, 2, 1068, 1067, 3, 2, 2, 2, 1069, 1072, 3, 2,
	2, 2, 1070, 1068, 3, 2, 2, 2, 1070, 1071, 3, 2, 2, 2, 1071, 1073, 3, 2,
	2, 2, 1072, 1070, 3, 2, 2, 2, 1073, 1074, 7, 2, 2, 3, 1074, 3, 3, 2, 2,
	2, 1075, 1093, 5, 6, 4, 2, 1076, 1093, 5, 664, 333, 2, 1077, 1093, 5, 132,
	67, 2, 1078, 1093, 5, 168, 85, 2, 1079, 1093, 5, 914, 458, 2, 1080, 1093,
	5, 908, 455, 2, 1081, 1083, 5, 530, 266, 2, 1082, 1081, 3, 2, 2, 2, 1083,
	1086, 3, 2, 2, 2, 1084, 1082, 3, 2, 2, 2, 1084, 1085, 3, 2, 2, 2, 1085,
	1089, 3, 2, 2, 2, 1086, 1084, 3, 2, 2, 2, 1087, 1090, 5, 912, 457, 2, 1088,
	1090, 5, 1002, 502, 2, 1089, 1087, 3, 2, 2, 2, 1089, 1088, 3, 2, 2, 2,
	1090, 1093, 3, 2, 2, 2, 1091, 1093, 5, 1010, 506, 2, 1092, 1075, 3, 2,
	2, 2, 1092, 1076, 3, 2, 2, 2, 1092, 1077, 3, 2, 2, 2, 1092, 1078, 3, 2,
	2, 2, 1092, 1079, 3, 2, 2, 2, 1092, 1080, 3, 2, 2, 2, 1092, 1084, 3, 2,
	2, 2, 1092, 1091, 3, 2, 2, 2, 1093, 5, 3, 2, 2, 2, 1094, 1098, 5, 10, 6,
	2, 1095, 1098, 5, 8, 5, 2, 1096, 1098, 5, 388, 195, 2, 1097, 1094, 3, 2,
	2, 2, 1097, 1095, 3, 2, 2, 2, 1097, 1096, 3, 2, 2, 2, 1098, 7, 3, 2, 2,
	2, 1099, 1100, 5, 530, 266, 2, 1100, 9, 3, 2, 2, 2, 1101, 1105, 5, 16,
	9, 2, 1102, 1105, 5, 18, 10, 2, 1103, 1105, 5, 20, 11, 2, 1104, 1101, 3,
	2, 2, 2, 1104, 1102, 3, 2, 2, 2, 1104, 1103, 3, 2, 2, 2, 1105, 11, 3, 2,
	2, 2, 1106, 1107, 9, 2, 2, 2, 1107, 13, 3, 2, 2, 2, 1108, 1109, 5, 12,
	7, 2, 1109, 1110, 5, 26, 14, 2, 1110, 1113, 3, 2, 2, 2, 1111, 1113, 7,
	293, 2, 2, 1112, 1108, 3, 2, 2, 2, 1112, 1111, 3, 2, 2, 2, 1113, 15, 3,
	2, 2, 2, 1114, 1115, 7, 3, 2, 2, 1115, 1116, 5, 14, 8, 2, 1116, 1117, 7,
	365, 2, 2, 1117, 1118, 5, 14, 8, 2, 1118, 17, 3, 2, 2, 2, 1119, 1120, 7,
	4, 2, 2, 1120, 1121, 5, 36, 19, 2, 1121, 19, 3, 2, 2, 2, 1122, 1123, 7,
	5, 2, 2, 1123, 1124, 7, 300, 2, 2, 1124, 21, 3, 2, 2, 2, 1125, 1126, 9,
	3, 2, 2, 1126, 23, 3, 2, 2, 2, 1127, 1128, 9, 4, 2, 2, 1128, 25, 3, 2,
	2, 2, 1129, 1130, 9, 5, 2, 2, 1130, 27, 3, 2, 2, 2, 1131, 1134, 5, 32,
	17, 2, 1132, 1134, 5, 30, 16, 2, 1133, 1131, 3, 2, 2, 2, 1133, 1132, 3,
	2, 2, 2, 1134, 29, 3, 2, 2, 2, 1135, 1136, 9, 6, 2, 2, 1136, 31, 3, 2,
	2, 2, 1137, 1138, 9, 7, 2, 2, 1138, 33, 3, 2, 2, 2, 1139, 1140, 9, 8, 2,
	2, 1140, 35, 3, 2, 2, 2, 1141, 1142, 9, 9, 2, 2, 1142, 37, 3, 2, 2, 2,
	1143, 1144, 9, 10, 2, 2, 1144, 39, 3, 2, 2, 2, 1145, 1149, 7, 357, 2, 2,
	1146, 1149, 7, 358, 2, 2, 1147, 1149, 5, 38, 20, 2, 1148, 1145, 3, 2, 2,
	2, 1148, 1146, 3, 2, 2, 2, 1148, 1147, 3, 2, 2, 2, 1149, 41, 3, 2, 2, 2,
	1150, 1151, 9, 11, 2, 2, 1151, 43, 3, 2, 2, 2, 1152, 1155, 7, 248, 2, 2,
	1153, 1154, 7, 330, 2, 2, 1154, 1156, 7, 240, 2, 2, 1155, 1153, 3, 2, 2,
	2, 1155, 1156, 3, 2, 2, 2, 1156, 1159, 3, 2, 2, 2, 1157, 1159, 7, 240,
	2, 2, 1158, 1152, 3, 2, 2, 2, 1158, 1157, 3, 2, 2, 2, 1159, 45, 3, 2, 2,
	2, 1160, 1167, 7, 295, 2, 2, 1161, 1163, 7, 298, 2, 2, 1162, 1161, 3, 2,
	2, 2, 1162, 1163, 3, 2, 2, 2, 1163, 1164, 3, 2, 2, 2, 1164, 1167, 7, 294,
	2, 2, 1165, 1167, 7, 298, 2, 2, 1166, 1160, 3, 2, 2, 2, 1166, 1162, 3,
	2, 2, 2, 1166, 1165, 3, 2, 2, 2, 1167, 47, 3, 2, 2, 2, 1168, 1169, 9, 12,
	2, 2, 1169, 49, 3, 2, 2, 2, 1170, 1171, 9, 13, 2, 2, 1171, 51, 3, 2, 2,
	2, 1172, 1173, 9, 14, 2, 2, 1173, 53, 3, 2, 2, 2, 1174, 1177, 5, 46, 24,
	2, 1175, 1177, 5, 48, 25, 2, 1176, 1174, 3, 2, 2, 2, 1176, 1175, 3, 2,
	2, 2, 1177, 55, 3, 2, 2, 2, 1178, 1179, 7, 252, 2, 2, 1179, 1186, 5, 14,
	8, 2, 1180, 1184, 7, 365, 2, 2, 1181, 1182, 7, 307, 2, 2, 1182, 1184, 7,
	251, 2, 2, 1183, 1180, 3, 2, 2, 2, 1183, 1181, 3, 2, 2, 2, 1184, 1185,
	3, 2, 2, 2, 1185, 1187, 5, 14, 8, 2, 1186, 1183, 3, 2, 2, 2, 1186, 1187,
	3, 2, 2, 2, 1187, 1188, 3, 2, 2, 2, 1188, 1189, 7, 307, 2, 2, 1189, 1200,
	3, 2, 2, 2, 1190, 1191, 7, 251, 2, 2, 1191, 1192, 5, 14, 8, 2, 1192, 1197,
	7, 307, 2, 2, 1193, 1194, 7, 252, 2, 2, 1194, 1195, 5, 14, 8, 2, 1195,
	1196, 7, 307, 2, 2, 1196, 1198, 3, 2, 2, 2, 1197, 1193, 3, 2, 2, 2, 1197,
	1198, 3, 2, 2, 2, 1198, 1200, 3, 2, 2, 2, 1199, 1178, 3, 2, 2, 2, 1199,
	1190, 3, 2, 2, 2, 1200, 57, 3, 2, 2, 2, 1201, 1202, 9, 15, 2, 2, 1202,
	59, 3, 2, 2, 2, 1203, 1204, 9, 16, 2, 2, 1204, 61, 3, 2, 2, 2, 1205, 1206,
	9, 17, 2, 2, 1206, 63, 3, 2, 2, 2, 1207, 1208, 9, 18, 2, 2, 1208, 65, 3,
	2, 2, 2, 1209, 1210, 9, 19, 2, 2, 1210, 67, 3, 2, 2, 2, 1211, 1230, 7,
	308, 2, 2, 1212, 1213, 7, 128, 2, 2, 1213, 1214, 7, 329, 2, 2, 1214, 1231,
	5, 72, 37, 2, 1215, 1216, 7, 129, 2, 2, 1216, 1217, 7, 329, 2, 2, 1217,
	1231, 5, 70, 36, 2, 1218, 1219, 5, 70, 36, 2, 1219, 1222, 7, 329, 2, 2,
	1220, 1223, 7, 129, 2, 2, 1221, 1223, 5, 72, 37, 2, 1222, 1220, 3, 2, 2,
	2, 1222, 1221, 3, 2, 2, 2, 1223, 1231, 3, 2, 2, 2, 1224, 1225, 5, 72, 37,
	2, 1225, 1228, 7, 329, 2, 2, 1226, 1229, 7, 128, 2, 2, 1227, 1229, 5, 70,
	36, 2, 1228, 1226, 3, 2, 2, 2, 1228, 1227, 3, 2, 2, 2, 1229, 1231, 3, 2,
	2, 2, 1230, 1212, 3, 2, 2, 2, 1230, 1215, 3, 2, 2, 2, 1230, 1218, 3, 2,
	2, 2, 1230, 1224, 3, 2, 2, 2, 1231, 1232, 3, 2, 2, 2, 1232, 1233, 7, 309,
	2, 2, 1233, 69, 3, 2, 2, 2, 1234, 1235, 9, 20, 2, 2, 1235, 71, 3, 2, 2,
	2, 1236, 1237, 9, 21, 2, 2, 1237, 73, 3, 2, 2, 2, 1238, 1239, 7, 308, 2,
	2, 1239, 1240, 9, 22, 2, 2, 1240, 1241, 7, 309, 2, 2, 1241, 75, 3, 2, 2,
	2, 1242, 1243, 9, 23, 2, 2, 1243, 77, 3, 2, 2, 2, 1244, 1245, 9, 24, 2,
	2, 1245, 79, 3, 2, 2, 2, 1246, 1247, 9, 25, 2, 2, 1247, 81, 3, 2, 2, 2,
	1248, 1249, 9, 26, 2, 2, 1249, 83, 3, 2, 2, 2, 1250, 1253, 5, 82, 42, 2,
	1251, 1253, 5, 80, 41, 2, 1252, 1250, 3, 2, 2, 2, 1252, 1251, 3, 2, 2,
	2, 1253, 85, 3, 2, 2, 2, 1254, 1256, 7, 195, 2, 2, 1255, 1254, 3, 2, 2,
	2, 1255, 1256, 3, 2, 2, 2, 1256, 1257, 3, 2, 2, 2, 1257, 1260, 7, 276,
	2, 2, 1258, 1260, 5, 80, 41, 2, 1259, 1255, 3, 2, 2, 2, 1259, 1258, 3,
	2, 2, 2, 1260, 87, 3, 2, 2, 2, 1261, 1262, 9, 27, 2, 2, 1262, 89, 3, 2,
	2, 2, 1263, 1264, 9, 28, 2, 2, 1264, 91, 3, 2, 2, 2, 1265, 1266, 9, 29,
	2, 2, 1266, 93, 3, 2, 2, 2, 1267, 1268, 9, 30, 2, 2, 1268, 95, 3, 2, 2,
	2, 1269, 1270, 9, 31, 2, 2, 1270, 97, 3, 2, 2, 2, 1271, 1272, 9, 32, 2,
	2, 1272, 99, 3, 2, 2, 2, 1273, 1274, 9, 33, 2, 2, 1274, 101, 3, 2, 2, 2,
	1275, 1276, 9, 34, 2, 2, 1276, 103, 3, 2, 2, 2, 1277, 1278, 9, 35, 2, 2,
	1278, 105, 3, 2, 2, 2, 1279, 1280, 9, 36, 2, 2, 1280, 107, 3, 2, 2, 2,
	1281, 1282, 9, 37, 2, 2, 1282, 109, 3, 2, 2, 2, 1283, 1284, 9, 38, 2, 2,
	1284, 111, 3, 2, 2, 2, 1285, 1291, 7, 266, 2, 2, 1286, 1291, 7, 48, 2,
	2, 1287, 1291, 7, 177, 2, 2, 1288, 1291, 7, 291, 2, 2, 1289, 1291, 5, 26,
	14, 2, 1290, 1285, 3, 2, 2, 2, 1290, 1286, 3, 2, 2, 2, 1290, 1287, 3, 2,
	2, 2, 1290, 1288, 3, 2, 2, 2, 1290, 1289, 3, 2, 2, 2, 1291, 113, 3, 2,
	2, 2, 1292, 1293, 9, 39, 2, 2, 1293, 115, 3, 2, 2, 2, 1294, 1295, 9, 36,
	2, 2, 1295, 117, 3, 2, 2, 2, 1296, 1297, 9, 40, 2, 2, 1297, 119, 3, 2,
	2, 2, 1298, 1299, 9, 41, 2, 2, 1299, 121, 3, 2, 2, 2, 1300, 1301, 9, 42,
	2, 2, 1301, 123, 3, 2, 2, 2, 1302, 1303, 9, 43, 2, 2, 1303, 125, 3, 2,
	2, 2, 1304, 1305, 9, 44, 2, 2, 1305, 127, 3, 2, 2, 2, 1306, 1308, 5, 530,
	266, 2, 1307, 1306, 3, 2, 2, 2, 1308, 1311, 3, 2, 2, 2, 1309, 1307, 3,
	2, 2, 2, 1309, 1310, 3, 2, 2, 2, 1310, 1312, 3, 2, 2, 2, 1311, 1309, 3,
	2, 2, 2, 1312, 1313, 7, 184, 2, 2, 1313, 1314, 5, 26, 14, 2, 1314, 1315,
	7, 308, 2, 2, 1315, 1316, 5, 476, 239, 2, 1316, 1317, 7, 309, 2, 2, 1317,
	1318, 7, 307, 2, 2, 1318, 129, 3, 2, 2, 2, 1319, 1321, 5, 530, 266, 2,
	1320, 1319, 3, 2, 2, 2, 1321, 1324, 3, 2, 2, 2, 1322, 1320, 3, 2, 2, 2,
	1322, 1323, 3, 2, 2, 2, 1323, 1325, 3, 2, 2, 2, 1324, 1322, 3, 2, 2, 2,
	1325, 1326, 7, 184, 2, 2, 1326, 1327, 5, 26, 14, 2, 1327, 1328, 7, 308,
	2, 2, 1328, 1329, 5, 134, 68, 2, 1329, 1330, 7, 309, 2, 2, 1330, 1331,
	7, 307, 2, 2, 1331, 131, 3, 2, 2, 2, 1332, 1335, 7, 115, 2, 2, 1333, 1336,
	5, 128, 65, 2, 1334, 1336, 5, 130, 66, 2, 1335, 1333, 3, 2, 2, 2, 1335,
	1334, 3, 2, 2, 2, 1336, 1373, 3, 2, 2, 2, 1337, 1338, 5, 128, 65, 2, 1338,
	1339, 5, 136, 69, 2, 1339, 1355, 3, 2, 2, 2, 1340, 1342, 5, 530, 266, 2,
	1341, 1340, 3, 2, 2, 2, 1342, 1345, 3, 2, 2, 2, 1343, 1341, 3, 2, 2, 2,
	1343, 1344, 3, 2, 2, 2, 1344, 1346, 3, 2, 2, 2, 1345, 1343, 3, 2, 2, 2,
	1346, 1347, 7, 184, 2, 2, 1347, 1348, 5, 26, 14, 2, 1348, 1349, 7, 308,
	2, 2, 1349, 1350, 7, 330, 2, 2, 1350, 1351, 7, 364, 2, 2, 1351, 1352, 7,
	309, 2, 2, 1352, 1353, 7, 307, 2, 2, 1353, 1355, 3, 2, 2, 2, 1354, 1337,
	3, 2, 2, 2, 1354, 1343, 3, 2, 2, 2, 1355, 1359, 3, 2, 2, 2, 1356, 1358,
	5, 136, 69, 2, 1357, 1356, 3, 2, 2, 2, 1358, 1361, 3, 2, 2, 2, 1359, 1357,
	3, 2, 2, 2, 1359, 1360, 3, 2, 2, 2, 1360, 1364, 3, 2, 2, 2, 1361, 1359,
	3, 2, 2, 2, 1362, 1364, 5, 130, 66, 2, 1363, 1354, 3, 2, 2, 2, 1363, 1362,
	3, 2, 2, 2, 1364, 1365, 3, 2, 2, 2, 1365, 1366, 5, 144, 73, 2, 1366, 1370,
	7, 103, 2, 2, 1367, 1368, 7, 332, 2, 2, 1368, 1371, 5, 26, 14, 2, 1369,
	1371, 3, 2, 2, 2, 1370, 1367, 3, 2, 2, 2, 1370, 1369, 3, 2, 2, 2, 1371,
	1373, 3, 2, 2, 2, 1372, 1332, 3, 2, 2, 2, 1372, 1363, 3, 2, 2, 2, 1373,
	133, 3, 2, 2, 2, 1374, 1377, 5, 138, 70, 2, 1375, 1376, 7, 329, 2, 2, 1376,
	1378, 5, 140, 71, 2, 1377, 1375, 3, 2, 2, 2, 1378, 1379, 3, 2, 2, 2, 1379,
	1377, 3, 2, 2, 2, 1379, 1380, 3, 2, 2, 2, 1380, 135, 3, 2, 2, 2, 1381,
	1385, 5, 138, 70, 2, 1382, 1385, 5, 140, 71, 2, 1383, 1385, 5, 142, 72,
	2, 1384, 1381, 3, 2, 2, 2, 1384, 1382, 3, 2, 2, 2, 1384, 1383, 3, 2, 2,
	2, 1385, 1386, 3, 2, 2, 2, 1386, 1387, 7, 307, 2, 2, 1387, 137, 3, 2, 2,
	2, 1388, 1390, 5, 530, 266, 2, 1389, 1388, 3, 2, 2, 2, 1390, 1393, 3, 2,
	2, 2, 1391, 1389, 3, 2, 2, 2, 1391, 1392, 3, 2, 2, 2, 1392, 1394, 3, 2,
	2, 2, 1393, 1391, 3, 2, 2, 2, 1394, 1402, 7, 178, 2, 2, 1395, 1396, 7,
	205, 2, 2, 1396, 1399, 5, 26, 14, 2, 1397, 1398, 7, 340, 2, 2, 1398, 1400,
	5, 596, 299, 2, 1399, 1397, 3, 2, 2, 2, 1399, 1400, 3, 2, 2, 2, 1400, 1403,
	3, 2, 2, 2, 1401, 1403, 5, 26, 14, 2, 1402, 1395, 3, 2, 2, 2, 1402, 1401,
	3, 2, 2, 2, 1403, 139, 3, 2, 2, 2, 1404, 1406, 5, 530, 266, 2, 1405, 1404,
	3, 2, 2, 2, 1406, 1409, 3, 2, 2, 2, 1407, 1405, 3, 2, 2, 2, 1407, 1408,
	3, 2, 2, 2, 1408, 1410, 3, 2, 2, 2, 1409, 1407, 3, 2, 2, 2, 1410, 1411,
	7, 140, 2, 2, 1411, 1412, 5, 764, 383, 2, 1412, 141, 3, 2, 2, 2, 1413,
	1415, 5, 530, 266, 2, 1414, 1413, 3, 2, 2, 2, 1415, 1418, 3, 2, 2, 2, 1416,
	1414, 3, 2, 2, 2, 1416, 1417, 3, 2, 2, 2, 1417, 1419, 3, 2, 2, 2, 1418,
	1416, 3, 2, 2, 2, 1419, 1420, 7, 205, 2, 2, 1420, 1421, 5, 26, 14, 2, 1421,
	143, 3, 2, 2, 2, 1422, 1425, 5, 146, 74, 2, 1423, 1425, 5, 150, 76, 2,
	1424, 1422, 3, 2, 2, 2, 1424, 1423, 3, 2, 2, 2, 1425, 145, 3, 2, 2, 2,
	1426, 1428, 7, 245, 2, 2, 1427, 1429, 5, 148, 75, 2, 1428, 1427, 3, 2,
	2, 2, 1429, 1430, 3, 2, 2, 2, 1430, 1428, 3, 2, 2, 2, 1430, 1431, 3, 2,
	2, 2, 1431, 1432, 3, 2, 2, 2, 1432, 1433, 7, 389, 2, 2, 1433, 147, 3, 2,
	2, 2, 1434, 1435, 5, 158, 80, 2, 1435, 1436, 7, 332, 2, 2, 1436, 1437,
	7, 390, 2, 2, 1437, 1438, 7, 307, 2, 2, 1438, 149, 3, 2, 2, 2, 1439, 1441,
	5, 152, 77, 2, 1440, 1439, 3, 2, 2, 2, 1440, 1441, 3, 2, 2, 2, 1441, 1442,
	3, 2, 2, 2, 1442, 1444, 7, 245, 2, 2, 1443, 1445, 5, 154, 78, 2, 1444,
	1443, 3, 2, 2, 2, 1445, 1446, 3, 2, 2, 2, 1446, 1444, 3, 2, 2, 2, 1446,
	1447, 3, 2, 2, 2, 1447, 1448, 3, 2, 2, 2, 1448, 1449, 7, 389, 2, 2, 1449,
	151, 3, 2, 2, 2, 1450, 1451, 7, 138, 2, 2, 1451, 1452, 5, 26, 14, 2, 1452,
	1453, 7, 340, 2, 2, 1453, 1454, 5, 46, 24, 2, 1454, 1455, 7, 307, 2, 2,
	1455, 153, 3, 2, 2, 2, 1456, 1457, 5, 156, 79, 2, 1457, 1458, 7, 332, 2,
	2, 1458, 1459, 5, 164, 83, 2, 1459, 1460, 7, 332, 2, 2, 1460, 1461, 5,
	166, 84, 2, 1461, 1462, 7, 307, 2, 2, 1462, 155, 3, 2, 2, 2, 1463, 1466,
	5, 158, 80, 2, 1464, 1466, 5, 160, 81, 2, 1465, 1463, 3, 2, 2, 2, 1465,
	1464, 3, 2, 2, 2, 1466, 157, 3, 2, 2, 2, 1467, 1469, 7, 390, 2, 2, 1468,
	1467, 3, 2, 2, 2, 1469, 1470, 3, 2, 2, 2, 1470, 1468, 3, 2, 2, 2, 1470,
	1471, 3, 2, 2, 2, 1471, 159, 3, 2, 2, 2, 1472, 1474, 7, 390, 2, 2, 1473,
	1472, 3, 2, 2, 2, 1474, 1477, 3, 2, 2, 2, 1475, 1473, 3, 2, 2, 2, 1475,
	1476, 3, 2, 2, 2, 1476, 1478, 3, 2, 2, 2, 1477, 1475, 3, 2, 2, 2, 1478,
	1482, 5, 162, 82, 2, 1479, 1481, 7, 390, 2, 2, 1480, 1479, 3, 2, 2, 2,
	1481, 1484, 3, 2, 2, 2, 1482, 1480, 3, 2, 2, 2, 1482, 1483, 3, 2, 2, 2,
	1483, 161, 3, 2, 2, 2, 1484, 1482, 3, 2, 2, 2, 1485, 1486, 7, 308, 2, 2,
	1486, 1487, 7, 390, 2, 2, 1487, 1488, 7, 390, 2, 2, 1488, 1491, 7, 309,
	2, 2, 1489, 1491, 7, 391, 2, 2, 1490, 1485, 3, 2, 2, 2, 1490, 1489, 3,
	2, 2, 2, 1491, 163, 3, 2, 2, 2, 1492, 1493, 7, 390, 2, 2, 1493, 165, 3,
	2, 2, 2, 1494, 1495, 9, 45, 2, 2, 1495, 167, 3, 2, 2, 2, 1496, 1497, 7,
	115, 2, 2, 1497, 1531, 5, 170, 86, 2, 1498, 1514, 5, 170, 86, 2, 1499,
	1501, 5, 530, 266, 2, 1500, 1499, 3, 2, 2, 2, 1501, 1504, 3, 2, 2, 2, 1502,
	1500, 3, 2, 2, 2, 1502, 1503, 3, 2, 2, 2, 1503, 1505, 3, 2, 2, 2, 1504,
	1502, 3, 2, 2, 2, 1505, 1506, 7, 146, 2, 2, 1506, 1507, 5, 26, 14, 2, 1507,
	1508, 7, 308, 2, 2, 1508, 1509, 7, 330, 2, 2, 1509, 1510, 7, 364, 2, 2,
	1510, 1511, 7, 309, 2, 2, 1511, 1512, 7, 307, 2, 2, 1512, 1514, 3, 2, 2,
	2, 1513, 1498, 3, 2, 2, 2, 1513, 1502, 3, 2, 2, 2, 1514, 1516, 3, 2, 2,
	2, 1515, 1517, 5, 56, 29, 2, 1516, 1515, 3, 2, 2, 2, 1516, 1517, 3, 2,
	2, 2, 1517, 1521, 3, 2, 2, 2, 1518, 1520, 5, 172, 87, 2, 1519, 1518, 3,
	2, 2, 2, 1520, 1523, 3, 2, 2, 2, 1521, 1519, 3, 2, 2, 2, 1521, 1522, 3,
	2, 2, 2, 1522, 1524, 3, 2, 2, 2, 1523, 1521, 3, 2, 2, 2, 1524, 1528, 7,
	100, 2, 2, 1525, 1526, 7, 332, 2, 2, 1526, 1529, 5, 26, 14, 2, 1527, 1529,
	3, 2, 2, 2, 1528, 1525, 3, 2, 2, 2, 1528, 1527, 3, 2, 2, 2, 1529, 1531,
	3, 2, 2, 2, 1530, 1496, 3, 2, 2, 2, 1530, 1513, 3, 2, 2, 2, 1531, 169,
	3, 2, 2, 2, 1532, 1534, 5, 530, 266, 2, 1533, 1532, 3, 2, 2, 2, 1534, 1537,
	3, 2, 2, 2, 1535, 1533, 3, 2, 2, 2, 1535, 1536, 3, 2, 2, 2, 1536, 1538,
	3, 2, 2, 2, 1537, 1535, 3, 2, 2, 2, 1538, 1540, 7, 146, 2, 2, 1539, 1541,
	5, 58, 30, 2, 1540, 1539, 3, 2, 2, 2, 1540, 1541, 3, 2, 2, 2, 1541, 1542,
	3, 2, 2, 2, 1542, 1546, 5, 26, 14, 2, 1543, 1545, 5, 388, 195, 2, 1544,
	1543, 3, 2, 2, 2, 1545, 1548, 3, 2, 2, 2, 1546, 1544, 3, 2, 2, 2, 1546,
	1547, 3, 2, 2, 2, 1547, 1550, 3, 2, 2, 2, 1548, 1546, 3, 2, 2, 2, 1549,
	1551, 5, 788, 395, 2, 1550, 1549, 3, 2, 2, 2, 1550, 1551, 3, 2, 2, 2, 1551,
	1553, 3, 2, 2, 2, 1552, 1554, 5, 794, 398, 2, 1553, 1552, 3, 2, 2, 2, 1553,
	1554, 3, 2, 2, 2, 1554, 1555, 3, 2, 2, 2, 1555, 1556, 7, 307, 2, 2, 1556,
	171, 3, 2, 2, 2, 1557, 1558, 5, 804, 403, 2, 1558, 1559, 7, 307, 2, 2,
	1559, 1608, 3, 2, 2, 2, 1560, 1608, 5, 1030, 516, 2, 1561, 1563, 5, 530,
	266, 2, 1562, 1561, 3, 2, 2, 2, 1563, 1566, 3, 2, 2, 2, 1564, 1562, 3,
	2, 2, 2, 1564, 1565, 3, 2, 2, 2, 1565, 1601, 3, 2, 2, 2, 1566, 1564, 3,
	2, 2, 2, 1567, 1571, 5, 194, 98, 2, 1568, 1571, 5, 372, 187, 2, 1569, 1571,
	5, 374, 188, 2, 1570, 1567, 3, 2, 2, 2, 1570, 1568, 3, 2, 2, 2, 1570, 1569,
	3, 2, 2, 2, 1570, 1571, 3, 2, 2, 2, 1571, 1572, 3, 2, 2, 2, 1572, 1602,
	7, 307, 2, 2, 1573, 1602, 5, 786, 394, 2, 1574, 1602, 5, 776, 389, 2, 1575,
	1602, 5, 880, 441, 2, 1576, 1602, 5, 866, 434, 2, 1577, 1602, 5, 894, 448,
	2, 1578, 1602, 5, 872, 437, 2, 1579, 1602, 5, 884, 443, 2, 1580, 1602,
	5, 896, 449, 2, 1581, 1602, 5, 902, 452, 2, 1582, 1602, 5, 948, 475, 2,
	1583, 1602, 5, 472, 237, 2, 1584, 1602, 5, 932, 467, 2, 1585, 1602, 5,
	926, 464, 2, 1586, 1602, 5, 380, 191, 2, 1587, 1602, 5, 784, 393, 2, 1588,
	1602, 5, 452, 227, 2, 1589, 1602, 5, 992, 497, 2, 1590, 1602, 5, 296, 149,
	2, 1591, 1602, 5, 1002, 502, 2, 1592, 1602, 5, 938, 470, 2, 1593, 1602,
	5, 1026, 514, 2, 1594, 1602, 5, 192, 97, 2, 1595, 1602, 5, 208, 105, 2,
	1596, 1602, 5, 898, 450, 2, 1597, 1602, 5, 1034, 518, 2, 1598, 1602, 5,
	1040, 521, 2, 1599, 1602, 5, 1056, 529, 2, 1600, 1602, 5, 864, 433, 2,
	1601, 1570, 3, 2, 2, 2, 1601, 1573, 3, 2, 2, 2, 1601, 1574, 3, 2, 2, 2,
	1601, 1575, 3, 2, 2, 2, 1601, 1576, 3, 2, 2, 2, 1601, 1577, 3, 2, 2, 2,
	1601, 1578, 3, 2, 2, 2, 1601, 1579, 3, 2, 2, 2, 1601, 1580, 3, 2, 2, 2,
	1601, 1581, 3, 2, 2, 2, 1601, 1582, 3, 2, 2, 2, 1601, 1583, 3, 2, 2, 2,
	1601, 1584, 3, 2, 2, 2, 1601, 1585, 3, 2, 2, 2, 1601, 1586, 3, 2, 2, 2,
	1601, 1587, 3, 2, 2, 2, 1601, 1588, 3, 2, 2, 2, 1601, 1589, 3, 2, 2, 2,
	1601, 1590, 3, 2, 2, 2, 1601, 1591, 3, 2, 2, 2, 1601, 1592, 3, 2, 2, 2,
	1601, 1593, 3, 2, 2, 2, 1601, 1594, 3, 2, 2, 2, 1601, 1595, 3, 2, 2, 2,
	1601, 1596, 3, 2, 2, 2, 1601, 1597, 3, 2, 2, 2, 1601, 1598, 3, 2, 2, 2,
	1601, 1599, 3, 2, 2, 2, 1601, 1600, 3, 2, 2, 2, 1602, 1608, 3, 2, 2, 2,
	1603, 1608, 5, 914, 458, 2, 1604, 1608, 5, 174, 88, 2, 1605, 1608, 5, 168,
	85, 2, 1606, 1608, 5, 56, 29, 2, 1607, 1557, 3, 2, 2, 2, 1607, 1560, 3,
	2, 2, 2, 1607, 1564, 3, 2, 2, 2, 1607, 1603, 3, 2, 2, 2, 1607, 1604, 3,
	2, 2, 2, 1607, 1605, 3, 2, 2, 2, 1607, 1606, 3, 2, 2, 2, 1608, 173, 3,
	2, 2, 2, 1609, 1610, 7, 161, 2, 2, 1610, 1615, 5, 176, 89, 2, 1611, 1612,
	7, 329, 2, 2, 1612, 1614, 5, 176, 89, 2, 1613, 1611, 3, 2, 2, 2, 1614,
	1617, 3, 2, 2, 2, 1615, 1613, 3, 2, 2, 2, 1615, 1616, 3, 2, 2, 2, 1616,
	1618, 3, 2, 2, 2, 1617, 1615, 3, 2, 2, 2, 1618, 1619, 7, 307, 2, 2, 1619,
	175, 3, 2, 2, 2, 1620, 1621, 5, 26, 14, 2, 1621, 1622, 7, 308, 2, 2, 1622,
	1627, 5, 178, 90, 2, 1623, 1624, 7, 329, 2, 2, 1624, 1626, 5, 178, 90,
	2, 1625, 1623, 3, 2, 2, 2, 1626, 1629, 3, 2, 2, 2, 1627, 1625, 3, 2, 2,
	2, 1627, 1628, 3, 2, 2, 2, 1628, 1630, 3, 2, 2, 2, 1629, 1627, 3, 2, 2,
	2, 1630, 1631, 7, 309, 2, 2, 1631, 177, 3, 2, 2, 2, 1632, 1634, 5, 530,
	266, 2, 1633, 1632, 3, 2, 2, 2, 1634, 1637, 3, 2, 2, 2, 1635, 1633, 3,
	2, 2, 2, 1635, 1636, 3, 2, 2, 2, 1636, 1641, 3, 2, 2, 2, 1637, 1635, 3,
	2, 2, 2, 1638, 1642, 5, 182, 92, 2, 1639, 1642, 5, 186, 94, 2, 1640, 1642,
	5, 180, 91, 2, 1641, 1638, 3, 2, 2, 2, 1641, 1639, 3, 2, 2, 2, 1641, 1640,
	3, 2, 2, 2, 1642, 179, 3, 2, 2, 2, 1643, 1644, 7, 71, 2, 2, 1644, 1645,
	5, 26, 14, 2, 1645, 181, 3, 2, 2, 2, 1646, 1647, 5, 60, 31, 2, 1647, 1652,
	5, 184, 93, 2, 1648, 1649, 7, 329, 2, 2, 1649, 1651, 5, 184, 93, 2, 1650,
	1648, 3, 2, 2, 2, 1651, 1654, 3, 2, 2, 2, 1652, 1650, 3, 2, 2, 2, 1652,
	1653, 3, 2, 2, 2, 1653, 183, 3, 2, 2, 2, 1654, 1652, 3, 2, 2, 2, 1655,
	1658, 5, 564, 283, 2, 1656, 1658, 5, 26, 14, 2, 1657, 1655, 3, 2, 2, 2,
	1657, 1656, 3, 2, 2, 2, 1658, 185, 3, 2, 2, 2, 1659, 1660, 5, 110, 56,
	2, 1660, 1665, 5, 188, 95, 2, 1661, 1662, 7, 329, 2, 2, 1662, 1664, 5,
	188, 95, 2, 1663, 1661, 3, 2, 2, 2, 1664, 1667, 3, 2, 2, 2, 1665, 1663,
	3, 2, 2, 2, 1665, 1666, 3, 2, 2, 2, 1666, 187, 3, 2, 2, 2, 1667, 1665,
	3, 2, 2, 2, 1668, 1671, 5, 882, 442, 2, 1669, 1671, 5, 26, 14, 2, 1670,
	1668, 3, 2, 2, 2, 1670, 1669, 3, 2, 2, 2, 1671, 189, 3, 2, 2, 2, 1672,
	1681, 5, 196, 99, 2, 1673, 1675, 5, 530, 266, 2, 1674, 1673, 3, 2, 2, 2,
	1675, 1678, 3, 2, 2, 2, 1676, 1674, 3, 2, 2, 2, 1676, 1677, 3, 2, 2, 2,
	1677, 1679, 3, 2, 2, 2, 1678, 1676, 3, 2, 2, 2, 1679, 1681, 7, 307, 2,
	2, 1680, 1672, 3, 2, 2, 2, 1680, 1676, 3, 2, 2, 2, 1681, 191, 3, 2, 2,
	2, 1682, 1683, 7, 138, 2, 2, 1683, 1684, 5, 190, 96, 2, 1684, 193, 3, 2,
	2, 2, 1685, 1691, 7, 83, 2, 2, 1686, 1687, 7, 71, 2, 2, 1687, 1692, 5,
	26, 14, 2, 1688, 1689, 7, 86, 2, 2, 1689, 1690, 7, 131, 2, 2, 1690, 1692,
	5, 470, 236, 2, 1691, 1686, 3, 2, 2, 2, 1691, 1688, 3, 2, 2, 2, 1692, 195,
	3, 2, 2, 2, 1693, 1694, 5, 26, 14, 2, 1694, 1695, 7, 332, 2, 2, 1695, 1697,
	3, 2, 2, 2, 1696, 1693, 3, 2, 2, 2, 1696, 1697, 3, 2, 2, 2, 1697, 1701,
	3, 2, 2, 2, 1698, 1700, 5, 530, 266, 2, 1699, 1698, 3, 2, 2, 2, 1700, 1703,
	3, 2, 2, 2, 1701, 1699, 3, 2, 2, 2, 1701, 1702, 3, 2, 2, 2, 1702, 1704,
	3, 2, 2, 2, 1703, 1701, 3, 2, 2, 2, 1704, 1705, 5, 198, 100, 2, 1705, 197,
	3, 2, 2, 2, 1706, 1714, 5, 210, 106, 2, 1707, 1714, 5, 228, 115, 2, 1708,
	1714, 5, 230, 116, 2, 1709, 1714, 5, 598, 300, 2, 1710, 1714, 5, 200, 101,
	2, 1711, 1714, 5, 594, 298, 2, 1712, 1714, 5, 204, 103, 2, 1713, 1706,
	3, 2, 2, 2, 1713, 1707, 3, 2, 2, 2, 1713, 1708, 3, 2, 2, 2, 1713, 1709,
	3, 2, 2, 2, 1713, 1710, 3, 2, 2, 2, 1713, 1711, 3, 2, 2, 2, 1713, 1712,
	3, 2, 2, 2, 1714, 1715, 3, 2, 2, 2, 1715, 1716, 7, 307, 2, 2, 1716, 1734,
	3, 2, 2, 2, 1717, 1734, 5, 200, 101, 2, 1718, 1734, 5, 240, 121, 2, 1719,
	1734, 5, 256, 129, 2, 1720, 1734, 5, 258, 130, 2, 1721, 1734, 5, 260, 131,
	2, 1722, 1734, 5, 262, 132, 2, 1723, 1734, 5, 264, 133, 2, 1724, 1734,
	5, 278, 140, 2, 1725, 1734, 5, 238, 120, 2, 1726, 1734, 5, 212, 107, 2,
	1727, 1734, 5, 236, 119, 2, 1728, 1734, 5, 280, 141, 2, 1729, 1734, 5,
	292, 147, 2, 1730, 1734, 5, 326, 164, 2, 1731, 1734, 5, 250, 126, 2, 1732,
	1734, 5, 358, 180, 2, 1733, 1713, 3, 2, 2, 2, 1733, 1717, 3, 2, 2, 2, 1733,
	1718, 3, 2, 2, 2, 1733, 1719, 3, 2, 2, 2, 1733, 1720, 3, 2, 2, 2, 1733,
	1721, 3, 2, 2, 2, 1733, 1722, 3, 2, 2, 2, 1733, 1723, 3, 2, 2, 2, 1733,
	1724, 3, 2, 2, 2, 1733, 1725, 3, 2, 2, 2, 1733, 1726, 3, 2, 2, 2, 1733,
	1727, 3, 2, 2, 2, 1733, 1728, 3, 2, 2, 2, 1733, 1729, 3, 2, 2, 2, 1733,
	1730, 3, 2, 2, 2, 1733, 1731, 3, 2, 2, 2, 1733, 1732, 3, 2, 2, 2, 1734,
	199, 3, 2, 2, 2, 1735, 1760, 7, 303, 2, 2, 1736, 1737, 7, 308, 2, 2, 1737,
	1740, 5, 554, 278, 2, 1738, 1739, 7, 329, 2, 2, 1739, 1741, 5, 566, 284,
	2, 1740, 1738, 3, 2, 2, 2, 1740, 1741, 3, 2, 2, 2, 1741, 1744, 3, 2, 2,
	2, 1742, 1743, 7, 329, 2, 2, 1743, 1745, 5, 466, 234, 2, 1744, 1742, 3,
	2, 2, 2, 1744, 1745, 3, 2, 2, 2, 1745, 1746, 3, 2, 2, 2, 1746, 1747, 7,
	309, 2, 2, 1747, 1761, 3, 2, 2, 2, 1748, 1749, 7, 308, 2, 2, 1749, 1752,
	5, 566, 284, 2, 1750, 1751, 7, 329, 2, 2, 1751, 1753, 5, 466, 234, 2, 1752,
	1750, 3, 2, 2, 2, 1752, 1753, 3, 2, 2, 2, 1753, 1754, 3, 2, 2, 2, 1754,
	1755, 7, 309, 2, 2, 1755, 1761, 3, 2, 2, 2, 1756, 1757, 7, 308, 2, 2, 1757,
	1758, 5, 196, 99, 2, 1758, 1759, 7, 309, 2, 2, 1759, 1761, 3, 2, 2, 2,
	1760, 1736, 3, 2, 2, 2, 1760, 1748, 3, 2, 2, 2, 1760, 1756, 3, 2, 2, 2,
	1760, 1761, 3, 2, 2, 2, 1761, 201, 3, 2, 2, 2, 1762, 1769, 7, 384, 2, 2,
	1763, 1764, 7, 308, 2, 2, 1764, 1765, 5, 600, 301, 2, 1765, 1766, 7, 309,
	2, 2, 1766, 1770, 3, 2, 2, 2, 1767, 1770, 5, 46, 24, 2, 1768, 1770, 5,
	26, 14, 2, 1769, 1763, 3, 2, 2, 2, 1769, 1767, 3, 2, 2, 2, 1769, 1768,
	3, 2, 2, 2, 1770, 203, 3, 2, 2, 2, 1771, 1772, 5, 206, 104, 2, 1772, 1773,
	7, 344, 2, 2, 1773, 1774, 5, 202, 102, 2, 1774, 1775, 5, 600, 301, 2, 1775,
	205, 3, 2, 2, 2, 1776, 1777, 5, 418, 210, 2, 1777, 1778, 5, 422, 212, 2,
	1778, 207, 3, 2, 2, 2, 1779, 1780, 7, 116, 2, 2, 1780, 1781, 5, 196, 99,
	2, 1781, 209, 3, 2, 2, 2, 1782, 1783, 5, 648, 325, 2, 1783, 1788, 7, 340,
	2, 2, 1784, 1785, 5, 218, 110, 2, 1785, 1786, 5, 600, 301, 2, 1786, 1789,
	3, 2, 2, 2, 1787, 1789, 5, 604, 303, 2, 1788, 1784, 3, 2, 2, 2, 1788, 1787,
	3, 2, 2, 2, 1789, 1796, 3, 2, 2, 2, 1790, 1791, 5, 412, 207, 2, 1791, 1792,
	7, 340, 2, 2, 1792, 1793, 5, 534, 268, 2, 1793, 1796, 3, 2, 2, 2, 1794,
	1796, 5, 446, 224, 2, 1795, 1782, 3, 2, 2, 2, 1795, 1790, 3, 2, 2, 2, 1795,
	1794, 3, 2, 2, 2, 1796, 211, 3, 2, 2, 2, 1797, 1798, 5, 214, 108, 2, 1798,
	1799, 5, 190, 96, 2, 1799, 213, 3, 2, 2, 2, 1800, 1805, 5, 226, 114, 2,
	1801, 1805, 5, 216, 109, 2, 1802, 1805, 5, 202, 102, 2, 1803, 1805, 5,
	468, 235, 2, 1804, 1800, 3, 2, 2, 2, 1804, 1801, 3, 2, 2, 2, 1804, 1802,
	3, 2, 2, 2, 1804, 1803, 3, 2, 2, 2, 1805, 215, 3, 2, 2, 2, 1806, 1815,
	7, 381, 2, 2, 1807, 1810, 7, 308, 2, 2, 1808, 1811, 7, 364, 2, 2, 1809,
	1811, 5, 426, 214, 2, 1810, 1808, 3, 2, 2, 2, 1810, 1809, 3, 2, 2, 2, 1811,
	1812, 3, 2, 2, 2, 1812, 1816, 7, 309, 2, 2, 1813, 1816, 7, 364, 2, 2, 1814,
	1816, 5, 412, 207, 2, 1815, 1807, 3, 2, 2, 2, 1815, 1813, 3, 2, 2, 2, 1815,
	1814, 3, 2, 2, 2, 1816, 217, 3, 2, 2, 2, 1817, 1827, 5, 226, 114, 2, 1818,
	1819, 7, 208, 2, 2, 1819, 1820, 7, 308, 2, 2, 1820, 1821, 5, 600, 301,
	2, 1821, 1822, 7, 309, 2, 2, 1822, 1824, 3, 2, 2, 2, 1823, 1818, 3, 2,
	2, 2, 1823, 1824, 3, 2, 2, 2, 1824, 1825, 3, 2, 2, 2, 1825, 1827, 5, 216,
	109, 2, 1826, 1817, 3, 2, 2, 2, 1826, 1823, 3, 2, 2, 2, 1827, 219, 3, 2,
	2, 2, 1828, 1842, 7, 383, 2, 2, 1829, 1830, 7, 308, 2, 2, 1830, 1837, 5,
	590, 296, 2, 1831, 1832, 7, 329, 2, 2, 1832, 1835, 5, 590, 296, 2, 1833,
	1834, 7, 329, 2, 2, 1834, 1836, 5, 590, 296, 2, 1835, 1833, 3, 2, 2, 2,
	1835, 1836, 3, 2, 2, 2, 1836, 1838, 3, 2, 2, 2, 1837, 1831, 3, 2, 2, 2,
	1837, 1838, 3, 2, 2, 2, 1838, 1839, 3, 2, 2, 2, 1839, 1840, 7, 309, 2,
	2, 1840, 1843, 3, 2, 2, 2, 1841, 1843, 5, 224, 113, 2, 1842, 1829, 3, 2,
	2, 2, 1842, 1841, 3, 2, 2, 2, 1843, 221, 3, 2, 2, 2, 1844, 1854, 7, 383,
	2, 2, 1845, 1846, 7, 308, 2, 2, 1846, 1849, 5, 590, 296, 2, 1847, 1848,
	7, 329, 2, 2, 1848, 1850, 5, 590, 296, 2, 1849, 1847, 3, 2, 2, 2, 1849,
	1850, 3, 2, 2, 2, 1850, 1851, 3, 2, 2, 2, 1851, 1852, 7, 309, 2, 2, 1852,
	1855, 3, 2, 2, 2, 1853, 1855, 5, 224, 113, 2, 1854, 1845, 3, 2, 2, 2, 1854,
	1853, 3, 2, 2, 2, 1855, 223, 3, 2, 2, 2, 1856, 1862, 7, 298, 2, 2, 1857,
	1862, 5, 14, 8, 2, 1858, 1862, 7, 40, 2, 2, 1859, 1862, 5, 48, 25, 2, 1860,
	1862, 5, 574, 288, 2, 1861, 1856, 3, 2, 2, 2, 1861, 1857, 3, 2, 2, 2, 1861,
	1858, 3, 2, 2, 2, 1861, 1859, 3, 2, 2, 2, 1861, 1860, 3, 2, 2, 2, 1862,
	225, 3, 2, 2, 2, 1863, 1869, 7, 383, 2, 2, 1864, 1865, 7, 308, 2, 2, 1865,
	1866, 5, 590, 296, 2, 1866, 1867, 7, 309, 2, 2, 1867, 1870, 3, 2, 2, 2,
	1868, 1870, 5, 224, 113, 2, 1869, 1864, 3, 2, 2, 2, 1869, 1868, 3, 2, 2,
	2, 1870, 227, 3, 2, 2, 2, 1871, 1872, 5, 648, 325, 2, 1872, 1874, 7, 344,
	2, 2, 1873, 1875, 5, 218, 110, 2, 1874, 1873, 3, 2, 2, 2, 1874, 1875, 3,
	2, 2, 2, 1875, 1876, 3, 2, 2, 2, 1876, 1877, 5, 600, 301, 2, 1877, 229,
	3, 2, 2, 2, 1878, 1879, 7, 50, 2, 2, 1879, 1887, 5, 232, 117, 2, 1880,
	1881, 7, 82, 2, 2, 1881, 1887, 5, 648, 325, 2, 1882, 1883, 7, 119, 2, 2,
	1883, 1887, 5, 232, 117, 2, 1884, 1885, 7, 207, 2, 2, 1885, 1887, 5, 648,
	325, 2, 1886, 1878, 3, 2, 2, 2, 1886, 1880, 3, 2, 2, 2, 1886, 1882, 3,
	2, 2, 2, 1886, 1884, 3, 2, 2, 2, 1887, 231, 3, 2, 2, 2, 1888, 1889, 5,
	648, 325, 2, 1889, 1890, 7, 340, 2, 2, 1890, 1891, 5, 600, 301, 2, 1891,
	233, 3, 2, 2, 2, 1892, 1893, 7, 90, 2, 2, 1893, 1901, 5, 190, 96, 2, 1894,
	1898, 5, 190, 96, 2, 1895, 1896, 7, 90, 2, 2, 1896, 1899, 5, 190, 96, 2,
	1897, 1899, 3, 2, 2, 2, 1898, 1895, 3, 2, 2, 2, 1898, 1897, 3, 2, 2, 2,
	1899, 1901, 3, 2, 2, 2, 1900, 1892, 3, 2, 2, 2, 1900, 1894, 3, 2, 2, 2,
	1901, 235, 3, 2, 2, 2, 1902, 1906, 7, 54, 2, 2, 1903, 1904, 7, 332, 2,
	2, 1904, 1907, 5, 26, 14, 2, 1905, 1907, 3, 2, 2, 2, 1906, 1903, 3, 2,
	2, 2, 1906, 1905, 3, 2, 2, 2, 1907, 1911, 3, 2, 2, 2, 1908, 1910, 5, 360,
	181, 2, 1909, 1908, 3, 2, 2, 2, 1910, 1913, 3, 2, 2, 2, 1911, 1909, 3,
	2, 2, 2, 1911, 1912, 3, 2, 2, 2, 1912, 1917, 3, 2, 2, 2, 1913, 1911, 3,
	2, 2, 2, 1914, 1916, 5, 190, 96, 2, 1915, 1914, 3, 2, 2, 2, 1916, 1919,
	3, 2, 2, 2, 1917, 1915, 3, 2, 2, 2, 1917, 1918, 3, 2, 2, 2, 1918, 1920,
	3, 2, 2, 2, 1919, 1917, 3, 2, 2, 2, 1920, 1924, 7, 91, 2, 2, 1921, 1922,
	7, 332, 2, 2, 1922, 1925, 5, 26, 14, 2, 1923, 1925, 3, 2, 2, 2, 1924, 1921,
	3, 2, 2, 2, 1924, 1923, 3, 2, 2, 2, 1925, 237, 3, 2, 2, 2, 1926, 1930,
	7, 122, 2, 2, 1927, 1928, 7, 332, 2, 2, 1928, 1931, 5, 26, 14, 2, 1929,
	1931, 3, 2, 2, 2, 1930, 1927, 3, 2, 2, 2, 1930, 1929, 3, 2, 2, 2, 1931,
	1935, 3, 2, 2, 2, 1932, 1934, 5, 360, 181, 2, 1933, 1932, 3, 2, 2, 2, 1934,
	1937, 3, 2, 2, 2, 1935, 1933, 3, 2, 2, 2, 1935, 1936, 3, 2, 2, 2, 1936,
	1941, 3, 2, 2, 2, 1937, 1935, 3, 2, 2, 2, 1938, 1940, 5, 190, 96, 2, 1939,
	1938, 3, 2, 2, 2, 1940, 1943, 3, 2, 2, 2, 1941, 1939, 3, 2, 2, 2, 1941,
	1942, 3, 2, 2, 2, 1942, 1944, 3, 2, 2, 2, 1943, 1941, 3, 2, 2, 2, 1944,
	1948, 5, 64, 33, 2, 1945, 1946, 7, 332, 2, 2, 1946, 1949, 5, 26, 14, 2,
	1947, 1949, 3, 2, 2, 2, 1948, 1945, 3, 2, 2, 2, 1948, 1947, 3, 2, 2, 2,
	1949, 239, 3, 2, 2, 2, 1950, 1952, 5, 66, 34, 2, 1951, 1950, 3, 2, 2, 2,
	1951, 1952, 3, 2, 2, 2, 1952, 1980, 3, 2, 2, 2, 1953, 1954, 7, 64, 2, 2,
	1954, 1955, 7, 308, 2, 2, 1955, 1956, 5, 600, 301, 2, 1956, 1957, 7, 309,
	2, 2, 1957, 1959, 7, 141, 2, 2, 1958, 1960, 5, 248, 125, 2, 1959, 1958,
	3, 2, 2, 2, 1960, 1961, 3, 2, 2, 2, 1961, 1959, 3, 2, 2, 2, 1961, 1962,
	3, 2, 2, 2, 1962, 1981, 3, 2, 2, 2, 1963, 1964, 5, 242, 122, 2, 1964, 1965,
	7, 308, 2, 2, 1965, 1966, 5, 600, 301, 2, 1966, 1978, 7, 309, 2, 2, 1967,
	1969, 7, 159, 2, 2, 1968, 1970, 5, 246, 124, 2, 1969, 1968, 3, 2, 2, 2,
	1970, 1971, 3, 2, 2, 2, 1971, 1969, 3, 2, 2, 2, 1971, 1972, 3, 2, 2, 2,
	1972, 1979, 3, 2, 2, 2, 1973, 1975, 5, 244, 123, 2, 1974, 1973, 3, 2, 2,
	2, 1975, 1976, 3, 2, 2, 2, 1976, 1974, 3, 2, 2, 2, 1976, 1977, 3, 2, 2,
	2, 1977, 1979, 3, 2, 2, 2, 1978, 1967, 3, 2, 2, 2, 1978, 1974, 3, 2, 2,
	2, 1979, 1981, 3, 2, 2, 2, 1980, 1953, 3, 2, 2, 2, 1980, 1963, 3, 2, 2,
	2, 1981, 1982, 3, 2, 2, 2, 1982, 1983, 7, 92, 2, 2, 1983, 241, 3, 2, 2,
	2, 1984, 1985, 9, 46, 2, 2, 1985, 243, 3, 2, 2, 2, 1986, 1988, 7, 83, 2,
	2, 1987, 1989, 7, 332, 2, 2, 1988, 1987, 3, 2, 2, 2, 1988, 1989, 3, 2,
	2, 2, 1989, 2001, 3, 2, 2, 2, 1990, 1995, 5, 600, 301, 2, 1991, 1992, 7,
	329, 2, 2, 1992, 1994, 5, 600, 301, 2, 1993, 1991, 3, 2, 2, 2, 1994, 1997,
	3, 2, 2, 2, 1995, 1993, 3, 2, 2, 2, 1995, 1996, 3, 2, 2, 2, 1996, 1998,
	3, 2, 2, 2, 1997, 1995, 3, 2, 2, 2, 1998, 1999, 7, 332, 2, 2, 1999, 2001,
	3, 2, 2, 2, 2000, 1986, 3, 2, 2, 2, 2000, 1990, 3, 2, 2, 2, 2001, 2002,
	3, 2, 2, 2, 2002, 2003, 5, 190, 96, 2, 2003, 245, 3, 2, 2, 2, 2004, 2006,
	7, 83, 2, 2, 2005, 2007, 7, 332, 2, 2, 2006, 2005, 3, 2, 2, 2, 2006, 2007,
	3, 2, 2, 2, 2007, 2016, 3, 2, 2, 2, 2008, 2011, 5, 626, 314, 2, 2009, 2010,
	7, 385, 2, 2, 2010, 2012, 5, 600, 301, 2, 2011, 2009, 3, 2, 2, 2, 2011,
	2012, 3, 2, 2, 2, 2012, 2013, 3, 2, 2, 2, 2013, 2014, 7, 332, 2, 2, 2014,
	2016, 3, 2, 2, 2, 2015, 2004, 3, 2, 2, 2, 2015, 2008, 3, 2, 2, 2, 2016,
	2017, 3, 2, 2, 2, 2017, 2018, 5, 190, 96, 2, 2018, 247, 3, 2, 2, 2, 2019,
	2021, 7, 83, 2, 2, 2020, 2022, 7, 332, 2, 2, 2021, 2020, 3, 2, 2, 2, 2021,
	2022, 3, 2, 2, 2, 2022, 2027, 3, 2, 2, 2, 2023, 2024, 5, 624, 313, 2, 2024,
	2025, 7, 332, 2, 2, 2025, 2027, 3, 2, 2, 2, 2026, 2019, 3, 2, 2, 2, 2026,
	2023, 3, 2, 2, 2, 2027, 2028, 3, 2, 2, 2, 2028, 2029, 5, 190, 96, 2, 2029,
	249, 3, 2, 2, 2, 2030, 2032, 7, 198, 2, 2, 2031, 2033, 5, 252, 127, 2,
	2032, 2031, 3, 2, 2, 2, 2033, 2034, 3, 2, 2, 2, 2034, 2032, 3, 2, 2, 2,
	2034, 2035, 3, 2, 2, 2, 2035, 2036, 3, 2, 2, 2, 2036, 2037, 7, 92, 2, 2,
	2037, 251, 3, 2, 2, 2, 2038, 2039, 5, 600, 301, 2, 2039, 2040, 7, 332,
	2, 2, 2040, 2041, 5, 190, 96, 2, 2041, 253, 3, 2, 2, 2, 2042, 2045, 5,
	600, 301, 2, 2043, 2044, 7, 159, 2, 2, 2044, 2046, 5, 626, 314, 2, 2045,
	2043, 3, 2, 2, 2, 2045, 2046, 3, 2, 2, 2, 2046, 2055, 3, 2, 2, 2, 2047,
	2048, 7, 385, 2, 2, 2048, 2051, 5, 600, 301, 2, 2049, 2050, 7, 159, 2,
	2, 2050, 2052, 5, 626, 314, 2, 2051, 2049, 3, 2, 2, 2, 2051, 2052, 3, 2,
	2, 2, 2052, 2054, 3, 2, 2, 2, 2053, 2047, 3, 2, 2, 2, 2054, 2057, 3, 2,
	2, 2, 2055, 2053, 3, 2, 2, 2, 2055, 2056, 3, 2, 2, 2, 2056, 255, 3, 2,
	2, 2, 2057, 2055, 3, 2, 2, 2, 2058, 2060, 5, 66, 34, 2, 2059, 2058, 3,
	2, 2, 2, 2059, 2060, 3, 2, 2, 2, 2060, 2061, 3, 2, 2, 2, 2061, 2062, 7,
	130, 2, 2, 2062, 2063, 7, 308, 2, 2, 2063, 2064, 5, 254, 128, 2, 2064,
	2065, 7, 309, 2, 2, 2065, 2069, 5, 190, 96, 2, 2066, 2067, 7, 90, 2, 2,
	2067, 2070, 5, 190, 96, 2, 2068, 2070, 3, 2, 2, 2, 2069, 2066, 3, 2, 2,
	2, 2069, 2068, 3, 2, 2, 2, 2070, 257, 3, 2, 2, 2, 2071, 2072, 7, 277, 2,
	2, 2072, 2073, 7, 314, 2, 2, 2073, 2074, 7, 308, 2, 2, 2074, 2075, 5, 600,
	301, 2, 2075, 2076, 7, 309, 2, 2, 2076, 2077, 3, 2, 2, 2, 2077, 2078, 7,
	307, 2, 2, 2078, 259, 3, 2, 2, 2, 2079, 2082, 7, 86, 2, 2, 2080, 2083,
	7, 122, 2, 2, 2081, 2083, 5, 418, 210, 2, 2082, 2080, 3, 2, 2, 2, 2082,
	2081, 3, 2, 2, 2, 2083, 2084, 3, 2, 2, 2, 2084, 2085, 7, 307, 2, 2, 2085,
	261, 3, 2, 2, 2, 2086, 2092, 7, 368, 2, 2, 2087, 2089, 7, 369, 2, 2, 2088,
	2090, 5, 218, 110, 2, 2089, 2088, 3, 2, 2, 2, 2089, 2090, 3, 2, 2, 2, 2090,
	2092, 3, 2, 2, 2, 2091, 2086, 3, 2, 2, 2, 2091, 2087, 3, 2, 2, 2, 2092,
	2093, 3, 2, 2, 2, 2093, 2094, 5, 418, 210, 2, 2094, 2095, 7, 307, 2, 2,
	2095, 263, 3, 2, 2, 2, 2096, 2117, 7, 121, 2, 2, 2097, 2098, 9, 47, 2,
	2, 2098, 2099, 7, 308, 2, 2, 2099, 2114, 5, 600, 301, 2, 2100, 2101, 7,
	118, 2, 2, 2101, 2103, 7, 308, 2, 2, 2102, 2104, 5, 268, 135, 2, 2103,
	2102, 3, 2, 2, 2, 2103, 2104, 3, 2, 2, 2, 2104, 2105, 3, 2, 2, 2, 2105,
	2107, 7, 307, 2, 2, 2106, 2108, 5, 600, 301, 2, 2107, 2106, 3, 2, 2, 2,
	2107, 2108, 3, 2, 2, 2, 2108, 2109, 3, 2, 2, 2, 2109, 2111, 7, 307, 2,
	2, 2110, 2112, 5, 274, 138, 2, 2111, 2110, 3, 2, 2, 2, 2111, 2112, 3, 2,
	2, 2, 2112, 2114, 3, 2, 2, 2, 2113, 2097, 3, 2, 2, 2, 2113, 2100, 3, 2,
	2, 2, 2114, 2115, 3, 2, 2, 2, 2115, 2117, 7, 309, 2, 2, 2116, 2096, 3,
	2, 2, 2, 2116, 2113, 3, 2, 2, 2, 2117, 2118, 3, 2, 2, 2, 2118, 2137, 5,
	190, 96, 2, 2119, 2120, 7, 88, 2, 2, 2120, 2121, 5, 190, 96, 2, 2121, 2122,
	7, 284, 2, 2, 2122, 2123, 7, 308, 2, 2, 2123, 2124, 5, 600, 301, 2, 2124,
	2125, 7, 309, 2, 2, 2125, 2126, 7, 307, 2, 2, 2126, 2137, 3, 2, 2, 2, 2127,
	2128, 7, 120, 2, 2, 2128, 2129, 7, 308, 2, 2, 2129, 2130, 5, 412, 207,
	2, 2130, 2131, 7, 310, 2, 2, 2131, 2132, 5, 276, 139, 2, 2132, 2133, 7,
	311, 2, 2, 2133, 2134, 7, 309, 2, 2, 2134, 2135, 5, 196, 99, 2, 2135, 2137,
	3, 2, 2, 2, 2136, 2116, 3, 2, 2, 2, 2136, 2119, 3, 2, 2, 2, 2136, 2127,
	3, 2, 2, 2, 2137, 265, 3, 2, 2, 2, 2138, 2143, 5, 232, 117, 2, 2139, 2140,
	7, 329, 2, 2, 2140, 2142, 5, 232, 117, 2, 2141, 2139, 3, 2, 2, 2, 2142,
	2145, 3, 2, 2, 2, 2143, 2141, 3, 2, 2, 2, 2143, 2144, 3, 2, 2, 2, 2144,
	267, 3, 2, 2, 2, 2145, 2143, 3, 2, 2, 2, 2146, 2156, 5, 266, 134, 2, 2147,
	2152, 5, 272, 137, 2, 2148, 2149, 7, 329, 2, 2, 2149, 2151, 5, 272, 137,
	2, 2150, 2148, 3, 2, 2, 2, 2151, 2154, 3, 2, 2, 2, 2152, 2150, 3, 2, 2,
	2, 2152, 2153, 3, 2, 2, 2, 2153, 2156, 3, 2, 2, 2, 2154, 2152, 3, 2, 2,
	2, 2155, 2146, 3, 2, 2, 2, 2155, 2147, 3, 2, 2, 2, 2156, 269, 3, 2, 2,
	2, 2157, 2158, 5, 26, 14, 2, 2158, 2159, 7, 340, 2, 2, 2159, 2160, 5, 600,
	301, 2, 2160, 271, 3, 2, 2, 2, 2161, 2163, 7, 274, 2, 2, 2162, 2161, 3,
	2, 2, 2, 2162, 2163, 3, 2, 2, 2, 2163, 2164, 3, 2, 2, 2, 2164, 2165, 5,
	554, 278, 2, 2165, 2170, 5, 270, 136, 2, 2166, 2167, 7, 329, 2, 2, 2167,
	2169, 5, 270, 136, 2, 2168, 2166, 3, 2, 2, 2, 2169, 2172, 3, 2, 2, 2, 2170,
	2168, 3, 2, 2, 2, 2170, 2171, 3, 2, 2, 2, 2171, 273, 3, 2, 2, 2, 2172,
	2170, 3, 2, 2, 2, 2173, 2178, 5, 444, 223, 2, 2174, 2175, 7, 329, 2, 2,
	2175, 2177, 5, 444, 223, 2, 2176, 2174, 3, 2, 2, 2, 2177, 2180, 3, 2, 2,
	2, 2178, 2176, 3, 2, 2, 2, 2178, 2179, 3, 2, 2, 2, 2179, 275, 3, 2, 2,
	2, 2180, 2178, 3, 2, 2, 2, 2181, 2183, 5, 26, 14, 2, 2182, 2181, 3, 2,
	2, 2, 2182, 2183, 3, 2, 2, 2, 2183, 2190, 3, 2, 2, 2, 2184, 2186, 7, 329,
	2, 2, 2185, 2187, 5, 26, 14, 2, 2186, 2185, 3, 2, 2, 2, 2186, 2187, 3,
	2, 2, 2, 2187, 2189, 3, 2, 2, 2, 2188, 2184, 3, 2, 2, 2, 2189, 2192, 3,
	2, 2, 2, 2190, 2188, 3, 2, 2, 2, 2190, 2191, 3, 2, 2, 2, 2191, 277, 3,
	2, 2, 2, 2192, 2190, 3, 2, 2, 2, 2193, 2195, 7, 210, 2, 2, 2194, 2196,
	5, 600, 301, 2, 2195, 2194, 3, 2, 2, 2, 2195, 2196, 3, 2, 2, 2, 2196, 2200,
	3, 2, 2, 2, 2197, 2200, 7, 59, 2, 2, 2198, 2200, 7, 77, 2, 2, 2199, 2193,
	3, 2, 2, 2, 2199, 2197, 3, 2, 2, 2, 2199, 2198, 3, 2, 2, 2, 2200, 2201,
	3, 2, 2, 2, 2201, 2202, 7, 307, 2, 2, 2202, 279, 3, 2, 2, 2, 2203, 2211,
	7, 278, 2, 2, 2204, 2205, 7, 308, 2, 2, 2205, 2206, 5, 600, 301, 2, 2206,
	2207, 7, 309, 2, 2, 2207, 2208, 5, 190, 96, 2, 2208, 2212, 3, 2, 2, 2,
	2209, 2210, 7, 122, 2, 2, 2210, 2212, 7, 307, 2, 2, 2211, 2204, 3, 2, 2,
	2, 2211, 2209, 3, 2, 2, 2, 2212, 2227, 3, 2, 2, 2, 2213, 2214, 7, 279,
	2, 2, 2214, 2215, 7, 308, 2, 2, 2215, 2220, 5, 418, 210, 2, 2216, 2217,
	7, 329, 2, 2, 2217, 2219, 5, 418, 210, 2, 2218, 2216, 3, 2, 2, 2, 2219,
	2222, 3, 2, 2, 2, 2220, 2218, 3, 2, 2, 2, 2220, 2221, 3, 2, 2, 2, 2221,
	2223, 3, 2, 2, 2, 2222, 2220, 3, 2, 2, 2, 2223, 2224, 7, 309, 2, 2, 2224,
	2225, 5, 234, 118, 2, 2225, 2227, 3, 2, 2, 2, 2226, 2203, 3, 2, 2, 2, 2226,
	2213, 3, 2, 2, 2, 2227, 281, 3, 2, 2, 2, 2228, 2232, 5, 26, 14, 2, 2229,
	2231, 5, 540, 271, 2, 2230, 2229, 3, 2, 2, 2, 2231, 2234, 3, 2, 2, 2, 2232,
	2230, 3, 2, 2, 2, 2232, 2233, 3, 2, 2, 2, 2233, 283, 3, 2, 2, 2, 2234,
	2232, 3, 2, 2, 2, 2235, 2236, 5, 574, 288, 2, 2236, 2237, 5, 282, 142,
	2, 2237, 2238, 7, 308, 2, 2, 2238, 2239, 5, 286, 144, 2, 2239, 2240, 7,
	309, 2, 2, 2240, 2241, 7, 307, 2, 2, 2241, 285, 3, 2, 2, 2, 2242, 2247,
	5, 288, 145, 2, 2243, 2244, 7, 329, 2, 2, 2244, 2246, 5, 288, 145, 2, 2245,
	2243, 3, 2, 2, 2, 2246, 2249, 3, 2, 2, 2, 2247, 2245, 3, 2, 2, 2, 2247,
	2248, 3, 2, 2, 2, 2248, 2259, 3, 2, 2, 2, 2249, 2247, 3, 2, 2, 2, 2250,
	2255, 5, 290, 146, 2, 2251, 2252, 7, 329, 2, 2, 2252, 2254, 5, 290, 146,
	2, 2253, 2251, 3, 2, 2, 2, 2254, 2257, 3, 2, 2, 2, 2255, 2253, 3, 2, 2,
	2, 2255, 2256, 3, 2, 2, 2, 2256, 2259, 3, 2, 2, 2, 2257, 2255, 3, 2, 2,
	2, 2258, 2242, 3, 2, 2, 2, 2258, 2250, 3, 2, 2, 2, 2259, 287, 3, 2, 2,
	2, 2260, 2262, 5, 530, 266, 2, 2261, 2260, 3, 2, 2, 2, 2262, 2265, 3, 2,
	2, 2, 2263, 2261, 3, 2, 2, 2, 2263, 2264, 3, 2, 2, 2, 2264, 2267, 3, 2,
	2, 2, 2265, 2263, 3, 2, 2, 2, 2266, 2268, 5, 394, 198, 2, 2267, 2266, 3,
	2, 2, 2, 2267, 2268, 3, 2, 2, 2, 2268, 289, 3, 2, 2, 2, 2269, 2271, 5,
	530, 266, 2, 2270, 2269, 3, 2, 2, 2, 2271, 2274, 3, 2, 2, 2, 2272, 2270,
	3, 2, 2, 2, 2272, 2273, 3, 2, 2, 2, 2273, 2275, 3, 2, 2, 2, 2274, 2272,
	3, 2, 2, 2, 2275, 2285, 7, 330, 2, 2, 2276, 2286, 7, 364, 2, 2, 2277, 2283,
	5, 26, 14, 2, 2278, 2280, 7, 308, 2, 2, 2279, 2281, 5, 394, 198, 2, 2280,
	2279, 3, 2, 2, 2, 2280, 2281, 3, 2, 2, 2, 2281, 2282, 3, 2, 2, 2, 2282,
	2284, 7, 309, 2, 2, 2283, 2278, 3, 2, 2, 2, 2283, 2284, 3, 2, 2, 2, 2284,
	2286, 3, 2, 2, 2, 2285, 2276, 3, 2, 2, 2, 2285, 2277, 3, 2, 2, 2, 2286,
	291, 3, 2, 2, 2, 2287, 2291, 5, 294, 148, 2, 2288, 2291, 5, 300, 151, 2,
	2289, 2291, 5, 284, 143, 2, 2290, 2287, 3, 2, 2, 2, 2290, 2288, 3, 2, 2,
	2, 2290, 2289, 3, 2, 2, 2, 2291, 293, 3, 2, 2, 2, 2292, 2293, 9, 48, 2,
	2, 2293, 2294, 7, 187, 2, 2, 2294, 2295, 7, 308, 2, 2, 2295, 2296, 5, 402,
	202, 2, 2296, 2297, 7, 309, 2, 2, 2297, 2298, 5, 234, 118, 2, 2298, 2330,
	3, 2, 2, 2, 2299, 2317, 7, 78, 2, 2, 2300, 2301, 7, 187, 2, 2, 2301, 2302,
	7, 308, 2, 2, 2302, 2318, 5, 402, 202, 2, 2303, 2304, 7, 223, 2, 2, 2304,
	2306, 7, 308, 2, 2, 2305, 2307, 5, 466, 234, 2, 2306, 2305, 3, 2, 2, 2,
	2306, 2307, 3, 2, 2, 2, 2307, 2314, 3, 2, 2, 2, 2308, 2309, 7, 86, 2, 2,
	2309, 2310, 7, 131, 2, 2, 2310, 2311, 7, 308, 2, 2, 2311, 2312, 5, 470,
	236, 2, 2312, 2313, 7, 309, 2, 2, 2313, 2315, 3, 2, 2, 2, 2314, 2308, 3,
	2, 2, 2, 2314, 2315, 3, 2, 2, 2, 2315, 2316, 3, 2, 2, 2, 2316, 2318, 5,
	442, 222, 2, 2317, 2300, 3, 2, 2, 2, 2317, 2303, 3, 2, 2, 2, 2318, 2319,
	3, 2, 2, 2, 2319, 2320, 7, 309, 2, 2, 2320, 2321, 5, 190, 96, 2, 2321,
	2330, 3, 2, 2, 2, 2322, 2323, 7, 209, 2, 2, 2323, 2324, 7, 187, 2, 2, 2324,
	2325, 7, 308, 2, 2, 2325, 2326, 5, 402, 202, 2, 2326, 2327, 7, 309, 2,
	2, 2327, 2328, 7, 307, 2, 2, 2328, 2330, 3, 2, 2, 2, 2329, 2292, 3, 2,
	2, 2, 2329, 2299, 3, 2, 2, 2, 2329, 2322, 3, 2, 2, 2, 2330, 295, 3, 2,
	2, 2, 2331, 2339, 5, 298, 150, 2, 2332, 2333, 5, 26, 14, 2, 2333, 2334,
	7, 332, 2, 2, 2334, 2336, 3, 2, 2, 2, 2335, 2332, 3, 2, 2, 2, 2335, 2336,
	3, 2, 2, 2, 2336, 2337, 3, 2, 2, 2, 2337, 2339, 5, 310, 156, 2, 2338, 2331,
	3, 2, 2, 2, 2338, 2335, 3, 2, 2, 2, 2339, 297, 3, 2, 2, 2, 2340, 2341,
	5, 26, 14, 2, 2341, 2342, 7, 332, 2, 2, 2342, 2344, 3, 2, 2, 2, 2343, 2340,
	3, 2, 2, 2, 2343, 2344, 3, 2, 2, 2, 2344, 2345, 3, 2, 2, 2, 2345, 2348,
	5, 294, 148, 2, 2346, 2348, 5, 284, 143, 2, 2347, 2343, 3, 2, 2, 2, 2347,
	2346, 3, 2, 2, 2, 2348, 299, 3, 2, 2, 2, 2349, 2352, 5, 302, 152, 2, 2350,
	2352, 5, 310, 156, 2, 2351, 2349, 3, 2, 2, 2, 2351, 2350, 3, 2, 2, 2, 2352,
	301, 3, 2, 2, 2, 2353, 2357, 5, 304, 153, 2, 2354, 2357, 5, 306, 154, 2,
	2355, 2357, 5, 308, 155, 2, 2356, 2353, 3, 2, 2, 2, 2356, 2354, 3, 2, 2,
	2, 2356, 2355, 3, 2, 2, 2, 2357, 303, 3, 2, 2, 2, 2358, 2359, 7, 49, 2,
	2, 2359, 2360, 7, 308, 2, 2, 2360, 2361, 5, 600, 301, 2, 2361, 2362, 7,
	309, 2, 2, 2362, 2363, 5, 234, 118, 2, 2363, 305, 3, 2, 2, 2, 2364, 2365,
	7, 51, 2, 2, 2365, 2366, 7, 308, 2, 2, 2366, 2367, 5, 600, 301, 2, 2367,
	2368, 7, 309, 2, 2, 2368, 2369, 5, 234, 118, 2, 2369, 307, 3, 2, 2, 2,
	2370, 2371, 7, 78, 2, 2, 2371, 2372, 7, 308, 2, 2, 2372, 2373, 5, 600,
	301, 2, 2373, 2374, 7, 309, 2, 2, 2374, 2375, 5, 190, 96, 2, 2375, 309,
	3, 2, 2, 2, 2376, 2380, 5, 314, 158, 2, 2377, 2380, 5, 316, 159, 2, 2378,
	2380, 5, 318, 160, 2, 2379, 2376, 3, 2, 2, 2, 2379, 2377, 3, 2, 2, 2, 2379,
	2378, 3, 2, 2, 2, 2380, 311, 3, 2, 2, 2, 2381, 2382, 7, 383, 2, 2, 2382,
	2383, 7, 298, 2, 2, 2383, 313, 3, 2, 2, 2, 2384, 2387, 7, 49, 2, 2, 2385,
	2388, 7, 116, 2, 2, 2386, 2388, 5, 312, 157, 2, 2387, 2385, 3, 2, 2, 2,
	2387, 2386, 3, 2, 2, 2, 2388, 2389, 3, 2, 2, 2, 2389, 2390, 7, 308, 2,
	2, 2390, 2391, 5, 600, 301, 2, 2391, 2392, 7, 309, 2, 2, 2392, 2393, 5,
	234, 118, 2, 2393, 315, 3, 2, 2, 2, 2394, 2397, 7, 51, 2, 2, 2395, 2398,
	7, 116, 2, 2, 2396, 2398, 5, 312, 157, 2, 2397, 2395, 3, 2, 2, 2, 2397,
	2396, 3, 2, 2, 2, 2398, 2399, 3, 2, 2, 2, 2399, 2400, 7, 308, 2, 2, 2400,
	2401, 5, 600, 301, 2, 2401, 2402, 7, 309, 2, 2, 2402, 2403, 5, 234, 118,
	2, 2403, 317, 3, 2, 2, 2, 2404, 2407, 7, 78, 2, 2, 2405, 2408, 7, 116,
	2, 2, 2406, 2408, 5, 312, 157, 2, 2407, 2405, 3, 2, 2, 2, 2407, 2406, 3,
	2, 2, 2, 2408, 2409, 3, 2, 2, 2, 2409, 2410, 7, 308, 2, 2, 2410, 2411,
	5, 600, 301, 2, 2411, 2412, 7, 309, 2, 2, 2412, 2413, 5, 190, 96, 2, 2413,
	319, 3, 2, 2, 2, 2414, 2415, 7, 308, 2, 2, 2415, 2416, 5, 600, 301, 2,
	2416, 2417, 7, 309, 2, 2, 2417, 2421, 3, 2, 2, 2, 2418, 2421, 5, 46, 24,
	2, 2419, 2421, 5, 574, 288, 2, 2420, 2414, 3, 2, 2, 2, 2420, 2418, 3, 2,
	2, 2, 2420, 2419, 3, 2, 2, 2, 2421, 321, 3, 2, 2, 2, 2422, 2428, 5, 26,
	14, 2, 2423, 2425, 7, 308, 2, 2, 2424, 2426, 5, 566, 284, 2, 2425, 2424,
	3, 2, 2, 2, 2425, 2426, 3, 2, 2, 2, 2426, 2427, 3, 2, 2, 2, 2427, 2429,
	7, 309, 2, 2, 2428, 2423, 3, 2, 2, 2, 2428, 2429, 3, 2, 2, 2, 2429, 323,
	3, 2, 2, 2, 2430, 2434, 7, 312, 2, 2, 2431, 2433, 5, 776, 389, 2, 2432,
	2431, 3, 2, 2, 2, 2433, 2436, 3, 2, 2, 2, 2434, 2432, 3, 2, 2, 2, 2434,
	2435, 3, 2, 2, 2, 2435, 2440, 3, 2, 2, 2, 2436, 2434, 3, 2, 2, 2, 2437,
	2439, 5, 190, 96, 2, 2438, 2437, 3, 2, 2, 2, 2439, 2442, 3, 2, 2, 2, 2440,
	2438, 3, 2, 2, 2, 2440, 2441, 3, 2, 2, 2, 2441, 2443, 3, 2, 2, 2, 2442,
	2440, 3, 2, 2, 2, 2443, 2444, 7, 313, 2, 2, 2444, 325, 3, 2, 2, 2, 2445,
	2446, 7, 200, 2, 2, 2446, 2448, 7, 308, 2, 2, 2447, 2449, 5, 26, 14, 2,
	2448, 2447, 3, 2, 2, 2, 2448, 2449, 3, 2, 2, 2, 2449, 2450, 3, 2, 2, 2,
	2450, 2452, 7, 309, 2, 2, 2451, 2453, 5, 342, 172, 2, 2452, 2451, 3, 2,
	2, 2, 2453, 2454, 3, 2, 2, 2, 2454, 2452, 3, 2, 2, 2, 2454, 2455, 3, 2,
	2, 2, 2455, 2456, 3, 2, 2, 2, 2456, 2457, 7, 106, 2, 2, 2457, 327, 3, 2,
	2, 2, 2458, 2464, 5, 322, 162, 2, 2459, 2464, 5, 324, 163, 2, 2460, 2464,
	5, 330, 166, 2, 2461, 2464, 5, 332, 167, 2, 2462, 2464, 5, 334, 168, 2,
	2463, 2458, 3, 2, 2, 2, 2463, 2459, 3, 2, 2, 2, 2463, 2460, 3, 2, 2, 2,
	2463, 2461, 3, 2, 2, 2, 2463, 2462, 3, 2, 2, 2, 2464, 329, 3, 2, 2, 2,
	2465, 2466, 7, 130, 2, 2, 2466, 2467, 7, 308, 2, 2, 2467, 2468, 5, 600,
	301, 2, 2468, 2469, 7, 309, 2, 2, 2469, 2473, 5, 322, 162, 2, 2470, 2471,
	7, 90, 2, 2, 2471, 2474, 5, 322, 162, 2, 2472, 2474, 3, 2, 2, 2, 2473,
	2470, 3, 2, 2, 2, 2473, 2472, 3, 2, 2, 2, 2474, 331, 3, 2, 2, 2, 2475,
	2476, 7, 208, 2, 2, 2476, 2477, 7, 308, 2, 2, 2477, 2478, 5, 600, 301,
	2, 2478, 2479, 7, 309, 2, 2, 2479, 2480, 5, 322, 162, 2, 2480, 333, 3,
	2, 2, 2, 2481, 2482, 7, 64, 2, 2, 2482, 2483, 7, 308, 2, 2, 2483, 2484,
	5, 600, 301, 2, 2484, 2486, 7, 309, 2, 2, 2485, 2487, 5, 336, 169, 2, 2486,
	2485, 3, 2, 2, 2, 2487, 2488, 3, 2, 2, 2, 2488, 2486, 3, 2, 2, 2, 2488,
	2489, 3, 2, 2, 2, 2489, 2490, 3, 2, 2, 2, 2490, 2491, 7, 92, 2, 2, 2491,
	335, 3, 2, 2, 2, 2492, 2494, 7, 83, 2, 2, 2493, 2495, 7, 332, 2, 2, 2494,
	2493, 3, 2, 2, 2, 2494, 2495, 3, 2, 2, 2, 2495, 2507, 3, 2, 2, 2, 2496,
	2501, 5, 600, 301, 2, 2497, 2498, 7, 329, 2, 2, 2498, 2500, 5, 600, 301,
	2, 2499, 2497, 3, 2, 2, 2, 2500, 2503, 3, 2, 2, 2, 2501, 2499, 3, 2, 2,
	2, 2501, 2502, 3, 2, 2, 2, 2502, 2504, 3, 2, 2, 2, 2503, 2501, 3, 2, 2,
	2, 2504, 2505, 7, 332, 2, 2, 2505, 2507, 3, 2, 2, 2, 2506, 2492, 3, 2,
	2, 2, 2506, 2496, 3, 2, 2, 2, 2507, 2508, 3, 2, 2, 2, 2508, 2509, 5, 322,
	162, 2, 2509, 2510, 7, 307, 2, 2, 2510, 337, 3, 2, 2, 2, 2511, 2517, 5,
	340, 171, 2, 2512, 2513, 7, 372, 2, 2, 2513, 2515, 5, 320, 161, 2, 2514,
	2516, 5, 324, 163, 2, 2515, 2514, 3, 2, 2, 2, 2515, 2516, 3, 2, 2, 2, 2516,
	2518, 3, 2, 2, 2, 2517, 2512, 3, 2, 2, 2, 2517, 2518, 3, 2, 2, 2, 2518,
	339, 3, 2, 2, 2, 2519, 2520, 7, 196, 2, 2, 2520, 2525, 7, 148, 2, 2, 2521,
	2522, 7, 308, 2, 2, 2522, 2523, 5, 600, 301, 2, 2523, 2524, 7, 309, 2,
	2, 2524, 2526, 3, 2, 2, 2, 2525, 2521, 3, 2, 2, 2, 2525, 2526, 3, 2, 2,
	2, 2526, 2527, 3, 2, 2, 2, 2527, 2529, 5, 322, 162, 2, 2528, 2530, 5, 322,
	162, 2, 2529, 2528, 3, 2, 2, 2, 2530, 2531, 3, 2, 2, 2, 2531, 2529, 3,
	2, 2, 2, 2531, 2532, 3, 2, 2, 2, 2532, 2539, 3, 2, 2, 2, 2533, 2535, 5,
	328, 165, 2, 2534, 2533, 3, 2, 2, 2, 2535, 2536, 3, 2, 2, 2, 2536, 2534,
	3, 2, 2, 2, 2536, 2537, 3, 2, 2, 2, 2537, 2539, 3, 2, 2, 2, 2538, 2519,
	3, 2, 2, 2, 2538, 2534, 3, 2, 2, 2, 2539, 341, 3, 2, 2, 2, 2540, 2542,
	5, 638, 320, 2, 2541, 2540, 3, 2, 2, 2, 2541, 2542, 3, 2, 2, 2, 2542, 2543,
	3, 2, 2, 2, 2543, 2548, 5, 26, 14, 2, 2544, 2545, 7, 308, 2, 2, 2545, 2546,
	5, 346, 174, 2, 2546, 2547, 7, 309, 2, 2, 2547, 2549, 3, 2, 2, 2, 2548,
	2544, 3, 2, 2, 2, 2548, 2549, 3, 2, 2, 2, 2549, 2550, 3, 2, 2, 2, 2550,
	2551, 7, 332, 2, 2, 2551, 2556, 5, 338, 170, 2, 2552, 2553, 7, 361, 2,
	2, 2553, 2555, 5, 338, 170, 2, 2554, 2552, 3, 2, 2, 2, 2555, 2558, 3, 2,
	2, 2, 2556, 2554, 3, 2, 2, 2, 2556, 2557, 3, 2, 2, 2, 2557, 2559, 3, 2,
	2, 2, 2558, 2556, 3, 2, 2, 2, 2559, 2560, 7, 307, 2, 2, 2560, 343, 3, 2,
	2, 2, 2561, 2564, 5, 360, 181, 2, 2562, 2564, 5, 352, 177, 2, 2563, 2561,
	3, 2, 2, 2, 2563, 2562, 3, 2, 2, 2, 2564, 345, 3, 2, 2, 2, 2565, 2570,
	5, 348, 175, 2, 2566, 2567, 7, 329, 2, 2, 2567, 2569, 5, 348, 175, 2, 2568,
	2566, 3, 2, 2, 2, 2569, 2572, 3, 2, 2, 2, 2570, 2568, 3, 2, 2, 2, 2570,
	2571, 3, 2, 2, 2, 2571, 347, 3, 2, 2, 2, 2572, 2570, 3, 2, 2, 2, 2573,
	2575, 5, 530, 266, 2, 2574, 2573, 3, 2, 2, 2, 2575, 2578, 3, 2, 2, 2, 2576,
	2574, 3, 2, 2, 2, 2576, 2577, 3, 2, 2, 2, 2577, 2580, 3, 2, 2, 2, 2578,
	2576, 3, 2, 2, 2, 2579, 2581, 5, 350, 176, 2, 2580, 2579, 3, 2, 2, 2, 2580,
	2581, 3, 2, 2, 2, 2581, 2583, 3, 2, 2, 2, 2582, 2584, 7, 274, 2, 2, 2583,
	2582, 3, 2, 2, 2, 2583, 2584, 3, 2, 2, 2, 2584, 2586, 3, 2, 2, 2, 2585,
	2587, 5, 556, 279, 2, 2586, 2585, 3, 2, 2, 2, 2586, 2587, 3, 2, 2, 2, 2587,
	2599, 3, 2, 2, 2, 2588, 2592, 5, 26, 14, 2, 2589, 2591, 5, 544, 273, 2,
	2590, 2589, 3, 2, 2, 2, 2591, 2594, 3, 2, 2, 2, 2592, 2590, 3, 2, 2, 2,
	2592, 2593, 3, 2, 2, 2, 2593, 2597, 3, 2, 2, 2, 2594, 2592, 3, 2, 2, 2,
	2595, 2596, 7, 340, 2, 2, 2596, 2598, 5, 600, 301, 2, 2597, 2595, 3, 2,
	2, 2, 2597, 2598, 3, 2, 2, 2, 2598, 2600, 3, 2, 2, 2, 2599, 2588, 3, 2,
	2, 2, 2599, 2600, 3, 2, 2, 2, 2600, 349, 3, 2, 2, 2, 2601, 2602, 7, 74,
	2, 2, 2602, 2605, 7, 204, 2, 2, 2603, 2605, 5, 60, 31, 2, 2604, 2601, 3,
	2, 2, 2, 2604, 2603, 3, 2, 2, 2, 2605, 351, 3, 2, 2, 2, 2606, 2608, 5,
	530, 266, 2, 2607, 2606, 3, 2, 2, 2, 2608, 2611, 3, 2, 2, 2, 2609, 2607,
	3, 2, 2, 2, 2609, 2610, 3, 2, 2, 2, 2610, 2612, 3, 2, 2, 2, 2611, 2609,
	3, 2, 2, 2, 2612, 2614, 5, 350, 176, 2, 2613, 2615, 7, 274, 2, 2, 2614,
	2613, 3, 2, 2, 2, 2614, 2615, 3, 2, 2, 2, 2615, 2617, 3, 2, 2, 2, 2616,
	2618, 5, 556, 279, 2, 2617, 2616, 3, 2, 2, 2, 2617, 2618, 3, 2, 2, 2, 2618,
	2619, 3, 2, 2, 2, 2619, 2620, 5, 356, 179, 2, 2620, 2621, 7, 307, 2, 2,
	2621, 353, 3, 2, 2, 2, 2622, 2626, 5, 26, 14, 2, 2623, 2625, 5, 544, 273,
	2, 2624, 2623, 3, 2, 2, 2, 2625, 2628, 3, 2, 2, 2, 2626, 2624, 3, 2, 2,
	2, 2626, 2627, 3, 2, 2, 2, 2627, 2631, 3, 2, 2, 2, 2628, 2626, 3, 2, 2,
	2, 2629, 2630, 7, 340, 2, 2, 2630, 2632, 5, 600, 301, 2, 2631, 2629, 3,
	2, 2, 2, 2631, 2632, 3, 2, 2, 2, 2632, 355, 3, 2, 2, 2, 2633, 2638, 5,
	354, 178, 2, 2634, 2635, 7, 329, 2, 2, 2635, 2637, 5, 354, 178, 2, 2636,
	2634, 3, 2, 2, 2, 2637, 2640, 3, 2, 2, 2, 2638, 2636, 3, 2, 2, 2, 2638,
	2639, 3, 2, 2, 2, 2639, 357, 3, 2, 2, 2, 2640, 2638, 3, 2, 2, 2, 2641,
	2642, 7, 112, 2, 2, 2642, 2643, 7, 308, 2, 2, 2643, 2644, 5, 402, 202,
	2, 2644, 2645, 7, 309, 2, 2, 2645, 2646, 5, 234, 118, 2, 2646, 359, 3,
	2, 2, 2, 2647, 2649, 5, 530, 266, 2, 2648, 2647, 3, 2, 2, 2, 2649, 2652,
	3, 2, 2, 2, 2650, 2648, 3, 2, 2, 2, 2650, 2651, 3, 2, 2, 2, 2651, 2661,
	3, 2, 2, 2, 2652, 2650, 3, 2, 2, 2, 2653, 2662, 5, 776, 389, 2, 2654, 2657,
	5, 372, 187, 2, 2655, 2657, 5, 374, 188, 2, 2656, 2654, 3, 2, 2, 2, 2656,
	2655, 3, 2, 2, 2, 2657, 2658, 3, 2, 2, 2, 2658, 2659, 7, 307, 2, 2, 2659,
	2662, 3, 2, 2, 2, 2660, 2662, 5, 380, 191, 2, 2661, 2653, 3, 2, 2, 2, 2661,
	2656, 3, 2, 2, 2, 2661, 2660, 3, 2, 2, 2, 2662, 361, 3, 2, 2, 2, 2663,
	2667, 5, 26, 14, 2, 2664, 2666, 5, 540, 271, 2, 2665, 2664, 3, 2, 2, 2,
	2666, 2669, 3, 2, 2, 2, 2667, 2665, 3, 2, 2, 2, 2667, 2668, 3, 2, 2, 2,
	2668, 2672, 3, 2, 2, 2, 2669, 2667, 3, 2, 2, 2, 2670, 2671, 7, 340, 2,
	2, 2671, 2673, 5, 538, 270, 2, 2672, 2670, 3, 2, 2, 2, 2672, 2673, 3, 2,
	2, 2, 2673, 363, 3, 2, 2, 2, 2674, 2677, 5, 26, 14, 2, 2675, 2676, 7, 340,
	2, 2, 2676, 2678, 5, 554, 278, 2, 2677, 2675, 3, 2, 2, 2, 2677, 2678, 3,
	2, 2, 2, 2678, 365, 3, 2, 2, 2, 2679, 2684, 5, 364, 183, 2, 2680, 2681,
	7, 329, 2, 2, 2681, 2683, 5, 364, 183, 2, 2682, 2680, 3, 2, 2, 2, 2683,
	2686, 3, 2, 2, 2, 2684, 2682, 3, 2, 2, 2, 2684, 2685, 3, 2, 2, 2, 2685,
	367, 3, 2, 2, 2, 2686, 2684, 3, 2, 2, 2, 2687, 2692, 5, 362, 182, 2, 2688,
	2689, 7, 329, 2, 2, 2689, 2691, 5, 362, 182, 2, 2690, 2688, 3, 2, 2, 2,
	2691, 2694, 3, 2, 2, 2, 2692, 2690, 3, 2, 2, 2, 2692, 2693, 3, 2, 2, 2,
	2693, 369, 3, 2, 2, 2, 2694, 2692, 3, 2, 2, 2, 2695, 2696, 7, 262, 2, 2,
	2696, 2702, 5, 366, 184, 2, 2697, 2699, 5, 556, 279, 2, 2698, 2697, 3,
	2, 2, 2, 2698, 2699, 3, 2, 2, 2, 2699, 2700, 3, 2, 2, 2, 2700, 2702, 5,
	368, 185, 2, 2701, 2695, 3, 2, 2, 2, 2701, 2698, 3, 2, 2, 2, 2702, 371,
	3, 2, 2, 2, 2703, 2704, 7, 155, 2, 2, 2704, 2705, 5, 370, 186, 2, 2705,
	373, 3, 2, 2, 2, 2706, 2707, 7, 181, 2, 2, 2707, 2708, 5, 370, 186, 2,
	2708, 375, 3, 2, 2, 2, 2709, 2732, 7, 264, 2, 2, 2710, 2711, 5, 554, 278,
	2, 2711, 2715, 5, 26, 14, 2, 2712, 2714, 5, 544, 273, 2, 2713, 2712, 3,
	2, 2, 2, 2714, 2717, 3, 2, 2, 2, 2715, 2713, 3, 2, 2, 2, 2715, 2716, 3,
	2, 2, 2, 2716, 2733, 3, 2, 2, 2, 2717, 2715, 3, 2, 2, 2, 2718, 2730, 7,
	109, 2, 2, 2719, 2730, 7, 239, 2, 2, 2720, 2730, 7, 265, 2, 2, 2721, 2722,
	5, 410, 206, 2, 2722, 2723, 7, 330, 2, 2, 2723, 2724, 5, 26, 14, 2, 2724,
	2730, 3, 2, 2, 2, 2725, 2727, 7, 146, 2, 2, 2726, 2725, 3, 2, 2, 2, 2726,
	2727, 3, 2, 2, 2, 2727, 2728, 3, 2, 2, 2, 2728, 2730, 7, 70, 2, 2, 2729,
	2718, 3, 2, 2, 2, 2729, 2719, 3, 2, 2, 2, 2729, 2720, 3, 2, 2, 2, 2729,
	2721, 3, 2, 2, 2, 2729, 2726, 3, 2, 2, 2, 2729, 2730, 3, 2, 2, 2, 2730,
	2731, 3, 2, 2, 2, 2731, 2733, 5, 26, 14, 2, 2732, 2710, 3, 2, 2, 2, 2732,
	2729, 3, 2, 2, 2, 2733, 2734, 3, 2, 2, 2, 2734, 2735, 7, 307, 2, 2, 2735,
	377, 3, 2, 2, 2, 2736, 2737, 7, 165, 2, 2, 2737, 2738, 5, 554, 278, 2,
	2738, 2741, 5, 26, 14, 2, 2739, 2740, 7, 287, 2, 2, 2740, 2742, 5, 420,
	211, 2, 2741, 2739, 3, 2, 2, 2, 2741, 2742, 3, 2, 2, 2, 2742, 2743, 3,
	2, 2, 2, 2743, 2744, 7, 307, 2, 2, 2744, 379, 3, 2, 2, 2, 2745, 2746, 7,
	152, 2, 2, 2746, 2752, 5, 26, 14, 2, 2747, 2749, 7, 308, 2, 2, 2748, 2750,
	5, 382, 192, 2, 2749, 2748, 3, 2, 2, 2, 2749, 2750, 3, 2, 2, 2, 2750, 2751,
	3, 2, 2, 2, 2751, 2753, 7, 309, 2, 2, 2752, 2747, 3, 2, 2, 2, 2752, 2753,
	3, 2, 2, 2, 2753, 2754, 3, 2, 2, 2, 2754, 2755, 7, 340, 2, 2, 2755, 2756,
	5, 600, 301, 2, 2756, 2757, 7, 307, 2, 2, 2757, 381, 3, 2, 2, 2, 2758,
	2763, 5, 384, 193, 2, 2759, 2760, 7, 329, 2, 2, 2760, 2762, 5, 384, 193,
	2, 2761, 2759, 3, 2, 2, 2, 2762, 2765, 3, 2, 2, 2, 2763, 2761, 3, 2, 2,
	2, 2763, 2764, 3, 2, 2, 2, 2764, 383, 3, 2, 2, 2, 2765, 2763, 3, 2, 2,
	2, 2766, 2768, 5, 530, 266, 2, 2767, 2766, 3, 2, 2, 2, 2768, 2771, 3, 2,
	2, 2, 2769, 2767, 3, 2, 2, 2, 2769, 2770, 3, 2, 2, 2, 2770, 2773, 3, 2,
	2, 2, 2771, 2769, 3, 2, 2, 2, 2772, 2774, 5, 386, 194, 2, 2773, 2772, 3,
	2, 2, 2, 2773, 2774, 3, 2, 2, 2, 2774, 2775, 3, 2, 2, 2, 2775, 2779, 5,
	26, 14, 2, 2776, 2778, 5, 544, 273, 2, 2777, 2776, 3, 2, 2, 2, 2778, 2781,
	3, 2, 2, 2, 2779, 2777, 3, 2, 2, 2, 2779, 2780, 3, 2, 2, 2, 2780, 2784,
	3, 2, 2, 2, 2781, 2779, 3, 2, 2, 2, 2782, 2783, 7, 340, 2, 2, 2783, 2785,
	5, 600, 301, 2, 2784, 2782, 3, 2, 2, 2, 2784, 2785, 3, 2, 2, 2, 2785, 385,
	3, 2, 2, 2, 2786, 2789, 7, 271, 2, 2, 2787, 2789, 5, 556, 279, 2, 2788,
	2786, 3, 2, 2, 2, 2788, 2787, 3, 2, 2, 2, 2789, 387, 3, 2, 2, 2, 2790,
	2791, 7, 137, 2, 2, 2791, 2796, 5, 390, 196, 2, 2792, 2793, 7, 329, 2,
	2, 2793, 2795, 5, 390, 196, 2, 2794, 2792, 3, 2, 2, 2, 2795, 2798, 3, 2,
	2, 2, 2796, 2794, 3, 2, 2, 2, 2796, 2797, 3, 2, 2, 2, 2797, 2799, 3, 2,
	2, 2, 2798, 2796, 3, 2, 2, 2, 2799, 2800, 7, 307, 2, 2, 2800, 389, 3, 2,
	2, 2, 2801, 2802, 5, 26, 14, 2, 2802, 2805, 7, 333, 2, 2, 2803, 2806, 7,
	364, 2, 2, 2804, 2806, 5, 26, 14, 2, 2805, 2803, 3, 2, 2, 2, 2805, 2804,
	3, 2, 2, 2, 2806, 391, 3, 2, 2, 2, 2807, 2808, 7, 330, 2, 2, 2808, 2809,
	5, 26, 14, 2, 2809, 2811, 7, 308, 2, 2, 2810, 2812, 5, 394, 198, 2, 2811,
	2810, 3, 2, 2, 2, 2811, 2812, 3, 2, 2, 2, 2812, 2813, 3, 2, 2, 2, 2813,
	2814, 7, 309, 2, 2, 2814, 2834, 3, 2, 2, 2, 2815, 2822, 5, 394, 198, 2,
	2816, 2818, 7, 329, 2, 2, 2817, 2819, 5, 394, 198, 2, 2818, 2817, 3, 2,
	2, 2, 2818, 2819, 3, 2, 2, 2, 2819, 2821, 3, 2, 2, 2, 2820, 2816, 3, 2,
	2, 2, 2821, 2824, 3, 2, 2, 2, 2822, 2820, 3, 2, 2, 2, 2822, 2823, 3, 2,
	2, 2, 2823, 2834, 3, 2, 2, 2, 2824, 2822, 3, 2, 2, 2, 2825, 2827, 7, 329,
	2, 2, 2826, 2828, 5, 394, 198, 2, 2827, 2826, 3, 2, 2, 2, 2827, 2828, 3,
	2, 2, 2, 2828, 2830, 3, 2, 2, 2, 2829, 2825, 3, 2, 2, 2, 2830, 2831, 3,
	2, 2, 2, 2831, 2829, 3, 2, 2, 2, 2831, 2832, 3, 2, 2, 2, 2832, 2834, 3,
	2, 2, 2, 2833, 2807, 3, 2, 2, 2, 2833, 2815, 3, 2, 2, 2, 2833, 2829, 3,
	2, 2, 2, 2833, 2834, 3, 2, 2, 2, 2834, 2846, 3, 2, 2, 2, 2835, 2836, 7,
	329, 2, 2, 2836, 2837, 7, 330, 2, 2, 2837, 2838, 5, 26, 14, 2, 2838, 2840,
	7, 308, 2, 2, 2839, 2841, 5, 394, 198, 2, 2840, 2839, 3, 2, 2, 2, 2840,
	2841, 3, 2, 2, 2, 2841, 2842, 3, 2, 2, 2, 2842, 2843, 7, 309, 2, 2, 2843,
	2845, 3, 2, 2, 2, 2844, 2835, 3, 2, 2, 2, 2845, 2848, 3, 2, 2, 2, 2846,
	2844, 3, 2, 2, 2, 2846, 2847, 3, 2, 2, 2, 2847, 393, 3, 2, 2, 2, 2848,
	2846, 3, 2, 2, 2, 2849, 2852, 5, 404, 203, 2, 2850, 2852, 5, 448, 225,
	2, 2851, 2849, 3, 2, 2, 2, 2851, 2850, 3, 2, 2, 2, 2852, 395, 3, 2, 2,
	2, 2853, 2856, 7, 187, 2, 2, 2854, 2856, 5, 398, 200, 2, 2855, 2853, 3,
	2, 2, 2, 2855, 2854, 3, 2, 2, 2, 2856, 397, 3, 2, 2, 2, 2857, 2861, 7,
	223, 2, 2, 2858, 2861, 7, 271, 2, 2, 2859, 2861, 5, 556, 279, 2, 2860,
	2857, 3, 2, 2, 2, 2860, 2858, 3, 2, 2, 2, 2860, 2859, 3, 2, 2, 2, 2861,
	399, 3, 2, 2, 2, 2862, 2867, 5, 420, 211, 2, 2863, 2864, 7, 308, 2, 2,
	2864, 2865, 5, 392, 197, 2, 2865, 2866, 7, 309, 2, 2, 2866, 2868, 3, 2,
	2, 2, 2867, 2863, 3, 2, 2, 2, 2867, 2868, 3, 2, 2, 2, 2868, 401, 3, 2,
	2, 2, 2869, 2871, 5, 466, 234, 2, 2870, 2869, 3, 2, 2, 2, 2870, 2871, 3,
	2, 2, 2, 2871, 2878, 3, 2, 2, 2, 2872, 2873, 7, 86, 2, 2, 2873, 2874, 7,
	131, 2, 2, 2874, 2875, 7, 308, 2, 2, 2875, 2876, 5, 470, 236, 2, 2876,
	2877, 7, 309, 2, 2, 2877, 2879, 3, 2, 2, 2, 2878, 2872, 3, 2, 2, 2, 2878,
	2879, 3, 2, 2, 2, 2879, 2880, 3, 2, 2, 2, 2880, 2881, 5, 404, 203, 2, 2881,
	403, 3, 2, 2, 2, 2882, 2884, 8, 203, 1, 2, 2883, 2885, 9, 49, 2, 2, 2884,
	2883, 3, 2, 2, 2, 2884, 2885, 3, 2, 2, 2, 2885, 2886, 3, 2, 2, 2, 2886,
	2887, 7, 308, 2, 2, 2887, 2888, 5, 404, 203, 2, 2888, 2889, 7, 309, 2,
	2, 2889, 2947, 3, 2, 2, 2, 2890, 2891, 7, 130, 2, 2, 2891, 2892, 7, 308,
	2, 2, 2892, 2893, 5, 470, 236, 2, 2893, 2894, 7, 309, 2, 2, 2894, 2898,
	5, 404, 203, 2, 2895, 2896, 7, 90, 2, 2, 2896, 2899, 5, 404, 203, 2, 2897,
	2899, 3, 2, 2, 2, 2898, 2895, 3, 2, 2, 2, 2898, 2897, 3, 2, 2, 2, 2899,
	2947, 3, 2, 2, 2, 2900, 2901, 7, 64, 2, 2, 2901, 2902, 7, 308, 2, 2, 2902,
	2903, 5, 470, 236, 2, 2903, 2905, 7, 309, 2, 2, 2904, 2906, 5, 406, 204,
	2, 2905, 2904, 3, 2, 2, 2, 2906, 2907, 3, 2, 2, 2, 2907, 2905, 3, 2, 2,
	2, 2907, 2908, 3, 2, 2, 2, 2908, 2909, 3, 2, 2, 2, 2909, 2910, 7, 92, 2,
	2, 2910, 2947, 3, 2, 2, 2, 2911, 2914, 5, 442, 222, 2, 2912, 2913, 9, 50,
	2, 2, 2913, 2915, 5, 404, 203, 2, 2914, 2912, 3, 2, 2, 2, 2914, 2915, 3,
	2, 2, 2, 2915, 2947, 3, 2, 2, 2, 2916, 2943, 7, 172, 2, 2, 2917, 2918,
	9, 51, 2, 2, 2918, 2919, 7, 310, 2, 2, 2919, 2920, 5, 584, 293, 2, 2920,
	2921, 7, 311, 2, 2, 2921, 2943, 3, 2, 2, 2, 2922, 2923, 9, 52, 2, 2, 2923,
	2924, 7, 308, 2, 2, 2924, 2925, 5, 470, 236, 2, 2925, 2926, 7, 309, 2,
	2, 2926, 2943, 3, 2, 2, 2, 2927, 2932, 9, 53, 2, 2, 2928, 2929, 7, 310,
	2, 2, 2929, 2930, 5, 600, 301, 2, 2930, 2931, 7, 311, 2, 2, 2931, 2933,
	3, 2, 2, 2, 2932, 2928, 3, 2, 2, 2, 2932, 2933, 3, 2, 2, 2, 2933, 2943,
	3, 2, 2, 2, 2934, 2939, 9, 54, 2, 2, 2935, 2936, 7, 310, 2, 2, 2936, 2937,
	5, 438, 220, 2, 2937, 2938, 7, 311, 2, 2, 2938, 2940, 3, 2, 2, 2, 2939,
	2935, 3, 2, 2, 2, 2939, 2940, 3, 2, 2, 2, 2940, 2943, 3, 2, 2, 2, 2941,
	2943, 5, 466, 234, 2, 2942, 2916, 3, 2, 2, 2, 2942, 2917, 3, 2, 2, 2, 2942,
	2922, 3, 2, 2, 2, 2942, 2927, 3, 2, 2, 2, 2942, 2934, 3, 2, 2, 2, 2942,
	2941, 3, 2, 2, 2, 2943, 2944, 3, 2, 2, 2, 2944, 2947, 5, 404, 203, 5, 2945,
	2947, 5, 400, 201, 2, 2946, 2882, 3, 2, 2, 2, 2946, 2890, 3, 2, 2, 2, 2946,
	2900, 3, 2, 2, 2, 2946, 2911, 3, 2, 2, 2, 2946, 2942, 3, 2, 2, 2, 2946,
	2945, 3, 2, 2, 2, 2947, 2953, 3, 2, 2, 2, 2948, 2949, 12, 4, 2, 2, 2949,
	2950, 9, 55, 2, 2, 2950, 2952, 5, 404, 203, 5, 2951, 2948, 3, 2, 2, 2,
	2952, 2955, 3, 2, 2, 2, 2953, 2951, 3, 2, 2, 2, 2953, 2954, 3, 2, 2, 2,
	2954, 405, 3, 2, 2, 2, 2955, 2953, 3, 2, 2, 2, 2956, 2958, 7, 83, 2, 2,
	2957, 2959, 7, 332, 2, 2, 2958, 2957, 3, 2, 2, 2, 2958, 2959, 3, 2, 2,
	2, 2959, 2971, 3, 2, 2, 2, 2960, 2965, 5, 470, 236, 2, 2961, 2962, 7, 329,
	2, 2, 2962, 2964, 5, 470, 236, 2, 2963, 2961, 3, 2, 2, 2, 2964, 2967, 3,
	2, 2, 2, 2965, 2963, 3, 2, 2, 2, 2965, 2966, 3, 2, 2, 2, 2966, 2968, 3,
	2, 2, 2, 2967, 2965, 3, 2, 2, 2, 2968, 2969, 7, 332, 2, 2, 2969, 2971,
	3, 2, 2, 2, 2970, 2956, 3, 2, 2, 2, 2970, 2960, 3, 2, 2, 2, 2971, 2972,
	3, 2, 2, 2, 2972, 2973, 5, 404, 203, 2, 2973, 2974, 7, 307, 2, 2, 2974,
	407, 3, 2, 2, 2, 2975, 2976, 7, 310, 2, 2, 2976, 2977, 5, 600, 301, 2,
	2977, 2978, 7, 311, 2, 2, 2978, 409, 3, 2, 2, 2, 2979, 2983, 5, 26, 14,
	2, 2980, 2982, 5, 408, 205, 2, 2981, 2980, 3, 2, 2, 2, 2982, 2985, 3, 2,
	2, 2, 2983, 2981, 3, 2, 2, 2, 2983, 2984, 3, 2, 2, 2, 2984, 411, 3, 2,
	2, 2, 2985, 2983, 3, 2, 2, 2, 2986, 2990, 5, 416, 209, 2, 2987, 2989, 5,
	408, 205, 2, 2988, 2987, 3, 2, 2, 2, 2989, 2992, 3, 2, 2, 2, 2990, 2988,
	3, 2, 2, 2, 2990, 2991, 3, 2, 2, 2, 2991, 2997, 3, 2, 2, 2, 2992, 2990,
	3, 2, 2, 2, 2993, 2994, 7, 330, 2, 2, 2994, 2996, 5, 410, 206, 2, 2995,
	2993, 3, 2, 2, 2, 2996, 2999, 3, 2, 2, 2, 2997, 2995, 3, 2, 2, 2, 2997,
	2998, 3, 2, 2, 2, 2998, 3009, 3, 2, 2, 2, 2999, 2997, 3, 2, 2, 2, 3000,
	3001, 7, 310, 2, 2, 3001, 3003, 5, 600, 301, 2, 3002, 3004, 5, 116, 59,
	2, 3003, 3002, 3, 2, 2, 2, 3003, 3004, 3, 2, 2, 2, 3004, 3005, 3, 2, 2,
	2, 3005, 3006, 7, 332, 2, 2, 3006, 3007, 5, 600, 301, 2, 3007, 3008, 7,
	311, 2, 2, 3008, 3010, 3, 2, 2, 2, 3009, 3000, 3, 2, 2, 2, 3009, 3010,
	3, 2, 2, 2, 3010, 413, 3, 2, 2, 2, 3011, 3013, 5, 26, 14, 2, 3012, 3014,
	5, 578, 290, 2, 3013, 3012, 3, 2, 2, 2, 3013, 3014, 3, 2, 2, 2, 3014, 415,
	3, 2, 2, 2, 3015, 3016, 7, 154, 2, 2, 3016, 3018, 7, 333, 2, 2, 3017, 3015,
	3, 2, 2, 2, 3017, 3018, 3, 2, 2, 2, 3018, 3023, 3, 2, 2, 2, 3019, 3024,
	7, 32, 2, 2, 3020, 3024, 5, 44, 23, 2, 3021, 3024, 7, 37, 2, 2, 3022, 3024,
	5, 414, 208, 2, 3023, 3019, 3, 2, 2, 2, 3023, 3020, 3, 2, 2, 2, 3023, 3021,
	3, 2, 2, 2, 3023, 3022, 3, 2, 2, 2, 3024, 3029, 3, 2, 2, 2, 3025, 3026,
	7, 333, 2, 2, 3026, 3028, 5, 414, 208, 2, 3027, 3025, 3, 2, 2, 2, 3028,
	3031, 3, 2, 2, 2, 3029, 3027, 3, 2, 2, 2, 3029, 3030, 3, 2, 2, 2, 3030,
	417, 3, 2, 2, 2, 3031, 3029, 3, 2, 2, 2, 3032, 3033, 7, 32, 2, 2, 3033,
	3035, 7, 330, 2, 2, 3034, 3032, 3, 2, 2, 2, 3034, 3035, 3, 2, 2, 2, 3035,
	3041, 3, 2, 2, 2, 3036, 3037, 5, 410, 206, 2, 3037, 3038, 7, 330, 2, 2,
	3038, 3040, 3, 2, 2, 2, 3039, 3036, 3, 2, 2, 2, 3040, 3043, 3, 2, 2, 2,
	3041, 3039, 3, 2, 2, 2, 3041, 3042, 3, 2, 2, 2, 3042, 3044, 3, 2, 2, 2,
	3043, 3041, 3, 2, 2, 2, 3044, 3045, 5, 26, 14, 2, 3045, 419, 3, 2, 2, 2,
	3046, 3052, 7, 37, 2, 2, 3047, 3049, 5, 26, 14, 2, 3048, 3050, 5, 578,
	290, 2, 3049, 3048, 3, 2, 2, 2, 3049, 3050, 3, 2, 2, 2, 3050, 3052, 3,
	2, 2, 2, 3051, 3046, 3, 2, 2, 2, 3051, 3047, 3, 2, 2, 2, 3052, 3060, 3,
	2, 2, 2, 3053, 3054, 7, 333, 2, 2, 3054, 3056, 5, 26, 14, 2, 3055, 3057,
	5, 578, 290, 2, 3056, 3055, 3, 2, 2, 2, 3056, 3057, 3, 2, 2, 2, 3057, 3059,
	3, 2, 2, 2, 3058, 3053, 3, 2, 2, 2, 3059, 3062, 3, 2, 2, 2, 3060, 3058,
	3, 2, 2, 2, 3060, 3061, 3, 2, 2, 2, 3061, 421, 3, 2, 2, 2, 3062, 3060,
	3, 2, 2, 2, 3063, 3064, 7, 330, 2, 2, 3064, 3067, 5, 26, 14, 2, 3065, 3067,
	5, 408, 205, 2, 3066, 3063, 3, 2, 2, 2, 3066, 3065, 3, 2, 2, 2, 3067, 3070,
	3, 2, 2, 2, 3068, 3066, 3, 2, 2, 2, 3068, 3069, 3, 2, 2, 2, 3069, 3075,
	3, 2, 2, 2, 3070, 3068, 3, 2, 2, 2, 3071, 3072, 7, 310, 2, 2, 3072, 3073,
	5, 622, 312, 2, 3073, 3074, 7, 311, 2, 2, 3074, 3076, 3, 2, 2, 2, 3075,
	3071, 3, 2, 2, 2, 3075, 3076, 3, 2, 2, 2, 3076, 423, 3, 2, 2, 2, 3077,
	3078, 7, 308, 2, 2, 3078, 3079, 5, 426, 214, 2, 3079, 3080, 7, 309, 2,
	2, 3080, 3090, 3, 2, 2, 2, 3081, 3083, 5, 24, 13, 2, 3082, 3081, 3, 2,
	2, 2, 3082, 3083, 3, 2, 2, 2, 3083, 3084, 3, 2, 2, 2, 3084, 3087, 5, 600,
	301, 2, 3085, 3086, 7, 131, 2, 2, 3086, 3088, 5, 600, 301, 2, 3087, 3085,
	3, 2, 2, 2, 3087, 3088, 3, 2, 2, 2, 3088, 3090, 3, 2, 2, 2, 3089, 3077,
	3, 2, 2, 2, 3089, 3082, 3, 2, 2, 2, 3090, 425, 3, 2, 2, 2, 3091, 3096,
	5, 424, 213, 2, 3092, 3093, 9, 56, 2, 2, 3093, 3095, 5, 424, 213, 2, 3094,
	3092, 3, 2, 2, 2, 3095, 3098, 3, 2, 2, 2, 3096, 3094, 3, 2, 2, 2, 3096,
	3097, 3, 2, 2, 2, 3097, 427, 3, 2, 2, 2, 3098, 3096, 3, 2, 2, 2, 3099,
	3103, 5, 432, 217, 2, 3100, 3103, 5, 434, 218, 2, 3101, 3103, 5, 436, 219,
	2, 3102, 3099, 3, 2, 2, 2, 3102, 3100, 3, 2, 2, 2, 3102, 3101, 3, 2, 2,
	2, 3103, 429, 3, 2, 2, 2, 3104, 3105, 5, 432, 217, 2, 3105, 431, 3, 2,
	2, 2, 3106, 3112, 7, 310, 2, 2, 3107, 3109, 7, 364, 2, 2, 3108, 3110, 5,
	606, 304, 2, 3109, 3108, 3, 2, 2, 2, 3109, 3110, 3, 2, 2, 2, 3110, 3113,
	3, 2, 2, 2, 3111, 3113, 7, 357, 2, 2, 3112, 3107, 3, 2, 2, 2, 3112, 3111,
	3, 2, 2, 2, 3113, 3114, 3, 2, 2, 2, 3114, 3115, 7, 311, 2, 2, 3115, 433,
	3, 2, 2, 2, 3116, 3117, 7, 310, 2, 2, 3117, 3118, 7, 340, 2, 2, 3118, 3119,
	5, 606, 304, 2, 3119, 3120, 7, 311, 2, 2, 3120, 435, 3, 2, 2, 2, 3121,
	3122, 7, 310, 2, 2, 3122, 3123, 7, 368, 2, 2, 3123, 3124, 5, 606, 304,
	2, 3124, 3125, 7, 311, 2, 2, 3125, 437, 3, 2, 2, 2, 3126, 3127, 5, 600,
	301, 2, 3127, 3130, 7, 332, 2, 2, 3128, 3131, 7, 320, 2, 2, 3129, 3131,
	5, 600, 301, 2, 3130, 3128, 3, 2, 2, 2, 3130, 3129, 3, 2, 2, 2, 3131, 439,
	3, 2, 2, 2, 3132, 3138, 5, 416, 209, 2, 3133, 3135, 7, 308, 2, 2, 3134,
	3136, 5, 562, 282, 2, 3135, 3134, 3, 2, 2, 2, 3135, 3136, 3, 2, 2, 2, 3136,
	3137, 3, 2, 2, 2, 3137, 3139, 7, 309, 2, 2, 3138, 3133, 3, 2, 2, 2, 3138,
	3139, 3, 2, 2, 2, 3139, 441, 3, 2, 2, 2, 3140, 3141, 8, 222, 1, 2, 3141,
	3142, 7, 117, 2, 2, 3142, 3143, 7, 308, 2, 2, 3143, 3148, 5, 442, 222,
	2, 3144, 3145, 7, 329, 2, 2, 3145, 3147, 5, 444, 223, 2, 3146, 3144, 3,
	2, 2, 2, 3147, 3150, 3, 2, 2, 2, 3148, 3146, 3, 2, 2, 2, 3148, 3149, 3,
	2, 2, 2, 3149, 3151, 3, 2, 2, 2, 3150, 3148, 3, 2, 2, 2, 3151, 3152, 7,
	309, 2, 2, 3152, 3187, 3, 2, 2, 2, 3153, 3154, 5, 468, 235, 2, 3154, 3155,
	5, 442, 222, 2, 3155, 3157, 3, 2, 2, 2, 3156, 3153, 3, 2, 2, 2, 3157, 3158,
	3, 2, 2, 2, 3158, 3156, 3, 2, 2, 2, 3158, 3159, 3, 2, 2, 2, 3159, 3187,
	3, 2, 2, 2, 3160, 3164, 5, 470, 236, 2, 3161, 3162, 7, 249, 2, 2, 3162,
	3165, 5, 442, 222, 2, 3163, 3165, 5, 428, 215, 2, 3164, 3161, 3, 2, 2,
	2, 3164, 3163, 3, 2, 2, 2, 3164, 3165, 3, 2, 2, 2, 3165, 3187, 3, 2, 2,
	2, 3166, 3167, 7, 308, 2, 2, 3167, 3172, 5, 442, 222, 2, 3168, 3169, 7,
	329, 2, 2, 3169, 3171, 5, 444, 223, 2, 3170, 3168, 3, 2, 2, 2, 3171, 3174,
	3, 2, 2, 2, 3172, 3170, 3, 2, 2, 2, 3172, 3173, 3, 2, 2, 2, 3173, 3175,
	3, 2, 2, 2, 3174, 3172, 3, 2, 2, 2, 3175, 3176, 7, 309, 2, 2, 3176, 3179,
	3, 2, 2, 2, 3177, 3179, 5, 440, 221, 2, 3178, 3166, 3, 2, 2, 2, 3178, 3177,
	3, 2, 2, 2, 3179, 3181, 3, 2, 2, 2, 3180, 3182, 5, 430, 216, 2, 3181, 3180,
	3, 2, 2, 2, 3181, 3182, 3, 2, 2, 2, 3182, 3187, 3, 2, 2, 2, 3183, 3184,
	5, 466, 234, 2, 3184, 3185, 5, 442, 222, 3, 3185, 3187, 3, 2, 2, 2, 3186,
	3140, 3, 2, 2, 2, 3186, 3156, 3, 2, 2, 2, 3186, 3160, 3, 2, 2, 2, 3186,
	3178, 3, 2, 2, 2, 3186, 3183, 3, 2, 2, 2, 3187, 3202, 3, 2, 2, 2, 3188,
	3198, 12, 5, 2, 2, 3189, 3190, 9, 57, 2, 2, 3190, 3199, 5, 442, 222, 2,
	3191, 3192, 5, 468, 235, 2, 3192, 3193, 5, 442, 222, 2, 3193, 3195, 3,
	2, 2, 2, 3194, 3191, 3, 2, 2, 2, 3195, 3196, 3, 2, 2, 2, 3196, 3194, 3,
	2, 2, 2, 3196, 3197, 3, 2, 2, 2, 3197, 3199, 3, 2, 2, 2, 3198, 3189, 3,
	2, 2, 2, 3198, 3194, 3, 2, 2, 2, 3199, 3201, 3, 2, 2, 2, 3200, 3188, 3,
	2, 2, 2, 3201, 3204, 3, 2, 2, 2, 3202, 3200, 3, 2, 2, 2, 3202, 3203, 3,
	2, 2, 2, 3203, 443, 3, 2, 2, 2, 3204, 3202, 3, 2, 2, 2, 3205, 3208, 5,
	446, 224, 2, 3206, 3208, 5, 600, 301, 2, 3207, 3205, 3, 2, 2, 2, 3207,
	3206, 3, 2, 2, 2, 3208, 445, 3, 2, 2, 2, 3209, 3210, 5, 648, 325, 2, 3210,
	3211, 5, 22, 12, 2, 3211, 3212, 5, 600, 301, 2, 3212, 447, 3, 2, 2, 2,
	3213, 3216, 5, 426, 214, 2, 3214, 3216, 5, 442, 222, 2, 3215, 3213, 3,
	2, 2, 2, 3215, 3214, 3, 2, 2, 2, 3216, 449, 3, 2, 2, 2, 3217, 3221, 7,
	372, 2, 2, 3218, 3219, 7, 332, 2, 2, 3219, 3221, 7, 365, 2, 2, 3220, 3217,
	3, 2, 2, 2, 3220, 3218, 3, 2, 2, 2, 3221, 3222, 3, 2, 2, 2, 3222, 3223,
	5, 600, 301, 2, 3223, 451, 3, 2, 2, 2, 3224, 3225, 7, 127, 2, 2, 3225,
	3227, 7, 71, 2, 2, 3226, 3228, 5, 26, 14, 2, 3227, 3226, 3, 2, 2, 2, 3227,
	3228, 3, 2, 2, 2, 3228, 3229, 3, 2, 2, 2, 3229, 3230, 5, 466, 234, 2, 3230,
	3231, 7, 307, 2, 2, 3231, 3248, 3, 2, 2, 2, 3232, 3234, 7, 83, 2, 2, 3233,
	3232, 3, 2, 2, 2, 3233, 3234, 3, 2, 2, 2, 3234, 3235, 3, 2, 2, 2, 3235,
	3237, 7, 71, 2, 2, 3236, 3238, 5, 26, 14, 2, 3237, 3236, 3, 2, 2, 2, 3237,
	3238, 3, 2, 2, 2, 3238, 3239, 3, 2, 2, 2, 3239, 3240, 5, 466, 234, 2, 3240,
	3244, 7, 307, 2, 2, 3241, 3243, 5, 454, 228, 2, 3242, 3241, 3, 2, 2, 2,
	3243, 3246, 3, 2, 2, 2, 3244, 3242, 3, 2, 2, 2, 3244, 3245, 3, 2, 2, 2,
	3245, 3248, 3, 2, 2, 2, 3246, 3244, 3, 2, 2, 2, 3247, 3224, 3, 2, 2, 2,
	3247, 3233, 3, 2, 2, 2, 3248, 3249, 3, 2, 2, 2, 3249, 3253, 7, 95, 2, 2,
	3250, 3251, 7, 332, 2, 2, 3251, 3254, 5, 26, 14, 2, 3252, 3254, 3, 2, 2,
	2, 3253, 3250, 3, 2, 2, 2, 3253, 3252, 3, 2, 2, 2, 3254, 453, 3, 2, 2,
	2, 3255, 3256, 7, 83, 2, 2, 3256, 3261, 5, 460, 231, 2, 3257, 3258, 5,
	462, 232, 2, 3258, 3259, 5, 456, 229, 2, 3259, 3261, 3, 2, 2, 2, 3260,
	3255, 3, 2, 2, 2, 3260, 3257, 3, 2, 2, 2, 3261, 3262, 3, 2, 2, 2, 3262,
	3263, 7, 307, 2, 2, 3263, 3276, 3, 2, 2, 2, 3264, 3266, 5, 530, 266, 2,
	3265, 3264, 3, 2, 2, 2, 3266, 3269, 3, 2, 2, 2, 3267, 3265, 3, 2, 2, 2,
	3267, 3268, 3, 2, 2, 2, 3268, 3273, 3, 2, 2, 2, 3269, 3267, 3, 2, 2, 2,
	3270, 3274, 5, 932, 467, 2, 3271, 3274, 5, 926, 464, 2, 3272, 3274, 5,
	380, 191, 2, 3273, 3270, 3, 2, 2, 2, 3273, 3271, 3, 2, 2, 2, 3273, 3272,
	3, 2, 2, 2, 3274, 3276, 3, 2, 2, 2, 3275, 3260, 3, 2, 2, 2, 3275, 3267,
	3, 2, 2, 2, 3276, 455, 3, 2, 2, 2, 3277, 3282, 5, 458, 230, 2, 3278, 3279,
	7, 329, 2, 2, 3279, 3281, 5, 458, 230, 2, 3280, 3278, 3, 2, 2, 2, 3281,
	3284, 3, 2, 2, 2, 3282, 3280, 3, 2, 2, 2, 3282, 3283, 3, 2, 2, 2, 3283,
	457, 3, 2, 2, 2, 3284, 3282, 3, 2, 2, 2, 3285, 3286, 5, 532, 267, 2, 3286,
	459, 3, 2, 2, 2, 3287, 3288, 7, 140, 2, 2, 3288, 3291, 5, 464, 233, 2,
	3289, 3290, 7, 178, 2, 2, 3290, 3292, 5, 464, 233, 2, 3291, 3289, 3, 2,
	2, 2, 3291, 3292, 3, 2, 2, 2, 3292, 3296, 3, 2, 2, 2, 3293, 3294, 7, 178,
	2, 2, 3294, 3296, 5, 464, 233, 2, 3295, 3287, 3, 2, 2, 2, 3295, 3293, 3,
	2, 2, 2, 3296, 461, 3, 2, 2, 2, 3297, 3299, 7, 140, 2, 2, 3298, 3300, 5,
	464, 233, 2, 3299, 3298, 3, 2, 2, 2, 3299, 3300, 3, 2, 2, 2, 3300, 3305,
	3, 2, 2, 2, 3301, 3303, 7, 178, 2, 2, 3302, 3304, 5, 464, 233, 2, 3303,
	3302, 3, 2, 2, 2, 3303, 3304, 3, 2, 2, 2, 3304, 3306, 3, 2, 2, 2, 3305,
	3301, 3, 2, 2, 2, 3305, 3306, 3, 2, 2, 2, 3306, 3313, 3, 2, 2, 2, 3307,
	3309, 7, 178, 2, 2, 3308, 3310, 5, 464, 233, 2, 3309, 3308, 3, 2, 2, 2,
	3309, 3310, 3, 2, 2, 2, 3310, 3313, 3, 2, 2, 2, 3311, 3313, 7, 139, 2,
	2, 3312, 3297, 3, 2, 2, 2, 3312, 3307, 3, 2, 2, 2, 3312, 3311, 3, 2, 2,
	2, 3313, 463, 3, 2, 2, 2, 3314, 3316, 5, 24, 13, 2, 3315, 3317, 5, 226,
	114, 2, 3316, 3315, 3, 2, 2, 2, 3316, 3317, 3, 2, 2, 2, 3317, 3320, 3,
	2, 2, 2, 3318, 3320, 5, 226, 114, 2, 3319, 3314, 3, 2, 2, 2, 3319, 3318,
	3, 2, 2, 2, 3320, 465, 3, 2, 2, 2, 3321, 3327, 7, 381, 2, 2, 3322, 3328,
	5, 26, 14, 2, 3323, 3324, 7, 308, 2, 2, 3324, 3325, 5, 426, 214, 2, 3325,
	3326, 7, 309, 2, 2, 3326, 3328, 3, 2, 2, 2, 3327, 3322, 3, 2, 2, 2, 3327,
	3323, 3, 2, 2, 2, 3328, 467, 3, 2, 2, 2, 3329, 3338, 7, 384, 2, 2, 3330,
	3334, 7, 310, 2, 2, 3331, 3335, 7, 364, 2, 2, 3332, 3335, 7, 357, 2, 2,
	3333, 3335, 5, 438, 220, 2, 3334, 3331, 3, 2, 2, 2, 3334, 3332, 3, 2, 2,
	2, 3334, 3333, 3, 2, 2, 2, 3335, 3336, 3, 2, 2, 2, 3336, 3339, 7, 311,
	2, 2, 3337, 3339, 5, 594, 298, 2, 3338, 3330, 3, 2, 2, 2, 3338, 3337, 3,
	2, 2, 2, 3339, 469, 3, 2, 2, 2, 3340, 3353, 5, 600, 301, 2, 3341, 3342,
	7, 87, 2, 2, 3342, 3343, 7, 312, 2, 2, 3343, 3348, 5, 526, 264, 2, 3344,
	3345, 7, 329, 2, 2, 3345, 3347, 5, 526, 264, 2, 3346, 3344, 3, 2, 2, 2,
	3347, 3350, 3, 2, 2, 2, 3348, 3346, 3, 2, 2, 2, 3348, 3349, 3, 2, 2, 2,
	3349, 3351, 3, 2, 2, 2, 3350, 3348, 3, 2, 2, 2, 3351, 3352, 7, 313, 2,
	2, 3352, 3354, 3, 2, 2, 2, 3353, 3341, 3, 2, 2, 2, 3353, 3354, 3, 2, 2,
	2, 3354, 471, 3, 2, 2, 2, 3355, 3356, 7, 79, 2, 2, 3356, 3361, 5, 26, 14,
	2, 3357, 3358, 7, 308, 2, 2, 3358, 3359, 5, 346, 174, 2, 3359, 3360, 7,
	309, 2, 2, 3360, 3362, 3, 2, 2, 2, 3361, 3357, 3, 2, 2, 2, 3361, 3362,
	3, 2, 2, 2, 3362, 3364, 3, 2, 2, 2, 3363, 3365, 5, 518, 260, 2, 3364, 3363,
	3, 2, 2, 2, 3364, 3365, 3, 2, 2, 2, 3365, 3366, 3, 2, 2, 2, 3366, 3370,
	7, 307, 2, 2, 3367, 3369, 5, 498, 250, 2, 3368, 3367, 3, 2, 2, 2, 3369,
	3372, 3, 2, 2, 2, 3370, 3368, 3, 2, 2, 2, 3370, 3371, 3, 2, 2, 2, 3371,
	3373, 3, 2, 2, 2, 3372, 3370, 3, 2, 2, 2, 3373, 3377, 7, 99, 2, 2, 3374,
	3375, 7, 332, 2, 2, 3375, 3378, 5, 26, 14, 2, 3376, 3378, 3, 2, 2, 2, 3377,
	3374, 3, 2, 2, 2, 3377, 3376, 3, 2, 2, 2, 3378, 473, 3, 2, 2, 2, 3379,
	3380, 5, 26, 14, 2, 3380, 3381, 7, 332, 2, 2, 3381, 3383, 3, 2, 2, 2, 3382,
	3379, 3, 2, 2, 2, 3382, 3383, 3, 2, 2, 2, 3383, 3384, 3, 2, 2, 2, 3384,
	3385, 7, 81, 2, 2, 3385, 3391, 5, 476, 239, 2, 3386, 3387, 7, 131, 2, 2,
	3387, 3388, 7, 308, 2, 2, 3388, 3389, 5, 600, 301, 2, 3389, 3390, 7, 309,
	2, 2, 3390, 3392, 3, 2, 2, 2, 3391, 3386, 3, 2, 2, 2, 3391, 3392, 3, 2,
	2, 2, 3392, 3393, 3, 2, 2, 2, 3393, 3394, 5, 478, 240, 2, 3394, 475, 3,
	2, 2, 2, 3395, 3398, 5, 26, 14, 2, 3396, 3397, 7, 329, 2, 2, 3397, 3399,
	5, 26, 14, 2, 3398, 3396, 3, 2, 2, 2, 3399, 3400, 3, 2, 2, 2, 3400, 3398,
	3, 2, 2, 2, 3400, 3401, 3, 2, 2, 2, 3401, 477, 3, 2, 2, 2, 3402, 3406,
	7, 312, 2, 2, 3403, 3405, 5, 480, 241, 2, 3404, 3403, 3, 2, 2, 2, 3405,
	3408, 3, 2, 2, 2, 3406, 3404, 3, 2, 2, 2, 3406, 3407, 3, 2, 2, 2, 3407,
	3409, 3, 2, 2, 2, 3408, 3406, 3, 2, 2, 2, 3409, 3412, 7, 313, 2, 2, 3410,
	3412, 7, 307, 2, 2, 3411, 3402, 3, 2, 2, 2, 3411, 3410, 3, 2, 2, 2, 3412,
	479, 3, 2, 2, 2, 3413, 3418, 5, 866, 434, 2, 3414, 3415, 5, 482, 242, 2,
	3415, 3416, 7, 307, 2, 2, 3416, 3418, 3, 2, 2, 2, 3417, 3413, 3, 2, 2,
	2, 3417, 3414, 3, 2, 2, 2, 3418, 481, 3, 2, 2, 2, 3419, 3421, 5, 530, 266,
	2, 3420, 3419, 3, 2, 2, 2, 3421, 3424, 3, 2, 2, 2, 3422, 3420, 3, 2, 2,
	2, 3422, 3423, 3, 2, 2, 2, 3423, 3427, 3, 2, 2, 2, 3424, 3422, 3, 2, 2,
	2, 3425, 3428, 5, 500, 251, 2, 3426, 3428, 5, 484, 243, 2, 3427, 3425,
	3, 2, 2, 2, 3427, 3426, 3, 2, 2, 2, 3428, 483, 3, 2, 2, 2, 3429, 3430,
	5, 78, 40, 2, 3430, 3431, 5, 26, 14, 2, 3431, 3432, 7, 340, 2, 2, 3432,
	3438, 5, 486, 244, 2, 3433, 3434, 7, 131, 2, 2, 3434, 3435, 7, 308, 2,
	2, 3435, 3436, 5, 600, 301, 2, 3436, 3437, 7, 309, 2, 2, 3437, 3439, 3,
	2, 2, 2, 3438, 3433, 3, 2, 2, 2, 3438, 3439, 3, 2, 2, 2, 3439, 485, 3,
	2, 2, 2, 3440, 3441, 8, 244, 1, 2, 3441, 3442, 7, 308, 2, 2, 3442, 3443,
	5, 486, 244, 2, 3443, 3444, 7, 309, 2, 2, 3444, 3455, 3, 2, 2, 2, 3445,
	3447, 7, 322, 2, 2, 3446, 3445, 3, 2, 2, 2, 3446, 3447, 3, 2, 2, 2, 3447,
	3448, 3, 2, 2, 2, 3448, 3455, 5, 488, 245, 2, 3449, 3452, 5, 496, 249,
	2, 3450, 3451, 7, 159, 2, 2, 3451, 3453, 5, 496, 249, 2, 3452, 3450, 3,
	2, 2, 2, 3452, 3453, 3, 2, 2, 2, 3453, 3455, 3, 2, 2, 2, 3454, 3440, 3,
	2, 2, 2, 3454, 3446, 3, 2, 2, 2, 3454, 3449, 3, 2, 2, 2, 3455, 3470, 3,
	2, 2, 2, 3456, 3457, 12, 5, 2, 2, 3457, 3458, 9, 58, 2, 2, 3458, 3469,
	5, 486, 244, 6, 3459, 3460, 12, 4, 2, 2, 3460, 3461, 7, 287, 2, 2, 3461,
	3462, 7, 308, 2, 2, 3462, 3463, 5, 496, 249, 2, 3463, 3466, 7, 309, 2,
	2, 3464, 3465, 7, 159, 2, 2, 3465, 3467, 5, 496, 249, 2, 3466, 3464, 3,
	2, 2, 2, 3466, 3467, 3, 2, 2, 2, 3467, 3469, 3, 2, 2, 2, 3468, 3456, 3,
	2, 2, 2, 3468, 3459, 3, 2, 2, 2, 3469, 3472, 3, 2, 2, 2, 3470, 3468, 3,
	2, 2, 2, 3470, 3471, 3, 2, 2, 2, 3471, 487, 3, 2, 2, 2, 3472, 3470, 3,
	2, 2, 2, 3473, 3474, 7, 57, 2, 2, 3474, 3475, 7, 308, 2, 2, 3475, 3476,
	5, 490, 246, 2, 3476, 3482, 7, 309, 2, 2, 3477, 3478, 7, 147, 2, 2, 3478,
	3479, 7, 312, 2, 2, 3479, 3480, 5, 492, 247, 2, 3480, 3481, 7, 313, 2,
	2, 3481, 3483, 3, 2, 2, 2, 3482, 3477, 3, 2, 2, 2, 3482, 3483, 3, 2, 2,
	2, 3483, 489, 3, 2, 2, 2, 3484, 3487, 5, 26, 14, 2, 3485, 3486, 7, 330,
	2, 2, 3486, 3488, 5, 26, 14, 2, 3487, 3485, 3, 2, 2, 2, 3487, 3488, 3,
	2, 2, 2, 3488, 491, 3, 2, 2, 2, 3489, 3494, 5, 494, 248, 2, 3490, 3491,
	7, 329, 2, 2, 3491, 3493, 5, 494, 248, 2, 3492, 3490, 3, 2, 2, 2, 3493,
	3496, 3, 2, 2, 2, 3494, 3492, 3, 2, 2, 2, 3494, 3495, 3, 2, 2, 2, 3495,
	493, 3, 2, 2, 2, 3496, 3494, 3, 2, 2, 2, 3497, 3498, 7, 310, 2, 2, 3498,
	3499, 5, 496, 249, 2, 3499, 3500, 7, 332, 2, 2, 3500, 3501, 5, 496, 249,
	2, 3501, 3502, 7, 311, 2, 2, 3502, 3505, 3, 2, 2, 2, 3503, 3505, 5, 496,
	249, 2, 3504, 3497, 3, 2, 2, 2, 3504, 3503, 3, 2, 2, 2, 3505, 495, 3, 2,
	2, 2, 3506, 3507, 5, 600, 301, 2, 3507, 497, 3, 2, 2, 2, 3508, 3510, 5,
	530, 266, 2, 3509, 3508, 3, 2, 2, 2, 3510, 3513, 3, 2, 2, 2, 3511, 3509,
	3, 2, 2, 2, 3511, 3512, 3, 2, 2, 2, 3512, 3518, 3, 2, 2, 2, 3513, 3511,
	3, 2, 2, 2, 3514, 3519, 5, 502, 252, 2, 3515, 3516, 5, 500, 251, 2, 3516,
	3517, 7, 307, 2, 2, 3517, 3519, 3, 2, 2, 2, 3518, 3514, 3, 2, 2, 2, 3518,
	3515, 3, 2, 2, 2, 3519, 499, 3, 2, 2, 2, 3520, 3521, 7, 176, 2, 2, 3521,
	3522, 7, 330, 2, 2, 3522, 3523, 5, 26, 14, 2, 3523, 3524, 7, 340, 2, 2,
	3524, 3525, 5, 600, 301, 2, 3525, 3533, 3, 2, 2, 2, 3526, 3527, 7, 263,
	2, 2, 3527, 3528, 7, 330, 2, 2, 3528, 3529, 5, 26, 14, 2, 3529, 3530, 7,
	340, 2, 2, 3530, 3531, 5, 596, 299, 2, 3531, 3533, 3, 2, 2, 2, 3532, 3520,
	3, 2, 2, 2, 3532, 3526, 3, 2, 2, 2, 3533, 501, 3, 2, 2, 2, 3534, 3537,
	5, 504, 253, 2, 3535, 3537, 5, 474, 238, 2, 3536, 3534, 3, 2, 2, 2, 3536,
	3535, 3, 2, 2, 2, 3537, 503, 3, 2, 2, 2, 3538, 3540, 5, 556, 279, 2, 3539,
	3538, 3, 2, 2, 2, 3539, 3540, 3, 2, 2, 2, 3540, 3541, 3, 2, 2, 2, 3541,
	3542, 5, 26, 14, 2, 3542, 3543, 7, 332, 2, 2, 3543, 3545, 3, 2, 2, 2, 3544,
	3539, 3, 2, 2, 2, 3544, 3545, 3, 2, 2, 2, 3545, 3546, 3, 2, 2, 2, 3546,
	3547, 7, 80, 2, 2, 3547, 3553, 5, 600, 301, 2, 3548, 3549, 7, 131, 2, 2,
	3549, 3550, 7, 308, 2, 2, 3550, 3551, 5, 600, 301, 2, 3551, 3552, 7, 309,
	2, 2, 3552, 3554, 3, 2, 2, 2, 3553, 3548, 3, 2, 2, 2, 3553, 3554, 3, 2,
	2, 2, 3554, 3555, 3, 2, 2, 2, 3555, 3556, 5, 506, 254, 2, 3556, 505, 3,
	2, 2, 2, 3557, 3561, 7, 312, 2, 2, 3558, 3560, 5, 530, 266, 2, 3559, 3558,
	3, 2, 2, 2, 3560, 3563, 3, 2, 2, 2, 3561, 3559, 3, 2, 2, 2, 3561, 3562,
	3, 2, 2, 2, 3562, 3569, 3, 2, 2, 2, 3563, 3561, 3, 2, 2, 2, 3564, 3565,
	5, 508, 255, 2, 3565, 3566, 7, 307, 2, 2, 3566, 3568, 3, 2, 2, 2, 3567,
	3564, 3, 2, 2, 2, 3568, 3571, 3, 2, 2, 2, 3569, 3567, 3, 2, 2, 2, 3569,
	3570, 3, 2, 2, 2, 3570, 3572, 3, 2, 2, 2, 3571, 3569, 3, 2, 2, 2, 3572,
	3575, 7, 313, 2, 2, 3573, 3575, 7, 307, 2, 2, 3574, 3557, 3, 2, 2, 2, 3574,
	3573, 3, 2, 2, 2, 3575, 507, 3, 2, 2, 2, 3576, 3643, 5, 500, 251, 2, 3577,
	3579, 7, 285, 2, 2, 3578, 3577, 3, 2, 2, 2, 3578, 3579, 3, 2, 2, 2, 3579,
	3580, 3, 2, 2, 2, 3580, 3581, 5, 78, 40, 2, 3581, 3615, 5, 26, 14, 2, 3582,
	3584, 7, 310, 2, 2, 3583, 3585, 5, 496, 249, 2, 3584, 3583, 3, 2, 2, 2,
	3584, 3585, 3, 2, 2, 2, 3585, 3586, 3, 2, 2, 2, 3586, 3588, 7, 311, 2,
	2, 3587, 3582, 3, 2, 2, 2, 3587, 3588, 3, 2, 2, 2, 3588, 3589, 3, 2, 2,
	2, 3589, 3607, 7, 340, 2, 2, 3590, 3591, 7, 312, 2, 2, 3591, 3592, 5, 492,
	247, 2, 3592, 3598, 7, 313, 2, 2, 3593, 3594, 7, 287, 2, 2, 3594, 3595,
	7, 308, 2, 2, 3595, 3596, 5, 496, 249, 2, 3596, 3597, 7, 309, 2, 2, 3597,
	3599, 3, 2, 2, 2, 3598, 3593, 3, 2, 2, 2, 3598, 3599, 3, 2, 2, 2, 3599,
	3608, 3, 2, 2, 2, 3600, 3601, 5, 26, 14, 2, 3601, 3602, 7, 287, 2, 2, 3602,
	3603, 7, 308, 2, 2, 3603, 3604, 5, 496, 249, 2, 3604, 3605, 7, 309, 2,
	2, 3605, 3608, 3, 2, 2, 2, 3606, 3608, 5, 496, 249, 2, 3607, 3590, 3, 2,
	2, 2, 3607, 3600, 3, 2, 2, 2, 3607, 3606, 3, 2, 2, 2, 3608, 3616, 3, 2,
	2, 2, 3609, 3610, 7, 310, 2, 2, 3610, 3612, 7, 311, 2, 2, 3611, 3609, 3,
	2, 2, 2, 3611, 3612, 3, 2, 2, 2, 3612, 3613, 3, 2, 2, 2, 3613, 3614, 7,
	340, 2, 2, 3614, 3616, 5, 510, 256, 2, 3615, 3587, 3, 2, 2, 2, 3615, 3611,
	3, 2, 2, 2, 3616, 3634, 3, 2, 2, 2, 3617, 3618, 5, 78, 40, 2, 3618, 3631,
	5, 26, 14, 2, 3619, 3620, 7, 340, 2, 2, 3620, 3621, 7, 83, 2, 2, 3621,
	3632, 7, 223, 2, 2, 3622, 3624, 7, 310, 2, 2, 3623, 3625, 5, 496, 249,
	2, 3624, 3623, 3, 2, 2, 2, 3624, 3625, 3, 2, 2, 2, 3625, 3626, 3, 2, 2,
	2, 3626, 3628, 7, 311, 2, 2, 3627, 3622, 3, 2, 2, 2, 3627, 3628, 3, 2,
	2, 2, 3628, 3629, 3, 2, 2, 2, 3629, 3630, 7, 340, 2, 2, 3630, 3632, 7,
	83, 2, 2, 3631, 3619, 3, 2, 2, 2, 3631, 3627, 3, 2, 2, 2, 3632, 3634, 3,
	2, 2, 2, 3633, 3578, 3, 2, 2, 2, 3633, 3617, 3, 2, 2, 2, 3634, 3640, 3,
	2, 2, 2, 3635, 3636, 7, 131, 2, 2, 3636, 3637, 7, 308, 2, 2, 3637, 3638,
	5, 600, 301, 2, 3638, 3639, 7, 309, 2, 2, 3639, 3641, 3, 2, 2, 2, 3640,
	3635, 3, 2, 2, 2, 3640, 3641, 3, 2, 2, 2, 3641, 3643, 3, 2, 2, 2, 3642,
	3576, 3, 2, 2, 2, 3642, 3633, 3, 2, 2, 2, 3643, 509, 3, 2, 2, 2, 3644,
	3645, 7, 308, 2, 2, 3645, 3646, 5, 512, 257, 2, 3646, 3654, 7, 309, 2,
	2, 3647, 3648, 7, 329, 2, 2, 3648, 3649, 7, 308, 2, 2, 3649, 3650, 5, 512,
	257, 2, 3650, 3651, 7, 309, 2, 2, 3651, 3653, 3, 2, 2, 2, 3652, 3647, 3,
	2, 2, 2, 3653, 3656, 3, 2, 2, 2, 3654, 3652, 3, 2, 2, 2, 3654, 3655, 3,
	2, 2, 2, 3655, 511, 3, 2, 2, 2, 3656, 3654, 3, 2, 2, 2, 3657, 3662, 5,
	514, 258, 2, 3658, 3659, 7, 375, 2, 2, 3659, 3661, 5, 514, 258, 2, 3660,
	3658, 3, 2, 2, 2, 3661, 3664, 3, 2, 2, 2, 3662, 3660, 3, 2, 2, 2, 3662,
	3663, 3, 2, 2, 2, 3663, 513, 3, 2, 2, 2, 3664, 3662, 3, 2, 2, 2, 3665,
	3671, 5, 492, 247, 2, 3666, 3667, 7, 310, 2, 2, 3667, 3668, 9, 59, 2, 2,
	3668, 3669, 5, 516, 259, 2, 3669, 3670, 7, 311, 2, 2, 3670, 3672, 3, 2,
	2, 2, 3671, 3666, 3, 2, 2, 2, 3671, 3672, 3, 2, 2, 2, 3672, 515, 3, 2,
	2, 2, 3673, 3676, 5, 496, 249, 2, 3674, 3675, 7, 332, 2, 2, 3675, 3677,
	5, 496, 249, 2, 3676, 3674, 3, 2, 2, 2, 3676, 3677, 3, 2, 2, 2, 3677, 517,
	3, 2, 2, 2, 3678, 3679, 7, 287, 2, 2, 3679, 3680, 7, 124, 2, 2, 3680, 3681,
	7, 221, 2, 2, 3681, 3682, 7, 308, 2, 2, 3682, 3687, 5, 346, 174, 2, 3683,
	3684, 7, 382, 2, 2, 3684, 3685, 7, 308, 2, 2, 3685, 3687, 5, 520, 261,
	2, 3686, 3678, 3, 2, 2, 2, 3686, 3683, 3, 2, 2, 2, 3687, 3688, 3, 2, 2,
	2, 3688, 3689, 7, 309, 2, 2, 3689, 3692, 3, 2, 2, 2, 3690, 3692, 5, 466,
	234, 2, 3691, 3686, 3, 2, 2, 2, 3691, 3690, 3, 2, 2, 2, 3692, 519, 3, 2,
	2, 2, 3693, 3694, 8, 261, 1, 2, 3694, 3695, 9, 60, 2, 2, 3695, 3696, 5,
	522, 262, 2, 3696, 3702, 3, 2, 2, 2, 3697, 3698, 12, 3, 2, 2, 3698, 3699,
	7, 177, 2, 2, 3699, 3701, 5, 520, 261, 4, 3700, 3697, 3, 2, 2, 2, 3701,
	3704, 3, 2, 2, 2, 3702, 3700, 3, 2, 2, 2, 3702, 3703, 3, 2, 2, 2, 3703,
	521, 3, 2, 2, 2, 3704, 3702, 3, 2, 2, 2, 3705, 3714, 5, 418, 210, 2, 3706,
	3707, 5, 418, 210, 2, 3707, 3708, 7, 330, 2, 2, 3708, 3711, 3, 2, 2, 2,
	3709, 3711, 5, 582, 292, 2, 3710, 3706, 3, 2, 2, 2, 3710, 3709, 3, 2, 2,
	2, 3710, 3711, 3, 2, 2, 2, 3711, 3712, 3, 2, 2, 2, 3712, 3714, 5, 26, 14,
	2, 3713, 3705, 3, 2, 2, 2, 3713, 3710, 3, 2, 2, 2, 3714, 523, 3, 2, 2,
	2, 3715, 3717, 5, 670, 336, 2, 3716, 3715, 3, 2, 2, 2, 3716, 3717, 3, 2,
	2, 2, 3717, 3718, 3, 2, 2, 2, 3718, 3719, 5, 680, 341, 2, 3719, 3720, 7,
	307, 2, 2, 3720, 525, 3, 2, 2, 2, 3721, 3723, 5, 528, 265, 2, 3722, 3724,
	5, 450, 226, 2, 3723, 3722, 3, 2, 2, 2, 3723, 3724, 3, 2, 2, 2, 3724, 527,
	3, 2, 2, 2, 3725, 3726, 7, 310, 2, 2, 3726, 3727, 5, 584, 293, 2, 3727,
	3728, 7, 311, 2, 2, 3728, 3731, 3, 2, 2, 2, 3729, 3731, 5, 600, 301, 2,
	3730, 3725, 3, 2, 2, 2, 3730, 3729, 3, 2, 2, 2, 3731, 529, 3, 2, 2, 2,
	3732, 3733, 7, 308, 2, 2, 3733, 3734, 7, 364, 2, 2, 3734, 3739, 5, 532,
	267, 2, 3735, 3736, 7, 329, 2, 2, 3736, 3738, 5, 532, 267, 2, 3737, 3735,
	3, 2, 2, 2, 3738, 3741, 3, 2, 2, 2, 3739, 3737, 3, 2, 2, 2, 3739, 3740,
	3, 2, 2, 2, 3740, 3742, 3, 2, 2, 2, 3741, 3739, 3, 2, 2, 2, 3742, 3743,
	7, 364, 2, 2, 3743, 3744, 7, 309, 2, 2, 3744, 3747, 3, 2, 2, 2, 3745, 3747,
	7, 303, 2, 2, 3746, 3732, 3, 2, 2, 2, 3746, 3745, 3, 2, 2, 2, 3747, 531,
	3, 2, 2, 2, 3748, 3751, 5, 26, 14, 2, 3749, 3750, 7, 340, 2, 2, 3750, 3752,
	5, 600, 301, 2, 3751, 3749, 3, 2, 2, 2, 3751, 3752, 3, 2, 2, 2, 3752, 533,
	3, 2, 2, 2, 3753, 3754, 7, 166, 2, 2, 3754, 3767, 5, 600, 301, 2, 3755,
	3757, 5, 582, 292, 2, 3756, 3755, 3, 2, 2, 2, 3756, 3757, 3, 2, 2, 2, 3757,
	3758, 3, 2, 2, 2, 3758, 3764, 7, 166, 2, 2, 3759, 3761, 7, 308, 2, 2, 3760,
	3762, 5, 566, 284, 2, 3761, 3760, 3, 2, 2, 2, 3761, 3762, 3, 2, 2, 2, 3762,
	3763, 3, 2, 2, 2, 3763, 3765, 7, 309, 2, 2, 3764, 3759, 3, 2, 2, 2, 3764,
	3765, 3, 2, 2, 2, 3765, 3767, 3, 2, 2, 2, 3766, 3753, 3, 2, 2, 2, 3766,
	3756, 3, 2, 2, 2, 3767, 535, 3, 2, 2, 2, 3768, 3771, 5, 590, 296, 2, 3769,
	3771, 5, 554, 278, 2, 3770, 3768, 3, 2, 2, 2, 3770, 3769, 3, 2, 2, 2, 3771,
	537, 3, 2, 2, 2, 3772, 3773, 5, 536, 269, 2, 3773, 539, 3, 2, 2, 2, 3774,
	3775, 7, 310, 2, 2, 3775, 3776, 5, 584, 293, 2, 3776, 3777, 7, 311, 2,
	2, 3777, 541, 3, 2, 2, 2, 3778, 3780, 7, 310, 2, 2, 3779, 3781, 5, 584,
	293, 2, 3780, 3779, 3, 2, 2, 2, 3780, 3781, 3, 2, 2, 2, 3781, 3782, 3,
	2, 2, 2, 3782, 3783, 7, 311, 2, 2, 3783, 543, 3, 2, 2, 2, 3784, 3788, 7,
	310, 2, 2, 3785, 3789, 7, 364, 2, 2, 3786, 3789, 5, 554, 278, 2, 3787,
	3789, 5, 622, 312, 2, 3788, 3785, 3, 2, 2, 2, 3788, 3786, 3, 2, 2, 2, 3788,
	3787, 3, 2, 2, 2, 3788, 3789, 3, 2, 2, 2, 3789, 3790, 3, 2, 2, 2, 3790,
	3791, 7, 311, 2, 2, 3791, 545, 3, 2, 2, 2, 3792, 3798, 7, 239, 2, 2, 3793,
	3795, 7, 265, 2, 2, 3794, 3796, 7, 246, 2, 2, 3795, 3794, 3, 2, 2, 2, 3795,
	3796, 3, 2, 2, 2, 3796, 3798, 3, 2, 2, 2, 3797, 3792, 3, 2, 2, 2, 3797,
	3793, 3, 2, 2, 2, 3798, 547, 3, 2, 2, 2, 3799, 3801, 5, 30, 16, 2, 3800,
	3802, 5, 52, 27, 2, 3801, 3800, 3, 2, 2, 2, 3801, 3802, 3, 2, 2, 2, 3802,
	3815, 3, 2, 2, 2, 3803, 3805, 5, 32, 17, 2, 3804, 3806, 5, 52, 27, 2, 3805,
	3804, 3, 2, 2, 2, 3805, 3806, 3, 2, 2, 2, 3806, 3809, 3, 2, 2, 2, 3807,
	3809, 5, 26, 14, 2, 3808, 3803, 3, 2, 2, 2, 3808, 3807, 3, 2, 2, 2, 3809,
	3811, 3, 2, 2, 2, 3810, 3812, 5, 544, 273, 2, 3811, 3810, 3, 2, 2, 2, 3811,
	3812, 3, 2, 2, 2, 3812, 3815, 3, 2, 2, 2, 3813, 3815, 5, 542, 272, 2, 3814,
	3799, 3, 2, 2, 2, 3814, 3808, 3, 2, 2, 2, 3814, 3813, 3, 2, 2, 2, 3815,
	549, 3, 2, 2, 2, 3816, 3818, 5, 28, 15, 2, 3817, 3819, 5, 52, 27, 2, 3818,
	3817, 3, 2, 2, 2, 3818, 3819, 3, 2, 2, 2, 3819, 3822, 3, 2, 2, 2, 3820,
	3822, 5, 34, 18, 2, 3821, 3816, 3, 2, 2, 2, 3821, 3820, 3, 2, 2, 2, 3822,
	551, 3, 2, 2, 2, 3823, 3856, 5, 550, 276, 2, 3824, 3826, 7, 109, 2, 2,
	3825, 3827, 5, 548, 275, 2, 3826, 3825, 3, 2, 2, 2, 3826, 3827, 3, 2, 2,
	2, 3827, 3828, 3, 2, 2, 2, 3828, 3829, 7, 312, 2, 2, 3829, 3834, 5, 640,
	321, 2, 3830, 3831, 7, 329, 2, 2, 3831, 3833, 5, 640, 321, 2, 3832, 3830,
	3, 2, 2, 2, 3833, 3836, 3, 2, 2, 2, 3834, 3832, 3, 2, 2, 2, 3834, 3835,
	3, 2, 2, 2, 3835, 3837, 3, 2, 2, 2, 3836, 3834, 3, 2, 2, 2, 3837, 3838,
	7, 313, 2, 2, 3838, 3856, 3, 2, 2, 2, 3839, 3844, 5, 546, 274, 2, 3840,
	3842, 7, 180, 2, 2, 3841, 3843, 5, 52, 27, 2, 3842, 3841, 3, 2, 2, 2, 3842,
	3843, 3, 2, 2, 2, 3843, 3845, 3, 2, 2, 2, 3844, 3840, 3, 2, 2, 2, 3844,
	3845, 3, 2, 2, 2, 3845, 3846, 3, 2, 2, 2, 3846, 3848, 7, 312, 2, 2, 3847,
	3849, 5, 636, 319, 2, 3848, 3847, 3, 2, 2, 2, 3849, 3850, 3, 2, 2, 2, 3850,
	3848, 3, 2, 2, 2, 3850, 3851, 3, 2, 2, 2, 3851, 3852, 3, 2, 2, 2, 3852,
	3853, 7, 313, 2, 2, 3853, 3856, 3, 2, 2, 2, 3854, 3856, 5, 416, 209, 2,
	3855, 3823, 3, 2, 2, 2, 3855, 3824, 3, 2, 2, 2, 3855, 3839, 3, 2, 2, 2,
	3855, 3854, 3, 2, 2, 2, 3856, 3860, 3, 2, 2, 2, 3857, 3859, 5, 544, 273,
	2, 3858, 3857, 3, 2, 2, 2, 3859, 3862, 3, 2, 2, 2, 3860, 3858, 3, 2, 2,
	2, 3860, 3861, 3, 2, 2, 2, 3861, 553, 3, 2, 2, 2, 3862, 3860, 3, 2, 2,
	2, 3863, 3881, 7, 235, 2, 2, 3864, 3881, 7, 68, 2, 2, 3865, 3867, 7, 276,
	2, 2, 3866, 3868, 7, 146, 2, 2, 3867, 3866, 3, 2, 2, 2, 3867, 3868, 3,
	2, 2, 2, 3868, 3869, 3, 2, 2, 2, 3869, 3871, 5, 26, 14, 2, 3870, 3872,
	5, 578, 290, 2, 3871, 3870, 3, 2, 2, 2, 3871, 3872, 3, 2, 2, 2, 3872, 3875,
	3, 2, 2, 2, 3873, 3874, 7, 330, 2, 2, 3874, 3876, 5, 26, 14, 2, 3875, 3873,
	3, 2, 2, 2, 3875, 3876, 3, 2, 2, 2, 3876, 3881, 3, 2, 2, 2, 3877, 3881,
	7, 110, 2, 2, 3878, 3881, 5, 552, 277, 2, 3879, 3881, 5, 570, 286, 2, 3880,
	3863, 3, 2, 2, 2, 3880, 3864, 3, 2, 2, 2, 3880, 3865, 3, 2, 2, 2, 3880,
	3877, 3, 2, 2, 2, 3880, 3878, 3, 2, 2, 2, 3880, 3879, 3, 2, 2, 2, 3881,
	555, 3, 2, 2, 2, 3882, 3885, 5, 554, 278, 2, 3883, 3885, 5, 558, 280, 2,
	3884, 3882, 3, 2, 2, 2, 3884, 3883, 3, 2, 2, 2, 3885, 557, 3, 2, 2, 2,
	3886, 3890, 5, 52, 27, 2, 3887, 3889, 5, 542, 272, 2, 3888, 3887, 3, 2,
	2, 2, 3889, 3892, 3, 2, 2, 2, 3890, 3888, 3, 2, 2, 2, 3890, 3891, 3, 2,
	2, 2, 3891, 3899, 3, 2, 2, 2, 3892, 3890, 3, 2, 2, 2, 3893, 3895, 5, 542,
	272, 2, 3894, 3893, 3, 2, 2, 2, 3895, 3896, 3, 2, 2, 2, 3896, 3894, 3,
	2, 2, 2, 3896, 3897, 3, 2, 2, 2, 3897, 3899, 3, 2, 2, 2, 3898, 3886, 3,
	2, 2, 2, 3898, 3894, 3, 2, 2, 2, 3899, 559, 3, 2, 2, 2, 3900, 3901, 7,
	330, 2, 2, 3901, 3902, 5, 26, 14, 2, 3902, 3904, 7, 308, 2, 2, 3903, 3905,
	5, 448, 225, 2, 3904, 3903, 3, 2, 2, 2, 3904, 3905, 3, 2, 2, 2, 3905, 3906,
	3, 2, 2, 2, 3906, 3907, 7, 309, 2, 2, 3907, 561, 3, 2, 2, 2, 3908, 3930,
	5, 560, 281, 2, 3909, 3910, 7, 329, 2, 2, 3910, 3930, 5, 560, 281, 2, 3911,
	3918, 5, 448, 225, 2, 3912, 3914, 7, 329, 2, 2, 3913, 3915, 5, 448, 225,
	2, 3914, 3913, 3, 2, 2, 2, 3914, 3915, 3, 2, 2, 2, 3915, 3917, 3, 2, 2,
	2, 3916, 3912, 3, 2, 2, 2, 3917, 3920, 3, 2, 2, 2, 3918, 3916, 3, 2, 2,
	2, 3918, 3919, 3, 2, 2, 2, 3919, 3930, 3, 2, 2, 2, 3920, 3918, 3, 2, 2,
	2, 3921, 3923, 7, 329, 2, 2, 3922, 3924, 5, 448, 225, 2, 3923, 3922, 3,
	2, 2, 2, 3923, 3924, 3, 2, 2, 2, 3924, 3926, 3, 2, 2, 2, 3925, 3921, 3,
	2, 2, 2, 3926, 3927, 3, 2, 2, 2, 3927, 3925, 3, 2, 2, 2, 3927, 3928, 3,
	2, 2, 2, 3928, 3930, 3, 2, 2, 2, 3929, 3908, 3, 2, 2, 2, 3929, 3909, 3,
	2, 2, 2, 3929, 3911, 3, 2, 2, 2, 3929, 3925, 3, 2, 2, 2, 3930, 3935, 3,
	2, 2, 2, 3931, 3932, 7, 329, 2, 2, 3932, 3934, 5, 560, 281, 2, 3933, 3931,
	3, 2, 2, 2, 3934, 3937, 3, 2, 2, 2, 3935, 3933, 3, 2, 2, 2, 3935, 3936,
	3, 2, 2, 2, 3936, 563, 3, 2, 2, 2, 3937, 3935, 3, 2, 2, 2, 3938, 3939,
	7, 330, 2, 2, 3939, 3940, 5, 26, 14, 2, 3940, 3942, 7, 308, 2, 2, 3941,
	3943, 5, 600, 301, 2, 3942, 3941, 3, 2, 2, 2, 3942, 3943, 3, 2, 2, 2, 3943,
	3944, 3, 2, 2, 2, 3944, 3945, 7, 309, 2, 2, 3945, 565, 3, 2, 2, 2, 3946,
	3968, 5, 564, 283, 2, 3947, 3948, 7, 329, 2, 2, 3948, 3968, 5, 564, 283,
	2, 3949, 3956, 5, 600, 301, 2, 3950, 3952, 7, 329, 2, 2, 3951, 3953, 5,
	600, 301, 2, 3952, 3951, 3, 2, 2, 2, 3952, 3953, 3, 2, 2, 2, 3953, 3955,
	3, 2, 2, 2, 3954, 3950, 3, 2, 2, 2, 3955, 3958, 3, 2, 2, 2, 3956, 3954,
	3, 2, 2, 2, 3956, 3957, 3, 2, 2, 2, 3957, 3968, 3, 2, 2, 2, 3958, 3956,
	3, 2, 2, 2, 3959, 3961, 7, 329, 2, 2, 3960, 3962, 5, 600, 301, 2, 3961,
	3960, 3, 2, 2, 2, 3961, 3962, 3, 2, 2, 2, 3962, 3964, 3, 2, 2, 2, 3963,
	3959, 3, 2, 2, 2, 3964, 3965, 3, 2, 2, 2, 3965, 3963, 3, 2, 2, 2, 3965,
	3966, 3, 2, 2, 2, 3966, 3968, 3, 2, 2, 2, 3967, 3946, 3, 2, 2, 2, 3967,
	3947, 3, 2, 2, 2, 3967, 3949, 3, 2, 2, 2, 3967, 3963, 3, 2, 2, 2, 3968,
	3973, 3, 2, 2, 2, 3969, 3970, 7, 329, 2, 2, 3970, 3972, 5, 564, 283, 2,
	3971, 3969, 3, 2, 2, 2, 3972, 3975, 3, 2, 2, 2, 3973, 3971, 3, 2, 2, 2,
	3973, 3974, 3, 2, 2, 2, 3974, 567, 3, 2, 2, 2, 3975, 3973, 3, 2, 2, 2,
	3976, 3984, 5, 14, 8, 2, 3977, 3984, 7, 299, 2, 2, 3978, 3984, 7, 300,
	2, 2, 3979, 3984, 5, 54, 28, 2, 3980, 3984, 7, 175, 2, 2, 3981, 3984, 7,
	248, 2, 2, 3982, 3984, 7, 320, 2, 2, 3983, 3976, 3, 2, 2, 2, 3983, 3977,
	3, 2, 2, 2, 3983, 3978, 3, 2, 2, 2, 3983, 3979, 3, 2, 2, 2, 3983, 3980,
	3, 2, 2, 2, 3983, 3981, 3, 2, 2, 2, 3983, 3982, 3, 2, 2, 2, 3984, 569,
	3, 2, 2, 2, 3985, 3986, 7, 262, 2, 2, 3986, 3989, 7, 308, 2, 2, 3987, 3990,
	5, 600, 301, 2, 3988, 3990, 5, 554, 278, 2, 3989, 3987, 3, 2, 2, 2, 3989,
	3988, 3, 2, 2, 2, 3990, 3991, 3, 2, 2, 2, 3991, 3992, 7, 309, 2, 2, 3992,
	571, 3, 2, 2, 2, 3993, 3996, 7, 37, 2, 2, 3994, 3996, 5, 26, 14, 2, 3995,
	3993, 3, 2, 2, 2, 3995, 3994, 3, 2, 2, 2, 3996, 3997, 3, 2, 2, 2, 3997,
	3998, 7, 333, 2, 2, 3998, 573, 3, 2, 2, 2, 3999, 4001, 5, 572, 287, 2,
	4000, 3999, 3, 2, 2, 2, 4000, 4001, 3, 2, 2, 2, 4001, 4002, 3, 2, 2, 2,
	4002, 4003, 5, 26, 14, 2, 4003, 575, 3, 2, 2, 2, 4004, 4009, 5, 536, 269,
	2, 4005, 4006, 7, 329, 2, 2, 4006, 4008, 5, 536, 269, 2, 4007, 4005, 3,
	2, 2, 2, 4008, 4011, 3, 2, 2, 2, 4009, 4007, 3, 2, 2, 2, 4009, 4010, 3,
	2, 2, 2, 4010, 4021, 3, 2, 2, 2, 4011, 4009, 3, 2, 2, 2, 4012, 4017, 5,
	592, 297, 2, 4013, 4014, 7, 329, 2, 2, 4014, 4016, 5, 592, 297, 2, 4015,
	4013, 3, 2, 2, 2, 4016, 4019, 3, 2, 2, 2, 4017, 4015, 3, 2, 2, 2, 4017,
	4018, 3, 2, 2, 2, 4018, 4021, 3, 2, 2, 2, 4019, 4017, 3, 2, 2, 2, 4020,
	4004, 3, 2, 2, 2, 4020, 4012, 3, 2, 2, 2, 4021, 577, 3, 2, 2, 2, 4022,
	4023, 7, 383, 2, 2, 4023, 4025, 7, 308, 2, 2, 4024, 4026, 5, 576, 289,
	2, 4025, 4024, 3, 2, 2, 2, 4025, 4026, 3, 2, 2, 2, 4026, 4027, 3, 2, 2,
	2, 4027, 4028, 7, 309, 2, 2, 4028, 579, 3, 2, 2, 2, 4029, 4031, 5, 574,
	288, 2, 4030, 4032, 5, 578, 290, 2, 4031, 4030, 3, 2, 2, 2, 4031, 4032,
	3, 2, 2, 2, 4032, 4040, 3, 2, 2, 2, 4033, 4034, 7, 333, 2, 2, 4034, 4036,
	5, 26, 14, 2, 4035, 4037, 5, 578, 290, 2, 4036, 4035, 3, 2, 2, 2, 4036,
	4037, 3, 2, 2, 2, 4037, 4039, 3, 2, 2, 2, 4038, 4033, 3, 2, 2, 2, 4039,
	4042, 3, 2, 2, 2, 4040, 4038, 3, 2, 2, 2, 4040, 4041, 3, 2, 2, 2, 4041,
	581, 3, 2, 2, 2, 4042, 4040, 3, 2, 2, 2, 4043, 4044, 5, 580, 291, 2, 4044,
	4045, 7, 333, 2, 2, 4045, 583, 3, 2, 2, 2, 4046, 4049, 5, 600, 301, 2,
	4047, 4048, 7, 332, 2, 2, 4048, 4050, 5, 600, 301, 2, 4049, 4047, 3, 2,
	2, 2, 4049, 4050, 3, 2, 2, 2, 4050, 585, 3, 2, 2, 2, 4051, 4052, 5, 584,
	293, 2, 4052, 587, 3, 2, 2, 2, 4053, 4054, 5, 590, 296, 2, 4054, 589, 3,
	2, 2, 2, 4055, 4061, 5, 600, 301, 2, 4056, 4057, 7, 332, 2, 2, 4057, 4058,
	5, 600, 301, 2, 4058, 4059, 7, 332, 2, 2, 4059, 4060, 5, 600, 301, 2, 4060,
	4062, 3, 2, 2, 2, 4061, 4056, 3, 2, 2, 2, 4061, 4062, 3, 2, 2, 2, 4062,
	591, 3, 2, 2, 2, 4063, 4064, 7, 330, 2, 2, 4064, 4065, 5, 26, 14, 2, 4065,
	4067, 7, 308, 2, 2, 4066, 4068, 5, 536, 269, 2, 4067, 4066, 3, 2, 2, 2,
	4067, 4068, 3, 2, 2, 2, 4068, 4069, 3, 2, 2, 2, 4069, 4070, 7, 309, 2,
	2, 4070, 593, 3, 2, 2, 2, 4071, 4072, 8, 298, 1, 2, 4072, 4123, 5, 568,
	285, 2, 4073, 4123, 5, 416, 209, 2, 4074, 4075, 7, 308, 2, 2, 4075, 4076,
	5, 590, 296, 2, 4076, 4077, 7, 309, 2, 2, 4077, 4123, 3, 2, 2, 2, 4078,
	4084, 7, 235, 2, 2, 4079, 4084, 7, 74, 2, 2, 4080, 4084, 5, 28, 15, 2,
	4081, 4084, 5, 34, 18, 2, 4082, 4084, 5, 52, 27, 2, 4083, 4078, 3, 2, 2,
	2, 4083, 4079, 3, 2, 2, 2, 4083, 4080, 3, 2, 2, 2, 4083, 4081, 3, 2, 2,
	2, 4083, 4082, 3, 2, 2, 2, 4084, 4085, 3, 2, 2, 2, 4085, 4086, 7, 314,
	2, 2, 4086, 4087, 7, 308, 2, 2, 4087, 4088, 5, 600, 301, 2, 4088, 4089,
	7, 309, 2, 2, 4089, 4123, 3, 2, 2, 2, 4090, 4123, 5, 602, 302, 2, 4091,
	4123, 5, 616, 309, 2, 4092, 4113, 5, 50, 26, 2, 4093, 4094, 7, 308, 2,
	2, 4094, 4097, 5, 554, 278, 2, 4095, 4096, 7, 329, 2, 2, 4096, 4098, 5,
	566, 284, 2, 4097, 4095, 3, 2, 2, 2, 4097, 4098, 3, 2, 2, 2, 4098, 4101,
	3, 2, 2, 2, 4099, 4100, 7, 329, 2, 2, 4100, 4102, 5, 466, 234, 2, 4101,
	4099, 3, 2, 2, 2, 4101, 4102, 3, 2, 2, 2, 4102, 4103, 3, 2, 2, 2, 4103,
	4104, 7, 309, 2, 2, 4104, 4114, 3, 2, 2, 2, 4105, 4106, 7, 308, 2, 2, 4106,
	4109, 5, 566, 284, 2, 4107, 4108, 7, 329, 2, 2, 4108, 4110, 5, 466, 234,
	2, 4109, 4107, 3, 2, 2, 2, 4109, 4110, 3, 2, 2, 2, 4110, 4111, 3, 2, 2,
	2, 4111, 4112, 7, 309, 2, 2, 4112, 4114, 3, 2, 2, 2, 4113, 4093, 3, 2,
	2, 2, 4113, 4105, 3, 2, 2, 2, 4113, 4114, 3, 2, 2, 2, 4114, 4123, 3, 2,
	2, 2, 4115, 4116, 7, 234, 2, 2, 4116, 4118, 7, 333, 2, 2, 4117, 4115, 3,
	2, 2, 2, 4117, 4118, 3, 2, 2, 2, 4118, 4119, 3, 2, 2, 2, 4119, 4123, 5,
	660, 331, 2, 4120, 4123, 5, 642, 322, 2, 4121, 4123, 5, 570, 286, 2, 4122,
	4071, 3, 2, 2, 2, 4122, 4073, 3, 2, 2, 2, 4122, 4074, 3, 2, 2, 2, 4122,
	4083, 3, 2, 2, 2, 4122, 4090, 3, 2, 2, 2, 4122, 4091, 3, 2, 2, 2, 4122,
	4092, 3, 2, 2, 2, 4122, 4117, 3, 2, 2, 2, 4122, 4120, 3, 2, 2, 2, 4122,
	4121, 3, 2, 2, 2, 4123, 4187, 3, 2, 2, 2, 4124, 4125, 12, 16, 2, 2, 4125,
	4126, 7, 314, 2, 2, 4126, 4127, 7, 308, 2, 2, 4127, 4128, 5, 600, 301,
	2, 4128, 4129, 7, 309, 2, 2, 4129, 4186, 3, 2, 2, 2, 4130, 4131, 12, 15,
	2, 2, 4131, 4186, 5, 408, 205, 2, 4132, 4133, 12, 14, 2, 2, 4133, 4134,
	7, 330, 2, 2, 4134, 4186, 5, 26, 14, 2, 4135, 4136, 12, 13, 2, 2, 4136,
	4137, 7, 310, 2, 2, 4137, 4138, 5, 622, 312, 2, 4138, 4139, 7, 311, 2,
	2, 4139, 4186, 3, 2, 2, 2, 4140, 4141, 12, 8, 2, 2, 4141, 4142, 7, 330,
	2, 2, 4142, 4186, 5, 660, 331, 2, 4143, 4146, 12, 5, 2, 2, 4144, 4145,
	7, 330, 2, 2, 4145, 4147, 5, 112, 57, 2, 4146, 4144, 3, 2, 2, 2, 4146,
	4147, 3, 2, 2, 2, 4147, 4151, 3, 2, 2, 2, 4148, 4150, 5, 530, 266, 2, 4149,
	4148, 3, 2, 2, 2, 4150, 4153, 3, 2, 2, 2, 4151, 4149, 3, 2, 2, 2, 4151,
	4152, 3, 2, 2, 2, 4152, 4154, 3, 2, 2, 2, 4153, 4151, 3, 2, 2, 2, 4154,
	4156, 7, 308, 2, 2, 4155, 4157, 5, 566, 284, 2, 4156, 4155, 3, 2, 2, 2,
	4156, 4157, 3, 2, 2, 2, 4157, 4158, 3, 2, 2, 2, 4158, 4164, 7, 309, 2,
	2, 4159, 4160, 7, 287, 2, 2, 4160, 4161, 7, 308, 2, 2, 4161, 4162, 5, 600,
	301, 2, 4162, 4163, 7, 309, 2, 2, 4163, 4165, 3, 2, 2, 2, 4164, 4159, 3,
	2, 2, 2, 4164, 4165, 3, 2, 2, 2, 4165, 4186, 3, 2, 2, 2, 4166, 4167, 12,
	4, 2, 2, 4167, 4168, 7, 330, 2, 2, 4168, 4186, 5, 112, 57, 2, 4169, 4172,
	12, 3, 2, 2, 4170, 4171, 7, 330, 2, 2, 4171, 4173, 5, 112, 57, 2, 4172,
	4170, 3, 2, 2, 2, 4172, 4173, 3, 2, 2, 2, 4173, 4177, 3, 2, 2, 2, 4174,
	4176, 5, 530, 266, 2, 4175, 4174, 3, 2, 2, 2, 4176, 4179, 3, 2, 2, 2, 4177,
	4175, 3, 2, 2, 2, 4177, 4178, 3, 2, 2, 2, 4178, 4180, 3, 2, 2, 2, 4179,
	4177, 3, 2, 2, 2, 4180, 4181, 7, 287, 2, 2, 4181, 4182, 7, 308, 2, 2, 4182,
	4183, 5, 600, 301, 2, 4183, 4184, 7, 309, 2, 2, 4184, 4186, 3, 2, 2, 2,
	4185, 4124, 3, 2, 2, 2, 4185, 4130, 3, 2, 2, 2, 4185, 4132, 3, 2, 2, 2,
	4185, 4135, 3, 2, 2, 2, 4185, 4140, 3, 2, 2, 2, 4185, 4143, 3, 2, 2, 2,
	4185, 4166, 3, 2, 2, 2, 4185, 4169, 3, 2, 2, 2, 4186, 4189, 3, 2, 2, 2,
	4187, 4185, 3, 2, 2, 2, 4187, 4188, 3, 2, 2, 2, 4188, 595, 3, 2, 2, 2,
	4189, 4187, 3, 2, 2, 2, 4190, 4191, 5, 600, 301, 2, 4191, 597, 3, 2, 2,
	2, 4192, 4196, 5, 42, 22, 2, 4193, 4195, 5, 530, 266, 2, 4194, 4193, 3,
	2, 2, 2, 4195, 4198, 3, 2, 2, 2, 4196, 4194, 3, 2, 2, 2, 4196, 4197, 3,
	2, 2, 2, 4197, 4199, 3, 2, 2, 2, 4198, 4196, 3, 2, 2, 2, 4199, 4200, 5,
	648, 325, 2, 4200, 4211, 3, 2, 2, 2, 4201, 4205, 5, 648, 325, 2, 4202,
	4204, 5, 530, 266, 2, 4203, 4202, 3, 2, 2, 2, 4204, 4207, 3, 2, 2, 2, 4205,
	4203, 3, 2, 2, 2, 4205, 4206, 3, 2, 2, 2, 4206, 4208, 3, 2, 2, 2, 4207,
	4205, 3, 2, 2, 2, 4208, 4209, 5, 42, 22, 2, 4209, 4211, 3, 2, 2, 2, 4210,
	4192, 3, 2, 2, 2, 4210, 4201, 3, 2, 2, 2, 4211, 599, 3, 2, 2, 2, 4212,
	4213, 8, 301, 1, 2, 4213, 4234, 5, 594, 298, 2, 4214, 4215, 7, 308, 2,
	2, 4215, 4216, 5, 446, 224, 2, 4216, 4217, 7, 309, 2, 2, 4217, 4234, 3,
	2, 2, 2, 4218, 4219, 7, 246, 2, 2, 4219, 4221, 5, 26, 14, 2, 4220, 4222,
	5, 600, 301, 2, 4221, 4220, 3, 2, 2, 2, 4221, 4222, 3, 2, 2, 2, 4222, 4234,
	3, 2, 2, 2, 4223, 4227, 5, 40, 21, 2, 4224, 4226, 5, 530, 266, 2, 4225,
	4224, 3, 2, 2, 2, 4226, 4229, 3, 2, 2, 2, 4227, 4225, 3, 2, 2, 2, 4227,
	4228, 3, 2, 2, 2, 4228, 4230, 3, 2, 2, 2, 4229, 4227, 3, 2, 2, 2, 4230,
	4231, 5, 594, 298, 2, 4231, 4234, 3, 2, 2, 2, 4232, 4234, 5, 598, 300,
	2, 4233, 4212, 3, 2, 2, 2, 4233, 4214, 3, 2, 2, 2, 4233, 4218, 3, 2, 2,
	2, 4233, 4223, 3, 2, 2, 2, 4233, 4232, 3, 2, 2, 2, 4234, 4385, 3, 2, 2,
	2, 4235, 4236, 12, 17, 2, 2, 4236, 4240, 7, 366, 2, 2, 4237, 4239, 5, 530,
	266, 2, 4238, 4237, 3, 2, 2, 2, 4239, 4242, 3, 2, 2, 2, 4240, 4238, 3,
	2, 2, 2, 4240, 4241, 3, 2, 2, 2, 4241, 4243, 3, 2, 2, 2, 4242, 4240, 3,
	2, 2, 2, 4243, 4384, 5, 600, 301, 18, 4244, 4245, 12, 16, 2, 2, 4245, 4249,
	5, 114, 58, 2, 4246, 4248, 5, 530, 266, 2, 4247, 4246, 3, 2, 2, 2, 4248,
	4251, 3, 2, 2, 2, 4249, 4247, 3, 2, 2, 2, 4249, 4250, 3, 2, 2, 2, 4250,
	4252, 3, 2, 2, 2, 4251, 4249, 3, 2, 2, 2, 4252, 4253, 5, 600, 301, 17,
	4253, 4384, 3, 2, 2, 2, 4254, 4255, 12, 15, 2, 2, 4255, 4259, 5, 116, 59,
	2, 4256, 4258, 5, 530, 266, 2, 4257, 4256, 3, 2, 2, 2, 4258, 4261, 3, 2,
	2, 2, 4259, 4257, 3, 2, 2, 2, 4259, 4260, 3, 2, 2, 2, 4260, 4262, 3, 2,
	2, 2, 4261, 4259, 3, 2, 2, 2, 4262, 4263, 5, 600, 301, 16, 4263, 4384,
	3, 2, 2, 2, 4264, 4265, 12, 14, 2, 2, 4265, 4269, 5, 118, 60, 2, 4266,
	4268, 5, 530, 266, 2, 4267, 4266, 3, 2, 2, 2, 4268, 4271, 3, 2, 2, 2, 4269,
	4267, 3, 2, 2, 2, 4269, 4270, 3, 2, 2, 2, 4270, 4272, 3, 2, 2, 2, 4271,
	4269, 3, 2, 2, 2, 4272, 4273, 5, 600, 301, 15, 4273, 4384, 3, 2, 2, 2,
	4274, 4275, 12, 13, 2, 2, 4275, 4279, 5, 120, 61, 2, 4276, 4278, 5, 530,
	266, 2, 4277, 4276, 3, 2, 2, 2, 4278, 4281, 3, 2, 2, 2, 4279, 4277, 3,
	2, 2, 2, 4279, 4280, 3, 2, 2, 2, 4280, 4282, 3, 2, 2, 2, 4281, 4279, 3,
	2, 2, 2, 4282, 4283, 5, 600, 301, 14, 4283, 4384, 3, 2, 2, 2, 4284, 4285,
	12, 11, 2, 2, 4285, 4289, 5, 122, 62, 2, 4286, 4288, 5, 530, 266, 2, 4287,
	4286, 3, 2, 2, 2, 4288, 4291, 3, 2, 2, 2, 4289, 4287, 3, 2, 2, 2, 4289,
	4290, 3, 2, 2, 2, 4290, 4292, 3, 2, 2, 2, 4291, 4289, 3, 2, 2, 2, 4292,
	4293, 5, 600, 301, 12, 4293, 4384, 3, 2, 2, 2, 4294, 4295, 12, 10, 2, 2,
	4295, 4299, 7, 359, 2, 2, 4296, 4298, 5, 530, 266, 2, 4297, 4296, 3, 2,
	2, 2, 4298, 4301, 3, 2, 2, 2, 4299, 4297, 3, 2, 2, 2, 4299, 4300, 3, 2,
	2, 2, 4300, 4302, 3, 2, 2, 2, 4301, 4299, 3, 2, 2, 2, 4302, 4384, 5, 600,
	301, 11, 4303, 4304, 12, 9, 2, 2, 4304, 4308, 5, 124, 63, 2, 4305, 4307,
	5, 530, 266, 2, 4306, 4305, 3, 2, 2, 2, 4307, 4310, 3, 2, 2, 2, 4308, 4306,
	3, 2, 2, 2, 4308, 4309, 3, 2, 2, 2, 4309, 4311, 3, 2, 2, 2, 4310, 4308,
	3, 2, 2, 2, 4311, 4312, 5, 600, 301, 10, 4312, 4384, 3, 2, 2, 2, 4313,
	4314, 12, 8, 2, 2, 4314, 4318, 7, 361, 2, 2, 4315, 4317, 5, 530, 266, 2,
	4316, 4315, 3, 2, 2, 2, 4317, 4320, 3, 2, 2, 2, 4318, 4316, 3, 2, 2, 2,
	4318, 4319, 3, 2, 2, 2, 4319, 4321, 3, 2, 2, 2, 4320, 4318, 3, 2, 2, 2,
	4321, 4384, 5, 600, 301, 9, 4322, 4323, 12, 7, 2, 2, 4323, 4327, 7, 360,
	2, 2, 4324, 4326, 5, 530, 266, 2, 4325, 4324, 3, 2, 2, 2, 4326, 4329, 3,
	2, 2, 2, 4327, 4325, 3, 2, 2, 2, 4327, 4328, 3, 2, 2, 2, 4328, 4330, 3,
	2, 2, 2, 4329, 4327, 3, 2, 2, 2, 4330, 4384, 5, 600, 301, 8, 4331, 4332,
	12, 6, 2, 2, 4332, 4336, 7, 362, 2, 2, 4333, 4335, 5, 530, 266, 2, 4334,
	4333, 3, 2, 2, 2, 4335, 4338, 3, 2, 2, 2, 4336, 4334, 3, 2, 2, 2, 4336,
	4337, 3, 2, 2, 2, 4337, 4339, 3, 2, 2, 2, 4338, 4336, 3, 2, 2, 2, 4339,
	4384, 5, 600, 301, 7, 4340, 4343, 12, 4, 2, 2, 4341, 4342, 7, 159, 2, 2,
	4342, 4344, 5, 626, 314, 2, 4343, 4341, 3, 2, 2, 2, 4343, 4344, 3, 2, 2,
	2, 4344, 4345, 3, 2, 2, 2, 4345, 4349, 7, 331, 2, 2, 4346, 4348, 5, 530,
	266, 2, 4347, 4346, 3, 2, 2, 2, 4348, 4351, 3, 2, 2, 2, 4349, 4347, 3,
	2, 2, 2, 4349, 4350, 3, 2, 2, 2, 4350, 4352, 3, 2, 2, 2, 4351, 4349, 3,
	2, 2, 2, 4352, 4353, 5, 600, 301, 2, 4353, 4354, 7, 332, 2, 2, 4354, 4355,
	5, 600, 301, 4, 4355, 4384, 3, 2, 2, 2, 4356, 4357, 12, 3, 2, 2, 4357,
	4361, 5, 126, 64, 2, 4358, 4360, 5, 530, 266, 2, 4359, 4358, 3, 2, 2, 2,
	4360, 4363, 3, 2, 2, 2, 4361, 4359, 3, 2, 2, 2, 4361, 4362, 3, 2, 2, 2,
	4362, 4364, 3, 2, 2, 2, 4363, 4361, 3, 2, 2, 2, 4364, 4365, 5, 600, 301,
	4, 4365, 4384, 3, 2, 2, 2, 4366, 4367, 12, 12, 2, 2, 4367, 4368, 7, 141,
	2, 2, 4368, 4369, 7, 312, 2, 2, 4369, 4370, 5, 624, 313, 2, 4370, 4371,
	7, 313, 2, 2, 4371, 4384, 3, 2, 2, 2, 4372, 4375, 12, 5, 2, 2, 4373, 4374,
	7, 159, 2, 2, 4374, 4376, 5, 626, 314, 2, 4375, 4373, 3, 2, 2, 2, 4375,
	4376, 3, 2, 2, 2, 4376, 4377, 3, 2, 2, 2, 4377, 4378, 7, 385, 2, 2, 4378,
	4381, 5, 600, 301, 2, 4379, 4380, 7, 159, 2, 2, 4380, 4382, 5, 626, 314,
	2, 4381, 4379, 3, 2, 2, 2, 4381, 4382, 3, 2, 2, 2, 4382, 4384, 3, 2, 2,
	2, 4383, 4235, 3, 2, 2, 2, 4383, 4244, 3, 2, 2, 2, 4383, 4254, 3, 2, 2,
	2, 4383, 4264, 3, 2, 2, 2, 4383, 4274, 3, 2, 2, 2, 4383, 4284, 3, 2, 2,
	2, 4383, 4294, 3, 2, 2, 2, 4383, 4303, 3, 2, 2, 2, 4383, 4313, 3, 2, 2,
	2, 4383, 4322, 3, 2, 2, 2, 4383, 4331, 3, 2, 2, 2, 4383, 4340, 3, 2, 2,
	2, 4383, 4356, 3, 2, 2, 2, 4383, 4366, 3, 2, 2, 2, 4383, 4372, 3, 2, 2,
	2, 4384, 4387, 3, 2, 2, 2, 4385, 4383, 3, 2, 2, 2, 4385, 4386, 3, 2, 2,
	2, 4386, 601, 3, 2, 2, 2, 4387, 4385, 3, 2, 2, 2, 4388, 4399, 7, 312, 2,
	2, 4389, 4397, 5, 600, 301, 2, 4390, 4398, 5, 602, 302, 2, 4391, 4392,
	7, 329, 2, 2, 4392, 4394, 5, 600, 301, 2, 4393, 4391, 3, 2, 2, 2, 4394,
	4395, 3, 2, 2, 2, 4395, 4393, 3, 2, 2, 2, 4395, 4396, 3, 2, 2, 2, 4396,
	4398, 3, 2, 2, 2, 4397, 4390, 3, 2, 2, 2, 4397, 4393, 3, 2, 2, 2, 4397,
	4398, 3, 2, 2, 2, 4398, 4400, 3, 2, 2, 2, 4399, 4389, 3, 2, 2, 2, 4399,
	4400, 3, 2, 2, 2, 4400, 4401, 3, 2, 2, 2, 4401, 4402, 7, 313, 2, 2, 4402,
	603, 3, 2, 2, 2, 4403, 4404, 7, 166, 2, 2, 4404, 4405, 7, 310, 2, 2, 4405,
	4406, 5, 600, 301, 2, 4406, 4411, 7, 311, 2, 2, 4407, 4408, 7, 308, 2,
	2, 4408, 4409, 5, 600, 301, 2, 4409, 4410, 7, 309, 2, 2, 4410, 4412, 3,
	2, 2, 2, 4411, 4407, 3, 2, 2, 2, 4411, 4412, 3, 2, 2, 2, 4412, 605, 3,
	2, 2, 2, 4413, 4419, 5, 600, 301, 2, 4414, 4417, 7, 332, 2, 2, 4415, 4418,
	7, 320, 2, 2, 4416, 4418, 5, 600, 301, 2, 4417, 4415, 3, 2, 2, 2, 4417,
	4416, 3, 2, 2, 2, 4418, 4420, 3, 2, 2, 2, 4419, 4414, 3, 2, 2, 2, 4419,
	4420, 3, 2, 2, 2, 4420, 607, 3, 2, 2, 2, 4421, 4439, 5, 26, 14, 2, 4422,
	4425, 7, 340, 2, 2, 4423, 4426, 5, 600, 301, 2, 4424, 4426, 5, 534, 268,
	2, 4425, 4423, 3, 2, 2, 2, 4425, 4424, 3, 2, 2, 2, 4426, 4440, 3, 2, 2,
	2, 4427, 4429, 5, 544, 273, 2, 4428, 4427, 3, 2, 2, 2, 4429, 4430, 3, 2,
	2, 2, 4430, 4428, 3, 2, 2, 2, 4430, 4431, 3, 2, 2, 2, 4431, 4437, 3, 2,
	2, 2, 4432, 4435, 7, 340, 2, 2, 4433, 4436, 5, 600, 301, 2, 4434, 4436,
	5, 604, 303, 2, 4435, 4433, 3, 2, 2, 2, 4435, 4434, 3, 2, 2, 2, 4436, 4438,
	3, 2, 2, 2, 4437, 4432, 3, 2, 2, 2, 4437, 4438, 3, 2, 2, 2, 4438, 4440,
	3, 2, 2, 2, 4439, 4422, 3, 2, 2, 2, 4439, 4428, 3, 2, 2, 2, 4439, 4440,
	3, 2, 2, 2, 4440, 609, 3, 2, 2, 2, 4441, 4442, 7, 315, 2, 2, 4442, 4447,
	5, 648, 325, 2, 4443, 4444, 7, 329, 2, 2, 4444, 4446, 5, 648, 325, 2, 4445,
	4443, 3, 2, 2, 2, 4446, 4449, 3, 2, 2, 2, 4447, 4445, 3, 2, 2, 2, 4447,
	4448, 3, 2, 2, 2, 4448, 4450, 3, 2, 2, 2, 4449, 4447, 3, 2, 2, 2, 4450,
	4451, 7, 313, 2, 2, 4451, 611, 3, 2, 2, 2, 4452, 4453, 9, 61, 2, 2, 4453,
	613, 3, 2, 2, 2, 4454, 4459, 5, 28, 15, 2, 4455, 4459, 5, 34, 18, 2, 4456,
	4459, 5, 416, 209, 2, 4457, 4459, 5, 600, 301, 2, 4458, 4454, 3, 2, 2,
	2, 4458, 4455, 3, 2, 2, 2, 4458, 4456, 3, 2, 2, 2, 4458, 4457, 3, 2, 2,
	2, 4459, 615, 3, 2, 2, 2, 4460, 4461, 7, 312, 2, 2, 4461, 4463, 5, 612,
	307, 2, 4462, 4464, 5, 614, 308, 2, 4463, 4462, 3, 2, 2, 2, 4463, 4464,
	3, 2, 2, 2, 4464, 4465, 3, 2, 2, 2, 4465, 4466, 5, 618, 310, 2, 4466, 4467,
	7, 313, 2, 2, 4467, 617, 3, 2, 2, 2, 4468, 4469, 7, 312, 2, 2, 4469, 4474,
	5, 620, 311, 2, 4470, 4471, 7, 329, 2, 2, 4471, 4473, 5, 620, 311, 2, 4472,
	4470, 3, 2, 2, 2, 4473, 4476, 3, 2, 2, 2, 4474, 4472, 3, 2, 2, 2, 4474,
	4475, 3, 2, 2, 2, 4475, 4477, 3, 2, 2, 2, 4476, 4474, 3, 2, 2, 2, 4477,
	4478, 7, 313, 2, 2, 4478, 619, 3, 2, 2, 2, 4479, 4485, 5, 600, 301, 2,
	4480, 4481, 7, 287, 2, 2, 4481, 4482, 7, 310, 2, 2, 4482, 4483, 5, 622,
	312, 2, 4483, 4484, 7, 311, 2, 2, 4484, 4486, 3, 2, 2, 2, 4485, 4480, 3,
	2, 2, 2, 4485, 4486, 3, 2, 2, 2, 4486, 621, 3, 2, 2, 2, 4487, 4493, 5,
	600, 301, 2, 4488, 4490, 5, 116, 59, 2, 4489, 4488, 3, 2, 2, 2, 4489, 4490,
	3, 2, 2, 2, 4490, 4491, 3, 2, 2, 2, 4491, 4492, 7, 332, 2, 2, 4492, 4494,
	5, 600, 301, 2, 4493, 4489, 3, 2, 2, 2, 4493, 4494, 3, 2, 2, 2, 4494, 623,
	3, 2, 2, 2, 4495, 4500, 5, 528, 265, 2, 4496, 4497, 7, 329, 2, 2, 4497,
	4499, 5, 528, 265, 2, 4498, 4496, 3, 2, 2, 2, 4499, 4502, 3, 2, 2, 2, 4500,
	4498, 3, 2, 2, 2, 4500, 4501, 3, 2, 2, 2, 4501, 625, 3, 2, 2, 2, 4502,
	4500, 3, 2, 2, 2, 4503, 4506, 7, 330, 2, 2, 4504, 4507, 7, 364, 2, 2, 4505,
	4507, 5, 26, 14, 2, 4506, 4504, 3, 2, 2, 2, 4506, 4505, 3, 2, 2, 2, 4507,
	4541, 3, 2, 2, 2, 4508, 4509, 7, 246, 2, 2, 4509, 4511, 5, 26, 14, 2, 4510,
	4512, 5, 626, 314, 2, 4511, 4510, 3, 2, 2, 2, 4511, 4512, 3, 2, 2, 2, 4512,
	4541, 3, 2, 2, 2, 4513, 4535, 7, 315, 2, 2, 4514, 4519, 5, 626, 314, 2,
	4515, 4516, 7, 329, 2, 2, 4516, 4518, 5, 626, 314, 2, 4517, 4515, 3, 2,
	2, 2, 4518, 4521, 3, 2, 2, 2, 4519, 4517, 3, 2, 2, 2, 4519, 4520, 3, 2,
	2, 2, 4520, 4536, 3, 2, 2, 2, 4521, 4519, 3, 2, 2, 2, 4522, 4523, 5, 26,
	14, 2, 4523, 4524, 7, 332, 2, 2, 4524, 4532, 5, 626, 314, 2, 4525, 4526,
	7, 329, 2, 2, 4526, 4527, 5, 26, 14, 2, 4527, 4528, 7, 332, 2, 2, 4528,
	4529, 5, 626, 314, 2, 4529, 4531, 3, 2, 2, 2, 4530, 4525, 3, 2, 2, 2, 4531,
	4534, 3, 2, 2, 2, 4532, 4530, 3, 2, 2, 2, 4532, 4533, 3, 2, 2, 2, 4533,
	4536, 3, 2, 2, 2, 4534, 4532, 3, 2, 2, 2, 4535, 4514, 3, 2, 2, 2, 4535,
	4522, 3, 2, 2, 2, 4536, 4537, 3, 2, 2, 2, 4537, 4538, 7, 313, 2, 2, 4538,
	4541, 3, 2, 2, 2, 4539, 4541, 5, 600, 301, 2, 4540, 4503, 3, 2, 2, 2, 4540,
	4508, 3, 2, 2, 2, 4540, 4513, 3, 2, 2, 2, 4540, 4539, 3, 2, 2, 2, 4541,
	627, 3, 2, 2, 2, 4542, 4589, 7, 315, 2, 2, 4543, 4548, 5, 600, 301, 2,
	4544, 4545, 7, 329, 2, 2, 4545, 4547, 5, 600, 301, 2, 4546, 4544, 3, 2,
	2, 2, 4547, 4550, 3, 2, 2, 2, 4548, 4546, 3, 2, 2, 2, 4548, 4549, 3, 2,
	2, 2, 4549, 4590, 3, 2, 2, 2, 4550, 4548, 3, 2, 2, 2, 4551, 4552, 5, 630,
	316, 2, 4552, 4553, 7, 332, 2, 2, 4553, 4561, 5, 600, 301, 2, 4554, 4555,
	7, 329, 2, 2, 4555, 4556, 5, 630, 316, 2, 4556, 4557, 7, 332, 2, 2, 4557,
	4558, 5, 600, 301, 2, 4558, 4560, 3, 2, 2, 2, 4559, 4554, 3, 2, 2, 2, 4560,
	4563, 3, 2, 2, 2, 4561, 4559, 3, 2, 2, 2, 4561, 4562, 3, 2, 2, 2, 4562,
	4590, 3, 2, 2, 2, 4563, 4561, 3, 2, 2, 2, 4564, 4565, 5, 632, 317, 2, 4565,
	4566, 7, 332, 2, 2, 4566, 4574, 5, 600, 301, 2, 4567, 4568, 7, 329, 2,
	2, 4568, 4569, 5, 632, 317, 2, 4569, 4570, 7, 332, 2, 2, 4570, 4571, 5,
	600, 301, 2, 4571, 4573, 3, 2, 2, 2, 4572, 4567, 3, 2, 2, 2, 4573, 4576,
	3, 2, 2, 2, 4574, 4572, 3, 2, 2, 2, 4574, 4575, 3, 2, 2, 2, 4575, 4590,
	3, 2, 2, 2, 4576, 4574, 3, 2, 2, 2, 4577, 4578, 5, 596, 299, 2, 4578, 4579,
	7, 312, 2, 2, 4579, 4584, 5, 600, 301, 2, 4580, 4581, 7, 329, 2, 2, 4581,
	4583, 5, 600, 301, 2, 4582, 4580, 3, 2, 2, 2, 4583, 4586, 3, 2, 2, 2, 4584,
	4582, 3, 2, 2, 2, 4584, 4585, 3, 2, 2, 2, 4585, 4587, 3, 2, 2, 2, 4586,
	4584, 3, 2, 2, 2, 4587, 4588, 7, 313, 2, 2, 4588, 4590, 3, 2, 2, 2, 4589,
	4543, 3, 2, 2, 2, 4589, 4551, 3, 2, 2, 2, 4589, 4564, 3, 2, 2, 2, 4589,
	4577, 3, 2, 2, 2, 4589, 4590, 3, 2, 2, 2, 4590, 4591, 3, 2, 2, 2, 4591,
	4592, 7, 313, 2, 2, 4592, 629, 3, 2, 2, 2, 4593, 4596, 5, 26, 14, 2, 4594,
	4596, 5, 634, 318, 2, 4595, 4593, 3, 2, 2, 2, 4595, 4594, 3, 2, 2, 2, 4596,
	631, 3, 2, 2, 2, 4597, 4600, 5, 596, 299, 2, 4598, 4600, 5, 634, 318, 2,
	4599, 4597, 3, 2, 2, 2, 4599, 4598, 3, 2, 2, 2, 4600, 633, 3, 2, 2, 2,
	4601, 4606, 7, 83, 2, 2, 4602, 4606, 5, 28, 15, 2, 4603, 4606, 5, 34, 18,
	2, 4604, 4606, 5, 416, 209, 2, 4605, 4601, 3, 2, 2, 2, 4605, 4602, 3, 2,
	2, 2, 4605, 4603, 3, 2, 2, 2, 4605, 4604, 3, 2, 2, 2, 4606, 635, 3, 2,
	2, 2, 4607, 4609, 5, 530, 266, 2, 4608, 4607, 3, 2, 2, 2, 4609, 4612, 3,
	2, 2, 2, 4610, 4608, 3, 2, 2, 2, 4610, 4611, 3, 2, 2, 2, 4611, 4614, 3,
	2, 2, 2, 4612, 4610, 3, 2, 2, 2, 4613, 4615, 5, 82, 42, 2, 4614, 4613,
	3, 2, 2, 2, 4614, 4615, 3, 2, 2, 2, 4615, 4616, 3, 2, 2, 2, 4616, 4617,
	5, 638, 320, 2, 4617, 4618, 5, 680, 341, 2, 4618, 4619, 7, 307, 2, 2, 4619,
	637, 3, 2, 2, 2, 4620, 4623, 7, 277, 2, 2, 4621, 4623, 5, 554, 278, 2,
	4622, 4620, 3, 2, 2, 2, 4622, 4621, 3, 2, 2, 2, 4623, 639, 3, 2, 2, 2,
	4624, 4633, 5, 26, 14, 2, 4625, 4626, 7, 310, 2, 2, 4626, 4629, 5, 46,
	24, 2, 4627, 4628, 7, 332, 2, 2, 4628, 4630, 5, 46, 24, 2, 4629, 4627,
	3, 2, 2, 2, 4629, 4630, 3, 2, 2, 2, 4630, 4631, 3, 2, 2, 2, 4631, 4632,
	7, 311, 2, 2, 4632, 4634, 3, 2, 2, 2, 4633, 4625, 3, 2, 2, 2, 4633, 4634,
	3, 2, 2, 2, 4634, 4637, 3, 2, 2, 2, 4635, 4636, 7, 340, 2, 2, 4636, 4638,
	5, 600, 301, 2, 4637, 4635, 3, 2, 2, 2, 4637, 4638, 3, 2, 2, 2, 4638, 641,
	3, 2, 2, 2, 4639, 4641, 5, 644, 323, 2, 4640, 4639, 3, 2, 2, 2, 4640, 4641,
	3, 2, 2, 2, 4641, 4642, 3, 2, 2, 2, 4642, 4643, 5, 628, 315, 2, 4643, 643,
	3, 2, 2, 2, 4644, 4648, 5, 416, 209, 2, 4645, 4648, 5, 30, 16, 2, 4646,
	4648, 5, 570, 286, 2, 4647, 4644, 3, 2, 2, 2, 4647, 4645, 3, 2, 2, 2, 4647,
	4646, 3, 2, 2, 2, 4648, 645, 3, 2, 2, 2, 4649, 4650, 5, 648, 325, 2, 4650,
	647, 3, 2, 2, 2, 4651, 4652, 7, 312, 2, 2, 4652, 4657, 5, 648, 325, 2,
	4653, 4654, 7, 329, 2, 2, 4654, 4656, 5, 648, 325, 2, 4655, 4653, 3, 2,
	2, 2, 4656, 4659, 3, 2, 2, 2, 4657, 4655, 3, 2, 2, 2, 4657, 4658, 3, 2,
	2, 2, 4658, 4660, 3, 2, 2, 2, 4659, 4657, 3, 2, 2, 2, 4660, 4661, 7, 313,
	2, 2, 4661, 4669, 3, 2, 2, 2, 4662, 4669, 5, 412, 207, 2, 4663, 4665, 5,
	644, 323, 2, 4664, 4663, 3, 2, 2, 2, 4664, 4665, 3, 2, 2, 2, 4665, 4666,
	3, 2, 2, 2, 4666, 4669, 5, 610, 306, 2, 4667, 4669, 5, 616, 309, 2, 4668,
	4651, 3, 2, 2, 2, 4668, 4662, 3, 2, 2, 2, 4668, 4664, 3, 2, 2, 2, 4668,
	4667, 3, 2, 2, 2, 4669, 649, 3, 2, 2, 2, 4670, 4675, 5, 594, 298, 2, 4671,
	4672, 7, 329, 2, 2, 4672, 4674, 5, 594, 298, 2, 4673, 4671, 3, 2, 2, 2,
	4674, 4677, 3, 2, 2, 2, 4675, 4673, 3, 2, 2, 2, 4675, 4676, 3, 2, 2, 2,
	4676, 651, 3, 2, 2, 2, 4677, 4675, 3, 2, 2, 2, 4678, 4679, 7, 230, 2, 2,
	4679, 4680, 5, 650, 326, 2, 4680, 4681, 7, 53, 2, 2, 4681, 4682, 5, 650,
	326, 2, 4682, 4683, 7, 307, 2, 2, 4683, 4686, 3, 2, 2, 2, 4684, 4686, 5,
	654, 328, 2, 4685, 4678, 3, 2, 2, 2, 4685, 4684, 3, 2, 2, 2, 4686, 653,
	3, 2, 2, 2, 4687, 4688, 7, 130, 2, 2, 4688, 4689, 7, 308, 2, 2, 4689, 4690,
	5, 600, 301, 2, 4690, 4691, 7, 309, 2, 2, 4691, 4695, 5, 658, 330, 2, 4692,
	4693, 7, 90, 2, 2, 4693, 4696, 5, 658, 330, 2, 4694, 4696, 3, 2, 2, 2,
	4695, 4692, 3, 2, 2, 2, 4695, 4694, 3, 2, 2, 2, 4696, 4725, 3, 2, 2, 2,
	4697, 4698, 7, 86, 2, 2, 4698, 4699, 7, 229, 2, 2, 4699, 4706, 5, 594,
	298, 2, 4700, 4702, 7, 229, 2, 2, 4701, 4700, 3, 2, 2, 2, 4701, 4702, 3,
	2, 2, 2, 4702, 4703, 3, 2, 2, 2, 4703, 4706, 5, 470, 236, 2, 4704, 4706,
	5, 656, 329, 2, 4705, 4697, 3, 2, 2, 2, 4705, 4701, 3, 2, 2, 2, 4705, 4704,
	3, 2, 2, 2, 4706, 4707, 3, 2, 2, 2, 4707, 4708, 7, 307, 2, 2, 4708, 4725,
	3, 2, 2, 2, 4709, 4710, 7, 120, 2, 2, 4710, 4711, 7, 308, 2, 2, 4711, 4712,
	5, 594, 298, 2, 4712, 4713, 7, 310, 2, 2, 4713, 4714, 5, 276, 139, 2, 4714,
	4715, 7, 311, 2, 2, 4715, 4716, 7, 309, 2, 2, 4716, 4721, 3, 2, 2, 2, 4717,
	4718, 5, 600, 301, 2, 4718, 4719, 7, 368, 2, 2, 4719, 4721, 3, 2, 2, 2,
	4720, 4709, 3, 2, 2, 2, 4720, 4717, 3, 2, 2, 2, 4721, 4722, 3, 2, 2, 2,
	4722, 4723, 5, 658, 330, 2, 4723, 4725, 3, 2, 2, 2, 4724, 4687, 3, 2, 2,
	2, 4724, 4705, 3, 2, 2, 2, 4724, 4720, 3, 2, 2, 2, 4725, 655, 3, 2, 2,
	2, 4726, 4727, 7, 266, 2, 2, 4727, 4728, 7, 312, 2, 2, 4728, 4729, 5, 624,
	313, 2, 4729, 4730, 7, 313, 2, 2, 4730, 657, 3, 2, 2, 2, 4731, 4735, 7,
	312, 2, 2, 4732, 4734, 5, 654, 328, 2, 4733, 4732, 3, 2, 2, 2, 4734, 4737,
	3, 2, 2, 2, 4735, 4733, 3, 2, 2, 2, 4735, 4736, 3, 2, 2, 2, 4736, 4738,
	3, 2, 2, 2, 4737, 4735, 3, 2, 2, 2, 4738, 4741, 7, 313, 2, 2, 4739, 4741,
	5, 654, 328, 2, 4740, 4731, 3, 2, 2, 2, 4740, 4739, 3, 2, 2, 2, 4741, 659,
	3, 2, 2, 2, 4742, 4746, 7, 199, 2, 2, 4743, 4745, 5, 530, 266, 2, 4744,
	4743, 3, 2, 2, 2, 4745, 4748, 3, 2, 2, 2, 4746, 4744, 3, 2, 2, 2, 4746,
	4747, 3, 2, 2, 2, 4747, 4755, 3, 2, 2, 2, 4748, 4746, 3, 2, 2, 2, 4749,
	4752, 7, 308, 2, 2, 4750, 4753, 7, 175, 2, 2, 4751, 4753, 5, 566, 284,
	2, 4752, 4750, 3, 2, 2, 2, 4752, 4751, 3, 2, 2, 2, 4752, 4753, 3, 2, 2,
	2, 4753, 4754, 3, 2, 2, 2, 4754, 4756, 7, 309, 2, 2, 4755, 4749, 3, 2,
	2, 2, 4755, 4756, 3, 2, 2, 2, 4756, 4773, 3, 2, 2, 2, 4757, 4763, 7, 287,
	2, 2, 4758, 4760, 7, 308, 2, 2, 4759, 4761, 5, 566, 284, 2, 4760, 4759,
	3, 2, 2, 2, 4760, 4761, 3, 2, 2, 2, 4761, 4762, 3, 2, 2, 2, 4762, 4764,
	7, 309, 2, 2, 4763, 4758, 3, 2, 2, 2, 4763, 4764, 3, 2, 2, 2, 4764, 4765,
	3, 2, 2, 2, 4765, 4769, 7, 312, 2, 2, 4766, 4768, 5, 652, 327, 2, 4767,
	4766, 3, 2, 2, 2, 4768, 4771, 3, 2, 2, 2, 4769, 4767, 3, 2, 2, 2, 4769,
	4770, 3, 2, 2, 2, 4770, 4772, 3, 2, 2, 2, 4771, 4769, 3, 2, 2, 2, 4772,
	4774, 7, 313, 2, 2, 4773, 4757, 3, 2, 2, 2, 4773, 4774, 3, 2, 2, 2, 4774,
	661, 3, 2, 2, 2, 4775, 4777, 5, 530, 266, 2, 4776, 4775, 3, 2, 2, 2, 4777,
	4780, 3, 2, 2, 2, 4778, 4776, 3, 2, 2, 2, 4778, 4779, 3, 2, 2, 2, 4779,
	4781, 3, 2, 2, 2, 4780, 4778, 3, 2, 2, 2, 4781, 4783, 5, 666, 334, 2, 4782,
	4784, 5, 58, 30, 2, 4783, 4782, 3, 2, 2, 2, 4783, 4784, 3, 2, 2, 2, 4784,
	4785, 3, 2, 2, 2, 4785, 4789, 5, 26, 14, 2, 4786, 4788, 5, 388, 195, 2,
	4787, 4786, 3, 2, 2, 2, 4788, 4791, 3, 2, 2, 2, 4789, 4787, 3, 2, 2, 2,
	4789, 4790, 3, 2, 2, 2, 4790, 4793, 3, 2, 2, 2, 4791, 4789, 3, 2, 2, 2,
	4792, 4794, 5, 788, 395, 2, 4793, 4792, 3, 2, 2, 2, 4793, 4794, 3, 2, 2,
	2, 4794, 663, 3, 2, 2, 2, 4795, 4796, 7, 115, 2, 2, 4796, 4798, 5, 662,
	332, 2, 4797, 4799, 5, 794, 398, 2, 4798, 4797, 3, 2, 2, 2, 4798, 4799,
	3, 2, 2, 2, 4799, 4800, 3, 2, 2, 2, 4800, 4801, 7, 307, 2, 2, 4801, 4827,
	3, 2, 2, 2, 4802, 4808, 5, 662, 332, 2, 4803, 4809, 5, 794, 398, 2, 4804,
	4805, 7, 308, 2, 2, 4805, 4806, 7, 330, 2, 2, 4806, 4807, 7, 364, 2, 2,
	4807, 4809, 7, 309, 2, 2, 4808, 4803, 3, 2, 2, 2, 4808, 4804, 3, 2, 2,
	2, 4808, 4809, 3, 2, 2, 2, 4809, 4810, 3, 2, 2, 2, 4810, 4812, 7, 307,
	2, 2, 4811, 4813, 5, 56, 29, 2, 4812, 4811, 3, 2, 2, 2, 4812, 4813, 3,
	2, 2, 2, 4813, 4817, 3, 2, 2, 2, 4814, 4816, 5, 1062, 532, 2, 4815, 4814,
	3, 2, 2, 2, 4816, 4819, 3, 2, 2, 2, 4817, 4815, 3, 2, 2, 2, 4817, 4818,
	3, 2, 2, 2, 4818, 4820, 3, 2, 2, 2, 4819, 4817, 3, 2, 2, 2, 4820, 4824,
	7, 101, 2, 2, 4821, 4822, 7, 332, 2, 2, 4822, 4825, 5, 26, 14, 2, 4823,
	4825, 3, 2, 2, 2, 4824, 4821, 3, 2, 2, 2, 4824, 4823, 3, 2, 2, 2, 4825,
	4827, 3, 2, 2, 2, 4826, 4795, 3, 2, 2, 2, 4826, 4802, 3, 2, 2, 2, 4827,
	665, 3, 2, 2, 2, 4828, 4829, 9, 62, 2, 2, 4829, 667, 3, 2, 2, 2, 4830,
	4832, 7, 145, 2, 2, 4831, 4833, 5, 558, 280, 2, 4832, 4831, 3, 2, 2, 2,
	4832, 4833, 3, 2, 2, 2, 4833, 4840, 3, 2, 2, 2, 4834, 4836, 5, 36, 19,
	2, 4835, 4837, 5, 556, 279, 2, 4836, 4835, 3, 2, 2, 2, 4836, 4837, 3, 2,
	2, 2, 4837, 4840, 3, 2, 2, 2, 4838, 4840, 5, 556, 279, 2, 4839, 4830, 3,
	2, 2, 2, 4839, 4834, 3, 2, 2, 2, 4839, 4838, 3, 2, 2, 2, 4840, 669, 3,
	2, 2, 2, 4841, 4843, 7, 274, 2, 2, 4842, 4844, 5, 556, 279, 2, 4843, 4842,
	3, 2, 2, 2, 4843, 4844, 3, 2, 2, 2, 4844, 4847, 3, 2, 2, 2, 4845, 4847,
	5, 554, 278, 2, 4846, 4841, 3, 2, 2, 2, 4846, 4845, 3, 2, 2, 2, 4847, 671,
	3, 2, 2, 2, 4848, 4850, 7, 145, 2, 2, 4849, 4851, 5, 558, 280, 2, 4850,
	4849, 3, 2, 2, 2, 4850, 4851, 3, 2, 2, 2, 4851, 4862, 3, 2, 2, 2, 4852,
	4854, 7, 274, 2, 2, 4853, 4855, 5, 556, 279, 2, 4854, 4853, 3, 2, 2, 2,
	4854, 4855, 3, 2, 2, 2, 4855, 4862, 3, 2, 2, 2, 4856, 4858, 5, 36, 19,
	2, 4857, 4859, 5, 556, 279, 2, 4858, 4857, 3, 2, 2, 2, 4858, 4859, 3, 2,
	2, 2, 4859, 4862, 3, 2, 2, 2, 4860, 4862, 5, 556, 279, 2, 4861, 4848, 3,
	2, 2, 2, 4861, 4852, 3, 2, 2, 2, 4861, 4856, 3, 2, 2, 2, 4861, 4860, 3,
	2, 2, 2, 4862, 673, 3, 2, 2, 2, 4863, 4868, 5, 688, 345, 2, 4864, 4865,
	7, 329, 2, 2, 4865, 4867, 5, 688, 345, 2, 4866, 4864, 3, 2, 2, 2, 4867,
	4870, 3, 2, 2, 2, 4868, 4866, 3, 2, 2, 2, 4868, 4869, 3, 2, 2, 2, 4869,
	675, 3, 2, 2, 2, 4870, 4868, 3, 2, 2, 2, 4871, 4876, 5, 690, 346, 2, 4872,
	4873, 7, 329, 2, 2, 4873, 4875, 5, 690, 346, 2, 4874, 4872, 3, 2, 2, 2,
	4875, 4878, 3, 2, 2, 2, 4876, 4874, 3, 2, 2, 2, 4876, 4877, 3, 2, 2, 2,
	4877, 677, 3, 2, 2, 2, 4878, 4876, 3, 2, 2, 2, 4879, 4884, 5, 692, 347,
	2, 4880, 4881, 7, 329, 2, 2, 4881, 4883, 5, 692, 347, 2, 4882, 4880, 3,
	2, 2, 2, 4883, 4886, 3, 2, 2, 2, 4884, 4882, 3, 2, 2, 2, 4884, 4885, 3,
	2, 2, 2, 4885, 679, 3, 2, 2, 2, 4886, 4884, 3, 2, 2, 2, 4887, 4892, 5,
	608, 305, 2, 4888, 4889, 7, 329, 2, 2, 4889, 4891, 5, 608, 305, 2, 4890,
	4888, 3, 2, 2, 2, 4891, 4894, 3, 2, 2, 2, 4892, 4890, 3, 2, 2, 2, 4892,
	4893, 3, 2, 2, 2, 4893, 681, 3, 2, 2, 2, 4894, 4892, 3, 2, 2, 2, 4895,
	4899, 5, 26, 14, 2, 4896, 4898, 5, 544, 273, 2, 4897, 4896, 3, 2, 2, 2,
	4898, 4901, 3, 2, 2, 2, 4899, 4897, 3, 2, 2, 2, 4899, 4900, 3, 2, 2, 2,
	4900, 683, 3, 2, 2, 2, 4901, 4899, 3, 2, 2, 2, 4902, 4907, 5, 682, 342,
	2, 4903, 4904, 7, 329, 2, 2, 4904, 4906, 5, 682, 342, 2, 4905, 4903, 3,
	2, 2, 2, 4906, 4909, 3, 2, 2, 2, 4907, 4905, 3, 2, 2, 2, 4907, 4908, 3,
	2, 2, 2, 4908, 685, 3, 2, 2, 2, 4909, 4907, 3, 2, 2, 2, 4910, 4911, 5,
	356, 179, 2, 4911, 687, 3, 2, 2, 2, 4912, 4913, 5, 418, 210, 2, 4913, 4914,
	7, 340, 2, 2, 4914, 4915, 5, 590, 296, 2, 4915, 689, 3, 2, 2, 2, 4916,
	4920, 5, 26, 14, 2, 4917, 4919, 5, 540, 271, 2, 4918, 4917, 3, 2, 2, 2,
	4919, 4922, 3, 2, 2, 2, 4920, 4918, 3, 2, 2, 2, 4920, 4921, 3, 2, 2, 2,
	4921, 4925, 3, 2, 2, 2, 4922, 4920, 3, 2, 2, 2, 4923, 4924, 7, 340, 2,
	2, 4924, 4926, 5, 600, 301, 2, 4925, 4923, 3, 2, 2, 2, 4925, 4926, 3, 2,
	2, 2, 4926, 691, 3, 2, 2, 2, 4927, 4928, 5, 26, 14, 2, 4928, 4929, 7, 340,
	2, 2, 4929, 4930, 5, 590, 296, 2, 4930, 4933, 3, 2, 2, 2, 4931, 4933, 5,
	698, 350, 2, 4932, 4927, 3, 2, 2, 2, 4932, 4931, 3, 2, 2, 2, 4933, 693,
	3, 2, 2, 2, 4934, 4935, 5, 590, 296, 2, 4935, 695, 3, 2, 2, 2, 4936, 4937,
	5, 590, 296, 2, 4937, 697, 3, 2, 2, 2, 4938, 4943, 7, 41, 2, 2, 4939, 4940,
	5, 704, 353, 2, 4940, 4941, 7, 320, 2, 2, 4941, 4942, 5, 706, 354, 2, 4942,
	4944, 3, 2, 2, 2, 4943, 4939, 3, 2, 2, 2, 4943, 4944, 3, 2, 2, 2, 4944,
	4945, 3, 2, 2, 2, 4945, 4946, 7, 340, 2, 2, 4946, 4947, 7, 308, 2, 2, 4947,
	4950, 5, 696, 349, 2, 4948, 4949, 7, 329, 2, 2, 4949, 4951, 5, 694, 348,
	2, 4950, 4948, 3, 2, 2, 2, 4950, 4951, 3, 2, 2, 2, 4951, 4952, 3, 2, 2,
	2, 4952, 4953, 7, 309, 2, 2, 4953, 699, 3, 2, 2, 2, 4954, 4957, 5, 26,
	14, 2, 4955, 4956, 7, 330, 2, 2, 4956, 4958, 5, 26, 14, 2, 4957, 4955,
	3, 2, 2, 2, 4957, 4958, 3, 2, 2, 2, 4958, 4965, 3, 2, 2, 2, 4959, 4960,
	7, 310, 2, 2, 4960, 4961, 5, 584, 293, 2, 4961, 4962, 7, 311, 2, 2, 4962,
	4964, 3, 2, 2, 2, 4963, 4959, 3, 2, 2, 2, 4964, 4967, 3, 2, 2, 2, 4965,
	4963, 3, 2, 2, 2, 4965, 4966, 3, 2, 2, 2, 4966, 701, 3, 2, 2, 2, 4967,
	4965, 3, 2, 2, 2, 4968, 4969, 5, 700, 351, 2, 4969, 703, 3, 2, 2, 2, 4970,
	4971, 5, 700, 351, 2, 4971, 705, 3, 2, 2, 2, 4972, 4973, 5, 700, 351, 2,
	4973, 707, 3, 2, 2, 2, 4974, 4980, 5, 766, 384, 2, 4975, 4980, 5, 710,
	356, 2, 4976, 4980, 5, 712, 357, 2, 4977, 4980, 5, 714, 358, 2, 4978, 4980,
	5, 806, 404, 2, 4979, 4974, 3, 2, 2, 2, 4979, 4975, 3, 2, 2, 2, 4979, 4976,
	3, 2, 2, 2, 4979, 4977, 3, 2, 2, 2, 4979, 4978, 3, 2, 2, 2, 4980, 709,
	3, 2, 2, 2, 4981, 4982, 9, 63, 2, 2, 4982, 4983, 5, 720, 361, 2, 4983,
	4984, 7, 307, 2, 2, 4984, 711, 3, 2, 2, 2, 4985, 4986, 9, 64, 2, 2, 4986,
	4987, 5, 720, 361, 2, 4987, 4988, 7, 307, 2, 2, 4988, 713, 3, 2, 2, 2,
	4989, 4993, 5, 716, 359, 2, 4990, 4993, 5, 768, 385, 2, 4991, 4993, 5,
	780, 391, 2, 4992, 4989, 3, 2, 2, 2, 4992, 4990, 3, 2, 2, 2, 4992, 4991,
	3, 2, 2, 2, 4993, 4994, 3, 2, 2, 2, 4994, 4995, 7, 307, 2, 2, 4995, 715,
	3, 2, 2, 2, 4996, 4999, 5, 760, 381, 2, 4997, 4999, 5, 762, 382, 2, 4998,
	4996, 3, 2, 2, 2, 4998, 4997, 3, 2, 2, 2, 4999, 5000, 3, 2, 2, 2, 5000,
	5001, 7, 340, 2, 2, 5001, 5002, 5, 718, 360, 2, 5002, 717, 3, 2, 2, 2,
	5003, 5004, 7, 308, 2, 2, 5004, 5005, 5, 726, 364, 2, 5005, 5006, 7, 309,
	2, 2, 5006, 5009, 3, 2, 2, 2, 5007, 5009, 5, 726, 364, 2, 5008, 5003, 3,
	2, 2, 2, 5008, 5007, 3, 2, 2, 2, 5009, 719, 3, 2, 2, 2, 5010, 5011, 5,
	724, 363, 2, 5011, 721, 3, 2, 2, 2, 5012, 5013, 5, 724, 363, 2, 5013, 723,
	3, 2, 2, 2, 5014, 5019, 5, 700, 351, 2, 5015, 5016, 7, 329, 2, 2, 5016,
	5018, 5, 700, 351, 2, 5017, 5015, 3, 2, 2, 2, 5018, 5021, 3, 2, 2, 2, 5019,
	5017, 3, 2, 2, 2, 5019, 5020, 3, 2, 2, 2, 5020, 725, 3, 2, 2, 2, 5021,
	5019, 3, 2, 2, 2, 5022, 5057, 5, 728, 365, 2, 5023, 5024, 5, 730, 366,
	2, 5024, 5025, 7, 329, 2, 2, 5025, 5028, 5, 732, 367, 2, 5026, 5027, 7,
	329, 2, 2, 5027, 5029, 5, 734, 368, 2, 5028, 5026, 3, 2, 2, 2, 5028, 5029,
	3, 2, 2, 2, 5029, 5057, 3, 2, 2, 2, 5030, 5031, 5, 736, 369, 2, 5031, 5032,
	7, 329, 2, 2, 5032, 5033, 5, 738, 370, 2, 5033, 5034, 7, 329, 2, 2, 5034,
	5035, 5, 740, 371, 2, 5035, 5036, 7, 329, 2, 2, 5036, 5037, 5, 742, 372,
	2, 5037, 5038, 7, 329, 2, 2, 5038, 5039, 5, 744, 373, 2, 5039, 5040, 7,
	329, 2, 2, 5040, 5054, 5, 746, 374, 2, 5041, 5042, 7, 329, 2, 2, 5042,
	5043, 5, 748, 375, 2, 5043, 5044, 7, 329, 2, 2, 5044, 5045, 5, 750, 376,
	2, 5045, 5046, 7, 329, 2, 2, 5046, 5047, 5, 752, 377, 2, 5047, 5048, 7,
	329, 2, 2, 5048, 5049, 5, 754, 378, 2, 5049, 5050, 7, 329, 2, 2, 5050,
	5051, 5, 756, 379, 2, 5051, 5052, 7, 329, 2, 2, 5052, 5053, 5, 758, 380,
	2, 5053, 5055, 3, 2, 2, 2, 5054, 5041, 3, 2, 2, 2, 5054, 5055, 3, 2, 2,
	2, 5055, 5057, 3, 2, 2, 2, 5056, 5022, 3, 2, 2, 2, 5056, 5023, 3, 2, 2,
	2, 5056, 5030, 3, 2, 2, 2, 5057, 727, 3, 2, 2, 2, 5058, 5059, 5, 588, 295,
	2, 5059, 729, 3, 2, 2, 2, 5060, 5061, 5, 588, 295, 2, 5061, 731, 3, 2,
	2, 2, 5062, 5063, 5, 588, 295, 2, 5063, 733, 3, 2, 2, 2, 5064, 5065, 5,
	588, 295, 2, 5065, 735, 3, 2, 2, 2, 5066, 5067, 5, 588, 295, 2, 5067, 737,
	3, 2, 2, 2, 5068, 5069, 5, 588, 295, 2, 5069, 739, 3, 2, 2, 2, 5070, 5071,
	5, 588, 295, 2, 5071, 741, 3, 2, 2, 2, 5072, 5073, 5, 588, 295, 2, 5073,
	743, 3, 2, 2, 2, 5074, 5075, 5, 588, 295, 2, 5075, 745, 3, 2, 2, 2, 5076,
	5077, 5, 588, 295, 2, 5077, 747, 3, 2, 2, 2, 5078, 5079, 5, 588, 295, 2,
	5079, 749, 3, 2, 2, 2, 5080, 5081, 5, 588, 295, 2, 5081, 751, 3, 2, 2,
	2, 5082, 5083, 5, 588, 295, 2, 5083, 753, 3, 2, 2, 2, 5084, 5085, 5, 588,
	295, 2, 5085, 755, 3, 2, 2, 2, 5086, 5087, 5, 588, 295, 2, 5087, 757, 3,
	2, 2, 2, 5088, 5089, 5, 588, 295, 2, 5089, 759, 3, 2, 2, 2, 5090, 5091,
	7, 308, 2, 2, 5091, 5092, 5, 704, 353, 2, 5092, 5093, 5, 104, 53, 2, 5093,
	5094, 5, 706, 354, 2, 5094, 5095, 7, 309, 2, 2, 5095, 761, 3, 2, 2, 2,
	5096, 5097, 7, 308, 2, 2, 5097, 5099, 5, 722, 362, 2, 5098, 5100, 5, 106,
	54, 2, 5099, 5098, 3, 2, 2, 2, 5099, 5100, 3, 2, 2, 2, 5100, 5101, 3, 2,
	2, 2, 5101, 5102, 7, 378, 2, 2, 5102, 5103, 5, 720, 361, 2, 5103, 5104,
	7, 309, 2, 2, 5104, 763, 3, 2, 2, 2, 5105, 5110, 5, 26, 14, 2, 5106, 5107,
	7, 329, 2, 2, 5107, 5109, 5, 26, 14, 2, 5108, 5106, 3, 2, 2, 2, 5109, 5112,
	3, 2, 2, 2, 5110, 5108, 3, 2, 2, 2, 5110, 5111, 3, 2, 2, 2, 5111, 765,
	3, 2, 2, 2, 5112, 5110, 3, 2, 2, 2, 5113, 5115, 7, 232, 2, 2, 5114, 5116,
	5, 542, 272, 2, 5115, 5114, 3, 2, 2, 2, 5115, 5116, 3, 2, 2, 2, 5116, 5117,
	3, 2, 2, 2, 5117, 5118, 5, 678, 340, 2, 5118, 5119, 7, 307, 2, 2, 5119,
	767, 3, 2, 2, 2, 5120, 5123, 5, 770, 386, 2, 5121, 5123, 5, 772, 387, 2,
	5122, 5120, 3, 2, 2, 2, 5122, 5121, 3, 2, 2, 2, 5123, 5124, 3, 2, 2, 2,
	5124, 5125, 7, 340, 2, 2, 5125, 5126, 5, 718, 360, 2, 5126, 769, 3, 2,
	2, 2, 5127, 5129, 7, 308, 2, 2, 5128, 5130, 5, 24, 13, 2, 5129, 5128, 3,
	2, 2, 2, 5129, 5130, 3, 2, 2, 2, 5130, 5131, 3, 2, 2, 2, 5131, 5132, 5,
	704, 353, 2, 5132, 5133, 5, 104, 53, 2, 5133, 5134, 7, 308, 2, 2, 5134,
	5136, 5, 706, 354, 2, 5135, 5137, 5, 106, 54, 2, 5136, 5135, 3, 2, 2, 2,
	5136, 5137, 3, 2, 2, 2, 5137, 5138, 3, 2, 2, 2, 5138, 5139, 7, 332, 2,
	2, 5139, 5140, 5, 774, 388, 2, 5140, 5141, 7, 309, 2, 2, 5141, 5142, 7,
	309, 2, 2, 5142, 771, 3, 2, 2, 2, 5143, 5145, 7, 308, 2, 2, 5144, 5146,
	5, 24, 13, 2, 5145, 5144, 3, 2, 2, 2, 5145, 5146, 3, 2, 2, 2, 5146, 5147,
	3, 2, 2, 2, 5147, 5149, 5, 722, 362, 2, 5148, 5150, 5, 106, 54, 2, 5149,
	5148, 3, 2, 2, 2, 5149, 5150, 3, 2, 2, 2, 5150, 5151, 3, 2, 2, 2, 5151,
	5152, 7, 378, 2, 2, 5152, 5153, 7, 308, 2, 2, 5153, 5155, 5, 720, 361,
	2, 5154, 5156, 5, 106, 54, 2, 5155, 5154, 3, 2, 2, 2, 5155, 5156, 3, 2,
	2, 2, 5156, 5157, 3, 2, 2, 2, 5157, 5158, 7, 332, 2, 2, 5158, 5159, 5,
	774, 388, 2, 5159, 5160, 7, 309, 2, 2, 5160, 5161, 7, 309, 2, 2, 5161,
	773, 3, 2, 2, 2, 5162, 5163, 5, 600, 301, 2, 5163, 775, 3, 2, 2, 2, 5164,
	5166, 7, 74, 2, 2, 5165, 5164, 3, 2, 2, 2, 5165, 5166, 3, 2, 2, 2, 5166,
	5178, 3, 2, 2, 2, 5167, 5169, 7, 274, 2, 2, 5168, 5170, 5, 58, 30, 2, 5169,
	5168, 3, 2, 2, 2, 5169, 5170, 3, 2, 2, 2, 5170, 5172, 3, 2, 2, 2, 5171,
	5173, 5, 556, 279, 2, 5172, 5171, 3, 2, 2, 2, 5172, 5173, 3, 2, 2, 2, 5173,
	5179, 3, 2, 2, 2, 5174, 5176, 5, 58, 30, 2, 5175, 5174, 3, 2, 2, 2, 5175,
	5176, 3, 2, 2, 2, 5176, 5177, 3, 2, 2, 2, 5177, 5179, 5, 556, 279, 2, 5178,
	5167, 3, 2, 2, 2, 5178, 5175, 3, 2, 2, 2, 5179, 5180, 3, 2, 2, 2, 5180,
	5181, 5, 680, 341, 2, 5181, 5182, 7, 307, 2, 2, 5182, 5187, 3, 2, 2, 2,
	5183, 5187, 5, 376, 189, 2, 5184, 5187, 5, 388, 195, 2, 5185, 5187, 5,
	378, 190, 2, 5186, 5165, 3, 2, 2, 2, 5186, 5183, 3, 2, 2, 2, 5186, 5184,
	3, 2, 2, 2, 5186, 5185, 3, 2, 2, 2, 5187, 777, 3, 2, 2, 2, 5188, 5189,
	5, 600, 301, 2, 5189, 779, 3, 2, 2, 2, 5190, 5191, 7, 130, 2, 2, 5191,
	5192, 7, 308, 2, 2, 5192, 5193, 5, 778, 390, 2, 5193, 5196, 7, 309, 2,
	2, 5194, 5197, 5, 716, 359, 2, 5195, 5197, 5, 768, 385, 2, 5196, 5194,
	3, 2, 2, 2, 5196, 5195, 3, 2, 2, 2, 5197, 5201, 3, 2, 2, 2, 5198, 5199,
	7, 132, 2, 2, 5199, 5201, 5, 716, 359, 2, 5200, 5190, 3, 2, 2, 2, 5200,
	5198, 3, 2, 2, 2, 5201, 781, 3, 2, 2, 2, 5202, 5214, 7, 113, 2, 2, 5203,
	5204, 7, 364, 2, 2, 5204, 5205, 7, 333, 2, 2, 5205, 5215, 7, 364, 2, 2,
	5206, 5211, 5, 390, 196, 2, 5207, 5208, 7, 329, 2, 2, 5208, 5210, 5, 390,
	196, 2, 5209, 5207, 3, 2, 2, 2, 5210, 5213, 3, 2, 2, 2, 5211, 5209, 3,
	2, 2, 2, 5211, 5212, 3, 2, 2, 2, 5212, 5215, 3, 2, 2, 2, 5213, 5211, 3,
	2, 2, 2, 5214, 5203, 3, 2, 2, 2, 5214, 5206, 3, 2, 2, 2, 5215, 5216, 3,
	2, 2, 2, 5216, 5217, 7, 307, 2, 2, 5217, 783, 3, 2, 2, 2, 5218, 5219, 7,
	126, 2, 2, 5219, 5220, 5, 764, 383, 2, 5220, 5221, 7, 307, 2, 2, 5221,
	785, 3, 2, 2, 2, 5222, 5224, 7, 145, 2, 2, 5223, 5225, 5, 558, 280, 2,
	5224, 5223, 3, 2, 2, 2, 5224, 5225, 3, 2, 2, 2, 5225, 5228, 3, 2, 2, 2,
	5226, 5227, 7, 383, 2, 2, 5227, 5229, 5, 224, 113, 2, 5228, 5226, 3, 2,
	2, 2, 5228, 5229, 3, 2, 2, 2, 5229, 5230, 3, 2, 2, 2, 5230, 5234, 5, 26,
	14, 2, 5231, 5233, 5, 540, 271, 2, 5232, 5231, 3, 2, 2, 2, 5233, 5236,
	3, 2, 2, 2, 5234, 5232, 3, 2, 2, 2, 5234, 5235, 3, 2, 2, 2, 5235, 5245,
	3, 2, 2, 2, 5236, 5234, 3, 2, 2, 2, 5237, 5238, 7, 329, 2, 2, 5238, 5242,
	5, 26, 14, 2, 5239, 5241, 5, 540, 271, 2, 5240, 5239, 3, 2, 2, 2, 5241,
	5244, 3, 2, 2, 2, 5242, 5240, 3, 2, 2, 2, 5242, 5243, 3, 2, 2, 2, 5243,
	5246, 3, 2, 2, 2, 5244, 5242, 3, 2, 2, 2, 5245, 5237, 3, 2, 2, 2, 5245,
	5246, 3, 2, 2, 2, 5246, 5270, 3, 2, 2, 2, 5247, 5250, 5, 36, 19, 2, 5248,
	5251, 5, 68, 35, 2, 5249, 5251, 5, 74, 38, 2, 5250, 5248, 3, 2, 2, 2, 5250,
	5249, 3, 2, 2, 2, 5250, 5251, 3, 2, 2, 2, 5251, 5253, 3, 2, 2, 2, 5252,
	5254, 9, 65, 2, 2, 5253, 5252, 3, 2, 2, 2, 5253, 5254, 3, 2, 2, 2, 5254,
	5256, 3, 2, 2, 2, 5255, 5257, 5, 556, 279, 2, 5256, 5255, 3, 2, 2, 2, 5256,
	5257, 3, 2, 2, 2, 5257, 5259, 3, 2, 2, 2, 5258, 5260, 5, 220, 111, 2, 5259,
	5258, 3, 2, 2, 2, 5259, 5260, 3, 2, 2, 2, 5260, 5266, 3, 2, 2, 2, 5261,
	5263, 5, 26, 14, 2, 5262, 5264, 5, 226, 114, 2, 5263, 5262, 3, 2, 2, 2,
	5263, 5264, 3, 2, 2, 2, 5264, 5266, 3, 2, 2, 2, 5265, 5247, 3, 2, 2, 2,
	5265, 5261, 3, 2, 2, 2, 5266, 5267, 3, 2, 2, 2, 5267, 5268, 5, 676, 339,
	2, 5268, 5270, 3, 2, 2, 2, 5269, 5222, 3, 2, 2, 2, 5269, 5265, 3, 2, 2,
	2, 5270, 5271, 3, 2, 2, 2, 5271, 5272, 7, 307, 2, 2, 5272, 787, 3, 2, 2,
	2, 5273, 5274, 7, 383, 2, 2, 5274, 5286, 7, 308, 2, 2, 5275, 5278, 5, 368,
	185, 2, 5276, 5278, 5, 790, 396, 2, 5277, 5275, 3, 2, 2, 2, 5277, 5276,
	3, 2, 2, 2, 5278, 5283, 3, 2, 2, 2, 5279, 5280, 7, 329, 2, 2, 5280, 5282,
	5, 790, 396, 2, 5281, 5279, 3, 2, 2, 2, 5282, 5285, 3, 2, 2, 2, 5283, 5281,
	3, 2, 2, 2, 5283, 5284, 3, 2, 2, 2, 5284, 5287, 3, 2, 2, 2, 5285, 5283,
	3, 2, 2, 2, 5286, 5277, 3, 2, 2, 2, 5286, 5287, 3, 2, 2, 2, 5287, 5288,
	3, 2, 2, 2, 5288, 5289, 7, 309, 2, 2, 5289, 789, 3, 2, 2, 2, 5290, 5291,
	7, 262, 2, 2, 5291, 5298, 5, 366, 184, 2, 5292, 5298, 5, 374, 188, 2, 5293,
	5298, 5, 372, 187, 2, 5294, 5295, 5, 554, 278, 2, 5295, 5296, 5, 368, 185,
	2, 5296, 5298, 3, 2, 2, 2, 5297, 5290, 3, 2, 2, 2, 5297, 5292, 3, 2, 2,
	2, 5297, 5293, 3, 2, 2, 2, 5297, 5294, 3, 2, 2, 2, 5298, 791, 3, 2, 2,
	2, 5299, 5301, 5, 530, 266, 2, 5300, 5299, 3, 2, 2, 2, 5301, 5304, 3, 2,
	2, 2, 5302, 5300, 3, 2, 2, 2, 5302, 5303, 3, 2, 2, 2, 5303, 5305, 3, 2,
	2, 2, 5304, 5302, 3, 2, 2, 2, 5305, 5306, 5, 804, 403, 2, 5306, 793, 3,
	2, 2, 2, 5307, 5334, 7, 308, 2, 2, 5308, 5315, 5, 798, 400, 2, 5309, 5311,
	7, 329, 2, 2, 5310, 5312, 5, 798, 400, 2, 5311, 5310, 3, 2, 2, 2, 5311,
	5312, 3, 2, 2, 2, 5312, 5314, 3, 2, 2, 2, 5313, 5309, 3, 2, 2, 2, 5314,
	5317, 3, 2, 2, 2, 5315, 5313, 3, 2, 2, 2, 5315, 5316, 3, 2, 2, 2, 5316,
	5335, 3, 2, 2, 2, 5317, 5315, 3, 2, 2, 2, 5318, 5320, 7, 329, 2, 2, 5319,
	5321, 5, 798, 400, 2, 5320, 5319, 3, 2, 2, 2, 5320, 5321, 3, 2, 2, 2, 5321,
	5323, 3, 2, 2, 2, 5322, 5318, 3, 2, 2, 2, 5323, 5324, 3, 2, 2, 2, 5324,
	5322, 3, 2, 2, 2, 5324, 5325, 3, 2, 2, 2, 5325, 5335, 3, 2, 2, 2, 5326,
	5331, 5, 792, 397, 2, 5327, 5328, 7, 329, 2, 2, 5328, 5330, 5, 792, 397,
	2, 5329, 5327, 3, 2, 2, 2, 5330, 5333, 3, 2, 2, 2, 5331, 5329, 3, 2, 2,
	2, 5331, 5332, 3, 2, 2, 2, 5332, 5335, 3, 2, 2, 2, 5333, 5331, 3, 2, 2,
	2, 5334, 5308, 3, 2, 2, 2, 5334, 5322, 3, 2, 2, 2, 5334, 5326, 3, 2, 2,
	2, 5334, 5335, 3, 2, 2, 2, 5335, 5336, 3, 2, 2, 2, 5336, 5337, 7, 309,
	2, 2, 5337, 795, 3, 2, 2, 2, 5338, 5340, 5, 530, 266, 2, 5339, 5338, 3,
	2, 2, 2, 5340, 5343, 3, 2, 2, 2, 5341, 5339, 3, 2, 2, 2, 5341, 5342, 3,
	2, 2, 2, 5342, 5371, 3, 2, 2, 2, 5343, 5341, 3, 2, 2, 2, 5344, 5346, 7,
	139, 2, 2, 5345, 5347, 5, 668, 335, 2, 5346, 5345, 3, 2, 2, 2, 5346, 5347,
	3, 2, 2, 2, 5347, 5348, 3, 2, 2, 2, 5348, 5372, 5, 684, 343, 2, 5349, 5351,
	7, 140, 2, 2, 5350, 5352, 5, 672, 337, 2, 5351, 5350, 3, 2, 2, 2, 5351,
	5352, 3, 2, 2, 2, 5352, 5353, 3, 2, 2, 2, 5353, 5372, 5, 684, 343, 2, 5354,
	5356, 7, 178, 2, 2, 5355, 5357, 5, 672, 337, 2, 5356, 5355, 3, 2, 2, 2,
	5356, 5357, 3, 2, 2, 2, 5357, 5358, 3, 2, 2, 2, 5358, 5372, 5, 686, 344,
	2, 5359, 5362, 5, 26, 14, 2, 5360, 5361, 7, 330, 2, 2, 5361, 5363, 5, 26,
	14, 2, 5362, 5360, 3, 2, 2, 2, 5362, 5363, 3, 2, 2, 2, 5363, 5364, 3, 2,
	2, 2, 5364, 5365, 5, 684, 343, 2, 5365, 5372, 3, 2, 2, 2, 5366, 5368, 7,
	204, 2, 2, 5367, 5369, 5, 670, 336, 2, 5368, 5367, 3, 2, 2, 2, 5368, 5369,
	3, 2, 2, 2, 5369, 5370, 3, 2, 2, 2, 5370, 5372, 5, 684, 343, 2, 5371, 5344,
	3, 2, 2, 2, 5371, 5349, 3, 2, 2, 2, 5371, 5354, 3, 2, 2, 2, 5371, 5359,
	3, 2, 2, 2, 5371, 5366, 3, 2, 2, 2, 5372, 797, 3, 2, 2, 2, 5373, 5383,
	5, 800, 401, 2, 5374, 5375, 7, 330, 2, 2, 5375, 5376, 5, 26, 14, 2, 5376,
	5378, 7, 308, 2, 2, 5377, 5379, 5, 800, 401, 2, 5378, 5377, 3, 2, 2, 2,
	5378, 5379, 3, 2, 2, 2, 5379, 5380, 3, 2, 2, 2, 5380, 5381, 7, 309, 2,
	2, 5381, 5383, 3, 2, 2, 2, 5382, 5373, 3, 2, 2, 2, 5382, 5374, 3, 2, 2,
	2, 5383, 799, 3, 2, 2, 2, 5384, 5397, 5, 700, 351, 2, 5385, 5386, 7, 312,
	2, 2, 5386, 5391, 5, 700, 351, 2, 5387, 5388, 7, 329, 2, 2, 5388, 5390,
	5, 700, 351, 2, 5389, 5387, 3, 2, 2, 2, 5390, 5393, 3, 2, 2, 2, 5391, 5389,
	3, 2, 2, 2, 5391, 5392, 3, 2, 2, 2, 5392, 5394, 3, 2, 2, 2, 5393, 5391,
	3, 2, 2, 2, 5394, 5395, 7, 313, 2, 2, 5395, 5397, 3, 2, 2, 2, 5396, 5384,
	3, 2, 2, 2, 5396, 5385, 3, 2, 2, 2, 5397, 801, 3, 2, 2, 2, 5398, 5399,
	5, 26, 14, 2, 5399, 803, 3, 2, 2, 2, 5400, 5402, 5, 60, 31, 2, 5401, 5403,
	5, 672, 337, 2, 5402, 5401, 3, 2, 2, 2, 5402, 5403, 3, 2, 2, 2, 5403, 5414,
	3, 2, 2, 2, 5404, 5414, 5, 672, 337, 2, 5405, 5408, 5, 26, 14, 2, 5406,
	5408, 7, 146, 2, 2, 5407, 5405, 3, 2, 2, 2, 5407, 5406, 3, 2, 2, 2, 5408,
	5411, 3, 2, 2, 2, 5409, 5410, 7, 330, 2, 2, 5410, 5412, 5, 26, 14, 2, 5411,
	5409, 3, 2, 2, 2, 5411, 5412, 3, 2, 2, 2, 5412, 5414, 3, 2, 2, 2, 5413,
	5400, 3, 2, 2, 2, 5413, 5404, 3, 2, 2, 2, 5413, 5407, 3, 2, 2, 2, 5413,
	5414, 3, 2, 2, 2, 5414, 5415, 3, 2, 2, 2, 5415, 5419, 5, 802, 402, 2, 5416,
	5418, 5, 544, 273, 2, 5417, 5416, 3, 2, 2, 2, 5418, 5421, 3, 2, 2, 2, 5419,
	5417, 3, 2, 2, 2, 5419, 5420, 3, 2, 2, 2, 5420, 5424, 3, 2, 2, 2, 5421,
	5419, 3, 2, 2, 2, 5422, 5423, 7, 340, 2, 2, 5423, 5425, 5, 596, 299, 2,
	5424, 5422, 3, 2, 2, 2, 5424, 5425, 3, 2, 2, 2, 5425, 5438, 3, 2, 2, 2,
	5426, 5428, 5, 60, 31, 2, 5427, 5426, 3, 2, 2, 2, 5427, 5428, 3, 2, 2,
	2, 5428, 5429, 3, 2, 2, 2, 5429, 5430, 7, 330, 2, 2, 5430, 5431, 5, 802,
	402, 2, 5431, 5433, 7, 308, 2, 2, 5432, 5434, 5, 600, 301, 2, 5433, 5432,
	3, 2, 2, 2, 5433, 5434, 3, 2, 2, 2, 5434, 5435, 3, 2, 2, 2, 5435, 5436,
	7, 309, 2, 2, 5436, 5438, 3, 2, 2, 2, 5437, 5413, 3, 2, 2, 2, 5437, 5427,
	3, 2, 2, 2, 5438, 805, 3, 2, 2, 2, 5439, 5452, 5, 808, 405, 2, 5440, 5452,
	5, 810, 406, 2, 5441, 5452, 5, 812, 407, 2, 5442, 5452, 5, 814, 408, 2,
	5443, 5452, 5, 816, 409, 2, 5444, 5452, 5, 818, 410, 2, 5445, 5452, 5,
	820, 411, 2, 5446, 5452, 5, 822, 412, 2, 5447, 5452, 5, 824, 413, 2, 5448,
	5452, 5, 826, 414, 2, 5449, 5452, 5, 828, 415, 2, 5450, 5452, 5, 830, 416,
	2, 5451, 5439, 3, 2, 2, 2, 5451, 5440, 3, 2, 2, 2, 5451, 5441, 3, 2, 2,
	2, 5451, 5442, 3, 2, 2, 2, 5451, 5443, 3, 2, 2, 2, 5451, 5444, 3, 2, 2,
	2, 5451, 5445, 3, 2, 2, 2, 5451, 5446, 3, 2, 2, 2, 5451, 5447, 3, 2, 2,
	2, 5451, 5448, 3, 2, 2, 2, 5451, 5449, 3, 2, 2, 2, 5451, 5450, 3, 2, 2,
	2, 5452, 807, 3, 2, 2, 2, 5453, 5454, 7, 33, 2, 2, 5454, 5455, 7, 308,
	2, 2, 5455, 5456, 5, 854, 428, 2, 5456, 5457, 7, 329, 2, 2, 5457, 5458,
	5, 854, 428, 2, 5458, 5459, 7, 329, 2, 2, 5459, 5464, 5, 852, 427, 2, 5460,
	5462, 7, 329, 2, 2, 5461, 5463, 5, 842, 422, 2, 5462, 5461, 3, 2, 2, 2,
	5462, 5463, 3, 2, 2, 2, 5463, 5465, 3, 2, 2, 2, 5464, 5460, 3, 2, 2, 2,
	5464, 5465, 3, 2, 2, 2, 5465, 5466, 3, 2, 2, 2, 5466, 5467, 7, 309, 2,
	2, 5467, 5468, 7, 307, 2, 2, 5468, 809, 3, 2, 2, 2, 5469, 5470, 7, 25,
	2, 2, 5470, 5471, 7, 308, 2, 2, 5471, 5472, 5, 854, 428, 2, 5472, 5473,
	7, 329, 2, 2, 5473, 5474, 5, 854, 428, 2, 5474, 5475, 7, 329, 2, 2, 5475,
	5480, 5, 852, 427, 2, 5476, 5478, 7, 329, 2, 2, 5477, 5479, 5, 842, 422,
	2, 5478, 5477, 3, 2, 2, 2, 5478, 5479, 3, 2, 2, 2, 5479, 5481, 3, 2, 2,
	2, 5480, 5476, 3, 2, 2, 2, 5480, 5481, 3, 2, 2, 2, 5481, 5482, 3, 2, 2,
	2, 5482, 5483, 7, 309, 2, 2, 5483, 5484, 7, 307, 2, 2, 5484, 811, 3, 2,
	2, 2, 5485, 5486, 7, 34, 2, 2, 5486, 5487, 7, 308, 2, 2, 5487, 5488, 5,
	854, 428, 2, 5488, 5489, 7, 329, 2, 2, 5489, 5490, 5, 854, 428, 2, 5490,
	5491, 7, 329, 2, 2, 5491, 5492, 5, 852, 427, 2, 5492, 5493, 7, 329, 2,
	2, 5493, 5522, 5, 852, 427, 2, 5494, 5496, 7, 329, 2, 2, 5495, 5497, 5,
	842, 422, 2, 5496, 5495, 3, 2, 2, 2, 5496, 5497, 3, 2, 2, 2, 5497, 5520,
	3, 2, 2, 2, 5498, 5500, 7, 329, 2, 2, 5499, 5501, 5, 846, 424, 2, 5500,
	5499, 3, 2, 2, 2, 5500, 5501, 3, 2, 2, 2, 5501, 5518, 3, 2, 2, 2, 5502,
	5504, 7, 329, 2, 2, 5503, 5505, 5, 832, 417, 2, 5504, 5503, 3, 2, 2, 2,
	5504, 5505, 3, 2, 2, 2, 5505, 5516, 3, 2, 2, 2, 5506, 5508, 7, 329, 2,
	2, 5507, 5509, 5, 836, 419, 2, 5508, 5507, 3, 2, 2, 2, 5508, 5509, 3, 2,
	2, 2, 5509, 5514, 3, 2, 2, 2, 5510, 5512, 7, 329, 2, 2, 5511, 5513, 5,
	836, 419, 2, 5512, 5511, 3, 2, 2, 2, 5512, 5513, 3, 2, 2, 2, 5513, 5515,
	3, 2, 2, 2, 5514, 5510, 3, 2, 2, 2, 5514, 5515, 3, 2, 2, 2, 5515, 5517,
	3, 2, 2, 2, 5516, 5506, 3, 2, 2, 2, 5516, 5517, 3, 2, 2, 2, 5517, 5519,
	3, 2, 2, 2, 5518, 5502, 3, 2, 2, 2, 5518, 5519, 3, 2, 2, 2, 5519, 5521,
	3, 2, 2, 2, 5520, 5498, 3, 2, 2, 2, 5520, 5521, 3, 2, 2, 2, 5521, 5523,
	3, 2, 2, 2, 5522, 5494, 3, 2, 2, 2, 5522, 5523, 3, 2, 2, 2, 5523, 5524,
	3, 2, 2, 2, 5524, 5525, 7, 309, 2, 2, 5525, 5526, 7, 307, 2, 2, 5526, 813,
	3, 2, 2, 2, 5527, 5528, 7, 29, 2, 2, 5528, 5529, 7, 308, 2, 2, 5529, 5530,
	5, 854, 428, 2, 5530, 5531, 7, 329, 2, 2, 5531, 5532, 5, 854, 428, 2, 5532,
	5533, 7, 329, 2, 2, 5533, 5538, 5, 852, 427, 2, 5534, 5536, 7, 329, 2,
	2, 5535, 5537, 5, 842, 422, 2, 5536, 5535, 3, 2, 2, 2, 5536, 5537, 3, 2,
	2, 2, 5537, 5539, 3, 2, 2, 2, 5538, 5534, 3, 2, 2, 2, 5538, 5539, 3, 2,
	2, 2, 5539, 5540, 3, 2, 2, 2, 5540, 5541, 7, 309, 2, 2, 5541, 5542, 7,
	307, 2, 2, 5542, 815, 3, 2, 2, 2, 5543, 5544, 7, 31, 2, 2, 5544, 5545,
	7, 308, 2, 2, 5545, 5546, 5, 854, 428, 2, 5546, 5547, 7, 329, 2, 2, 5547,
	5548, 5, 854, 428, 2, 5548, 5549, 7, 329, 2, 2, 5549, 5554, 5, 852, 427,
	2, 5550, 5552, 7, 329, 2, 2, 5551, 5553, 5, 842, 422, 2, 5552, 5551, 3,
	2, 2, 2, 5552, 5553, 3, 2, 2, 2, 5553, 5555, 3, 2, 2, 2, 5554, 5550, 3,
	2, 2, 2, 5554, 5555, 3, 2, 2, 2, 5555, 5556, 3, 2, 2, 2, 5556, 5557, 7,
	309, 2, 2, 5557, 5558, 7, 307, 2, 2, 5558, 817, 3, 2, 2, 2, 5559, 5560,
	7, 30, 2, 2, 5560, 5561, 7, 308, 2, 2, 5561, 5562, 5, 854, 428, 2, 5562,
	5563, 7, 329, 2, 2, 5563, 5564, 5, 854, 428, 2, 5564, 5565, 7, 329, 2,
	2, 5565, 5566, 5, 852, 427, 2, 5566, 5567, 7, 329, 2, 2, 5567, 5596, 5,
	852, 427, 2, 5568, 5570, 7, 329, 2, 2, 5569, 5571, 5, 842, 422, 2, 5570,
	5569, 3, 2, 2, 2, 5570, 5571, 3, 2, 2, 2, 5571, 5594, 3, 2, 2, 2, 5572,
	5574, 7, 329, 2, 2, 5573, 5575, 5, 846, 424, 2, 5574, 5573, 3, 2, 2, 2,
	5574, 5575, 3, 2, 2, 2, 5575, 5592, 3, 2, 2, 2, 5576, 5578, 7, 329, 2,
	2, 5577, 5579, 5, 832, 417, 2, 5578, 5577, 3, 2, 2, 2, 5578, 5579, 3, 2,
	2, 2, 5579, 5590, 3, 2, 2, 2, 5580, 5582, 7, 329, 2, 2, 5581, 5583, 5,
	836, 419, 2, 5582, 5581, 3, 2, 2, 2, 5582, 5583, 3, 2, 2, 2, 5583, 5588,
	3, 2, 2, 2, 5584, 5586, 7, 329, 2, 2, 5585, 5587, 5, 836, 419, 2, 5586,
	5585, 3, 2, 2, 2, 5586, 5587, 3, 2, 2, 2, 5587, 5589, 3, 2, 2, 2, 5588,
	5584, 3, 2, 2, 2, 5588, 5589, 3, 2, 2, 2, 5589, 5591, 3, 2, 2, 2, 5590,
	5580, 3, 2, 2, 2, 5590, 5591, 3, 2, 2, 2, 5591, 5593, 3, 2, 2, 2, 5592,
	5576, 3, 2, 2, 2, 5592, 5593, 3, 2, 2, 2, 5593, 5595, 3, 2, 2, 2, 5594,
	5572, 3, 2, 2, 2, 5594, 5595, 3, 2, 2, 2, 5595, 5597, 3, 2, 2, 2, 5596,
	5568, 3, 2, 2, 2, 5596, 5597, 3, 2, 2, 2, 5597, 5598, 3, 2, 2, 2, 5598,
	5599, 7, 309, 2, 2, 5599, 5600, 7, 307, 2, 2, 5600, 819, 3, 2, 2, 2, 5601,
	5602, 7, 35, 2, 2, 5602, 5603, 7, 308, 2, 2, 5603, 5604, 5, 854, 428, 2,
	5604, 5605, 7, 329, 2, 2, 5605, 5606, 5, 854, 428, 2, 5606, 5607, 7, 329,
	2, 2, 5607, 5612, 5, 852, 427, 2, 5608, 5610, 7, 329, 2, 2, 5609, 5611,
	5, 842, 422, 2, 5610, 5609, 3, 2, 2, 2, 5610, 5611, 3, 2, 2, 2, 5611, 5613,
	3, 2, 2, 2, 5612, 5608, 3, 2, 2, 2, 5612, 5613, 3, 2, 2, 2, 5613, 5614,
	3, 2, 2, 2, 5614, 5615, 7, 309, 2, 2, 5615, 5616, 7, 307, 2, 2, 5616, 821,
	3, 2, 2, 2, 5617, 5618, 7, 36, 2, 2, 5618, 5619, 7, 308, 2, 2, 5619, 5620,
	5, 854, 428, 2, 5620, 5621, 7, 329, 2, 2, 5621, 5622, 5, 854, 428, 2, 5622,
	5623, 7, 329, 2, 2, 5623, 5640, 5, 852, 427, 2, 5624, 5626, 7, 329, 2,
	2, 5625, 5627, 5, 842, 422, 2, 5626, 5625, 3, 2, 2, 2, 5626, 5627, 3, 2,
	2, 2, 5627, 5638, 3, 2, 2, 2, 5628, 5630, 7, 329, 2, 2, 5629, 5631, 5,
	840, 421, 2, 5630, 5629, 3, 2, 2, 2, 5630, 5631, 3, 2, 2, 2, 5631, 5636,
	3, 2, 2, 2, 5632, 5634, 7, 329, 2, 2, 5633, 5635, 5, 844, 423, 2, 5634,
	5633, 3, 2, 2, 2, 5634, 5635, 3, 2, 2, 2, 5635, 5637, 3, 2, 2, 2, 5636,
	5632, 3, 2, 2, 2, 5636, 5637, 3, 2, 2, 2, 5637, 5639, 3, 2, 2, 2, 5638,
	5628, 3, 2, 2, 2, 5638, 5639, 3, 2, 2, 2, 5639, 5641, 3, 2, 2, 2, 5640,
	5624, 3, 2, 2, 2, 5640, 5641, 3, 2, 2, 2, 5641, 5642, 3, 2, 2, 2, 5642,
	5643, 7, 309, 2, 2, 5643, 5644, 7, 307, 2, 2, 5644, 823, 3, 2, 2, 2, 5645,
	5646, 7, 24, 2, 2, 5646, 5647, 7, 308, 2, 2, 5647, 5648, 5, 854, 428, 2,
	5648, 5649, 7, 329, 2, 2, 5649, 5650, 5, 854, 428, 2, 5650, 5651, 7, 329,
	2, 2, 5651, 5652, 5, 852, 427, 2, 5652, 5653, 7, 329, 2, 2, 5653, 5670,
	5, 852, 427, 2, 5654, 5656, 7, 329, 2, 2, 5655, 5657, 5, 842, 422, 2, 5656,
	5655, 3, 2, 2, 2, 5656, 5657, 3, 2, 2, 2, 5657, 5668, 3, 2, 2, 2, 5658,
	5660, 7, 329, 2, 2, 5659, 5661, 5, 840, 421, 2, 5660, 5659, 3, 2, 2, 2,
	5660, 5661, 3, 2, 2, 2, 5661, 5666, 3, 2, 2, 2, 5662, 5664, 7, 329, 2,
	2, 5663, 5665, 5, 844, 423, 2, 5664, 5663, 3, 2, 2, 2, 5664, 5665, 3, 2,
	2, 2, 5665, 5667, 3, 2, 2, 2, 5666, 5662, 3, 2, 2, 2, 5666, 5667, 3, 2,
	2, 2, 5667, 5669, 3, 2, 2, 2, 5668, 5658, 3, 2, 2, 2, 5668, 5669, 3, 2,
	2, 2, 5669, 5671, 3, 2, 2, 2, 5670, 5654, 3, 2, 2, 2, 5670, 5671, 3, 2,
	2, 2, 5671, 5672, 3, 2, 2, 2, 5672, 5673, 7, 309, 2, 2, 5673, 5674, 7,
	307, 2, 2, 5674, 825, 3, 2, 2, 2, 5675, 5676, 7, 28, 2, 2, 5676, 5677,
	7, 308, 2, 2, 5677, 5678, 5, 834, 418, 2, 5678, 5679, 7, 329, 2, 2, 5679,
	5684, 5, 852, 427, 2, 5680, 5682, 7, 329, 2, 2, 5681, 5683, 5, 842, 422,
	2, 5682, 5681, 3, 2, 2, 2, 5682, 5683, 3, 2, 2, 2, 5683, 5685, 3, 2, 2,
	2, 5684, 5680, 3, 2, 2, 2, 5684, 5685, 3, 2, 2, 2, 5685, 5686, 3, 2, 2,
	2, 5686, 5687, 7, 309, 2, 2, 5687, 5688, 7, 307, 2, 2, 5688, 827, 3, 2,
	2, 2, 5689, 5690, 7, 39, 2, 2, 5690, 5691, 7, 308, 2, 2, 5691, 5692, 5,
	834, 418, 2, 5692, 5693, 7, 329, 2, 2, 5693, 5694, 5, 852, 427, 2, 5694,
	5695, 7, 329, 2, 2, 5695, 5700, 5, 850, 426, 2, 5696, 5698, 7, 329, 2,
	2, 5697, 5699, 5, 842, 422, 2, 5698, 5697, 3, 2, 2, 2, 5698, 5699, 3, 2,
	2, 2, 5699, 5701, 3, 2, 2, 2, 5700, 5696, 3, 2, 2, 2, 5700, 5701, 3, 2,
	2, 2, 5701, 5702, 3, 2, 2, 2, 5702, 5703, 7, 309, 2, 2, 5703, 5704, 7,
	307, 2, 2, 5704, 829, 3, 2, 2, 2, 5705, 5706, 7, 27, 2, 2, 5706, 5707,
	7, 308, 2, 2, 5707, 5708, 5, 854, 428, 2, 5708, 5709, 7, 329, 2, 2, 5709,
	5710, 5, 854, 428, 2, 5710, 5711, 7, 329, 2, 2, 5711, 5712, 5, 848, 425,
	2, 5712, 5713, 7, 329, 2, 2, 5713, 5718, 5, 838, 420, 2, 5714, 5716, 7,
	329, 2, 2, 5715, 5717, 5, 842, 422, 2, 5716, 5715, 3, 2, 2, 2, 5716, 5717,
	3, 2, 2, 2, 5717, 5719, 3, 2, 2, 2, 5718, 5714, 3, 2, 2, 2, 5718, 5719,
	3, 2, 2, 2, 5719, 5720, 3, 2, 2, 2, 5720, 5721, 7, 309, 2, 2, 5721, 5722,
	7, 307, 2, 2, 5722, 831, 3, 2, 2, 2, 5723, 5724, 5, 590, 296, 2, 5724,
	833, 3, 2, 2, 2, 5725, 5726, 5, 860, 431, 2, 5726, 835, 3, 2, 2, 2, 5727,
	5732, 5, 26, 14, 2, 5728, 5729, 7, 310, 2, 2, 5729, 5730, 5, 588, 295,
	2, 5730, 5731, 7, 311, 2, 2, 5731, 5733, 3, 2, 2, 2, 5732, 5728, 3, 2,
	2, 2, 5732, 5733, 3, 2, 2, 2, 5733, 837, 3, 2, 2, 2, 5734, 5735, 5, 590,
	296, 2, 5735, 839, 3, 2, 2, 2, 5736, 5737, 5, 596, 299, 2, 5737, 841, 3,
	2, 2, 2, 5738, 5739, 5, 26, 14, 2, 5739, 843, 3, 2, 2, 2, 5740, 5741, 5,
	588, 295, 2, 5741, 845, 3, 2, 2, 2, 5742, 5743, 5, 590, 296, 2, 5743, 847,
	3, 2, 2, 2, 5744, 5745, 5, 590, 296, 2, 5745, 849, 3, 2, 2, 2, 5746, 5747,
	5, 596, 299, 2, 5747, 851, 3, 2, 2, 2, 5748, 5749, 5, 600, 301, 2, 5749,
	853, 3, 2, 2, 2, 5750, 5752, 5, 108, 55, 2, 5751, 5750, 3, 2, 2, 2, 5751,
	5752, 3, 2, 2, 2, 5752, 5753, 3, 2, 2, 2, 5753, 5756, 5, 702, 352, 2, 5754,
	5755, 7, 385, 2, 2, 5755, 5757, 5, 856, 429, 2, 5756, 5754, 3, 2, 2, 2,
	5756, 5757, 3, 2, 2, 2, 5757, 855, 3, 2, 2, 2, 5758, 5759, 7, 308, 2, 2,
	5759, 5760, 5, 858, 430, 2, 5760, 5761, 7, 309, 2, 2, 5761, 5764, 3, 2,
	2, 2, 5762, 5764, 5, 858, 430, 2, 5763, 5758, 3, 2, 2, 2, 5763, 5762, 3,
	2, 2, 2, 5764, 857, 3, 2, 2, 2, 5765, 5766, 5, 600, 301, 2, 5766, 859,
	3, 2, 2, 2, 5767, 5768, 5, 108, 55, 2, 5768, 5771, 5, 702, 352, 2, 5769,
	5770, 7, 385, 2, 2, 5770, 5772, 5, 856, 429, 2, 5771, 5769, 3, 2, 2, 2,
	5771, 5772, 3, 2, 2, 2, 5772, 861, 3, 2, 2, 2, 5773, 5776, 5, 638, 320,
	2, 5774, 5776, 5, 558, 280, 2, 5775, 5773, 3, 2, 2, 2, 5775, 5774, 3, 2,
	2, 2, 5776, 863, 3, 2, 2, 2, 5777, 5781, 7, 115, 2, 2, 5778, 5779, 7, 123,
	2, 2, 5779, 5782, 5, 868, 435, 2, 5780, 5782, 5, 882, 442, 2, 5781, 5778,
	3, 2, 2, 2, 5781, 5780, 3, 2, 2, 2, 5782, 5783, 3, 2, 2, 2, 5783, 5784,
	7, 307, 2, 2, 5784, 865, 3, 2, 2, 2, 5785, 5787, 7, 124, 2, 2, 5786, 5788,
	5, 58, 30, 2, 5787, 5786, 3, 2, 2, 2, 5787, 5788, 3, 2, 2, 2, 5788, 5790,
	3, 2, 2, 2, 5789, 5791, 5, 862, 432, 2, 5790, 5789, 3, 2, 2, 2, 5790, 5791,
	3, 2, 2, 2, 5791, 5792, 3, 2, 2, 2, 5792, 5793, 5, 878, 440, 2, 5793, 5797,
	7, 97, 2, 2, 5794, 5795, 7, 332, 2, 2, 5795, 5798, 5, 26, 14, 2, 5796,
	5798, 3, 2, 2, 2, 5797, 5794, 3, 2, 2, 2, 5797, 5796, 3, 2, 2, 2, 5798,
	867, 3, 2, 2, 2, 5799, 5800, 7, 247, 2, 2, 5800, 5805, 5, 26, 14, 2, 5801,
	5802, 7, 308, 2, 2, 5802, 5803, 5, 346, 174, 2, 5803, 5804, 7, 309, 2,
	2, 5804, 5806, 3, 2, 2, 2, 5805, 5801, 3, 2, 2, 2, 5805, 5806, 3, 2, 2,
	2, 5806, 869, 3, 2, 2, 2, 5807, 5808, 7, 124, 2, 2, 5808, 5809, 5, 638,
	320, 2, 5809, 5814, 5, 26, 14, 2, 5810, 5811, 7, 308, 2, 2, 5811, 5812,
	5, 346, 174, 2, 5812, 5813, 7, 309, 2, 2, 5813, 5815, 3, 2, 2, 2, 5814,
	5810, 3, 2, 2, 2, 5814, 5815, 3, 2, 2, 2, 5815, 871, 3, 2, 2, 2, 5816,
	5817, 7, 137, 2, 2, 5817, 5834, 7, 300, 2, 2, 5818, 5820, 5, 874, 438,
	2, 5819, 5818, 3, 2, 2, 2, 5819, 5820, 3, 2, 2, 2, 5820, 5823, 3, 2, 2,
	2, 5821, 5822, 9, 66, 2, 2, 5822, 5824, 7, 340, 2, 2, 5823, 5821, 3, 2,
	2, 2, 5823, 5824, 3, 2, 2, 2, 5824, 5825, 3, 2, 2, 2, 5825, 5835, 5, 870,
	436, 2, 5826, 5828, 5, 876, 439, 2, 5827, 5826, 3, 2, 2, 2, 5827, 5828,
	3, 2, 2, 2, 5828, 5831, 3, 2, 2, 2, 5829, 5830, 9, 66, 2, 2, 5830, 5832,
	7, 340, 2, 2, 5831, 5829, 3, 2, 2, 2, 5831, 5832, 3, 2, 2, 2, 5832, 5833,
	3, 2, 2, 2, 5833, 5835, 5, 868, 435, 2, 5834, 5819, 3, 2, 2, 2, 5834, 5827,
	3, 2, 2, 2, 5835, 5845, 3, 2, 2, 2, 5836, 5837, 7, 113, 2, 2, 5837, 5840,
	7, 300, 2, 2, 5838, 5839, 9, 66, 2, 2, 5839, 5841, 7, 340, 2, 2, 5840,
	5838, 3, 2, 2, 2, 5840, 5841, 3, 2, 2, 2, 5841, 5842, 3, 2, 2, 2, 5842,
	5843, 9, 67, 2, 2, 5843, 5845, 5, 26, 14, 2, 5844, 5816, 3, 2, 2, 2, 5844,
	5836, 3, 2, 2, 2, 5845, 5846, 3, 2, 2, 2, 5846, 5847, 7, 307, 2, 2, 5847,
	873, 3, 2, 2, 2, 5848, 5849, 9, 68, 2, 2, 5849, 875, 3, 2, 2, 2, 5850,
	5851, 7, 76, 2, 2, 5851, 877, 3, 2, 2, 2, 5852, 5853, 5, 26, 14, 2, 5853,
	5854, 7, 330, 2, 2, 5854, 5857, 3, 2, 2, 2, 5855, 5857, 5, 582, 292, 2,
	5856, 5852, 3, 2, 2, 2, 5856, 5855, 3, 2, 2, 2, 5856, 5857, 3, 2, 2, 2,
	5857, 5858, 3, 2, 2, 2, 5858, 5876, 5, 26, 14, 2, 5859, 5863, 7, 307, 2,
	2, 5860, 5862, 5, 344, 173, 2, 5861, 5860, 3, 2, 2, 2, 5862, 5865, 3, 2,
	2, 2, 5863, 5861, 3, 2, 2, 2, 5863, 5864, 3, 2, 2, 2, 5864, 5877, 3, 2,
	2, 2, 5865, 5863, 3, 2, 2, 2, 5866, 5867, 7, 308, 2, 2, 5867, 5868, 5,
	346, 174, 2, 5868, 5869, 7, 309, 2, 2, 5869, 5873, 7, 307, 2, 2, 5870,
	5872, 5, 360, 181, 2, 5871, 5870, 3, 2, 2, 2, 5872, 5875, 3, 2, 2, 2, 5873,
	5871, 3, 2, 2, 2, 5873, 5874, 3, 2, 2, 2, 5874, 5877, 3, 2, 2, 2, 5875,
	5873, 3, 2, 2, 2, 5876, 5859, 3, 2, 2, 2, 5876, 5866, 3, 2, 2, 2, 5877,
	5881, 3, 2, 2, 2, 5878, 5880, 5, 190, 96, 2, 5879, 5878, 3, 2, 2, 2, 5880,
	5883, 3, 2, 2, 2, 5881, 5879, 3, 2, 2, 2, 5881, 5882, 3, 2, 2, 2, 5882,
	879, 3, 2, 2, 2, 5883, 5881, 3, 2, 2, 2, 5884, 5886, 7, 247, 2, 2, 5885,
	5887, 5, 58, 30, 2, 5886, 5885, 3, 2, 2, 2, 5886, 5887, 3, 2, 2, 2, 5887,
	5888, 3, 2, 2, 2, 5888, 5889, 5, 878, 440, 2, 5889, 5893, 7, 108, 2, 2,
	5890, 5891, 7, 332, 2, 2, 5891, 5894, 5, 26, 14, 2, 5892, 5894, 3, 2, 2,
	2, 5893, 5890, 3, 2, 2, 2, 5893, 5892, 3, 2, 2, 2, 5894, 881, 3, 2, 2,
	2, 5895, 5898, 5, 868, 435, 2, 5896, 5898, 5, 870, 436, 2, 5897, 5895,
	3, 2, 2, 2, 5897, 5896, 3, 2, 2, 2, 5898, 883, 3, 2, 2, 2, 5899, 5901,
	7, 233, 2, 2, 5900, 5899, 3, 2, 2, 2, 5900, 5901, 3, 2, 2, 2, 5901, 5902,
	3, 2, 2, 2, 5902, 5903, 7, 75, 2, 2, 5903, 5904, 5, 582, 292, 2, 5904,
	5905, 5, 26, 14, 2, 5905, 5906, 5, 886, 444, 2, 5906, 885, 3, 2, 2, 2,
	5907, 5911, 7, 312, 2, 2, 5908, 5910, 5, 652, 327, 2, 5909, 5908, 3, 2,
	2, 2, 5910, 5913, 3, 2, 2, 2, 5911, 5909, 3, 2, 2, 2, 5911, 5912, 3, 2,
	2, 2, 5912, 5914, 3, 2, 2, 2, 5913, 5911, 3, 2, 2, 2, 5914, 5915, 7, 313,
	2, 2, 5915, 887, 3, 2, 2, 2, 5916, 5921, 5, 890, 446, 2, 5917, 5918, 7,
	329, 2, 2, 5918, 5920, 5, 890, 446, 2, 5919, 5917, 3, 2, 2, 2, 5920, 5923,
	3, 2, 2, 2, 5921, 5919, 3, 2, 2, 2, 5921, 5922, 3, 2, 2, 2, 5922, 889,
	3, 2, 2, 2, 5923, 5921, 3, 2, 2, 2, 5924, 5926, 5, 530, 266, 2, 5925, 5924,
	3, 2, 2, 2, 5926, 5929, 3, 2, 2, 2, 5927, 5925, 3, 2, 2, 2, 5927, 5928,
	3, 2, 2, 2, 5928, 5931, 3, 2, 2, 2, 5929, 5927, 3, 2, 2, 2, 5930, 5932,
	5, 892, 447, 2, 5931, 5930, 3, 2, 2, 2, 5931, 5932, 3, 2, 2, 2, 5932, 5934,
	3, 2, 2, 2, 5933, 5935, 5, 396, 199, 2, 5934, 5933, 3, 2, 2, 2, 5934, 5935,
	3, 2, 2, 2, 5935, 5936, 3, 2, 2, 2, 5936, 5940, 5, 26, 14, 2, 5937, 5939,
	5, 544, 273, 2, 5938, 5937, 3, 2, 2, 2, 5939, 5942, 3, 2, 2, 2, 5940, 5938,
	3, 2, 2, 2, 5940, 5941, 3, 2, 2, 2, 5941, 5945, 3, 2, 2, 2, 5942, 5940,
	3, 2, 2, 2, 5943, 5944, 7, 340, 2, 2, 5944, 5946, 5, 394, 198, 2, 5945,
	5943, 3, 2, 2, 2, 5945, 5946, 3, 2, 2, 2, 5946, 891, 3, 2, 2, 2, 5947,
	5948, 9, 69, 2, 2, 5948, 893, 3, 2, 2, 2, 5949, 5950, 7, 69, 2, 2, 5950,
	5956, 5, 26, 14, 2, 5951, 5953, 7, 308, 2, 2, 5952, 5954, 5, 888, 445,
	2, 5953, 5952, 3, 2, 2, 2, 5953, 5954, 3, 2, 2, 2, 5954, 5955, 3, 2, 2,
	2, 5955, 5957, 7, 309, 2, 2, 5956, 5951, 3, 2, 2, 2, 5956, 5957, 3, 2,
	2, 2, 5957, 5958, 3, 2, 2, 2, 5958, 5968, 7, 307, 2, 2, 5959, 5961, 5,
	530, 266, 2, 5960, 5959, 3, 2, 2, 2, 5961, 5964, 3, 2, 2, 2, 5962, 5960,
	3, 2, 2, 2, 5962, 5963, 3, 2, 2, 2, 5963, 5965, 3, 2, 2, 2, 5964, 5962,
	3, 2, 2, 2, 5965, 5967, 5, 940, 471, 2, 5966, 5962, 3, 2, 2, 2, 5967, 5970,
	3, 2, 2, 2, 5968, 5966, 3, 2, 2, 2, 5968, 5969, 3, 2, 2, 2, 5969, 5971,
	3, 2, 2, 2, 5970, 5968, 3, 2, 2, 2, 5971, 5975, 7, 93, 2, 2, 5972, 5973,
	7, 332, 2, 2, 5973, 5976, 5, 26, 14, 2, 5974, 5976, 3, 2, 2, 2, 5975, 5972,
	3, 2, 2, 2, 5975, 5974, 3, 2, 2, 2, 5976, 895, 3, 2, 2, 2, 5977, 5979,
	7, 276, 2, 2, 5978, 5977, 3, 2, 2, 2, 5978, 5979, 3, 2, 2, 2, 5979, 5980,
	3, 2, 2, 2, 5980, 5982, 7, 70, 2, 2, 5981, 5983, 5, 58, 30, 2, 5982, 5981,
	3, 2, 2, 2, 5982, 5983, 3, 2, 2, 2, 5983, 5984, 3, 2, 2, 2, 5984, 5986,
	5, 26, 14, 2, 5985, 5987, 5, 788, 395, 2, 5986, 5985, 3, 2, 2, 2, 5986,
	5987, 3, 2, 2, 2, 5987, 5997, 3, 2, 2, 2, 5988, 5989, 7, 114, 2, 2, 5989,
	5995, 5, 580, 291, 2, 5990, 5992, 7, 308, 2, 2, 5991, 5993, 5, 566, 284,
	2, 5992, 5991, 3, 2, 2, 2, 5992, 5993, 3, 2, 2, 2, 5993, 5994, 3, 2, 2,
	2, 5994, 5996, 7, 309, 2, 2, 5995, 5990, 3, 2, 2, 2, 5995, 5996, 3, 2,
	2, 2, 5996, 5998, 3, 2, 2, 2, 5997, 5988, 3, 2, 2, 2, 5997, 5998, 3, 2,
	2, 2, 5998, 6008, 3, 2, 2, 2, 5999, 6000, 7, 135, 2, 2, 6000, 6005, 5,
	900, 451, 2, 6001, 6002, 7, 329, 2, 2, 6002, 6004, 5, 900, 451, 2, 6003,
	6001, 3, 2, 2, 2, 6004, 6007, 3, 2, 2, 2, 6005, 6003, 3, 2, 2, 2, 6005,
	6006, 3, 2, 2, 2, 6006, 6009, 3, 2, 2, 2, 6007, 6005, 3, 2, 2, 2, 6008,
	5999, 3, 2, 2, 2, 6008, 6009, 3, 2, 2, 2, 6009, 6010, 3, 2, 2, 2, 6010,
	6014, 7, 307, 2, 2, 6011, 6013, 5, 956, 479, 2, 6012, 6011, 3, 2, 2, 2,
	6013, 6016, 3, 2, 2, 2, 6014, 6012, 3, 2, 2, 2, 6014, 6015, 3, 2, 2, 2,
	6015, 6017, 3, 2, 2, 2, 6016, 6014, 3, 2, 2, 2, 6017, 6021, 7, 94, 2, 2,
	6018, 6019, 7, 332, 2, 2, 6019, 6022, 5, 26, 14, 2, 6020, 6022, 3, 2, 2,
	2, 6021, 6018, 3, 2, 2, 2, 6021, 6020, 3, 2, 2, 2, 6022, 897, 3, 2, 2,
	2, 6023, 6024, 5, 62, 32, 2, 6024, 6025, 5, 196, 99, 2, 6025, 899, 3, 2,
	2, 2, 6026, 6028, 5, 574, 288, 2, 6027, 6029, 5, 578, 290, 2, 6028, 6027,
	3, 2, 2, 2, 6028, 6029, 3, 2, 2, 2, 6029, 901, 3, 2, 2, 2, 6030, 6031,
	7, 146, 2, 2, 6031, 6032, 7, 70, 2, 2, 6032, 6034, 5, 26, 14, 2, 6033,
	6035, 5, 788, 395, 2, 6034, 6033, 3, 2, 2, 2, 6034, 6035, 3, 2, 2, 2, 6035,
	6045, 3, 2, 2, 2, 6036, 6037, 7, 114, 2, 2, 6037, 6042, 5, 900, 451, 2,
	6038, 6039, 7, 329, 2, 2, 6039, 6041, 5, 900, 451, 2, 6040, 6038, 3, 2,
	2, 2, 6041, 6044, 3, 2, 2, 2, 6042, 6040, 3, 2, 2, 2, 6042, 6043, 3, 2,
	2, 2, 6043, 6046, 3, 2, 2, 2, 6044, 6042, 3, 2, 2, 2, 6045, 6036, 3, 2,
	2, 2, 6045, 6046, 3, 2, 2, 2, 6046, 6047, 3, 2, 2, 2, 6047, 6051, 7, 307,
	2, 2, 6048, 6050, 5, 904, 453, 2, 6049, 6048, 3, 2, 2, 2, 6050, 6053, 3,
	2, 2, 2, 6051, 6049, 3, 2, 2, 2, 6051, 6052, 3, 2, 2, 2, 6052, 6054, 3,
	2, 2, 2, 6053, 6051, 3, 2, 2, 2, 6054, 6058, 7, 94, 2, 2, 6055, 6056, 7,
	332, 2, 2, 6056, 6059, 5, 26, 14, 2, 6057, 6059, 3, 2, 2, 2, 6058, 6055,
	3, 2, 2, 2, 6058, 6057, 3, 2, 2, 2, 6059, 903, 3, 2, 2, 2, 6060, 6074,
	5, 376, 189, 2, 6061, 6063, 5, 530, 266, 2, 6062, 6061, 3, 2, 2, 2, 6063,
	6066, 3, 2, 2, 2, 6064, 6062, 3, 2, 2, 2, 6064, 6065, 3, 2, 2, 2, 6065,
	6067, 3, 2, 2, 2, 6066, 6064, 3, 2, 2, 2, 6067, 6074, 5, 906, 454, 2, 6068,
	6071, 5, 372, 187, 2, 6069, 6071, 5, 374, 188, 2, 6070, 6068, 3, 2, 2,
	2, 6070, 6069, 3, 2, 2, 2, 6070, 6071, 3, 2, 2, 2, 6071, 6072, 3, 2, 2,
	2, 6072, 6074, 7, 307, 2, 2, 6073, 6060, 3, 2, 2, 2, 6073, 6064, 3, 2,
	2, 2, 6073, 6070, 3, 2, 2, 2, 6074, 905, 3, 2, 2, 2, 6075, 6076, 7, 195,
	2, 2, 6076, 6077, 7, 276, 2, 2, 6077, 6078, 5, 882, 442, 2, 6078, 6079,
	7, 307, 2, 2, 6079, 907, 3, 2, 2, 2, 6080, 6082, 5, 530, 266, 2, 6081,
	6080, 3, 2, 2, 2, 6082, 6085, 3, 2, 2, 2, 6083, 6081, 3, 2, 2, 2, 6083,
	6084, 3, 2, 2, 2, 6084, 6086, 3, 2, 2, 2, 6085, 6083, 3, 2, 2, 2, 6086,
	6088, 7, 179, 2, 2, 6087, 6089, 5, 58, 30, 2, 6088, 6087, 3, 2, 2, 2, 6088,
	6089, 3, 2, 2, 2, 6089, 6090, 3, 2, 2, 2, 6090, 6091, 5, 26, 14, 2, 6091,
	6093, 7, 307, 2, 2, 6092, 6094, 5, 56, 29, 2, 6093, 6092, 3, 2, 2, 2, 6093,
	6094, 3, 2, 2, 2, 6094, 6098, 3, 2, 2, 2, 6095, 6097, 5, 910, 456, 2, 6096,
	6095, 3, 2, 2, 2, 6097, 6100, 3, 2, 2, 2, 6098, 6096, 3, 2, 2, 2, 6098,
	6099, 3, 2, 2, 2, 6099, 6101, 3, 2, 2, 2, 6100, 6098, 3, 2, 2, 2, 6101,
	6105, 7, 102, 2, 2, 6102, 6103, 7, 332, 2, 2, 6103, 6106, 5, 26, 14, 2,
	6104, 6106, 3, 2, 2, 2, 6105, 6102, 3, 2, 2, 2, 6105, 6104, 3, 2, 2, 2,
	6106, 909, 3, 2, 2, 2, 6107, 6109, 5, 530, 266, 2, 6108, 6107, 3, 2, 2,
	2, 6109, 6112, 3, 2, 2, 2, 6110, 6108, 3, 2, 2, 2, 6110, 6111, 3, 2, 2,
	2, 6111, 6113, 3, 2, 2, 2, 6112, 6110, 3, 2, 2, 2, 6113, 6114, 5, 912,
	457, 2, 6114, 911, 3, 2, 2, 2, 6115, 6138, 5, 786, 394, 2, 6116, 6138,
	5, 776, 389, 2, 6117, 6138, 5, 880, 441, 2, 6118, 6138, 5, 866, 434, 2,
	6119, 6138, 5, 894, 448, 2, 6120, 6138, 5, 872, 437, 2, 6121, 6138, 5,
	884, 443, 2, 6122, 6138, 5, 896, 449, 2, 6123, 6138, 5, 902, 452, 2, 6124,
	6138, 5, 948, 475, 2, 6125, 6128, 5, 372, 187, 2, 6126, 6128, 5, 374, 188,
	2, 6127, 6125, 3, 2, 2, 2, 6127, 6126, 3, 2, 2, 2, 6127, 6128, 3, 2, 2,
	2, 6128, 6129, 3, 2, 2, 2, 6129, 6138, 7, 307, 2, 2, 6130, 6138, 5, 472,
	237, 2, 6131, 6138, 5, 932, 467, 2, 6132, 6138, 5, 926, 464, 2, 6133, 6138,
	5, 380, 191, 2, 6134, 6138, 5, 922, 462, 2, 6135, 6138, 5, 782, 392, 2,
	6136, 6138, 5, 56, 29, 2, 6137, 6115, 3, 2, 2, 2, 6137, 6116, 3, 2, 2,
	2, 6137, 6117, 3, 2, 2, 2, 6137, 6118, 3, 2, 2, 2, 6137, 6119, 3, 2, 2,
	2, 6137, 6120, 3, 2, 2, 2, 6137, 6121, 3, 2, 2, 2, 6137, 6122, 3, 2, 2,
	2, 6137, 6123, 3, 2, 2, 2, 6137, 6124, 3, 2, 2, 2, 6137, 6127, 3, 2, 2,
	2, 6137, 6130, 3, 2, 2, 2, 6137, 6131, 3, 2, 2, 2, 6137, 6132, 3, 2, 2,
	2, 6137, 6133, 3, 2, 2, 2, 6137, 6134, 3, 2, 2, 2, 6137, 6135, 3, 2, 2,
	2, 6137, 6136, 3, 2, 2, 2, 6138, 913, 3, 2, 2, 2, 6139, 6140, 7, 115, 2,
	2, 6140, 6174, 5, 916, 459, 2, 6141, 6157, 5, 916, 459, 2, 6142, 6144,
	5, 530, 266, 2, 6143, 6142, 3, 2, 2, 2, 6144, 6147, 3, 2, 2, 2, 6145, 6143,
	3, 2, 2, 2, 6145, 6146, 3, 2, 2, 2, 6146, 6148, 3, 2, 2, 2, 6147, 6145,
	3, 2, 2, 2, 6148, 6149, 7, 186, 2, 2, 6149, 6150, 5, 26, 14, 2, 6150, 6151,
	7, 308, 2, 2, 6151, 6152, 7, 330, 2, 2, 6152, 6153, 7, 364, 2, 2, 6153,
	6154, 7, 309, 2, 2, 6154, 6155, 7, 307, 2, 2, 6155, 6157, 3, 2, 2, 2, 6156,
	6141, 3, 2, 2, 2, 6156, 6145, 3, 2, 2, 2, 6157, 6159, 3, 2, 2, 2, 6158,
	6160, 5, 56, 29, 2, 6159, 6158, 3, 2, 2, 2, 6159, 6160, 3, 2, 2, 2, 6160,
	6164, 3, 2, 2, 2, 6161, 6163, 5, 918, 460, 2, 6162, 6161, 3, 2, 2, 2, 6163,
	6166, 3, 2, 2, 2, 6164, 6162, 3, 2, 2, 2, 6164, 6165, 3, 2, 2, 2, 6165,
	6167, 3, 2, 2, 2, 6166, 6164, 3, 2, 2, 2, 6167, 6171, 7, 104, 2, 2, 6168,
	6169, 7, 332, 2, 2, 6169, 6172, 5, 26, 14, 2, 6170, 6172, 3, 2, 2, 2, 6171,
	6168, 3, 2, 2, 2, 6171, 6170, 3, 2, 2, 2, 6172, 6174, 3, 2, 2, 2, 6173,
	6139, 3, 2, 2, 2, 6173, 6156, 3, 2, 2, 2, 6174, 915, 3, 2, 2, 2, 6175,
	6177, 5, 530, 266, 2, 6176, 6175, 3, 2, 2, 2, 6177, 6180, 3, 2, 2, 2, 6178,
	6176, 3, 2, 2, 2, 6178, 6179, 3, 2, 2, 2, 6179, 6181, 3, 2, 2, 2, 6180,
	6178, 3, 2, 2, 2, 6181, 6183, 7, 186, 2, 2, 6182, 6184, 5, 58, 30, 2, 6183,
	6182, 3, 2, 2, 2, 6183, 6184, 3, 2, 2, 2, 6184, 6185, 3, 2, 2, 2, 6185,
	6189, 5, 26, 14, 2, 6186, 6188, 5, 388, 195, 2, 6187, 6186, 3, 2, 2, 2,
	6188, 6191, 3, 2, 2, 2, 6189, 6187, 3, 2, 2, 2, 6189, 6190, 3, 2, 2, 2,
	6190, 6193, 3, 2, 2, 2, 6191, 6189, 3, 2, 2, 2, 6192, 6194, 5, 788, 395,
	2, 6193, 6192, 3, 2, 2, 2, 6193, 6194, 3, 2, 2, 2, 6194, 6196, 3, 2, 2,
	2, 6195, 6197, 5, 794, 398, 2, 6196, 6195, 3, 2, 2, 2, 6196, 6197, 3, 2,
	2, 2, 6197, 6198, 3, 2, 2, 2, 6198, 6199, 7, 307, 2, 2, 6199, 917, 3, 2,
	2, 2, 6200, 6201, 5, 796, 399, 2, 6201, 6202, 7, 307, 2, 2, 6202, 6205,
	3, 2, 2, 2, 6203, 6205, 5, 920, 461, 2, 6204, 6200, 3, 2, 2, 2, 6204, 6203,
	3, 2, 2, 2, 6205, 919, 3, 2, 2, 2, 6206, 6208, 5, 530, 266, 2, 6207, 6206,
	3, 2, 2, 2, 6208, 6211, 3, 2, 2, 2, 6209, 6207, 3, 2, 2, 2, 6209, 6210,
	3, 2, 2, 2, 6210, 6238, 3, 2, 2, 2, 6211, 6209, 3, 2, 2, 2, 6212, 6239,
	5, 938, 470, 2, 6213, 6217, 5, 194, 98, 2, 6214, 6217, 5, 372, 187, 2,
	6215, 6217, 5, 374, 188, 2, 6216, 6213, 3, 2, 2, 2, 6216, 6214, 3, 2, 2,
	2, 6216, 6215, 3, 2, 2, 2, 6216, 6217, 3, 2, 2, 2, 6217, 6218, 3, 2, 2,
	2, 6218, 6239, 7, 307, 2, 2, 6219, 6239, 5, 786, 394, 2, 6220, 6239, 5,
	776, 389, 2, 6221, 6239, 5, 880, 441, 2, 6222, 6239, 5, 866, 434, 2, 6223,
	6239, 5, 894, 448, 2, 6224, 6239, 5, 872, 437, 2, 6225, 6239, 5, 884, 443,
	2, 6226, 6239, 5, 896, 449, 2, 6227, 6239, 5, 902, 452, 2, 6228, 6239,
	5, 948, 475, 2, 6229, 6239, 5, 472, 237, 2, 6230, 6239, 5, 932, 467, 2,
	6231, 6239, 5, 926, 464, 2, 6232, 6239, 5, 380, 191, 2, 6233, 6239, 5,
	784, 393, 2, 6234, 6239, 5, 452, 227, 2, 6235, 6239, 5, 192, 97, 2, 6236,
	6239, 5, 208, 105, 2, 6237, 6239, 5, 298, 150, 2, 6238, 6212, 3, 2, 2,
	2, 6238, 6216, 3, 2, 2, 2, 6238, 6219, 3, 2, 2, 2, 6238, 6220, 3, 2, 2,
	2, 6238, 6221, 3, 2, 2, 2, 6238, 6222, 3, 2, 2, 2, 6238, 6223, 3, 2, 2,
	2, 6238, 6224, 3, 2, 2, 2, 6238, 6225, 3, 2, 2, 2, 6238, 6226, 3, 2, 2,
	2, 6238, 6227, 3, 2, 2, 2, 6238, 6228, 3, 2, 2, 2, 6238, 6229, 3, 2, 2,
	2, 6238, 6230, 3, 2, 2, 2, 6238, 6231, 3, 2, 2, 2, 6238, 6232, 3, 2, 2,
	2, 6238, 6233, 3, 2, 2, 2, 6238, 6234, 3, 2, 2, 2, 6238, 6235, 3, 2, 2,
	2, 6238, 6236, 3, 2, 2, 2, 6238, 6237, 3, 2, 2, 2, 6239, 6243, 3, 2, 2,
	2, 6240, 6243, 5, 56, 29, 2, 6241, 6243, 5, 1054, 528, 2, 6242, 6209, 3,
	2, 2, 2, 6242, 6240, 3, 2, 2, 2, 6242, 6241, 3, 2, 2, 2, 6243, 921, 3,
	2, 2, 2, 6244, 6245, 7, 186, 2, 2, 6245, 6249, 7, 307, 2, 2, 6246, 6248,
	5, 924, 463, 2, 6247, 6246, 3, 2, 2, 2, 6248, 6251, 3, 2, 2, 2, 6249, 6247,
	3, 2, 2, 2, 6249, 6250, 3, 2, 2, 2, 6250, 6252, 3, 2, 2, 2, 6251, 6249,
	3, 2, 2, 2, 6252, 6253, 7, 104, 2, 2, 6253, 923, 3, 2, 2, 2, 6254, 6262,
	7, 307, 2, 2, 6255, 6262, 5, 880, 441, 2, 6256, 6262, 5, 866, 434, 2, 6257,
	6262, 5, 896, 449, 2, 6258, 6262, 5, 902, 452, 2, 6259, 6262, 5, 472, 237,
	2, 6260, 6262, 5, 948, 475, 2, 6261, 6254, 3, 2, 2, 2, 6261, 6255, 3, 2,
	2, 2, 6261, 6256, 3, 2, 2, 2, 6261, 6257, 3, 2, 2, 2, 6261, 6258, 3, 2,
	2, 2, 6261, 6259, 3, 2, 2, 2, 6261, 6260, 3, 2, 2, 2, 6262, 925, 3, 2,
	2, 2, 6263, 6264, 7, 223, 2, 2, 6264, 6270, 5, 26, 14, 2, 6265, 6267, 7,
	308, 2, 2, 6266, 6268, 5, 928, 465, 2, 6267, 6266, 3, 2, 2, 2, 6267, 6268,
	3, 2, 2, 2, 6268, 6269, 3, 2, 2, 2, 6269, 6271, 7, 309, 2, 2, 6270, 6265,
	3, 2, 2, 2, 6270, 6271, 3, 2, 2, 2, 6271, 6272, 3, 2, 2, 2, 6272, 6276,
	7, 307, 2, 2, 6273, 6275, 5, 524, 263, 2, 6274, 6273, 3, 2, 2, 2, 6275,
	6278, 3, 2, 2, 2, 6276, 6274, 3, 2, 2, 2, 6276, 6277, 3, 2, 2, 2, 6277,
	6279, 3, 2, 2, 2, 6278, 6276, 3, 2, 2, 2, 6279, 6281, 5, 442, 222, 2, 6280,
	6282, 7, 307, 2, 2, 6281, 6280, 3, 2, 2, 2, 6281, 6282, 3, 2, 2, 2, 6282,
	6283, 3, 2, 2, 2, 6283, 6287, 7, 106, 2, 2, 6284, 6285, 7, 332, 2, 2, 6285,
	6288, 5, 26, 14, 2, 6286, 6288, 3, 2, 2, 2, 6287, 6284, 3, 2, 2, 2, 6287,
	6286, 3, 2, 2, 2, 6288, 927, 3, 2, 2, 2, 6289, 6294, 5, 930, 466, 2, 6290,
	6291, 7, 329, 2, 2, 6291, 6293, 5, 930, 466, 2, 6292, 6290, 3, 2, 2, 2,
	6293, 6296, 3, 2, 2, 2, 6294, 6292, 3, 2, 2, 2, 6294, 6295, 3, 2, 2, 2,
	6295, 929, 3, 2, 2, 2, 6296, 6294, 3, 2, 2, 2, 6297, 6299, 5, 530, 266,
	2, 6298, 6297, 3, 2, 2, 2, 6299, 6302, 3, 2, 2, 2, 6300, 6298, 3, 2, 2,
	2, 6300, 6301, 3, 2, 2, 2, 6301, 6307, 3, 2, 2, 2, 6302, 6300, 3, 2, 2,
	2, 6303, 6305, 7, 154, 2, 2, 6304, 6306, 5, 76, 39, 2, 6305, 6304, 3, 2,
	2, 2, 6305, 6306, 3, 2, 2, 2, 6306, 6308, 3, 2, 2, 2, 6307, 6303, 3, 2,
	2, 2, 6307, 6308, 3, 2, 2, 2, 6308, 6310, 3, 2, 2, 2, 6309, 6311, 5, 398,
	200, 2, 6310, 6309, 3, 2, 2, 2, 6310, 6311, 3, 2, 2, 2, 6311, 6312, 3,
	2, 2, 2, 6312, 6316, 5, 26, 14, 2, 6313, 6315, 5, 544, 273, 2, 6314, 6313,
	3, 2, 2, 2, 6315, 6318, 3, 2, 2, 2, 6316, 6314, 3, 2, 2, 2, 6316, 6317,
	3, 2, 2, 2, 6317, 6321, 3, 2, 2, 2, 6318, 6316, 3, 2, 2, 2, 6319, 6320,
	7, 340, 2, 2, 6320, 6322, 5, 448, 225, 2, 6321, 6319, 3, 2, 2, 2, 6321,
	6322, 3, 2, 2, 2, 6322, 931, 3, 2, 2, 2, 6323, 6324, 7, 187, 2, 2, 6324,
	6330, 5, 26, 14, 2, 6325, 6327, 7, 308, 2, 2, 6326, 6328, 5, 934, 468,
	2, 6327, 6326, 3, 2, 2, 2, 6327, 6328, 3, 2, 2, 2, 6328, 6329, 3, 2, 2,
	2, 6329, 6331, 7, 309, 2, 2, 6330, 6325, 3, 2, 2, 2, 6330, 6331, 3, 2,
	2, 2, 6331, 6332, 3, 2, 2, 2, 6332, 6336, 7, 307, 2, 2, 6333, 6335, 5,
	524, 263, 2, 6334, 6333, 3, 2, 2, 2, 6335, 6338, 3, 2, 2, 2, 6336, 6334,
	3, 2, 2, 2, 6336, 6337, 3, 2, 2, 2, 6337, 6339, 3, 2, 2, 2, 6338, 6336,
	3, 2, 2, 2, 6339, 6341, 5, 402, 202, 2, 6340, 6342, 7, 307, 2, 2, 6341,
	6340, 3, 2, 2, 2, 6341, 6342, 3, 2, 2, 2, 6342, 6343, 3, 2, 2, 2, 6343,
	6347, 7, 105, 2, 2, 6344, 6345, 7, 332, 2, 2, 6345, 6348, 5, 26, 14, 2,
	6346, 6348, 3, 2, 2, 2, 6347, 6344, 3, 2, 2, 2, 6347, 6346, 3, 2, 2, 2,
	6348, 933, 3, 2, 2, 2, 6349, 6354, 5, 936, 469, 2, 6350, 6351, 7, 329,
	2, 2, 6351, 6353, 5, 936, 469, 2, 6352, 6350, 3, 2, 2, 2, 6353, 6356, 3,
	2, 2, 2, 6354, 6352, 3, 2, 2, 2, 6354, 6355, 3, 2, 2, 2, 6355, 935, 3,
	2, 2, 2, 6356, 6354, 3, 2, 2, 2, 6357, 6359, 5, 530, 266, 2, 6358, 6357,
	3, 2, 2, 2, 6359, 6362, 3, 2, 2, 2, 6360, 6358, 3, 2, 2, 2, 6360, 6361,
	3, 2, 2, 2, 6361, 6367, 3, 2, 2, 2, 6362, 6360, 3, 2, 2, 2, 6363, 6365,
	7, 154, 2, 2, 6364, 6366, 7, 140, 2, 2, 6365, 6364, 3, 2, 2, 2, 6365, 6366,
	3, 2, 2, 2, 6366, 6368, 3, 2, 2, 2, 6367, 6363, 3, 2, 2, 2, 6367, 6368,
	3, 2, 2, 2, 6368, 6370, 3, 2, 2, 2, 6369, 6371, 5, 396, 199, 2, 6370, 6369,
	3, 2, 2, 2, 6370, 6371, 3, 2, 2, 2, 6371, 6372, 3, 2, 2, 2, 6372, 6376,
	5, 26, 14, 2, 6373, 6375, 5, 544, 273, 2, 6374, 6373, 3, 2, 2, 2, 6375,
	6378, 3, 2, 2, 2, 6376, 6374, 3, 2, 2, 2, 6376, 6377, 3, 2, 2, 2, 6377,
	6381, 3, 2, 2, 2, 6378, 6376, 3, 2, 2, 2, 6379, 6380, 7, 340, 2, 2, 6380,
	6382, 5, 394, 198, 2, 6381, 6379, 3, 2, 2, 2, 6381, 6382, 3, 2, 2, 2, 6382,
	937, 3, 2, 2, 2, 6383, 6394, 7, 50, 2, 2, 6384, 6386, 5, 68, 35, 2, 6385,
	6384, 3, 2, 2, 2, 6385, 6386, 3, 2, 2, 2, 6386, 6388, 3, 2, 2, 2, 6387,
	6389, 5, 220, 111, 2, 6388, 6387, 3, 2, 2, 2, 6388, 6389, 3, 2, 2, 2, 6389,
	6390, 3, 2, 2, 2, 6390, 6395, 5, 266, 134, 2, 6391, 6392, 5, 226, 114,
	2, 6392, 6393, 5, 266, 134, 2, 6393, 6395, 3, 2, 2, 2, 6394, 6385, 3, 2,
	2, 2, 6394, 6391, 3, 2, 2, 2, 6395, 6396, 3, 2, 2, 2, 6396, 6397, 7, 307,
	2, 2, 6397, 939, 3, 2, 2, 2, 6398, 6400, 7, 196, 2, 2, 6399, 6398, 3, 2,
	2, 2, 6399, 6400, 3, 2, 2, 2, 6400, 6401, 3, 2, 2, 2, 6401, 6421, 5, 776,
	389, 2, 6402, 6421, 5, 866, 434, 2, 6403, 6421, 5, 894, 448, 2, 6404, 6421,
	5, 932, 467, 2, 6405, 6421, 5, 926, 464, 2, 6406, 6421, 5, 380, 191, 2,
	6407, 6421, 5, 472, 237, 2, 6408, 6421, 5, 784, 393, 2, 6409, 6421, 5,
	452, 227, 2, 6410, 6412, 5, 194, 98, 2, 6411, 6410, 3, 2, 2, 2, 6411, 6412,
	3, 2, 2, 2, 6412, 6413, 3, 2, 2, 2, 6413, 6421, 7, 307, 2, 2, 6414, 6421,
	5, 192, 97, 2, 6415, 6421, 5, 898, 450, 2, 6416, 6421, 5, 208, 105, 2,
	6417, 6421, 5, 296, 149, 2, 6418, 6421, 5, 938, 470, 2, 6419, 6421, 5,
	1054, 528, 2, 6420, 6399, 3, 2, 2, 2, 6420, 6402, 3, 2, 2, 2, 6420, 6403,
	3, 2, 2, 2, 6420, 6404, 3, 2, 2, 2, 6420, 6405, 3, 2, 2, 2, 6420, 6406,
	3, 2, 2, 2, 6420, 6407, 3, 2, 2, 2, 6420, 6408, 3, 2, 2, 2, 6420, 6409,
	3, 2, 2, 2, 6420, 6411, 3, 2, 2, 2, 6420, 6414, 3, 2, 2, 2, 6420, 6415,
	3, 2, 2, 2, 6420, 6416, 3, 2, 2, 2, 6420, 6417, 3, 2, 2, 2, 6420, 6418,
	3, 2, 2, 2, 6420, 6419, 3, 2, 2, 2, 6421, 941, 3, 2, 2, 2, 6422, 6424,
	5, 88, 45, 2, 6423, 6422, 3, 2, 2, 2, 6423, 6424, 3, 2, 2, 2, 6424, 6426,
	3, 2, 2, 2, 6425, 6427, 7, 233, 2, 2, 6426, 6425, 3, 2, 2, 2, 6426, 6427,
	3, 2, 2, 2, 6427, 6428, 3, 2, 2, 2, 6428, 6429, 7, 75, 2, 2, 6429, 6430,
	5, 26, 14, 2, 6430, 6431, 7, 307, 2, 2, 6431, 943, 3, 2, 2, 2, 6432, 6435,
	5, 942, 472, 2, 6433, 6435, 5, 946, 474, 2, 6434, 6432, 3, 2, 2, 2, 6434,
	6433, 3, 2, 2, 2, 6435, 945, 3, 2, 2, 2, 6436, 6438, 7, 233, 2, 2, 6437,
	6436, 3, 2, 2, 2, 6437, 6438, 3, 2, 2, 2, 6438, 6439, 3, 2, 2, 2, 6439,
	6440, 7, 75, 2, 2, 6440, 6441, 5, 26, 14, 2, 6441, 6442, 5, 886, 444, 2,
	6442, 947, 3, 2, 2, 2, 6443, 6445, 7, 124, 2, 2, 6444, 6446, 5, 582, 292,
	2, 6445, 6444, 3, 2, 2, 2, 6445, 6446, 3, 2, 2, 2, 6446, 6447, 3, 2, 2,
	2, 6447, 6452, 7, 166, 2, 2, 6448, 6449, 7, 308, 2, 2, 6449, 6450, 5, 346,
	174, 2, 6450, 6451, 7, 309, 2, 2, 6451, 6453, 3, 2, 2, 2, 6452, 6448, 3,
	2, 2, 2, 6452, 6453, 3, 2, 2, 2, 6453, 6454, 3, 2, 2, 2, 6454, 6458, 7,
	307, 2, 2, 6455, 6457, 5, 360, 181, 2, 6456, 6455, 3, 2, 2, 2, 6457, 6460,
	3, 2, 2, 2, 6458, 6456, 3, 2, 2, 2, 6458, 6459, 3, 2, 2, 2, 6459, 6472,
	3, 2, 2, 2, 6460, 6458, 3, 2, 2, 2, 6461, 6462, 7, 240, 2, 2, 6462, 6463,
	7, 330, 2, 2, 6463, 6469, 7, 166, 2, 2, 6464, 6466, 7, 308, 2, 2, 6465,
	6467, 5, 566, 284, 2, 6466, 6465, 3, 2, 2, 2, 6466, 6467, 3, 2, 2, 2, 6467,
	6468, 3, 2, 2, 2, 6468, 6470, 7, 309, 2, 2, 6469, 6464, 3, 2, 2, 2, 6469,
	6470, 3, 2, 2, 2, 6470, 6471, 3, 2, 2, 2, 6471, 6473, 7, 307, 2, 2, 6472,
	6461, 3, 2, 2, 2, 6472, 6473, 3, 2, 2, 2, 6473, 6477, 3, 2, 2, 2, 6474,
	6476, 5, 190, 96, 2, 6475, 6474, 3, 2, 2, 2, 6476, 6479, 3, 2, 2, 2, 6477,
	6475, 3, 2, 2, 2, 6477, 6478, 3, 2, 2, 2, 6478, 6480, 3, 2, 2, 2, 6479,
	6477, 3, 2, 2, 2, 6480, 6483, 7, 97, 2, 2, 6481, 6482, 7, 332, 2, 2, 6482,
	6484, 7, 166, 2, 2, 6483, 6481, 3, 2, 2, 2, 6483, 6484, 3, 2, 2, 2, 6484,
	949, 3, 2, 2, 2, 6485, 6489, 7, 74, 2, 2, 6486, 6488, 5, 80, 41, 2, 6487,
	6486, 3, 2, 2, 2, 6488, 6491, 3, 2, 2, 2, 6489, 6487, 3, 2, 2, 2, 6489,
	6490, 3, 2, 2, 2, 6490, 6492, 3, 2, 2, 2, 6491, 6489, 3, 2, 2, 2, 6492,
	6493, 5, 554, 278, 2, 6493, 6496, 5, 26, 14, 2, 6494, 6495, 7, 340, 2,
	2, 6495, 6497, 5, 596, 299, 2, 6496, 6494, 3, 2, 2, 2, 6496, 6497, 3, 2,
	2, 2, 6497, 6498, 3, 2, 2, 2, 6498, 6499, 7, 307, 2, 2, 6499, 6508, 3,
	2, 2, 2, 6500, 6502, 5, 84, 43, 2, 6501, 6500, 3, 2, 2, 2, 6502, 6505,
	3, 2, 2, 2, 6503, 6501, 3, 2, 2, 2, 6503, 6504, 3, 2, 2, 2, 6504, 6506,
	3, 2, 2, 2, 6505, 6503, 3, 2, 2, 2, 6506, 6508, 5, 776, 389, 2, 6507, 6485,
	3, 2, 2, 2, 6507, 6503, 3, 2, 2, 2, 6508, 951, 3, 2, 2, 2, 6509, 6510,
	7, 195, 2, 2, 6510, 6514, 7, 276, 2, 2, 6511, 6513, 5, 80, 41, 2, 6512,
	6511, 3, 2, 2, 2, 6513, 6516, 3, 2, 2, 2, 6514, 6512, 3, 2, 2, 2, 6514,
	6515, 3, 2, 2, 2, 6515, 6517, 3, 2, 2, 2, 6516, 6514, 3, 2, 2, 2, 6517,
	6518, 5, 882, 442, 2, 6518, 6519, 7, 307, 2, 2, 6519, 6545, 3, 2, 2, 2,
	6520, 6524, 7, 115, 2, 2, 6521, 6523, 5, 86, 44, 2, 6522, 6521, 3, 2, 2,
	2, 6523, 6526, 3, 2, 2, 2, 6524, 6522, 3, 2, 2, 2, 6524, 6525, 3, 2, 2,
	2, 6525, 6531, 3, 2, 2, 2, 6526, 6524, 3, 2, 2, 2, 6527, 6528, 5, 882,
	442, 2, 6528, 6529, 7, 307, 2, 2, 6529, 6532, 3, 2, 2, 2, 6530, 6532, 5,
	954, 478, 2, 6531, 6527, 3, 2, 2, 2, 6531, 6530, 3, 2, 2, 2, 6532, 6545,
	3, 2, 2, 2, 6533, 6535, 5, 86, 44, 2, 6534, 6533, 3, 2, 2, 2, 6535, 6538,
	3, 2, 2, 2, 6536, 6534, 3, 2, 2, 2, 6536, 6537, 3, 2, 2, 2, 6537, 6542,
	3, 2, 2, 2, 6538, 6536, 3, 2, 2, 2, 6539, 6543, 5, 880, 441, 2, 6540, 6543,
	5, 866, 434, 2, 6541, 6543, 5, 948, 475, 2, 6542, 6539, 3, 2, 2, 2, 6542,
	6540, 3, 2, 2, 2, 6542, 6541, 3, 2, 2, 2, 6543, 6545, 3, 2, 2, 2, 6544,
	6509, 3, 2, 2, 2, 6544, 6520, 3, 2, 2, 2, 6544, 6536, 3, 2, 2, 2, 6545,
	953, 3, 2, 2, 2, 6546, 6547, 7, 124, 2, 2, 6547, 6552, 7, 166, 2, 2, 6548,
	6549, 7, 308, 2, 2, 6549, 6550, 5, 346, 174, 2, 6550, 6551, 7, 309, 2,
	2, 6551, 6553, 3, 2, 2, 2, 6552, 6548, 3, 2, 2, 2, 6552, 6553, 3, 2, 2,
	2, 6553, 6554, 3, 2, 2, 2, 6554, 6555, 7, 307, 2, 2, 6555, 955, 3, 2, 2,
	2, 6556, 6558, 5, 530, 266, 2, 6557, 6556, 3, 2, 2, 2, 6558, 6561, 3, 2,
	2, 2, 6559, 6557, 3, 2, 2, 2, 6559, 6560, 3, 2, 2, 2, 6560, 6567, 3, 2,
	2, 2, 6561, 6559, 3, 2, 2, 2, 6562, 6568, 5, 950, 476, 2, 6563, 6568, 5,
	952, 477, 2, 6564, 6568, 5, 944, 473, 2, 6565, 6568, 5, 896, 449, 2, 6566,
	6568, 5, 472, 237, 2, 6567, 6562, 3, 2, 2, 2, 6567, 6563, 3, 2, 2, 2, 6567,
	6564, 3, 2, 2, 2, 6567, 6565, 3, 2, 2, 2, 6567, 6566, 3, 2, 2, 2, 6568,
	6575, 3, 2, 2, 2, 6569, 6572, 5, 372, 187, 2, 6570, 6572, 5, 374, 188,
	2, 6571, 6569, 3, 2, 2, 2, 6571, 6570, 3, 2, 2, 2, 6571, 6572, 3, 2, 2,
	2, 6572, 6573, 3, 2, 2, 2, 6573, 6575, 7, 307, 2, 2, 6574, 6559, 3, 2,
	2, 2, 6574, 6571, 3, 2, 2, 2, 6575, 957, 3, 2, 2, 2, 6576, 6577, 7, 84,
	2, 2, 6577, 6578, 5, 674, 338, 2, 6578, 6579, 7, 307, 2, 2, 6579, 959,
	3, 2, 2, 2, 6580, 6582, 7, 191, 2, 2, 6581, 6583, 5, 974, 488, 2, 6582,
	6581, 3, 2, 2, 2, 6582, 6583, 3, 2, 2, 2, 6583, 6589, 3, 2, 2, 2, 6584,
	6586, 7, 192, 2, 2, 6585, 6587, 5, 976, 489, 2, 6586, 6585, 3, 2, 2, 2,
	6586, 6587, 3, 2, 2, 2, 6587, 6589, 3, 2, 2, 2, 6588, 6580, 3, 2, 2, 2,
	6588, 6584, 3, 2, 2, 2, 6589, 6590, 3, 2, 2, 2, 6590, 6595, 5, 972, 487,
	2, 6591, 6592, 7, 329, 2, 2, 6592, 6594, 5, 972, 487, 2, 6593, 6591, 3,
	2, 2, 2, 6594, 6597, 3, 2, 2, 2, 6595, 6593, 3, 2, 2, 2, 6595, 6596, 3,
	2, 2, 2, 6596, 6680, 3, 2, 2, 2, 6597, 6595, 3, 2, 2, 2, 6598, 6601, 5,
	90, 46, 2, 6599, 6601, 5, 94, 48, 2, 6600, 6598, 3, 2, 2, 2, 6600, 6599,
	3, 2, 2, 2, 6601, 6603, 3, 2, 2, 2, 6602, 6604, 5, 220, 111, 2, 6603, 6602,
	3, 2, 2, 2, 6603, 6604, 3, 2, 2, 2, 6604, 6605, 3, 2, 2, 2, 6605, 6610,
	5, 962, 482, 2, 6606, 6607, 7, 329, 2, 2, 6607, 6609, 5, 962, 482, 2, 6608,
	6606, 3, 2, 2, 2, 6609, 6612, 3, 2, 2, 2, 6610, 6608, 3, 2, 2, 2, 6610,
	6611, 3, 2, 2, 2, 6611, 6680, 3, 2, 2, 2, 6612, 6610, 3, 2, 2, 2, 6613,
	6615, 5, 92, 47, 2, 6614, 6616, 5, 68, 35, 2, 6615, 6614, 3, 2, 2, 2, 6615,
	6616, 3, 2, 2, 2, 6616, 6618, 3, 2, 2, 2, 6617, 6619, 5, 220, 111, 2, 6618,
	6617, 3, 2, 2, 2, 6618, 6619, 3, 2, 2, 2, 6619, 6620, 3, 2, 2, 2, 6620,
	6625, 5, 962, 482, 2, 6621, 6622, 7, 329, 2, 2, 6622, 6624, 5, 962, 482,
	2, 6623, 6621, 3, 2, 2, 2, 6624, 6627, 3, 2, 2, 2, 6625, 6623, 3, 2, 2,
	2, 6625, 6626, 3, 2, 2, 2, 6626, 6680, 3, 2, 2, 2, 6627, 6625, 3, 2, 2,
	2, 6628, 6630, 5, 96, 49, 2, 6629, 6631, 5, 68, 35, 2, 6630, 6629, 3, 2,
	2, 2, 6630, 6631, 3, 2, 2, 2, 6631, 6633, 3, 2, 2, 2, 6632, 6634, 5, 222,
	112, 2, 6633, 6632, 3, 2, 2, 2, 6633, 6634, 3, 2, 2, 2, 6634, 6635, 3,
	2, 2, 2, 6635, 6640, 5, 964, 483, 2, 6636, 6637, 7, 329, 2, 2, 6637, 6639,
	5, 964, 483, 2, 6638, 6636, 3, 2, 2, 2, 6639, 6642, 3, 2, 2, 2, 6640, 6638,
	3, 2, 2, 2, 6640, 6641, 3, 2, 2, 2, 6641, 6680, 3, 2, 2, 2, 6642, 6640,
	3, 2, 2, 2, 6643, 6645, 5, 98, 50, 2, 6644, 6646, 5, 68, 35, 2, 6645, 6644,
	3, 2, 2, 2, 6645, 6646, 3, 2, 2, 2, 6646, 6648, 3, 2, 2, 2, 6647, 6649,
	5, 222, 112, 2, 6648, 6647, 3, 2, 2, 2, 6648, 6649, 3, 2, 2, 2, 6649, 6650,
	3, 2, 2, 2, 6650, 6655, 5, 966, 484, 2, 6651, 6652, 7, 329, 2, 2, 6652,
	6654, 5, 966, 484, 2, 6653, 6651, 3, 2, 2, 2, 6654, 6657, 3, 2, 2, 2, 6655,
	6653, 3, 2, 2, 2, 6655, 6656, 3, 2, 2, 2, 6656, 6680, 3, 2, 2, 2, 6657,
	6655, 3, 2, 2, 2, 6658, 6660, 5, 100, 51, 2, 6659, 6661, 5, 222, 112, 2,
	6660, 6659, 3, 2, 2, 2, 6660, 6661, 3, 2, 2, 2, 6661, 6662, 3, 2, 2, 2,
	6662, 6667, 5, 970, 486, 2, 6663, 6664, 7, 329, 2, 2, 6664, 6666, 5, 970,
	486, 2, 6665, 6663, 3, 2, 2, 2, 6666, 6669, 3, 2, 2, 2, 6667, 6665, 3,
	2, 2, 2, 6667, 6668, 3, 2, 2, 2, 6668, 6680, 3, 2, 2, 2, 6669, 6667, 3,
	2, 2, 2, 6670, 6671, 5, 102, 52, 2, 6671, 6676, 5, 968, 485, 2, 6672, 6673,
	7, 329, 2, 2, 6673, 6675, 5, 968, 485, 2, 6674, 6672, 3, 2, 2, 2, 6675,
	6678, 3, 2, 2, 2, 6676, 6674, 3, 2, 2, 2, 6676, 6677, 3, 2, 2, 2, 6677,
	6680, 3, 2, 2, 2, 6678, 6676, 3, 2, 2, 2, 6679, 6588, 3, 2, 2, 2, 6679,
	6600, 3, 2, 2, 2, 6679, 6613, 3, 2, 2, 2, 6679, 6628, 3, 2, 2, 2, 6679,
	6643, 3, 2, 2, 2, 6679, 6658, 3, 2, 2, 2, 6679, 6670, 3, 2, 2, 2, 6680,
	6681, 3, 2, 2, 2, 6681, 6682, 7, 307, 2, 2, 6682, 961, 3, 2, 2, 2, 6683,
	6685, 5, 282, 142, 2, 6684, 6683, 3, 2, 2, 2, 6684, 6685, 3, 2, 2, 2, 6685,
	6686, 3, 2, 2, 2, 6686, 6687, 7, 308, 2, 2, 6687, 6688, 5, 984, 493, 2,
	6688, 6689, 7, 329, 2, 2, 6689, 6690, 5, 982, 492, 2, 6690, 6691, 7, 329,
	2, 2, 6691, 6694, 5, 600, 301, 2, 6692, 6693, 7, 329, 2, 2, 6693, 6695,
	5, 600, 301, 2, 6694, 6692, 3, 2, 2, 2, 6694, 6695, 3, 2, 2, 2, 6695, 6696,
	3, 2, 2, 2, 6696, 6697, 7, 309, 2, 2, 6697, 963, 3, 2, 2, 2, 6698, 6700,
	5, 282, 142, 2, 6699, 6698, 3, 2, 2, 2, 6699, 6700, 3, 2, 2, 2, 6700, 6701,
	3, 2, 2, 2, 6701, 6702, 7, 308, 2, 2, 6702, 6705, 5, 984, 493, 2, 6703,
	6704, 7, 329, 2, 2, 6704, 6706, 5, 982, 492, 2, 6705, 6703, 3, 2, 2, 2,
	6706, 6707, 3, 2, 2, 2, 6707, 6705, 3, 2, 2, 2, 6707, 6708, 3, 2, 2, 2,
	6708, 6709, 3, 2, 2, 2, 6709, 6710, 7, 309, 2, 2, 6710, 965, 3, 2, 2, 2,
	6711, 6713, 5, 282, 142, 2, 6712, 6711, 3, 2, 2, 2, 6712, 6713, 3, 2, 2,
	2, 6713, 6714, 3, 2, 2, 2, 6714, 6715, 7, 308, 2, 2, 6715, 6720, 5, 984,
	493, 2, 6716, 6717, 7, 329, 2, 2, 6717, 6719, 5, 984, 493, 2, 6718, 6716,
	3, 2, 2, 2, 6719, 6722, 3, 2, 2, 2, 6720, 6718, 3, 2, 2, 2, 6720, 6721,
	3, 2, 2, 2, 6721, 6723, 3, 2, 2, 2, 6722, 6720, 3, 2, 2, 2, 6723, 6724,
	7, 329, 2, 2, 6724, 6725, 5, 982, 492, 2, 6725, 6726, 7, 309, 2, 2, 6726,
	967, 3, 2, 2, 2, 6727, 6729, 5, 282, 142, 2, 6728, 6727, 3, 2, 2, 2, 6728,
	6729, 3, 2, 2, 2, 6729, 6730, 3, 2, 2, 2, 6730, 6731, 7, 308, 2, 2, 6731,
	6732, 5, 980, 491, 2, 6732, 6733, 7, 329, 2, 2, 6733, 6734, 5, 980, 491,
	2, 6734, 6735, 7, 309, 2, 2, 6735, 969, 3, 2, 2, 2, 6736, 6738, 5, 282,
	142, 2, 6737, 6736, 3, 2, 2, 2, 6737, 6738, 3, 2, 2, 2, 6738, 6739, 3,
	2, 2, 2, 6739, 6740, 7, 308, 2, 2, 6740, 6741, 5, 980, 491, 2, 6741, 6742,
	7, 329, 2, 2, 6742, 6743, 5, 980, 491, 2, 6743, 6744, 7, 329, 2, 2, 6744,
	6745, 5, 978, 490, 2, 6745, 6746, 7, 309, 2, 2, 6746, 971, 3, 2, 2, 2,
	6747, 6749, 5, 282, 142, 2, 6748, 6747, 3, 2, 2, 2, 6748, 6749, 3, 2, 2,
	2, 6749, 6750, 3, 2, 2, 2, 6750, 6751, 7, 308, 2, 2, 6751, 6752, 5, 984,
	493, 2, 6752, 6753, 7, 309, 2, 2, 6753, 973, 3, 2, 2, 2, 6754, 6764, 7,
	308, 2, 2, 6755, 6758, 5, 70, 36, 2, 6756, 6757, 7, 329, 2, 2, 6757, 6759,
	5, 72, 37, 2, 6758, 6756, 3, 2, 2, 2, 6758, 6759, 3, 2, 2, 2, 6759, 6765,
	3, 2, 2, 2, 6760, 6761, 5, 72, 37, 2, 6761, 6762, 7, 329, 2, 2, 6762, 6763,
	5, 70, 36, 2, 6763, 6765, 3, 2, 2, 2, 6764, 6755, 3, 2, 2, 2, 6764, 6760,
	3, 2, 2, 2, 6765, 6766, 3, 2, 2, 2, 6766, 6767, 7, 309, 2, 2, 6767, 975,
	3, 2, 2, 2, 6768, 6778, 7, 308, 2, 2, 6769, 6770, 5, 70, 36, 2, 6770, 6771,
	7, 329, 2, 2, 6771, 6772, 5, 72, 37, 2, 6772, 6779, 3, 2, 2, 2, 6773, 6776,
	5, 72, 37, 2, 6774, 6775, 7, 329, 2, 2, 6775, 6777, 5, 70, 36, 2, 6776,
	6774, 3, 2, 2, 2, 6776, 6777, 3, 2, 2, 2, 6777, 6779, 3, 2, 2, 2, 6778,
	6769, 3, 2, 2, 2, 6778, 6773, 3, 2, 2, 2, 6779, 6780, 3, 2, 2, 2, 6780,
	6781, 7, 309, 2, 2, 6781, 977, 3, 2, 2, 2, 6782, 6783, 5, 600, 301, 2,
	6783, 979, 3, 2, 2, 2, 6784, 6785, 5, 646, 324, 2, 6785, 981, 3, 2, 2,
	2, 6786, 6787, 5, 600, 301, 2, 6787, 983, 3, 2, 2, 2, 6788, 6789, 5, 646,
	324, 2, 6789, 985, 3, 2, 2, 2, 6790, 6802, 5, 26, 14, 2, 6791, 6793, 5,
	68, 35, 2, 6792, 6794, 5, 222, 112, 2, 6793, 6792, 3, 2, 2, 2, 6793, 6794,
	3, 2, 2, 2, 6794, 6796, 3, 2, 2, 2, 6795, 6797, 5, 282, 142, 2, 6796, 6795,
	3, 2, 2, 2, 6796, 6797, 3, 2, 2, 2, 6797, 6803, 3, 2, 2, 2, 6798, 6800,
	5, 222, 112, 2, 6799, 6801, 5, 282, 142, 2, 6800, 6799, 3, 2, 2, 2, 6800,
	6801, 3, 2, 2, 2, 6801, 6803, 3, 2, 2, 2, 6802, 6791, 3, 2, 2, 2, 6802,
	6798, 3, 2, 2, 2, 6802, 6803, 3, 2, 2, 2, 6803, 6804, 3, 2, 2, 2, 6804,
	6809, 5, 990, 496, 2, 6805, 6806, 7, 329, 2, 2, 6806, 6808, 5, 988, 495,
	2, 6807, 6805, 3, 2, 2, 2, 6808, 6811, 3, 2, 2, 2, 6809, 6807, 3, 2, 2,
	2, 6809, 6810, 3, 2, 2, 2, 6810, 6812, 3, 2, 2, 2, 6811, 6809, 3, 2, 2,
	2, 6812, 6813, 7, 307, 2, 2, 6813, 987, 3, 2, 2, 2, 6814, 6816, 5, 282,
	142, 2, 6815, 6814, 3, 2, 2, 2, 6815, 6816, 3, 2, 2, 2, 6816, 6817, 3,
	2, 2, 2, 6817, 6818, 5, 990, 496, 2, 6818, 989, 3, 2, 2, 2, 6819, 6820,
	7, 308, 2, 2, 6820, 6823, 5, 984, 493, 2, 6821, 6822, 7, 329, 2, 2, 6822,
	6824, 5, 982, 492, 2, 6823, 6821, 3, 2, 2, 2, 6824, 6825, 3, 2, 2, 2, 6825,
	6823, 3, 2, 2, 2, 6825, 6826, 3, 2, 2, 2, 6826, 6827, 3, 2, 2, 2, 6827,
	6828, 7, 309, 2, 2, 6828, 991, 3, 2, 2, 2, 6829, 6831, 5, 26, 14, 2, 6830,
	6832, 5, 578, 290, 2, 6831, 6830, 3, 2, 2, 2, 6831, 6832, 3, 2, 2, 2, 6832,
	6833, 3, 2, 2, 2, 6833, 6838, 5, 994, 498, 2, 6834, 6835, 7, 329, 2, 2,
	6835, 6837, 5, 994, 498, 2, 6836, 6834, 3, 2, 2, 2, 6837, 6840, 3, 2, 2,
	2, 6838, 6836, 3, 2, 2, 2, 6838, 6839, 3, 2, 2, 2, 6839, 6841, 3, 2, 2,
	2, 6840, 6838, 3, 2, 2, 2, 6841, 6842, 7, 307, 2, 2, 6842, 993, 3, 2, 2,
	2, 6843, 6844, 5, 282, 142, 2, 6844, 6845, 7, 308, 2, 2, 6845, 6846, 5,
	996, 499, 2, 6846, 6847, 7, 309, 2, 2, 6847, 995, 3, 2, 2, 2, 6848, 6853,
	5, 998, 500, 2, 6849, 6850, 7, 329, 2, 2, 6850, 6852, 5, 998, 500, 2, 6851,
	6849, 3, 2, 2, 2, 6852, 6855, 3, 2, 2, 2, 6853, 6851, 3, 2, 2, 2, 6853,
	6854, 3, 2, 2, 2, 6854, 6865, 3, 2, 2, 2, 6855, 6853, 3, 2, 2, 2, 6856,
	6861, 5, 1000, 501, 2, 6857, 6858, 7, 329, 2, 2, 6858, 6860, 5, 1000, 501,
	2, 6859, 6857, 3, 2, 2, 2, 6860, 6863, 3, 2, 2, 2, 6861, 6859, 3, 2, 2,
	2, 6861, 6862, 3, 2, 2, 2, 6862, 6865, 3, 2, 2, 2, 6863, 6861, 3, 2, 2,
	2, 6864, 6848, 3, 2, 2, 2, 6864, 6856, 3, 2, 2, 2, 6865, 997, 3, 2, 2,
	2, 6866, 6868, 5, 530, 266, 2, 6867, 6866, 3, 2, 2, 2, 6868, 6871, 3, 2,
	2, 2, 6869, 6867, 3, 2, 2, 2, 6869, 6870, 3, 2, 2, 2, 6870, 6873, 3, 2,
	2, 2, 6871, 6869, 3, 2, 2, 2, 6872, 6874, 5, 600, 301, 2, 6873, 6872, 3,
	2, 2, 2, 6873, 6874, 3, 2, 2, 2, 6874, 999, 3, 2, 2, 2, 6875, 6877, 5,
	530, 266, 2, 6876, 6875, 3, 2, 2, 2, 6877, 6880, 3, 2, 2, 2, 6878, 6876,
	3, 2, 2, 2, 6878, 6879, 3, 2, 2, 2, 6879, 6881, 3, 2, 2, 2, 6880, 6878,
	3, 2, 2, 2, 6881, 6891, 7, 330, 2, 2, 6882, 6892, 7, 364, 2, 2, 6883, 6889,
	5, 26, 14, 2, 6884, 6886, 7, 308, 2, 2, 6885, 6887, 5, 600, 301, 2, 6886,
	6885, 3, 2, 2, 2, 6886, 6887, 3, 2, 2, 2, 6887, 6888, 3, 2, 2, 2, 6888,
	6890, 7, 309, 2, 2, 6889, 6884, 3, 2, 2, 2, 6889, 6890, 3, 2, 2, 2, 6890,
	6892, 3, 2, 2, 2, 6891, 6882, 3, 2, 2, 2, 6891, 6883, 3, 2, 2, 2, 6892,
	1001, 3, 2, 2, 2, 6893, 6900, 7, 55, 2, 2, 6894, 6897, 5, 26, 14, 2, 6895,
	6896, 7, 332, 2, 2, 6896, 6898, 5, 1006, 504, 2, 6897, 6895, 3, 2, 2, 2,
	6897, 6898, 3, 2, 2, 2, 6898, 6901, 3, 2, 2, 2, 6899, 6901, 5, 1004, 503,
	2, 6900, 6894, 3, 2, 2, 2, 6900, 6899, 3, 2, 2, 2, 6901, 6902, 3, 2, 2,
	2, 6902, 6903, 5, 1008, 505, 2, 6903, 1003, 3, 2, 2, 2, 6904, 6908, 5,
	418, 210, 2, 6905, 6907, 5, 408, 205, 2, 6906, 6905, 3, 2, 2, 2, 6907,
	6910, 3, 2, 2, 2, 6908, 6906, 3, 2, 2, 2, 6908, 6909, 3, 2, 2, 2, 6909,
	1005, 3, 2, 2, 2, 6910, 6908, 3, 2, 2, 2, 6911, 6916, 5, 1004, 503, 2,
	6912, 6913, 7, 329, 2, 2, 6913, 6915, 5, 1004, 503, 2, 6914, 6912, 3, 2,
	2, 2, 6915, 6918, 3, 2, 2, 2, 6916, 6914, 3, 2, 2, 2, 6916, 6917, 3, 2,
	2, 2, 6917, 1007, 3, 2, 2, 2, 6918, 6916, 3, 2, 2, 2, 6919, 6922, 5, 992,
	497, 2, 6920, 6922, 5, 284, 143, 2, 6921, 6919, 3, 2, 2, 2, 6921, 6920,
	3, 2, 2, 2, 6922, 1009, 3, 2, 2, 2, 6923, 6924, 7, 73, 2, 2, 6924, 6925,
	5, 26, 14, 2, 6925, 6931, 7, 307, 2, 2, 6926, 6927, 5, 372, 187, 2, 6927,
	6928, 7, 307, 2, 2, 6928, 6930, 3, 2, 2, 2, 6929, 6926, 3, 2, 2, 2, 6930,
	6933, 3, 2, 2, 2, 6931, 6929, 3, 2, 2, 2, 6931, 6932, 3, 2, 2, 2, 6932,
	6934, 3, 2, 2, 2, 6933, 6931, 3, 2, 2, 2, 6934, 6938, 5, 1012, 507, 2,
	6935, 6937, 5, 1014, 508, 2, 6936, 6935, 3, 2, 2, 2, 6937, 6940, 3, 2,
	2, 2, 6938, 6936, 3, 2, 2, 2, 6938, 6939, 3, 2, 2, 2, 6939, 6941, 3, 2,
	2, 2, 6940, 6938, 3, 2, 2, 2, 6941, 6945, 7, 96, 2, 2, 6942, 6943, 7, 332,
	2, 2, 6943, 6946, 5, 26, 14, 2, 6944, 6946, 3, 2, 2, 2, 6945, 6942, 3,
	2, 2, 2, 6945, 6944, 3, 2, 2, 2, 6946, 1011, 3, 2, 2, 2, 6947, 6956, 7,
	85, 2, 2, 6948, 6949, 5, 26, 14, 2, 6949, 6950, 7, 330, 2, 2, 6950, 6952,
	3, 2, 2, 2, 6951, 6948, 3, 2, 2, 2, 6951, 6952, 3, 2, 2, 2, 6952, 6953,
	3, 2, 2, 2, 6953, 6955, 5, 26, 14, 2, 6954, 6951, 3, 2, 2, 2, 6955, 6958,
	3, 2, 2, 2, 6956, 6954, 3, 2, 2, 2, 6956, 6957, 3, 2, 2, 2, 6957, 6959,
	3, 2, 2, 2, 6958, 6956, 3, 2, 2, 2, 6959, 6960, 7, 307, 2, 2, 6960, 1013,
	3, 2, 2, 2, 6961, 6962, 7, 83, 2, 2, 6962, 6972, 5, 1022, 512, 2, 6963,
	6966, 5, 1016, 509, 2, 6964, 6966, 5, 1020, 511, 2, 6965, 6963, 3, 2, 2,
	2, 6965, 6964, 3, 2, 2, 2, 6966, 6969, 3, 2, 2, 2, 6967, 6970, 5, 1022,
	512, 2, 6968, 6970, 5, 1024, 513, 2, 6969, 6967, 3, 2, 2, 2, 6969, 6968,
	3, 2, 2, 2, 6970, 6972, 3, 2, 2, 2, 6971, 6961, 3, 2, 2, 2, 6971, 6965,
	3, 2, 2, 2, 6972, 6973, 3, 2, 2, 2, 6973, 6974, 7, 307, 2, 2, 6974, 1015,
	3, 2, 2, 2, 6975, 6976, 7, 142, 2, 2, 6976, 6977, 5, 1018, 510, 2, 6977,
	1017, 3, 2, 2, 2, 6978, 6983, 5, 26, 14, 2, 6979, 6980, 7, 330, 2, 2, 6980,
	6982, 5, 26, 14, 2, 6981, 6979, 3, 2, 2, 2, 6982, 6985, 3, 2, 2, 2, 6983,
	6981, 3, 2, 2, 2, 6983, 6984, 3, 2, 2, 2, 6984, 1019, 3, 2, 2, 2, 6985,
	6983, 3, 2, 2, 2, 6986, 6990, 7, 67, 2, 2, 6987, 6988, 5, 26, 14, 2, 6988,
	6989, 7, 330, 2, 2, 6989, 6991, 3, 2, 2, 2, 6990, 6987, 3, 2, 2, 2, 6990,
	6991, 3, 2, 2, 2, 6991, 6992, 3, 2, 2, 2, 6992, 6993, 5, 26, 14, 2, 6993,
	1021, 3, 2, 2, 2, 6994, 6998, 7, 153, 2, 2, 6995, 6997, 5, 26, 14, 2, 6996,
	6995, 3, 2, 2, 2, 6997, 7000, 3, 2, 2, 2, 6998, 6996, 3, 2, 2, 2, 6998,
	6999, 3, 2, 2, 2, 6999, 1023, 3, 2, 2, 2, 7000, 6998, 3, 2, 2, 2, 7001,
	7026, 7, 272, 2, 2, 7002, 7003, 5, 26, 14, 2, 7003, 7004, 7, 330, 2, 2,
	7004, 7006, 3, 2, 2, 2, 7005, 7002, 3, 2, 2, 2, 7005, 7006, 3, 2, 2, 2,
	7006, 7007, 3, 2, 2, 2, 7007, 7016, 5, 26, 14, 2, 7008, 7013, 5, 592, 297,
	2, 7009, 7010, 7, 329, 2, 2, 7010, 7012, 5, 592, 297, 2, 7011, 7009, 3,
	2, 2, 2, 7012, 7015, 3, 2, 2, 2, 7013, 7011, 3, 2, 2, 2, 7013, 7014, 3,
	2, 2, 2, 7014, 7017, 3, 2, 2, 2, 7015, 7013, 3, 2, 2, 2, 7016, 7008, 3,
	2, 2, 2, 7016, 7017, 3, 2, 2, 2, 7017, 7027, 3, 2, 2, 2, 7018, 7023, 5,
	592, 297, 2, 7019, 7020, 7, 329, 2, 2, 7020, 7022, 5, 592, 297, 2, 7021,
	7019, 3, 2, 2, 2, 7022, 7025, 3, 2, 2, 2, 7023, 7021, 3, 2, 2, 2, 7023,
	7024, 3, 2, 2, 2, 7024, 7027, 3, 2, 2, 2, 7025, 7023, 3, 2, 2, 2, 7026,
	7005, 3, 2, 2, 2, 7026, 7018, 3, 2, 2, 2, 7027, 7030, 3, 2, 2, 2, 7028,
	7029, 7, 332, 2, 2, 7029, 7031, 7, 73, 2, 2, 7030, 7028, 3, 2, 2, 2, 7030,
	7031, 3, 2, 2, 2, 7031, 1025, 3, 2, 2, 2, 7032, 7033, 7, 43, 2, 2, 7033,
	7036, 5, 646, 324, 2, 7034, 7035, 7, 340, 2, 2, 7035, 7037, 5, 646, 324,
	2, 7036, 7034, 3, 2, 2, 2, 7037, 7038, 3, 2, 2, 2, 7038, 7036, 3, 2, 2,
	2, 7038, 7039, 3, 2, 2, 2, 7039, 7040, 3, 2, 2, 2, 7040, 7041, 7, 307,
	2, 2, 7041, 1027, 3, 2, 2, 2, 7042, 7046, 7, 231, 2, 2, 7043, 7045, 5,
	708, 355, 2, 7044, 7043, 3, 2, 2, 2, 7045, 7048, 3, 2, 2, 2, 7046, 7044,
	3, 2, 2, 2, 7046, 7047, 3, 2, 2, 2, 7047, 7049, 3, 2, 2, 2, 7048, 7046,
	3, 2, 2, 2, 7049, 7050, 7, 107, 2, 2, 7050, 1029, 3, 2, 2, 2, 7051, 7055,
	7, 125, 2, 2, 7052, 7054, 5, 1052, 527, 2, 7053, 7052, 3, 2, 2, 2, 7054,
	7057, 3, 2, 2, 2, 7055, 7053, 3, 2, 2, 2, 7055, 7056, 3, 2, 2, 2, 7056,
	7058, 3, 2, 2, 2, 7057, 7055, 3, 2, 2, 2, 7058, 7059, 7, 98, 2, 2, 7059,
	1031, 3, 2, 2, 2, 7060, 7061, 5, 596, 299, 2, 7061, 1033, 3, 2, 2, 2, 7062,
	7063, 7, 118, 2, 2, 7063, 7064, 7, 308, 2, 2, 7064, 7065, 5, 1036, 519,
	2, 7065, 7066, 7, 307, 2, 2, 7066, 7067, 5, 1032, 517, 2, 7067, 7068, 7,
	307, 2, 2, 7068, 7069, 5, 1038, 520, 2, 7069, 7070, 7, 309, 2, 2, 7070,
	7071, 5, 1052, 527, 2, 7071, 1035, 3, 2, 2, 2, 7072, 7074, 7, 126, 2, 2,
	7073, 7072, 3, 2, 2, 2, 7073, 7074, 3, 2, 2, 2, 7074, 7075, 3, 2, 2, 2,
	7075, 7076, 5, 26, 14, 2, 7076, 7077, 7, 340, 2, 2, 7077, 7078, 5, 596,
	299, 2, 7078, 1037, 3, 2, 2, 2, 7079, 7084, 5, 26, 14, 2, 7080, 7081, 5,
	22, 12, 2, 7081, 7082, 5, 1032, 517, 2, 7082, 7085, 3, 2, 2, 2, 7083, 7085,
	5, 42, 22, 2, 7084, 7080, 3, 2, 2, 2, 7084, 7083, 3, 2, 2, 2, 7085, 7090,
	3, 2, 2, 2, 7086, 7087, 5, 42, 22, 2, 7087, 7088, 5, 26, 14, 2, 7088, 7090,
	3, 2, 2, 2, 7089, 7079, 3, 2, 2, 2, 7089, 7086, 3, 2, 2, 2, 7090, 1039,
	3, 2, 2, 2, 7091, 7094, 5, 1042, 522, 2, 7092, 7094, 5, 1044, 523, 2, 7093,
	7091, 3, 2, 2, 2, 7093, 7092, 3, 2, 2, 2, 7094, 1041, 3, 2, 2, 2, 7095,
	7096, 7, 130, 2, 2, 7096, 7097, 7, 308, 2, 2, 7097, 7098, 5, 596, 299,
	2, 7098, 7099, 7, 309, 2, 2, 7099, 7103, 5, 1052, 527, 2, 7100, 7101, 7,
	90, 2, 2, 7101, 7104, 5, 1052, 527, 2, 7102, 7104, 3, 2, 2, 2, 7103, 7100,
	3, 2, 2, 2, 7103, 7102, 3, 2, 2, 2, 7104, 1043, 3, 2, 2, 2, 7105, 7106,
	7, 64, 2, 2, 7106, 7107, 7, 308, 2, 2, 7107, 7108, 5, 596, 299, 2, 7108,
	7110, 7, 309, 2, 2, 7109, 7111, 5, 1046, 524, 2, 7110, 7109, 3, 2, 2, 2,
	7111, 7112, 3, 2, 2, 2, 7112, 7110, 3, 2, 2, 2, 7112, 7113, 3, 2, 2, 2,
	7113, 7114, 3, 2, 2, 2, 7114, 7115, 7, 92, 2, 2, 7115, 1045, 3, 2, 2, 2,
	7116, 7118, 7, 83, 2, 2, 7117, 7119, 7, 332, 2, 2, 7118, 7117, 3, 2, 2,
	2, 7118, 7119, 3, 2, 2, 2, 7119, 7131, 3, 2, 2, 2, 7120, 7125, 5, 596,
	299, 2, 7121, 7122, 7, 329, 2, 2, 7122, 7124, 5, 596, 299, 2, 7123, 7121,
	3, 2, 2, 2, 7124, 7127, 3, 2, 2, 2, 7125, 7123, 3, 2, 2, 2, 7125, 7126,
	3, 2, 2, 2, 7126, 7128, 3, 2, 2, 2, 7127, 7125, 3, 2, 2, 2, 7128, 7129,
	7, 332, 2, 2, 7129, 7131, 3, 2, 2, 2, 7130, 7116, 3, 2, 2, 2, 7130, 7120,
	3, 2, 2, 2, 7131, 7132, 3, 2, 2, 2, 7132, 7133, 5, 1052, 527, 2, 7133,
	1047, 3, 2, 2, 2, 7134, 7135, 5, 26, 14, 2, 7135, 7136, 7, 332, 2, 2, 7136,
	7138, 3, 2, 2, 2, 7137, 7134, 3, 2, 2, 2, 7137, 7138, 3, 2, 2, 2, 7138,
	7139, 3, 2, 2, 2, 7139, 7143, 7, 54, 2, 2, 7140, 7141, 7, 332, 2, 2, 7141,
	7144, 5, 26, 14, 2, 7142, 7144, 3, 2, 2, 2, 7143, 7140, 3, 2, 2, 2, 7143,
	7142, 3, 2, 2, 2, 7144, 7148, 3, 2, 2, 2, 7145, 7147, 5, 1052, 527, 2,
	7146, 7145, 3, 2, 2, 2, 7147, 7150, 3, 2, 2, 2, 7148, 7146, 3, 2, 2, 2,
	7148, 7149, 3, 2, 2, 2, 7149, 7151, 3, 2, 2, 2, 7150, 7148, 3, 2, 2, 2,
	7151, 7155, 7, 91, 2, 2, 7152, 7153, 7, 332, 2, 2, 7153, 7156, 5, 26, 14,
	2, 7154, 7156, 3, 2, 2, 2, 7155, 7152, 3, 2, 2, 2, 7155, 7154, 3, 2, 2,
	2, 7156, 1049, 3, 2, 2, 2, 7157, 7160, 5, 1058, 530, 2, 7158, 7160, 5,
	864, 433, 2, 7159, 7157, 3, 2, 2, 2, 7159, 7158, 3, 2, 2, 2, 7160, 1051,
	3, 2, 2, 2, 7161, 7163, 5, 530, 266, 2, 7162, 7161, 3, 2, 2, 2, 7163, 7166,
	3, 2, 2, 2, 7164, 7162, 3, 2, 2, 2, 7164, 7165, 3, 2, 2, 2, 7165, 7167,
	3, 2, 2, 2, 7166, 7164, 3, 2, 2, 2, 7167, 7173, 5, 1050, 526, 2, 7168,
	7169, 7, 196, 2, 2, 7169, 7173, 5, 776, 389, 2, 7170, 7173, 5, 1030, 516,
	2, 7171, 7173, 5, 1048, 525, 2, 7172, 7164, 3, 2, 2, 2, 7172, 7168, 3,
	2, 2, 2, 7172, 7170, 3, 2, 2, 2, 7172, 7171, 3, 2, 2, 2, 7173, 1053, 3,
	2, 2, 2, 7174, 7179, 5, 1034, 518, 2, 7175, 7179, 5, 1040, 521, 2, 7176,
	7179, 5, 1030, 516, 2, 7177, 7179, 5, 1056, 529, 2, 7178, 7174, 3, 2, 2,
	2, 7178, 7175, 3, 2, 2, 2, 7178, 7176, 3, 2, 2, 2, 7178, 7177, 3, 2, 2,
	2, 7179, 1055, 3, 2, 2, 2, 7180, 7190, 7, 23, 2, 2, 7181, 7182, 7, 308,
	2, 2, 7182, 7187, 7, 298, 2, 2, 7183, 7185, 7, 329, 2, 2, 7184, 7186, 5,
	566, 284, 2, 7185, 7184, 3, 2, 2, 2, 7185, 7186, 3, 2, 2, 2, 7186, 7188,
	3, 2, 2, 2, 7187, 7183, 3, 2, 2, 2, 7187, 7188, 3, 2, 2, 2, 7188, 7189,
	3, 2, 2, 2, 7189, 7191, 7, 309, 2, 2, 7190, 7181, 3, 2, 2, 2, 7190, 7191,
	3, 2, 2, 2, 7191, 7201, 3, 2, 2, 2, 7192, 7198, 9, 70, 2, 2, 7193, 7195,
	7, 308, 2, 2, 7194, 7196, 5, 566, 284, 2, 7195, 7194, 3, 2, 2, 2, 7195,
	7196, 3, 2, 2, 2, 7196, 7197, 3, 2, 2, 2, 7197, 7199, 7, 309, 2, 2, 7198,
	7193, 3, 2, 2, 2, 7198, 7199, 3, 2, 2, 2, 7199, 7201, 3, 2, 2, 2, 7200,
	7180, 3, 2, 2, 2, 7200, 7192, 3, 2, 2, 2, 7201, 7202, 3, 2, 2, 2, 7202,
	7203, 7, 307, 2, 2, 7203, 1057, 3, 2, 2, 2, 7204, 7241, 5, 958, 480, 2,
	7205, 7241, 5, 960, 481, 2, 7206, 7241, 5, 986, 494, 2, 7207, 7241, 5,
	992, 497, 2, 7208, 7212, 5, 194, 98, 2, 7209, 7212, 5, 372, 187, 2, 7210,
	7212, 5, 374, 188, 2, 7211, 7208, 3, 2, 2, 2, 7211, 7209, 3, 2, 2, 2, 7211,
	7210, 3, 2, 2, 2, 7211, 7212, 3, 2, 2, 2, 7212, 7213, 3, 2, 2, 2, 7213,
	7241, 7, 307, 2, 2, 7214, 7241, 5, 786, 394, 2, 7215, 7241, 5, 776, 389,
	2, 7216, 7241, 5, 880, 441, 2, 7217, 7241, 5, 866, 434, 2, 7218, 7241,
	5, 894, 448, 2, 7219, 7241, 5, 872, 437, 2, 7220, 7241, 5, 884, 443, 2,
	7221, 7241, 5, 896, 449, 2, 7222, 7241, 5, 902, 452, 2, 7223, 7241, 5,
	948, 475, 2, 7224, 7241, 5, 472, 237, 2, 7225, 7241, 5, 932, 467, 2, 7226,
	7241, 5, 926, 464, 2, 7227, 7241, 5, 380, 191, 2, 7228, 7241, 5, 784, 393,
	2, 7229, 7241, 5, 452, 227, 2, 7230, 7241, 5, 296, 149, 2, 7231, 7241,
	5, 1002, 502, 2, 7232, 7241, 5, 938, 470, 2, 7233, 7241, 5, 1026, 514,
	2, 7234, 7241, 5, 192, 97, 2, 7235, 7241, 5, 208, 105, 2, 7236, 7241, 5,
	898, 450, 2, 7237, 7241, 5, 1034, 518, 2, 7238, 7241, 5, 1040, 521, 2,
	7239, 7241, 5, 1056, 529, 2, 7240, 7204, 3, 2, 2, 2, 7240, 7205, 3, 2,
	2, 2, 7240, 7206, 3, 2, 2, 2, 7240, 7207, 3, 2, 2, 2, 7240, 7211, 3, 2,
	2, 2, 7240, 7214, 3, 2, 2, 2, 7240, 7215, 3, 2, 2, 2, 7240, 7216, 3, 2,
	2, 2, 7240, 7217, 3, 2, 2, 2, 7240, 7218, 3, 2, 2, 2, 7240, 7219, 3, 2,
	2, 2, 7240, 7220, 3, 2, 2, 2, 7240, 7221, 3, 2, 2, 2, 7240, 7222, 3, 2,
	2, 2, 7240, 7223, 3, 2, 2, 2, 7240, 7224, 3, 2, 2, 2, 7240, 7225, 3, 2,
	2, 2, 7240, 7226, 3, 2, 2, 2, 7240, 7227, 3, 2, 2, 2, 7240, 7228, 3, 2,
	2, 2, 7240, 7229, 3, 2, 2, 2, 7240, 7230, 3, 2, 2, 2, 7240, 7231, 3, 2,
	2, 2, 7240, 7232, 3, 2, 2, 2, 7240, 7233, 3, 2, 2, 2, 7240, 7234, 3, 2,
	2, 2, 7240, 7235, 3, 2, 2, 2, 7240, 7236, 3, 2, 2, 2, 7240, 7237, 3, 2,
	2, 2, 7240, 7238, 3, 2, 2, 2, 7240, 7239, 3, 2, 2, 2, 7241, 1059, 3, 2,
	2, 2, 7242, 7245, 5, 1058, 530, 2, 7243, 7245, 5, 766, 384, 2, 7244, 7242,
	3, 2, 2, 2, 7244, 7243, 3, 2, 2, 2, 7245, 1061, 3, 2, 2, 2, 7246, 7263,
	5, 1030, 516, 2, 7247, 7249, 5, 530, 266, 2, 7248, 7247, 3, 2, 2, 2, 7249,
	7252, 3, 2, 2, 2, 7250, 7248, 3, 2, 2, 2, 7250, 7251, 3, 2, 2, 2, 7251,
	7253, 3, 2, 2, 2, 7252, 7250, 3, 2, 2, 2, 7253, 7263, 5, 1060, 531, 2,
	7254, 7263, 5, 1028, 515, 2, 7255, 7263, 5, 914, 458, 2, 7256, 7263, 5,
	664, 333, 2, 7257, 7263, 5, 168, 85, 2, 7258, 7263, 5, 56, 29, 2, 7259,
	7260, 5, 796, 399, 2, 7260, 7261, 7, 307, 2, 2, 7261, 7263, 3, 2, 2, 2,
	7262, 7246, 3, 2, 2, 2, 7262, 7250, 3, 2, 2, 2, 7262, 7254, 3, 2, 2, 2,
	7262, 7255, 3, 2, 2, 2, 7262, 7256, 3, 2, 2, 2, 7262, 7257, 3, 2, 2, 2,
	7262, 7258, 3, 2, 2, 2, 7262, 7259, 3, 2, 2, 2, 7263, 1063, 3, 2, 2, 2,
	953, 1065, 1070, 1084, 1089, 1092, 1097, 1104, 1112, 1133, 1148, 1155,
	1158, 1162, 1166, 1176, 1183, 1186, 1197, 1199, 1222, 1228, 1230, 1252,
	1255, 1259, 1290, 1309, 1322, 1335, 1343, 1354, 1359, 1363, 1370, 1372,
	1379, 1384, 1391, 1399, 1402, 1407, 1416, 1424, 1430, 1440, 1446, 1465,
	1470, 1475, 1482, 1490, 1502, 1513, 1516, 1521, 1528, 1530, 1535, 1540,
	1546, 1550, 1553, 1564, 1570, 1601, 1607, 1615, 1627, 1635, 1641, 1652,
	1657, 1665, 1670, 1676, 1680, 1691, 1696, 1701, 1713, 1733, 1740, 1744,
	1752, 1760, 1769, 1788, 1795, 1804, 1810, 1815, 1823, 1826, 1835, 1837,
	1842, 1849, 1854, 1861, 1869, 1874, 1886, 1898, 1900, 1906, 1911, 1917,
	1924, 1930, 1935, 1941, 1948, 1951, 1961, 1971, 1976, 1978, 1980, 1988,
	1995, 2000, 2006, 2011, 2015, 2021, 2026, 2034, 2045, 2051, 2055, 2059,
	2069, 2082, 2089, 2091, 2103, 2107, 2111, 2113, 2116, 2136, 2143, 2152,
	2155, 2162, 2170, 2178, 2182, 2186, 2190, 2195, 2199, 2211, 2220, 2226,
	2232, 2247, 2255, 2258, 2263, 2267, 2272, 2280, 2283, 2285, 2290, 2306,
	2314, 2317, 2329, 2335, 2338, 2343, 2347, 2351, 2356, 2379, 2387, 2397,
	2407, 2420, 2425, 2428, 2434, 2440, 2448, 2454, 2463, 2473, 2488, 2494,
	2501, 2506, 2515, 2517, 2525, 2531, 2536, 2538, 2541, 2548, 2556, 2563,
	2570, 2576, 2580, 2583, 2586, 2592, 2597, 2599, 2604, 2609, 2614, 2617,
	2626, 2631, 2638, 2650, 2656, 2661, 2667, 2672, 2677, 2684, 2692, 2698,
	2701, 2715, 2726, 2729, 2732, 2741, 2749, 2752, 2763, 2769, 2773, 2779,
	2784, 2788, 2796, 2805, 2811, 2818, 2822, 2827, 2831, 2833, 2840, 2846,
	2851, 2855, 2860, 2867, 2870, 2878, 2884, 2898, 2907, 2914, 2932, 2939,
	2942, 2946, 2953, 2958, 2965, 2970, 2983, 2990, 2997, 3003, 3009, 3013,
	3017, 3023, 3029, 3034, 3041, 3049, 3051, 3056, 3060, 3066, 3068, 3075,
	3082, 3087, 3089, 3096, 3102, 3109, 3112, 3130, 3135, 3138, 3148, 3158,
	3164, 3172, 3178, 3181, 3186, 3196, 3198, 3202, 3207, 3215, 3220, 3227,
	3233, 3237, 3244, 3247, 3253, 3260, 3267, 3273, 3275, 3282, 3291, 3295,
	3299, 3303, 3305, 3309, 3312, 3316, 3319, 3327, 3334, 3338, 3348, 3353,
	3361, 3364, 3370, 3377, 3382, 3391, 3400, 3406, 3411, 3417, 3422, 3427,
	3438, 3446, 3452, 3454, 3466, 3468, 3470, 3482, 3487, 3494, 3504, 3511,
	3518, 3532, 3536, 3539, 3544, 3553, 3561, 3569, 3574, 3578, 3584, 3587,
	3598, 3607, 3611, 3615, 3624, 3627, 3631, 3633, 3640, 3642, 3654, 3662,
	3671, 3676, 3686, 3691, 3702, 3710, 3713, 3716, 3723, 3730, 3739, 3746,
	3751, 3756, 3761, 3764, 3766, 3770, 3780, 3788, 3795, 3797, 3801, 3805,
	3808, 3811, 3814, 3818, 3821, 3826, 3834, 3842, 3844, 3850, 3855, 3860,
	3867, 3871, 3875, 3880, 3884, 3890, 3896, 3898, 3904, 3914, 3918, 3923,
	3927, 3929, 3935, 3942, 3952, 3956, 3961, 3965, 3967, 3973, 3983, 3989,
	3995, 4000, 4009, 4017, 4020, 4025, 4031, 4036, 4040, 4049, 4061, 4067,
	4083, 4097, 4101, 4109, 4113, 4117, 4122, 4146, 4151, 4156, 4164, 4172,
	4177, 4185, 4187, 4196, 4205, 4210, 4221, 4227, 4233, 4240, 4249, 4259,
	4269, 4279, 4289, 4299, 4308, 4318, 4327, 4336, 4343, 4349, 4361, 4375,
	4381, 4383, 4385, 4395, 4397, 4399, 4411, 4417, 4419, 4425, 4430, 4435,
	4437, 4439, 4447, 4458, 4463, 4474, 4485, 4489, 4493, 4500, 4506, 4511,
	4519, 4532, 4535, 4540, 4548, 4561, 4574, 4584, 4589, 4595, 4599, 4605,
	4610, 4614, 4622, 4629, 4633, 4637, 4640, 4647, 4657, 4664, 4668, 4675,
	4685, 4695, 4701, 4705, 4720, 4724, 4735, 4740, 4746, 4752, 4755, 4760,
	4763, 4769, 4773, 4778, 4783, 4789, 4793, 4798, 4808, 4812, 4817, 4824,
	4826, 4832, 4836, 4839, 4843, 4846, 4850, 4854, 4858, 4861, 4868, 4876,
	4884, 4892, 4899, 4907, 4920, 4925, 4932, 4943, 4950, 4957, 4965, 4979,
	4992, 4998, 5008, 5019, 5028, 5054, 5056, 5099, 5110, 5115, 5122, 5129,
	5136, 5145, 5149, 5155, 5165, 5169, 5172, 5175, 5178, 5186, 5196, 5200,
	5211, 5214, 5224, 5228, 5234, 5242, 5245, 5250, 5253, 5256, 5259, 5263,
	5265, 5269, 5277, 5283, 5286, 5297, 5302, 5311, 5315, 5320, 5324, 5331,
	5334, 5341, 5346, 5351, 5356, 5362, 5368, 5371, 5378, 5382, 5391, 5396,
	5402, 5407, 5411, 5413, 5419, 5424, 5427, 5433, 5437, 5451, 5462, 5464,
	5478, 5480, 5496, 5500, 5504, 5508, 5512, 5514, 5516, 5518, 5520, 5522,
	5536, 5538, 5552, 5554, 5570, 5574, 5578, 5582, 5586, 5588, 5590, 5592,
	5594, 5596, 5610, 5612, 5626, 5630, 5634, 5636, 5638, 5640, 5656, 5660,
	5664, 5666, 5668, 5670, 5682, 5684, 5698, 5700, 5716, 5718, 5732, 5751,
	5756, 5763, 5771, 5775, 5781, 5787, 5790, 5797, 5805, 5814, 5819, 5823,
	5827, 5831, 5834, 5840, 5844, 5856, 5863, 5873, 5876, 5881, 5886, 5893,
	5897, 5900, 5911, 5921, 5927, 5931, 5934, 5940, 5945, 5953, 5956, 5962,
	5968, 5975, 5978, 5982, 5986, 5992, 5995, 5997, 6005, 6008, 6014, 6021,
	6028, 6034, 6042, 6045, 6051, 6058, 6064, 6070, 6073, 6083, 6088, 6093,
	6098, 6105, 6110, 6127, 6137, 6145, 6156, 6159, 6164, 6171, 6173, 6178,
	6183, 6189, 6193, 6196, 6204, 6209, 6216, 6238, 6242, 6249, 6261, 6267,
	6270, 6276, 6281, 6287, 6294, 6300, 6305, 6307, 6310, 6316, 6321, 6327,
	6330, 6336, 6341, 6347, 6354, 6360, 6365, 6367, 6370, 6376, 6381, 6385,
	6388, 6394, 6399, 6411, 6420, 6423, 6426, 6434, 6437, 6445, 6452, 6458,
	6466, 6469, 6472, 6477, 6483, 6489, 6496, 6503, 6507, 6514, 6524, 6531,
	6536, 6542, 6544, 6552, 6559, 6567, 6571, 6574, 6582, 6586, 6588, 6595,
	6600, 6603, 6610, 6615, 6618, 6625, 6630, 6633, 6640, 6645, 6648, 6655,
	6660, 6667, 6676, 6679, 6684, 6694, 6699, 6707, 6712, 6720, 6728, 6737,
	6748, 6758, 6764, 6776, 6778, 6793, 6796, 6800, 6802, 6809, 6815, 6825,
	6831, 6838, 6853, 6861, 6864, 6869, 6873, 6878, 6886, 6889, 6891, 6897,
	6900, 6908, 6916, 6921, 6931, 6938, 6945, 6951, 6956, 6965, 6969, 6971,
	6983, 6990, 6998, 7005, 7013, 7016, 7023, 7026, 7030, 7038, 7046, 7055,
	7073, 7084, 7089, 7093, 7103, 7112, 7118, 7125, 7130, 7137, 7143, 7148,
	7155, 7159, 7164, 7172, 7178, 7185, 7187, 7190, 7195, 7198, 7200, 7211,
	7240, 7244, 7250, 7262,
}
var literalNames = []string{
	"", "'`timescale'", "'`default_nettype'", "'`include'", "'`define'", "'`ifndef'",
	"'`ifdef'", "'`elsif'", "'`undef'", "", "'`else'", "'`endif'", "'`begin_keywords'",
	"'`end_keywords'", "'`pragma'", "'`undefineall'", "'`resetall'", "'`celldefine'",
	"'`endcelldefine'", "", "'$error'", "'$fatal'", "'$fullskew'", "'$hold'",
	"'$info'", "'$nochange'", "'$period'", "'$recovery'", "'$recrem'", "'$removal'",
	"'$root'", "'$setup'", "'$setuphold'", "'$skew'", "'$timeskew'", "'$unit'",
	"'$warning'", "'$width'", "'1step'", "'PATHPULSE$'", "'accept_on'", "'alias'",
	"'always'", "'always_comb'", "'always_ff'", "'always_latch'", "'and'",
	"'assert'", "'assign'", "'assume'", "'automatic'", "'before'", "'begin'",
	"'bind'", "'bins'", "'binsof'", "'bit'", "'break'", "'buf'", "'bufif0'",
	"'bufif1'", "'byte'", "'case'", "'casex'", "'casez'", "'cell'", "'chandle'",
	"'checker'", "'class'", "'clocking'", "'cmos'", "'config'", "'const'",
	"'constraint'", "'context'", "'continue'", "'cover'", "'covergroup'", "'coverpoint'",
	"'cross'", "'deassign'", "'default'", "'defparam'", "'design'", "'disable'",
	"'dist'", "'do'", "'edge'", "'else'", "'end'", "'endcase'", "'endchecker'",
	"'endclass'", "'endclocking'", "'endconfig'", "'endfunction'", "'endgenerate'",
	"'endgroup'", "'endinterface'", "'endmodule'", "'endpackage'", "'endprimitive'",
	"'endprogram'", "'endproperty'", "'endsequence'", "'endspecify'", "'endtask'",
	"'enum'", "'event'", "'eventually'", "'expect'", "'export'", "'extends'",
	"'extern'", "'final'", "'first_match'", "'for'", "'force'", "'foreach'",
	"'forever'", "'fork'", "'forkjoin'", "'function'", "'generate'", "'genvar'",
	"'global'", "'highz0'", "'highz1'", "'if'", "'iff'", "'ifnone'", "'ignore_bins'",
	"'illegal_bins'", "'implements'", "'implies'", "'import'", "'initial'",
	"'inout'", "'input'", "'inside'", "'instance'", "'int'", "'integer'", "'interconnect'",
	"'interface'", "'intersect'", "'join'", "'join_any'", "'join_none'", "'large'",
	"'let'", "'liblist'", "'local'", "'localparam'", "'logic'", "'longint'",
	"'macromodule'", "'matches'", "'medium'", "'modport'", "'module'", "'nand'",
	"'negedge'", "'nettype'", "'new'", "'nexttime'", "'nmos'", "'nor'", "'none'",
	"'noshowcancelled'", "'not'", "'notif0'", "'notif1'", "'null'", "'option'",
	"'or'", "'output'", "'package'", "'packed'", "'parameter'", "'pmos'", "'posedge'",
	"'primitive'", "'priority'", "'program'", "'property'", "'protected'",
	"'pull0'", "'pull1'", "'pulldown'", "'pullup'", "'pulsestyle_ondetect'",
	"'pulsestyle_onevent'", "'pure'", "'rand'", "'randc'", "'randcase'", "'randomize'",
	"'randsequence'", "'rcmos'", "'real'", "'realtime'", "'ref'", "'reg'",
	"'reject_on'", "'release'", "'repeat'", "'restrict'", "'return'", "'rnmos'",
	"'rpmos'", "'rtran'", "'rtranif0'", "'rtranif1'", "'s_always'", "'s_eventually'",
	"'s_nexttime'", "'s_until'", "'s_until_with'", "'sample'", "'scalared'",
	"'sequence'", "'shortint'", "'shortreal'", "'showcancelled'", "'signed'",
	"'small'", "'soft'", "'solve'", "'specify'", "'specparam'", "'static'",
	"'std'", "'string'", "'strong'", "'strong0'", "'strong1'", "'struct'",
	"'super'", "'supply0'", "'supply1'", "'sync_accept_on'", "'sync_reject_on'",
	"'table'", "'tagged'", "'task'", "'this'", "'throughout'", "'time'", "'timeprecision'",
	"'timeunit'", "'tran'", "'tranif0'", "'tranif1'", "'tri'", "'tri0'", "'tri1'",
	"'triand'", "'trior'", "'trireg'", "'type'", "'type_option'", "'typedef'",
	"'union'", "'unique'", "'unique0'", "'unsigned'", "'until'", "'until_with'",
	"'untyped'", "'use'", "'uwire'", "'var'", "'vectored'", "'virtual'", "'void'",
	"'wait'", "'wait_order'", "'wand'", "'weak'", "'weak0'", "'weak1'", "'while'",
	"'wildcard'", "'wire'", "'with'", "'within'", "'wor'", "'xnor'", "'xor'",
	"", "", "", "", "", "", "", "", "", "", "'`'", "", "", "", "", "", "",
	"", "'['", "']'", "'{'", "'}'", "'''", "''{'", "'<<'", "'>>'", "'<<<'",
	"'>>>'", "'$'", "'%'", "'!'", "'~'", "'~&'", "'~|'", "'^'", "'~^'", "'^~'",
	"','", "'.'", "'?'", "", "'::'", "'=='", "'!='", "'==='", "'!=='", "'==?'",
	"'!=?'", "'='", "'<'", "'>'", "'>='", "'<='", "'+='", "'-='", "'*='", "'/='",
	"'%='", "'&='", "'|='", "'^='", "'<<='", "'>>='", "'<<<='", "'>>>='", "'+'",
	"", "'&'", "'&&'", "'|'", "'||'", "'\\'", "'*'", "'/'", "'**'", "'<->'",
	"'->'", "'->>'", "'++'", "'--'", "':='", "'|->'", "'|=>'", "'=>'", "'-=>'",
	"'+=>'", "'*>'", "'#-#'", "'#=#'", "'@'", "'@@'", "'#'", "'##'", "'&&&'",
	"", "", "", "'endtable'",
}
var symbolicNames = []string{
	"", "TICK_TIMESCALE", "TICK_DEFAULT_NETTYPE", "TICK_INCLUDE", "TICK_DEFINE",
	"TICK_IFNDEF", "TICK_IFDEF", "TICK_ELSIF", "TICK_UNDEF", "TICK_KW_VALUE",
	"TICK_ELSE", "TICK_ENDIF", "TICK_BEGIN_KEYWORDS", "TICK_END_KEYWORDS",
	"TICK_PRAGMA", "TICK_UNDEFINEALL", "TICK_RESETALL", "TICK_CELLDEFINE",
	"TICK_ENDCELLDEFINE", "TICK_LINE", "KW_DOLAR_ERROR", "KW_DOLAR_FATAL",
	"KW_DOLAR_FULLSKEW", "KW_DOLAR_HOLD", "KW_DOLAR_INFO", "KW_DOLAR_NOCHANGE",
	"KW_DOLAR_PERIOD", "KW_DOLAR_RECOVERY", "KW_DOLAR_RECREM", "KW_DOLAR_REMOVAL",
	"KW_DOLAR_ROOT", "KW_DOLAR_SETUP", "KW_DOLAR_SETUPHOLD", "KW_DOLAR_SKEW",
	"KW_DOLAR_TIMESKEW", "KW_DOLAR_UNIT", "KW_DOLAR_WARNING", "KW_DOLAR_WIDTH",
	"KW_1STEP", "KW_PATHPULSE_DOLAR", "KW_ACCEPT_ON", "KW_ALIAS", "KW_ALWAYS",
	"KW_ALWAYS_COMB", "KW_ALWAYS_FF", "KW_ALWAYS_LATCH", "KW_AND", "KW_ASSERT",
	"KW_ASSIGN", "KW_ASSUME", "KW_AUTOMATIC", "KW_BEFORE", "KW_BEGIN", "KW_BIND",
	"KW_BINS", "KW_BINSOF", "KW_BIT", "KW_BREAK", "KW_BUF", "KW_BUFIF0", "KW_BUFIF1",
	"KW_BYTE", "KW_CASE", "KW_CASEX", "KW_CASEZ", "KW_CELL", "KW_CHANDLE",
	"KW_CHECKER", "KW_CLASS", "KW_CLOCKING", "KW_CMOS", "KW_CONFIG", "KW_CONST",
	"KW_CONSTRAINT", "KW_CONTEXT", "KW_CONTINUE", "KW_COVER", "KW_COVERGROUP",
	"KW_COVERPOINT", "KW_CROSS", "KW_DEASSIGN", "KW_DEFAULT", "KW_DEFPARAM",
	"KW_DESIGN", "KW_DISABLE", "KW_DIST", "KW_DO", "KW_EDGE", "KW_ELSE", "KW_END",
	"KW_ENDCASE", "KW_ENDCHECKER", "KW_ENDCLASS", "KW_ENDCLOCKING", "KW_ENDCONFIG",
	"KW_ENDFUNCTION", "KW_ENDGENERATE", "KW_ENDGROUP", "KW_ENDINTERFACE", "KW_ENDMODULE",
	"KW_ENDPACKAGE", "KW_ENDPRIMITIVE", "KW_ENDPROGRAM", "KW_ENDPROPERTY",
	"KW_ENDSEQUENCE", "KW_ENDSPECIFY", "KW_ENDTASK", "KW_ENUM", "KW_EVENT",
	"KW_EVENTUALLY", "KW_EXPECT", "KW_EXPORT", "KW_EXTENDS", "KW_EXTERN", "KW_FINAL",
	"KW_FIRST_MATCH", "KW_FOR", "KW_FORCE", "KW_FOREACH", "KW_FOREVER", "KW_FORK",
	"KW_FORKJOIN", "KW_FUNCTION", "KW_GENERATE", "KW_GENVAR", "KW_GLOBAL",
	"KW_HIGHZ0", "KW_HIGHZ1", "KW_IF", "KW_IFF", "KW_IFNONE", "KW_IGNORE_BINS",
	"KW_ILLEGAL_BINS", "KW_IMPLEMENTS", "KW_IMPLIES", "KW_IMPORT", "KW_INITIAL",
	"KW_INOUT", "KW_INPUT", "KW_INSIDE", "KW_INSTANCE", "KW_INT", "KW_INTEGER",
	"KW_INTERCONNECT", "KW_INTERFACE", "KW_INTERSECT", "KW_JOIN", "KW_JOIN_ANY",
	"KW_JOIN_NONE", "KW_LARGE", "KW_LET", "KW_LIBLIST", "KW_LOCAL", "KW_LOCALPARAM",
	"KW_LOGIC", "KW_LONGINT", "KW_MACROMODULE", "KW_MATCHES", "KW_MEDIUM",
	"KW_MODPORT", "KW_MODULE", "KW_NAND", "KW_NEGEDGE", "KW_NETTYPE", "KW_NEW",
	"KW_NEXTTIME", "KW_NMOS", "KW_NOR", "KW_NONE", "KW_NOSHOWCANCELLED", "KW_NOT",
	"KW_NOTIF0", "KW_NOTIF1", "KW_NULL", "KW_OPTION", "KW_OR", "KW_OUTPUT",
	"KW_PACKAGE", "KW_PACKED", "KW_PARAMETER", "KW_PMOS", "KW_POSEDGE", "KW_PRIMITIVE",
	"KW_PRIORITY", "KW_PROGRAM", "KW_PROPERTY", "KW_PROTECTED", "KW_PULL0",
	"KW_PULL1", "KW_PULLDOWN", "KW_PULLUP", "KW_PULSESTYLE_ONDETECT", "KW_PULSESTYLE_ONEVENT",
	"KW_PURE", "KW_RAND", "KW_RANDC", "KW_RANDCASE", "KW_RANDOMIZE", "KW_RANDSEQUENCE",
	"KW_RCMOS", "KW_REAL", "KW_REALTIME", "KW_REF", "KW_REG", "KW_REJECT_ON",
	"KW_RELEASE", "KW_REPEAT", "KW_RESTRICT", "KW_RETURN", "KW_RNMOS", "KW_RPMOS",
	"KW_RTRAN", "KW_RTRANIF0", "KW_RTRANIF1", "KW_S_ALWAYS", "KW_S_EVENTUALLY",
	"KW_S_NEXTTIME", "KW_S_UNTIL", "KW_S_UNTIL_WITH", "KW_SAMPLE", "KW_SCALARED",
	"KW_SEQUENCE", "KW_SHORTINT", "KW_SHORTREAL", "KW_SHOWCANCELLED", "KW_SIGNED",
	"KW_SMALL", "KW_SOFT", "KW_SOLVE", "KW_SPECIFY", "KW_SPECPARAM", "KW_STATIC",
	"KW_STD", "KW_STRING", "KW_STRONG", "KW_STRONG0", "KW_STRONG1", "KW_STRUCT",
	"KW_SUPER", "KW_SUPPLY0", "KW_SUPPLY1", "KW_SYNC_ACCEPT_ON", "KW_SYNC_REJECT_ON",
	"KW_TABLE", "KW_TAGGED", "KW_TASK", "KW_THIS", "KW_THROUGHOUT", "KW_TIME",
	"KW_TIMEPRECISION", "KW_TIMEUNIT", "KW_TRAN", "KW_TRANIF0", "KW_TRANIF1",
	"KW_TRI", "KW_TRI0", "KW_TRI1", "KW_TRIAND", "KW_TRIOR", "KW_TRIREG", "KW_TYPE",
	"KW_TYPE_OPTION", "KW_TYPEDEF", "KW_UNION", "KW_UNIQUE", "KW_UNIQUE0",
	"KW_UNSIGNED", "KW_UNTIL", "KW_UNTIL_WITH", "KW_UNTYPED", "KW_USE", "KW_UWIRE",
	"KW_VAR", "KW_VECTORED", "KW_VIRTUAL", "KW_VOID", "KW_WAIT", "KW_WAIT_ORDER",
	"KW_WAND", "KW_WEAK", "KW_WEAK0", "KW_WEAK1", "KW_WHILE", "KW_WILDCARD",
	"KW_WIRE", "KW_WITH", "KW_WITHIN", "KW_WOR", "KW_XNOR", "KW_XOR", "EDGE_CONTROL_SPECIFIER",
	"TIME_LITERAL", "ANY_BASED_NUMBER", "BASED_NUMBER_WITH_SIZE", "REAL_NUMBER_WITH_EXP",
	"FIXED_POINT_NUMBER", "UNSIGNED_NUMBER", "UNBASED_UNSIZED_LITERAL", "STRING_LITERAL",
	"C_IDENTIFIER", "TICK", "TICK_IDENTIFIER", "ESCAPED_IDENTIFIER", "SIMPLE_IDENTIFIER",
	"SYSTEM_TF_IDENTIFIER", "SEMI", "LPAREN", "RPAREN", "LSQUARE_BR", "RSQUARE_BR",
	"LBRACE", "RBRACE", "APOSTROPHE", "APOSTROPHE_LBRACE", "SHIFT_LEFT", "SHIFT_RIGHT",
	"ARITH_SHIFT_LEFT", "ARITH_SHIFT_RIGHT", "DOLAR", "MOD", "NOT", "NEG",
	"NAND", "NOR", "XOR", "NXOR", "XORN", "COMMA", "DOT", "QUESTIONMARK", "COLON",
	"DOUBLE_COLON", "EQ", "NEQ", "CASE_EQ", "CASE_NEQ", "WILDCARD_EQ", "WILDCARD_NEQ",
	"ASSIGN", "LT", "GT", "GE", "LE", "PLUS_ASSIGN", "MINUS_ASSIGN", "MUL_ASSIGN",
	"DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "SHIFT_LEFT_ASSIGN",
	"SHIFT_RIGHT_ASSIGN", "ARITH_SHIFT_LEFT_ASSIGN", "ARITH_SHIFT_RIGHT_ASSIGN",
	"PLUS", "MINUS", "AMPERSAND", "LOG_AND", "BAR", "LOG_OR", "BACKSLASH",
	"MUL", "DIV", "DOUBLESTAR", "BI_DIR_ARROW", "ARROW", "DOUBLE_RIGHT_ARROW",
	"INCR", "DECR", "DIST_WEIGHT_ASSIGN", "OVERLAPPING_IMPL", "NONOVERLAPPING_IMPL",
	"IMPLIES", "IMPLIES_P", "IMPLIES_N", "PATH_FULL", "HASH_MINUS_HASH", "HASH_EQ_HASH",
	"AT", "DOUBLE_AT", "HASH", "DOUBLE_HASH", "TRIPLE_AND", "ONE_LINE_COMMENT",
	"BLOCK_COMMENT", "WHITE_SPACE", "KW_ENDTABLE", "LEVEL_SYMBOL", "EDGE_SYMBOL",
}

var ruleNames = []string{
	"source_text", "description", "header_text", "design_attribute", "compiler_directive",
	"time_num", "time_lit", "timescale_compiler_directive", "default_nettype_statement",
	"include_svh", "assignment_operator", "edge_identifier", "identifier",
	"integer_type", "integer_atom_type", "integer_vector_type", "non_integer_type",
	"net_type", "unary_module_path_operator", "unary_operator", "inc_or_dec_operator",
	"implicit_class_handle", "integral_number", "real_number", "any_system_tf_identifier",
	"signing", "number", "timeunits_declaration", "lifetime", "port_direction",
	"always_keyword", "join_keyword", "unique_priority", "drive_strength",
	"strength0", "strength1", "charge_strength", "sequence_lvar_port_direction",
	"bins_keyword", "class_item_qualifier", "random_qualifier", "property_qualifier",
	"method_qualifier", "constraint_prototype_qualifier", "cmos_switchtype",
	"enable_gatetype", "mos_switchtype", "n_input_gatetype", "n_output_gatetype",
	"pass_en_switchtype", "pass_switchtype", "any_implication", "polarity_operator",
	"timing_check_event_control", "import_export", "array_method_name", "operator_mul_div_mod",
	"operator_plus_minus", "operator_shift", "operator_cmp", "operator_eq_neq",
	"operator_xor", "operator_impl", "udp_nonansi_declaration", "udp_ansi_declaration",
	"udp_declaration", "udp_declaration_port_list", "udp_port_declaration",
	"udp_output_declaration", "udp_input_declaration", "udp_reg_declaration",
	"udp_body", "combinational_body", "combinational_entry", "sequential_body",
	"udp_initial_statement", "sequential_entry", "seq_input_list", "level_input_list",
	"edge_input_list", "edge_indicator", "current_state", "next_state", "interface_declaration",
	"interface_header", "interface_item", "modport_declaration", "modport_item",
	"modport_ports_declaration", "modport_clocking_declaration", "modport_simple_ports_declaration",
	"modport_simple_port", "modport_tf_ports_declaration", "modport_tf_port",
	"statement_or_null", "initial_construct", "default_clocking_or_dissable_construct",
	"statement", "statement_item", "macro_statement", "cycle_delay", "clocking_drive",
	"clockvar_expression", "final_construct", "blocking_assignment", "procedural_timing_control_statement",
	"procedural_timing_control", "event_control", "delay_or_event_control",
	"delay3", "delay2", "delay_value", "delay_control", "nonblocking_assignment",
	"procedural_continuous_assignment", "variable_assignment", "action_block",
	"seq_block", "par_block", "case_statement", "case_keyword", "case_item",
	"case_pattern_item", "case_inside_item", "randcase_statement", "randcase_item",
	"cond_predicate", "conditional_statement", "subroutine_call_statement",
	"disable_statement", "event_trigger", "loop_statement", "list_of_variable_assignments",
	"for_initialization", "for_variable_declaration_var_assign", "for_variable_declaration",
	"for_step", "loop_variables", "jump_statement", "wait_statement", "name_of_instance",
	"checker_instantiation", "list_of_checker_port_connections", "ordered_checker_port_connection",
	"named_checker_port_connection", "procedural_assertion_statement", "concurrent_assertion_statement",
	"assertion_item", "concurrent_assertion_item", "immediate_assertion_statement",
	"simple_immediate_assertion_statement", "simple_immediate_assert_statement",
	"simple_immediate_assume_statement", "simple_immediate_cover_statement",
	"deferred_immediate_assertion_statement", "primitive_delay", "deferred_immediate_assert_statement",
	"deferred_immediate_assume_statement", "deferred_immediate_cover_statement",
	"weight_specification", "production_item", "rs_code_block", "randsequence_statement",
	"rs_prod", "rs_if_else", "rs_repeat", "rs_case", "rs_case_item", "rs_rule",
	"rs_production_list", "production", "tf_item_declaration", "tf_port_list",
	"tf_port_item", "tf_port_direction", "tf_port_declaration", "list_of_tf_variable_identifiers_item",
	"list_of_tf_variable_identifiers", "expect_property_statement", "block_item_declaration",
	"param_assignment", "type_assignment", "list_of_type_assignments", "list_of_param_assignments",
	"parameter_declaration_primitive", "local_parameter_declaration", "parameter_declaration",
	"type_declaration", "net_type_declaration", "let_declaration", "let_port_list",
	"let_port_item", "let_formal_type", "package_import_declaration", "package_import_item",
	"property_list_of_arguments", "property_actual_arg", "property_formal_type",
	"sequence_formal_type", "property_instance", "property_spec", "property_expr",
	"property_case_item", "bit_select", "identifier_with_bit_select", "package_or_class_scoped_hier_id_with_select",
	"package_or_class_scoped_path_item", "package_or_class_scoped_path", "hierarchical_identifier",
	"package_or_class_scoped_id", "select_", "event_expression_item", "event_expression",
	"boolean_abbrev", "sequence_abbrev", "consecutive_repetition", "non_consecutive_repetition",
	"goto_repetition", "cycle_delay_const_range_expression", "sequence_instance",
	"sequence_expr", "sequence_match_item", "operator_assignment", "sequence_actual_arg",
	"dist_weight", "clocking_declaration", "clocking_item", "list_of_clocking_decl_assign",
	"clocking_decl_assign", "default_skew", "clocking_direction", "clocking_skew",
	"clocking_event", "cycle_delay_range", "expression_or_dist", "covergroup_declaration",
	"cover_cross", "identifier_list_2plus", "cross_body", "cross_body_item",
	"bins_selection_or_option", "bins_selection", "select_expression", "select_condition",
	"bins_expression", "covergroup_range_list", "covergroup_value_range", "covergroup_expression",
	"coverage_spec_or_option", "coverage_option", "coverage_spec", "cover_point",
	"bins_or_empty", "bins_or_options", "trans_list", "trans_set", "trans_range_list",
	"repeat_range", "coverage_event", "block_event_expression", "hierarchical_btf_identifier",
	"assertion_variable_declaration", "dist_item", "value_range", "attribute_instance",
	"attr_spec", "class_new", "param_expression", "constant_param_expression",
	"unpacked_dimension", "packed_dimension", "variable_dimension", "struct_union",
	"enum_base_type", "data_type_primitive", "data_type_usual", "data_type",
	"data_type_or_implicit", "implicit_data_type", "sequence_list_of_arguments_named_item",
	"sequence_list_of_arguments", "list_of_arguments_named_item", "list_of_arguments",
	"primary_literal", "type_reference", "package_scope", "ps_identifier",
	"list_of_parameter_value_assignments", "parameter_value_assignment", "class_type",
	"class_scope", "range_expression", "constant_range_expression", "constant_mintypmax_expression",
	"mintypmax_expression", "named_parameter_assignment", "primary", "constant_expression",
	"inc_or_dec_expression", "expression", "concatenation", "dynamic_array_new",
	"const_or_range_expression", "variable_decl_assignment", "assignment_pattern_variable_lvalue",
	"stream_operator", "slice_size", "streaming_concatenation", "stream_concatenation",
	"stream_expression", "array_range_expression", "open_range_list", "pattern",
	"assignment_pattern", "structure_pattern_key", "array_pattern_key", "assignment_pattern_key",
	"struct_union_member", "data_type_or_void", "enum_name_declaration", "assignment_pattern_expression",
	"assignment_pattern_expression_type", "net_lvalue", "variable_lvalue",
	"solve_before_list", "constraint_block_item", "constraint_expression",
	"uniqueness_constraint", "constraint_set", "randomize_call", "module_header_common",
	"module_declaration", "module_keyword", "net_port_type", "var_data_type",
	"net_or_var_data_type", "list_of_defparam_assignments", "list_of_net_decl_assignments",
	"list_of_specparam_assignments", "list_of_variable_decl_assignments", "list_of_variable_identifiers_item",
	"list_of_variable_identifiers", "list_of_variable_port_identifiers", "defparam_assignment",
	"net_decl_assignment", "specparam_assignment", "error_limit_value", "reject_limit_value",
	"pulse_control_specparam", "identifier_doted_index_at_end", "specify_terminal_descriptor",
	"specify_input_terminal_descriptor", "specify_output_terminal_descriptor",
	"specify_item", "pulsestyle_declaration", "showcancelled_declaration",
	"path_declaration", "simple_path_declaration", "path_delay_value", "list_of_path_outputs",
	"list_of_path_inputs", "list_of_paths", "list_of_path_delay_expressions",
	"t_path_delay_expression", "trise_path_delay_expression", "tfall_path_delay_expression",
	"tz_path_delay_expression", "t01_path_delay_expression", "t10_path_delay_expression",
	"t0z_path_delay_expression", "tz1_path_delay_expression", "t1z_path_delay_expression",
	"tz0_path_delay_expression", "t0x_path_delay_expression", "tx1_path_delay_expression",
	"t1x_path_delay_expression", "tx0_path_delay_expression", "txz_path_delay_expression",
	"tzx_path_delay_expression", "parallel_path_description", "full_path_description",
	"identifier_list", "specparam_declaration", "edge_sensitive_path_declaration",
	"parallel_edge_sensitive_path_description", "full_edge_sensitive_path_description",
	"data_source_expression", "data_declaration", "module_path_expression",
	"state_dependent_path_declaration", "package_export_declaration", "genvar_declaration",
	"net_declaration", "parameter_port_list", "parameter_port_declaration",
	"list_of_port_declarations_ansi_item", "list_of_port_declarations", "nonansi_port_declaration",
	"nonansi_port", "nonansi_port__expr", "port_identifier", "ansi_port_declaration",
	"system_timing_check", "dolar_setup_timing_check", "dolar_hold_timing_check",
	"dolar_setuphold_timing_check", "dolar_recovery_timing_check", "dolar_removal_timing_check",
	"dolar_recrem_timing_check", "dolar_skew_timing_check", "dolar_timeskew_timing_check",
	"dolar_fullskew_timing_check", "dolar_period_timing_check", "dolar_width_timing_check",
	"dolar_nochange_timing_check", "timecheck_condition", "controlled_reference_event",
	"delayed_reference", "end_edge_offset", "event_based_flag", "notifier",
	"remain_active_flag", "timestamp_condition", "start_edge_offset", "threshold",
	"timing_check_limit", "timing_check_event", "timing_check_condition", "scalar_timing_check_condition",
	"controlled_timing_check_event", "function_data_type_or_implicit", "extern_tf_declaration",
	"function_declaration", "task_prototype", "function_prototype", "dpi_import_export",
	"dpi_function_import_property", "dpi_task_import_property", "task_and_function_declaration_common",
	"task_declaration", "method_prototype", "extern_constraint_declaration",
	"constraint_block", "checker_port_list", "checker_port_item", "checker_port_direction",
	"checker_declaration", "class_declaration", "always_construct", "interface_class_type",
	"interface_class_declaration", "interface_class_item", "interface_class_method",
	"package_declaration", "package_item", "package_item_item", "program_declaration",
	"program_header", "program_item", "non_port_program_item", "anonymous_program",
	"anonymous_program_item", "sequence_declaration", "sequence_port_list",
	"sequence_port_item", "property_declaration", "property_port_list", "property_port_item",
	"continuous_assign", "checker_or_generate_item", "constraint_prototype",
	"class_constraint", "constraint_declaration", "class_constructor_declaration",
	"class_property", "class_method", "class_constructor_prototype", "class_item",
	"parameter_override", "gate_instantiation", "enable_gate_or_mos_switch_or_cmos_switch_instance",
	"n_input_gate_instance", "n_output_gate_instance", "pass_switch_instance",
	"pass_enable_switch_instance", "pull_gate_instance", "pulldown_strength",
	"pullup_strength", "enable_terminal", "inout_terminal", "input_terminal",
	"output_terminal", "udp_instantiation", "udp_instance", "udp_instance_body",
	"module_or_interface_or_program_or_udp_instantiation", "hierarchical_instance",
	"list_of_port_connections", "ordered_port_connection", "named_port_connection",
	"bind_directive", "bind_target_instance", "bind_target_instance_list",
	"bind_instantiation", "config_declaration", "design_statement", "config_rule_statement",
	"inst_clause", "inst_name", "cell_clause", "liblist_clause", "use_clause",
	"net_alias", "specify_block", "generate_region", "genvar_expression", "loop_generate_construct",
	"genvar_initialization", "genvar_iteration", "conditional_generate_construct",
	"if_generate_construct", "case_generate_construct", "case_generate_item",
	"generate_begin_end_block", "generate_item_item", "generate_item", "program_generate_item",
	"elaboration_system_task", "core_item_item", "module_item_item", "module_item",
}

type SV2017Parser struct {
	*antlr.BaseParser
}

// NewSV2017Parser produces a new parser instance for the optional input antlr.TokenStream.
//
// The *SV2017Parser instance produced may be reused by calling the SetInputStream method.
// The initial parser configuration is expensive to construct, and the object is not thread-safe;
// however, if used within a Golang sync.Pool, the construction cost amortizes well and the
// objects can be used in a thread-safe manner.
func NewSV2017Parser(input antlr.TokenStream) *SV2017Parser {
	this := new(SV2017Parser)
	deserializer := antlr.NewATNDeserializer(nil)
	deserializedATN := deserializer.DeserializeFromUInt16(parserATN)
	decisionToDFA := make([]*antlr.DFA, len(deserializedATN.DecisionToState))
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "SV2017Parser.g4"

	return this
}

// SV2017Parser tokens.
const (
	SV2017ParserEOF                      = antlr.TokenEOF
	SV2017ParserTICK_TIMESCALE           = 1
	SV2017ParserTICK_DEFAULT_NETTYPE     = 2
	SV2017ParserTICK_INCLUDE             = 3
	SV2017ParserTICK_DEFINE              = 4
	SV2017ParserTICK_IFNDEF              = 5
	SV2017ParserTICK_IFDEF               = 6
	SV2017ParserTICK_ELSIF               = 7
	SV2017ParserTICK_UNDEF               = 8
	SV2017ParserTICK_KW_VALUE            = 9
	SV2017ParserTICK_ELSE                = 10
	SV2017ParserTICK_ENDIF               = 11
	SV2017ParserTICK_BEGIN_KEYWORDS      = 12
	SV2017ParserTICK_END_KEYWORDS        = 13
	SV2017ParserTICK_PRAGMA              = 14
	SV2017ParserTICK_UNDEFINEALL         = 15
	SV2017ParserTICK_RESETALL            = 16
	SV2017ParserTICK_CELLDEFINE          = 17
	SV2017ParserTICK_ENDCELLDEFINE       = 18
	SV2017ParserTICK_LINE                = 19
	SV2017ParserKW_DOLAR_ERROR           = 20
	SV2017ParserKW_DOLAR_FATAL           = 21
	SV2017ParserKW_DOLAR_FULLSKEW        = 22
	SV2017ParserKW_DOLAR_HOLD            = 23
	SV2017ParserKW_DOLAR_INFO            = 24
	SV2017ParserKW_DOLAR_NOCHANGE        = 25
	SV2017ParserKW_DOLAR_PERIOD          = 26
	SV2017ParserKW_DOLAR_RECOVERY        = 27
	SV2017ParserKW_DOLAR_RECREM          = 28
	SV2017ParserKW_DOLAR_REMOVAL         = 29
	SV2017ParserKW_DOLAR_ROOT            = 30
	SV2017ParserKW_DOLAR_SETUP           = 31
	SV2017ParserKW_DOLAR_SETUPHOLD       = 32
	SV2017ParserKW_DOLAR_SKEW            = 33
	SV2017ParserKW_DOLAR_TIMESKEW        = 34
	SV2017ParserKW_DOLAR_UNIT            = 35
	SV2017ParserKW_DOLAR_WARNING         = 36
	SV2017ParserKW_DOLAR_WIDTH           = 37
	SV2017ParserKW_1STEP                 = 38
	SV2017ParserKW_PATHPULSE_DOLAR       = 39
	SV2017ParserKW_ACCEPT_ON             = 40
	SV2017ParserKW_ALIAS                 = 41
	SV2017ParserKW_ALWAYS                = 42
	SV2017ParserKW_ALWAYS_COMB           = 43
	SV2017ParserKW_ALWAYS_FF             = 44
	SV2017ParserKW_ALWAYS_LATCH          = 45
	SV2017ParserKW_AND                   = 46
	SV2017ParserKW_ASSERT                = 47
	SV2017ParserKW_ASSIGN                = 48
	SV2017ParserKW_ASSUME                = 49
	SV2017ParserKW_AUTOMATIC             = 50
	SV2017ParserKW_BEFORE                = 51
	SV2017ParserKW_BEGIN                 = 52
	SV2017ParserKW_BIND                  = 53
	SV2017ParserKW_BINS                  = 54
	SV2017ParserKW_BINSOF                = 55
	SV2017ParserKW_BIT                   = 56
	SV2017ParserKW_BREAK                 = 57
	SV2017ParserKW_BUF                   = 58
	SV2017ParserKW_BUFIF0                = 59
	SV2017ParserKW_BUFIF1                = 60
	SV2017ParserKW_BYTE                  = 61
	SV2017ParserKW_CASE                  = 62
	SV2017ParserKW_CASEX                 = 63
	SV2017ParserKW_CASEZ                 = 64
	SV2017ParserKW_CELL                  = 65
	SV2017ParserKW_CHANDLE               = 66
	SV2017ParserKW_CHECKER               = 67
	SV2017ParserKW_CLASS                 = 68
	SV2017ParserKW_CLOCKING              = 69
	SV2017ParserKW_CMOS                  = 70
	SV2017ParserKW_CONFIG                = 71
	SV2017ParserKW_CONST                 = 72
	SV2017ParserKW_CONSTRAINT            = 73
	SV2017ParserKW_CONTEXT               = 74
	SV2017ParserKW_CONTINUE              = 75
	SV2017ParserKW_COVER                 = 76
	SV2017ParserKW_COVERGROUP            = 77
	SV2017ParserKW_COVERPOINT            = 78
	SV2017ParserKW_CROSS                 = 79
	SV2017ParserKW_DEASSIGN              = 80
	SV2017ParserKW_DEFAULT               = 81
	SV2017ParserKW_DEFPARAM              = 82
	SV2017ParserKW_DESIGN                = 83
	SV2017ParserKW_DISABLE               = 84
	SV2017ParserKW_DIST                  = 85
	SV2017ParserKW_DO                    = 86
	SV2017ParserKW_EDGE                  = 87
	SV2017ParserKW_ELSE                  = 88
	SV2017ParserKW_END                   = 89
	SV2017ParserKW_ENDCASE               = 90
	SV2017ParserKW_ENDCHECKER            = 91
	SV2017ParserKW_ENDCLASS              = 92
	SV2017ParserKW_ENDCLOCKING           = 93
	SV2017ParserKW_ENDCONFIG             = 94
	SV2017ParserKW_ENDFUNCTION           = 95
	SV2017ParserKW_ENDGENERATE           = 96
	SV2017ParserKW_ENDGROUP              = 97
	SV2017ParserKW_ENDINTERFACE          = 98
	SV2017ParserKW_ENDMODULE             = 99
	SV2017ParserKW_ENDPACKAGE            = 100
	SV2017ParserKW_ENDPRIMITIVE          = 101
	SV2017ParserKW_ENDPROGRAM            = 102
	SV2017ParserKW_ENDPROPERTY           = 103
	SV2017ParserKW_ENDSEQUENCE           = 104
	SV2017ParserKW_ENDSPECIFY            = 105
	SV2017ParserKW_ENDTASK               = 106
	SV2017ParserKW_ENUM                  = 107
	SV2017ParserKW_EVENT                 = 108
	SV2017ParserKW_EVENTUALLY            = 109
	SV2017ParserKW_EXPECT                = 110
	SV2017ParserKW_EXPORT                = 111
	SV2017ParserKW_EXTENDS               = 112
	SV2017ParserKW_EXTERN                = 113
	SV2017ParserKW_FINAL                 = 114
	SV2017ParserKW_FIRST_MATCH           = 115
	SV2017ParserKW_FOR                   = 116
	SV2017ParserKW_FORCE                 = 117
	SV2017ParserKW_FOREACH               = 118
	SV2017ParserKW_FOREVER               = 119
	SV2017ParserKW_FORK                  = 120
	SV2017ParserKW_FORKJOIN              = 121
	SV2017ParserKW_FUNCTION              = 122
	SV2017ParserKW_GENERATE              = 123
	SV2017ParserKW_GENVAR                = 124
	SV2017ParserKW_GLOBAL                = 125
	SV2017ParserKW_HIGHZ0                = 126
	SV2017ParserKW_HIGHZ1                = 127
	SV2017ParserKW_IF                    = 128
	SV2017ParserKW_IFF                   = 129
	SV2017ParserKW_IFNONE                = 130
	SV2017ParserKW_IGNORE_BINS           = 131
	SV2017ParserKW_ILLEGAL_BINS          = 132
	SV2017ParserKW_IMPLEMENTS            = 133
	SV2017ParserKW_IMPLIES               = 134
	SV2017ParserKW_IMPORT                = 135
	SV2017ParserKW_INITIAL               = 136
	SV2017ParserKW_INOUT                 = 137
	SV2017ParserKW_INPUT                 = 138
	SV2017ParserKW_INSIDE                = 139
	SV2017ParserKW_INSTANCE              = 140
	SV2017ParserKW_INT                   = 141
	SV2017ParserKW_INTEGER               = 142
	SV2017ParserKW_INTERCONNECT          = 143
	SV2017ParserKW_INTERFACE             = 144
	SV2017ParserKW_INTERSECT             = 145
	SV2017ParserKW_JOIN                  = 146
	SV2017ParserKW_JOIN_ANY              = 147
	SV2017ParserKW_JOIN_NONE             = 148
	SV2017ParserKW_LARGE                 = 149
	SV2017ParserKW_LET                   = 150
	SV2017ParserKW_LIBLIST               = 151
	SV2017ParserKW_LOCAL                 = 152
	SV2017ParserKW_LOCALPARAM            = 153
	SV2017ParserKW_LOGIC                 = 154
	SV2017ParserKW_LONGINT               = 155
	SV2017ParserKW_MACROMODULE           = 156
	SV2017ParserKW_MATCHES               = 157
	SV2017ParserKW_MEDIUM                = 158
	SV2017ParserKW_MODPORT               = 159
	SV2017ParserKW_MODULE                = 160
	SV2017ParserKW_NAND                  = 161
	SV2017ParserKW_NEGEDGE               = 162
	SV2017ParserKW_NETTYPE               = 163
	SV2017ParserKW_NEW                   = 164
	SV2017ParserKW_NEXTTIME              = 165
	SV2017ParserKW_NMOS                  = 166
	SV2017ParserKW_NOR                   = 167
	SV2017ParserKW_NONE                  = 168
	SV2017ParserKW_NOSHOWCANCELLED       = 169
	SV2017ParserKW_NOT                   = 170
	SV2017ParserKW_NOTIF0                = 171
	SV2017ParserKW_NOTIF1                = 172
	SV2017ParserKW_NULL                  = 173
	SV2017ParserKW_OPTION                = 174
	SV2017ParserKW_OR                    = 175
	SV2017ParserKW_OUTPUT                = 176
	SV2017ParserKW_PACKAGE               = 177
	SV2017ParserKW_PACKED                = 178
	SV2017ParserKW_PARAMETER             = 179
	SV2017ParserKW_PMOS                  = 180
	SV2017ParserKW_POSEDGE               = 181
	SV2017ParserKW_PRIMITIVE             = 182
	SV2017ParserKW_PRIORITY              = 183
	SV2017ParserKW_PROGRAM               = 184
	SV2017ParserKW_PROPERTY              = 185
	SV2017ParserKW_PROTECTED             = 186
	SV2017ParserKW_PULL0                 = 187
	SV2017ParserKW_PULL1                 = 188
	SV2017ParserKW_PULLDOWN              = 189
	SV2017ParserKW_PULLUP                = 190
	SV2017ParserKW_PULSESTYLE_ONDETECT   = 191
	SV2017ParserKW_PULSESTYLE_ONEVENT    = 192
	SV2017ParserKW_PURE                  = 193
	SV2017ParserKW_RAND                  = 194
	SV2017ParserKW_RANDC                 = 195
	SV2017ParserKW_RANDCASE              = 196
	SV2017ParserKW_RANDOMIZE             = 197
	SV2017ParserKW_RANDSEQUENCE          = 198
	SV2017ParserKW_RCMOS                 = 199
	SV2017ParserKW_REAL                  = 200
	SV2017ParserKW_REALTIME              = 201
	SV2017ParserKW_REF                   = 202
	SV2017ParserKW_REG                   = 203
	SV2017ParserKW_REJECT_ON             = 204
	SV2017ParserKW_RELEASE               = 205
	SV2017ParserKW_REPEAT                = 206
	SV2017ParserKW_RESTRICT              = 207
	SV2017ParserKW_RETURN                = 208
	SV2017ParserKW_RNMOS                 = 209
	SV2017ParserKW_RPMOS                 = 210
	SV2017ParserKW_RTRAN                 = 211
	SV2017ParserKW_RTRANIF0              = 212
	SV2017ParserKW_RTRANIF1              = 213
	SV2017ParserKW_S_ALWAYS              = 214
	SV2017ParserKW_S_EVENTUALLY          = 215
	SV2017ParserKW_S_NEXTTIME            = 216
	SV2017ParserKW_S_UNTIL               = 217
	SV2017ParserKW_S_UNTIL_WITH          = 218
	SV2017ParserKW_SAMPLE                = 219
	SV2017ParserKW_SCALARED              = 220
	SV2017ParserKW_SEQUENCE              = 221
	SV2017ParserKW_SHORTINT              = 222
	SV2017ParserKW_SHORTREAL             = 223
	SV2017ParserKW_SHOWCANCELLED         = 224
	SV2017ParserKW_SIGNED                = 225
	SV2017ParserKW_SMALL                 = 226
	SV2017ParserKW_SOFT                  = 227
	SV2017ParserKW_SOLVE                 = 228
	SV2017ParserKW_SPECIFY               = 229
	SV2017ParserKW_SPECPARAM             = 230
	SV2017ParserKW_STATIC                = 231
	SV2017ParserKW_STD                   = 232
	SV2017ParserKW_STRING                = 233
	SV2017ParserKW_STRONG                = 234
	SV2017ParserKW_STRONG0               = 235
	SV2017ParserKW_STRONG1               = 236
	SV2017ParserKW_STRUCT                = 237
	SV2017ParserKW_SUPER                 = 238
	SV2017ParserKW_SUPPLY0               = 239
	SV2017ParserKW_SUPPLY1               = 240
	SV2017ParserKW_SYNC_ACCEPT_ON        = 241
	SV2017ParserKW_SYNC_REJECT_ON        = 242
	SV2017ParserKW_TABLE                 = 243
	SV2017ParserKW_TAGGED                = 244
	SV2017ParserKW_TASK                  = 245
	SV2017ParserKW_THIS                  = 246
	SV2017ParserKW_THROUGHOUT            = 247
	SV2017ParserKW_TIME                  = 248
	SV2017ParserKW_TIMEPRECISION         = 249
	SV2017ParserKW_TIMEUNIT              = 250
	SV2017ParserKW_TRAN                  = 251
	SV2017ParserKW_TRANIF0               = 252
	SV2017ParserKW_TRANIF1               = 253
	SV2017ParserKW_TRI                   = 254
	SV2017ParserKW_TRI0                  = 255
	SV2017ParserKW_TRI1                  = 256
	SV2017ParserKW_TRIAND                = 257
	SV2017ParserKW_TRIOR                 = 258
	SV2017ParserKW_TRIREG                = 259
	SV2017ParserKW_TYPE                  = 260
	SV2017ParserKW_TYPE_OPTION           = 261
	SV2017ParserKW_TYPEDEF               = 262
	SV2017ParserKW_UNION                 = 263
	SV2017ParserKW_UNIQUE                = 264
	SV2017ParserKW_UNIQUE0               = 265
	SV2017ParserKW_UNSIGNED              = 266
	SV2017ParserKW_UNTIL                 = 267
	SV2017ParserKW_UNTIL_WITH            = 268
	SV2017ParserKW_UNTYPED               = 269
	SV2017ParserKW_USE                   = 270
	SV2017ParserKW_UWIRE                 = 271
	SV2017ParserKW_VAR                   = 272
	SV2017ParserKW_VECTORED              = 273
	SV2017ParserKW_VIRTUAL               = 274
	SV2017ParserKW_VOID                  = 275
	SV2017ParserKW_WAIT                  = 276
	SV2017ParserKW_WAIT_ORDER            = 277
	SV2017ParserKW_WAND                  = 278
	SV2017ParserKW_WEAK                  = 279
	SV2017ParserKW_WEAK0                 = 280
	SV2017ParserKW_WEAK1                 = 281
	SV2017ParserKW_WHILE                 = 282
	SV2017ParserKW_WILDCARD              = 283
	SV2017ParserKW_WIRE                  = 284
	SV2017ParserKW_WITH                  = 285
	SV2017ParserKW_WITHIN                = 286
	SV2017ParserKW_WOR                   = 287
	SV2017ParserKW_XNOR                  = 288
	SV2017ParserKW_XOR                   = 289
	SV2017ParserEDGE_CONTROL_SPECIFIER   = 290
	SV2017ParserTIME_LITERAL             = 291
	SV2017ParserANY_BASED_NUMBER         = 292
	SV2017ParserBASED_NUMBER_WITH_SIZE   = 293
	SV2017ParserREAL_NUMBER_WITH_EXP     = 294
	SV2017ParserFIXED_POINT_NUMBER       = 295
	SV2017ParserUNSIGNED_NUMBER          = 296
	SV2017ParserUNBASED_UNSIZED_LITERAL  = 297
	SV2017ParserSTRING_LITERAL           = 298
	SV2017ParserC_IDENTIFIER             = 299
	SV2017ParserTICK                     = 300
	SV2017ParserTICK_IDENTIFIER          = 301
	SV2017ParserESCAPED_IDENTIFIER       = 302
	SV2017ParserSIMPLE_IDENTIFIER        = 303
	SV2017ParserSYSTEM_TF_IDENTIFIER     = 304
	SV2017ParserSEMI                     = 305
	SV2017ParserLPAREN                   = 306
	SV2017ParserRPAREN                   = 307
	SV2017ParserLSQUARE_BR               = 308
	SV2017ParserRSQUARE_BR               = 309
	SV2017ParserLBRACE                   = 310
	SV2017ParserRBRACE                   = 311
	SV2017ParserAPOSTROPHE               = 312
	SV2017ParserAPOSTROPHE_LBRACE        = 313
	SV2017ParserSHIFT_LEFT               = 314
	SV2017ParserSHIFT_RIGHT              = 315
	SV2017ParserARITH_SHIFT_LEFT         = 316
	SV2017ParserARITH_SHIFT_RIGHT        = 317
	SV2017ParserDOLAR                    = 318
	SV2017ParserMOD                      = 319
	SV2017ParserNOT                      = 320
	SV2017ParserNEG                      = 321
	SV2017ParserNAND                     = 322
	SV2017ParserNOR                      = 323
	SV2017ParserXOR                      = 324
	SV2017ParserNXOR                     = 325
	SV2017ParserXORN                     = 326
	SV2017ParserCOMMA                    = 327
	SV2017ParserDOT                      = 328
	SV2017ParserQUESTIONMARK             = 329
	SV2017ParserCOLON                    = 330
	SV2017ParserDOUBLE_COLON             = 331
	SV2017ParserEQ                       = 332
	SV2017ParserNEQ                      = 333
	SV2017ParserCASE_EQ                  = 334
	SV2017ParserCASE_NEQ                 = 335
	SV2017ParserWILDCARD_EQ              = 336
	SV2017ParserWILDCARD_NEQ             = 337
	SV2017ParserASSIGN                   = 338
	SV2017ParserLT                       = 339
	SV2017ParserGT                       = 340
	SV2017ParserGE                       = 341
	SV2017ParserLE                       = 342
	SV2017ParserPLUS_ASSIGN              = 343
	SV2017ParserMINUS_ASSIGN             = 344
	SV2017ParserMUL_ASSIGN               = 345
	SV2017ParserDIV_ASSIGN               = 346
	SV2017ParserMOD_ASSIGN               = 347
	SV2017ParserAND_ASSIGN               = 348
	SV2017ParserOR_ASSIGN                = 349
	SV2017ParserXOR_ASSIGN               = 350
	SV2017ParserSHIFT_LEFT_ASSIGN        = 351
	SV2017ParserSHIFT_RIGHT_ASSIGN       = 352
	SV2017ParserARITH_SHIFT_LEFT_ASSIGN  = 353
	SV2017ParserARITH_SHIFT_RIGHT_ASSIGN = 354
	SV2017ParserPLUS                     = 355
	SV2017ParserMINUS                    = 356
	SV2017ParserAMPERSAND                = 357
	SV2017ParserLOG_AND                  = 358
	SV2017ParserBAR                      = 359
	SV2017ParserLOG_OR                   = 360
	SV2017ParserBACKSLASH                = 361
	SV2017ParserMUL                      = 362
	SV2017ParserDIV                      = 363
	SV2017ParserDOUBLESTAR               = 364
	SV2017ParserBI_DIR_ARROW             = 365
	SV2017ParserARROW                    = 366
	SV2017ParserDOUBLE_RIGHT_ARROW       = 367
	SV2017ParserINCR                     = 368
	SV2017ParserDECR                     = 369
	SV2017ParserDIST_WEIGHT_ASSIGN       = 370
	SV2017ParserOVERLAPPING_IMPL         = 371
	SV2017ParserNONOVERLAPPING_IMPL      = 372
	SV2017ParserIMPLIES                  = 373
	SV2017ParserIMPLIES_P                = 374
	SV2017ParserIMPLIES_N                = 375
	SV2017ParserPATH_FULL                = 376
	SV2017ParserHASH_MINUS_HASH          = 377
	SV2017ParserHASH_EQ_HASH             = 378
	SV2017ParserAT                       = 379
	SV2017ParserDOUBLE_AT                = 380
	SV2017ParserHASH                     = 381
	SV2017ParserDOUBLE_HASH              = 382
	SV2017ParserTRIPLE_AND               = 383
	SV2017ParserONE_LINE_COMMENT         = 384
	SV2017ParserBLOCK_COMMENT            = 385
	SV2017ParserWHITE_SPACE              = 386
	SV2017ParserKW_ENDTABLE              = 387
	SV2017ParserLEVEL_SYMBOL             = 388
	SV2017ParserEDGE_SYMBOL              = 389
)

// SV2017Parser rules.
const (
	SV2017ParserRULE_source_text                                         = 0
	SV2017ParserRULE_description                                         = 1
	SV2017ParserRULE_header_text                                         = 2
	SV2017ParserRULE_design_attribute                                    = 3
	SV2017ParserRULE_compiler_directive                                  = 4
	SV2017ParserRULE_time_num                                            = 5
	SV2017ParserRULE_time_lit                                            = 6
	SV2017ParserRULE_timescale_compiler_directive                        = 7
	SV2017ParserRULE_default_nettype_statement                           = 8
	SV2017ParserRULE_include_svh                                         = 9
	SV2017ParserRULE_assignment_operator                                 = 10
	SV2017ParserRULE_edge_identifier                                     = 11
	SV2017ParserRULE_identifier                                          = 12
	SV2017ParserRULE_integer_type                                        = 13
	SV2017ParserRULE_integer_atom_type                                   = 14
	SV2017ParserRULE_integer_vector_type                                 = 15
	SV2017ParserRULE_non_integer_type                                    = 16
	SV2017ParserRULE_net_type                                            = 17
	SV2017ParserRULE_unary_module_path_operator                          = 18
	SV2017ParserRULE_unary_operator                                      = 19
	SV2017ParserRULE_inc_or_dec_operator                                 = 20
	SV2017ParserRULE_implicit_class_handle                               = 21
	SV2017ParserRULE_integral_number                                     = 22
	SV2017ParserRULE_real_number                                         = 23
	SV2017ParserRULE_any_system_tf_identifier                            = 24
	SV2017ParserRULE_signing                                             = 25
	SV2017ParserRULE_number                                              = 26
	SV2017ParserRULE_timeunits_declaration                               = 27
	SV2017ParserRULE_lifetime                                            = 28
	SV2017ParserRULE_port_direction                                      = 29
	SV2017ParserRULE_always_keyword                                      = 30
	SV2017ParserRULE_join_keyword                                        = 31
	SV2017ParserRULE_unique_priority                                     = 32
	SV2017ParserRULE_drive_strength                                      = 33
	SV2017ParserRULE_strength0                                           = 34
	SV2017ParserRULE_strength1                                           = 35
	SV2017ParserRULE_charge_strength                                     = 36
	SV2017ParserRULE_sequence_lvar_port_direction                        = 37
	SV2017ParserRULE_bins_keyword                                        = 38
	SV2017ParserRULE_class_item_qualifier                                = 39
	SV2017ParserRULE_random_qualifier                                    = 40
	SV2017ParserRULE_property_qualifier                                  = 41
	SV2017ParserRULE_method_qualifier                                    = 42
	SV2017ParserRULE_constraint_prototype_qualifier                      = 43
	SV2017ParserRULE_cmos_switchtype                                     = 44
	SV2017ParserRULE_enable_gatetype                                     = 45
	SV2017ParserRULE_mos_switchtype                                      = 46
	SV2017ParserRULE_n_input_gatetype                                    = 47
	SV2017ParserRULE_n_output_gatetype                                   = 48
	SV2017ParserRULE_pass_en_switchtype                                  = 49
	SV2017ParserRULE_pass_switchtype                                     = 50
	SV2017ParserRULE_any_implication                                     = 51
	SV2017ParserRULE_polarity_operator                                   = 52
	SV2017ParserRULE_timing_check_event_control                          = 53
	SV2017ParserRULE_import_export                                       = 54
	SV2017ParserRULE_array_method_name                                   = 55
	SV2017ParserRULE_operator_mul_div_mod                                = 56
	SV2017ParserRULE_operator_plus_minus                                 = 57
	SV2017ParserRULE_operator_shift                                      = 58
	SV2017ParserRULE_operator_cmp                                        = 59
	SV2017ParserRULE_operator_eq_neq                                     = 60
	SV2017ParserRULE_operator_xor                                        = 61
	SV2017ParserRULE_operator_impl                                       = 62
	SV2017ParserRULE_udp_nonansi_declaration                             = 63
	SV2017ParserRULE_udp_ansi_declaration                                = 64
	SV2017ParserRULE_udp_declaration                                     = 65
	SV2017ParserRULE_udp_declaration_port_list                           = 66
	SV2017ParserRULE_udp_port_declaration                                = 67
	SV2017ParserRULE_udp_output_declaration                              = 68
	SV2017ParserRULE_udp_input_declaration                               = 69
	SV2017ParserRULE_udp_reg_declaration                                 = 70
	SV2017ParserRULE_udp_body                                            = 71
	SV2017ParserRULE_combinational_body                                  = 72
	SV2017ParserRULE_combinational_entry                                 = 73
	SV2017ParserRULE_sequential_body                                     = 74
	SV2017ParserRULE_udp_initial_statement                               = 75
	SV2017ParserRULE_sequential_entry                                    = 76
	SV2017ParserRULE_seq_input_list                                      = 77
	SV2017ParserRULE_level_input_list                                    = 78
	SV2017ParserRULE_edge_input_list                                     = 79
	SV2017ParserRULE_edge_indicator                                      = 80
	SV2017ParserRULE_current_state                                       = 81
	SV2017ParserRULE_next_state                                          = 82
	SV2017ParserRULE_interface_declaration                               = 83
	SV2017ParserRULE_interface_header                                    = 84
	SV2017ParserRULE_interface_item                                      = 85
	SV2017ParserRULE_modport_declaration                                 = 86
	SV2017ParserRULE_modport_item                                        = 87
	SV2017ParserRULE_modport_ports_declaration                           = 88
	SV2017ParserRULE_modport_clocking_declaration                        = 89
	SV2017ParserRULE_modport_simple_ports_declaration                    = 90
	SV2017ParserRULE_modport_simple_port                                 = 91
	SV2017ParserRULE_modport_tf_ports_declaration                        = 92
	SV2017ParserRULE_modport_tf_port                                     = 93
	SV2017ParserRULE_statement_or_null                                   = 94
	SV2017ParserRULE_initial_construct                                   = 95
	SV2017ParserRULE_default_clocking_or_dissable_construct              = 96
	SV2017ParserRULE_statement                                           = 97
	SV2017ParserRULE_statement_item                                      = 98
	SV2017ParserRULE_macro_statement                                     = 99
	SV2017ParserRULE_cycle_delay                                         = 100
	SV2017ParserRULE_clocking_drive                                      = 101
	SV2017ParserRULE_clockvar_expression                                 = 102
	SV2017ParserRULE_final_construct                                     = 103
	SV2017ParserRULE_blocking_assignment                                 = 104
	SV2017ParserRULE_procedural_timing_control_statement                 = 105
	SV2017ParserRULE_procedural_timing_control                           = 106
	SV2017ParserRULE_event_control                                       = 107
	SV2017ParserRULE_delay_or_event_control                              = 108
	SV2017ParserRULE_delay3                                              = 109
	SV2017ParserRULE_delay2                                              = 110
	SV2017ParserRULE_delay_value                                         = 111
	SV2017ParserRULE_delay_control                                       = 112
	SV2017ParserRULE_nonblocking_assignment                              = 113
	SV2017ParserRULE_procedural_continuous_assignment                    = 114
	SV2017ParserRULE_variable_assignment                                 = 115
	SV2017ParserRULE_action_block                                        = 116
	SV2017ParserRULE_seq_block                                           = 117
	SV2017ParserRULE_par_block                                           = 118
	SV2017ParserRULE_case_statement                                      = 119
	SV2017ParserRULE_case_keyword                                        = 120
	SV2017ParserRULE_case_item                                           = 121
	SV2017ParserRULE_case_pattern_item                                   = 122
	SV2017ParserRULE_case_inside_item                                    = 123
	SV2017ParserRULE_randcase_statement                                  = 124
	SV2017ParserRULE_randcase_item                                       = 125
	SV2017ParserRULE_cond_predicate                                      = 126
	SV2017ParserRULE_conditional_statement                               = 127
	SV2017ParserRULE_subroutine_call_statement                           = 128
	SV2017ParserRULE_disable_statement                                   = 129
	SV2017ParserRULE_event_trigger                                       = 130
	SV2017ParserRULE_loop_statement                                      = 131
	SV2017ParserRULE_list_of_variable_assignments                        = 132
	SV2017ParserRULE_for_initialization                                  = 133
	SV2017ParserRULE_for_variable_declaration_var_assign                 = 134
	SV2017ParserRULE_for_variable_declaration                            = 135
	SV2017ParserRULE_for_step                                            = 136
	SV2017ParserRULE_loop_variables                                      = 137
	SV2017ParserRULE_jump_statement                                      = 138
	SV2017ParserRULE_wait_statement                                      = 139
	SV2017ParserRULE_name_of_instance                                    = 140
	SV2017ParserRULE_checker_instantiation                               = 141
	SV2017ParserRULE_list_of_checker_port_connections                    = 142
	SV2017ParserRULE_ordered_checker_port_connection                     = 143
	SV2017ParserRULE_named_checker_port_connection                       = 144
	SV2017ParserRULE_procedural_assertion_statement                      = 145
	SV2017ParserRULE_concurrent_assertion_statement                      = 146
	SV2017ParserRULE_assertion_item                                      = 147
	SV2017ParserRULE_concurrent_assertion_item                           = 148
	SV2017ParserRULE_immediate_assertion_statement                       = 149
	SV2017ParserRULE_simple_immediate_assertion_statement                = 150
	SV2017ParserRULE_simple_immediate_assert_statement                   = 151
	SV2017ParserRULE_simple_immediate_assume_statement                   = 152
	SV2017ParserRULE_simple_immediate_cover_statement                    = 153
	SV2017ParserRULE_deferred_immediate_assertion_statement              = 154
	SV2017ParserRULE_primitive_delay                                     = 155
	SV2017ParserRULE_deferred_immediate_assert_statement                 = 156
	SV2017ParserRULE_deferred_immediate_assume_statement                 = 157
	SV2017ParserRULE_deferred_immediate_cover_statement                  = 158
	SV2017ParserRULE_weight_specification                                = 159
	SV2017ParserRULE_production_item                                     = 160
	SV2017ParserRULE_rs_code_block                                       = 161
	SV2017ParserRULE_randsequence_statement                              = 162
	SV2017ParserRULE_rs_prod                                             = 163
	SV2017ParserRULE_rs_if_else                                          = 164
	SV2017ParserRULE_rs_repeat                                           = 165
	SV2017ParserRULE_rs_case                                             = 166
	SV2017ParserRULE_rs_case_item                                        = 167
	SV2017ParserRULE_rs_rule                                             = 168
	SV2017ParserRULE_rs_production_list                                  = 169
	SV2017ParserRULE_production                                          = 170
	SV2017ParserRULE_tf_item_declaration                                 = 171
	SV2017ParserRULE_tf_port_list                                        = 172
	SV2017ParserRULE_tf_port_item                                        = 173
	SV2017ParserRULE_tf_port_direction                                   = 174
	SV2017ParserRULE_tf_port_declaration                                 = 175
	SV2017ParserRULE_list_of_tf_variable_identifiers_item                = 176
	SV2017ParserRULE_list_of_tf_variable_identifiers                     = 177
	SV2017ParserRULE_expect_property_statement                           = 178
	SV2017ParserRULE_block_item_declaration                              = 179
	SV2017ParserRULE_param_assignment                                    = 180
	SV2017ParserRULE_type_assignment                                     = 181
	SV2017ParserRULE_list_of_type_assignments                            = 182
	SV2017ParserRULE_list_of_param_assignments                           = 183
	SV2017ParserRULE_parameter_declaration_primitive                     = 184
	SV2017ParserRULE_local_parameter_declaration                         = 185
	SV2017ParserRULE_parameter_declaration                               = 186
	SV2017ParserRULE_type_declaration                                    = 187
	SV2017ParserRULE_net_type_declaration                                = 188
	SV2017ParserRULE_let_declaration                                     = 189
	SV2017ParserRULE_let_port_list                                       = 190
	SV2017ParserRULE_let_port_item                                       = 191
	SV2017ParserRULE_let_formal_type                                     = 192
	SV2017ParserRULE_package_import_declaration                          = 193
	SV2017ParserRULE_package_import_item                                 = 194
	SV2017ParserRULE_property_list_of_arguments                          = 195
	SV2017ParserRULE_property_actual_arg                                 = 196
	SV2017ParserRULE_property_formal_type                                = 197
	SV2017ParserRULE_sequence_formal_type                                = 198
	SV2017ParserRULE_property_instance                                   = 199
	SV2017ParserRULE_property_spec                                       = 200
	SV2017ParserRULE_property_expr                                       = 201
	SV2017ParserRULE_property_case_item                                  = 202
	SV2017ParserRULE_bit_select                                          = 203
	SV2017ParserRULE_identifier_with_bit_select                          = 204
	SV2017ParserRULE_package_or_class_scoped_hier_id_with_select         = 205
	SV2017ParserRULE_package_or_class_scoped_path_item                   = 206
	SV2017ParserRULE_package_or_class_scoped_path                        = 207
	SV2017ParserRULE_hierarchical_identifier                             = 208
	SV2017ParserRULE_package_or_class_scoped_id                          = 209
	SV2017ParserRULE_select_                                             = 210
	SV2017ParserRULE_event_expression_item                               = 211
	SV2017ParserRULE_event_expression                                    = 212
	SV2017ParserRULE_boolean_abbrev                                      = 213
	SV2017ParserRULE_sequence_abbrev                                     = 214
	SV2017ParserRULE_consecutive_repetition                              = 215
	SV2017ParserRULE_non_consecutive_repetition                          = 216
	SV2017ParserRULE_goto_repetition                                     = 217
	SV2017ParserRULE_cycle_delay_const_range_expression                  = 218
	SV2017ParserRULE_sequence_instance                                   = 219
	SV2017ParserRULE_sequence_expr                                       = 220
	SV2017ParserRULE_sequence_match_item                                 = 221
	SV2017ParserRULE_operator_assignment                                 = 222
	SV2017ParserRULE_sequence_actual_arg                                 = 223
	SV2017ParserRULE_dist_weight                                         = 224
	SV2017ParserRULE_clocking_declaration                                = 225
	SV2017ParserRULE_clocking_item                                       = 226
	SV2017ParserRULE_list_of_clocking_decl_assign                        = 227
	SV2017ParserRULE_clocking_decl_assign                                = 228
	SV2017ParserRULE_default_skew                                        = 229
	SV2017ParserRULE_clocking_direction                                  = 230
	SV2017ParserRULE_clocking_skew                                       = 231
	SV2017ParserRULE_clocking_event                                      = 232
	SV2017ParserRULE_cycle_delay_range                                   = 233
	SV2017ParserRULE_expression_or_dist                                  = 234
	SV2017ParserRULE_covergroup_declaration                              = 235
	SV2017ParserRULE_cover_cross                                         = 236
	SV2017ParserRULE_identifier_list_2plus                               = 237
	SV2017ParserRULE_cross_body                                          = 238
	SV2017ParserRULE_cross_body_item                                     = 239
	SV2017ParserRULE_bins_selection_or_option                            = 240
	SV2017ParserRULE_bins_selection                                      = 241
	SV2017ParserRULE_select_expression                                   = 242
	SV2017ParserRULE_select_condition                                    = 243
	SV2017ParserRULE_bins_expression                                     = 244
	SV2017ParserRULE_covergroup_range_list                               = 245
	SV2017ParserRULE_covergroup_value_range                              = 246
	SV2017ParserRULE_covergroup_expression                               = 247
	SV2017ParserRULE_coverage_spec_or_option                             = 248
	SV2017ParserRULE_coverage_option                                     = 249
	SV2017ParserRULE_coverage_spec                                       = 250
	SV2017ParserRULE_cover_point                                         = 251
	SV2017ParserRULE_bins_or_empty                                       = 252
	SV2017ParserRULE_bins_or_options                                     = 253
	SV2017ParserRULE_trans_list                                          = 254
	SV2017ParserRULE_trans_set                                           = 255
	SV2017ParserRULE_trans_range_list                                    = 256
	SV2017ParserRULE_repeat_range                                        = 257
	SV2017ParserRULE_coverage_event                                      = 258
	SV2017ParserRULE_block_event_expression                              = 259
	SV2017ParserRULE_hierarchical_btf_identifier                         = 260
	SV2017ParserRULE_assertion_variable_declaration                      = 261
	SV2017ParserRULE_dist_item                                           = 262
	SV2017ParserRULE_value_range                                         = 263
	SV2017ParserRULE_attribute_instance                                  = 264
	SV2017ParserRULE_attr_spec                                           = 265
	SV2017ParserRULE_class_new                                           = 266
	SV2017ParserRULE_param_expression                                    = 267
	SV2017ParserRULE_constant_param_expression                           = 268
	SV2017ParserRULE_unpacked_dimension                                  = 269
	SV2017ParserRULE_packed_dimension                                    = 270
	SV2017ParserRULE_variable_dimension                                  = 271
	SV2017ParserRULE_struct_union                                        = 272
	SV2017ParserRULE_enum_base_type                                      = 273
	SV2017ParserRULE_data_type_primitive                                 = 274
	SV2017ParserRULE_data_type_usual                                     = 275
	SV2017ParserRULE_data_type                                           = 276
	SV2017ParserRULE_data_type_or_implicit                               = 277
	SV2017ParserRULE_implicit_data_type                                  = 278
	SV2017ParserRULE_sequence_list_of_arguments_named_item               = 279
	SV2017ParserRULE_sequence_list_of_arguments                          = 280
	SV2017ParserRULE_list_of_arguments_named_item                        = 281
	SV2017ParserRULE_list_of_arguments                                   = 282
	SV2017ParserRULE_primary_literal                                     = 283
	SV2017ParserRULE_type_reference                                      = 284
	SV2017ParserRULE_package_scope                                       = 285
	SV2017ParserRULE_ps_identifier                                       = 286
	SV2017ParserRULE_list_of_parameter_value_assignments                 = 287
	SV2017ParserRULE_parameter_value_assignment                          = 288
	SV2017ParserRULE_class_type                                          = 289
	SV2017ParserRULE_class_scope                                         = 290
	SV2017ParserRULE_range_expression                                    = 291
	SV2017ParserRULE_constant_range_expression                           = 292
	SV2017ParserRULE_constant_mintypmax_expression                       = 293
	SV2017ParserRULE_mintypmax_expression                                = 294
	SV2017ParserRULE_named_parameter_assignment                          = 295
	SV2017ParserRULE_primary                                             = 296
	SV2017ParserRULE_constant_expression                                 = 297
	SV2017ParserRULE_inc_or_dec_expression                               = 298
	SV2017ParserRULE_expression                                          = 299
	SV2017ParserRULE_concatenation                                       = 300
	SV2017ParserRULE_dynamic_array_new                                   = 301
	SV2017ParserRULE_const_or_range_expression                           = 302
	SV2017ParserRULE_variable_decl_assignment                            = 303
	SV2017ParserRULE_assignment_pattern_variable_lvalue                  = 304
	SV2017ParserRULE_stream_operator                                     = 305
	SV2017ParserRULE_slice_size                                          = 306
	SV2017ParserRULE_streaming_concatenation                             = 307
	SV2017ParserRULE_stream_concatenation                                = 308
	SV2017ParserRULE_stream_expression                                   = 309
	SV2017ParserRULE_array_range_expression                              = 310
	SV2017ParserRULE_open_range_list                                     = 311
	SV2017ParserRULE_pattern                                             = 312
	SV2017ParserRULE_assignment_pattern                                  = 313
	SV2017ParserRULE_structure_pattern_key                               = 314
	SV2017ParserRULE_array_pattern_key                                   = 315
	SV2017ParserRULE_assignment_pattern_key                              = 316
	SV2017ParserRULE_struct_union_member                                 = 317
	SV2017ParserRULE_data_type_or_void                                   = 318
	SV2017ParserRULE_enum_name_declaration                               = 319
	SV2017ParserRULE_assignment_pattern_expression                       = 320
	SV2017ParserRULE_assignment_pattern_expression_type                  = 321
	SV2017ParserRULE_net_lvalue                                          = 322
	SV2017ParserRULE_variable_lvalue                                     = 323
	SV2017ParserRULE_solve_before_list                                   = 324
	SV2017ParserRULE_constraint_block_item                               = 325
	SV2017ParserRULE_constraint_expression                               = 326
	SV2017ParserRULE_uniqueness_constraint                               = 327
	SV2017ParserRULE_constraint_set                                      = 328
	SV2017ParserRULE_randomize_call                                      = 329
	SV2017ParserRULE_module_header_common                                = 330
	SV2017ParserRULE_module_declaration                                  = 331
	SV2017ParserRULE_module_keyword                                      = 332
	SV2017ParserRULE_net_port_type                                       = 333
	SV2017ParserRULE_var_data_type                                       = 334
	SV2017ParserRULE_net_or_var_data_type                                = 335
	SV2017ParserRULE_list_of_defparam_assignments                        = 336
	SV2017ParserRULE_list_of_net_decl_assignments                        = 337
	SV2017ParserRULE_list_of_specparam_assignments                       = 338
	SV2017ParserRULE_list_of_variable_decl_assignments                   = 339
	SV2017ParserRULE_list_of_variable_identifiers_item                   = 340
	SV2017ParserRULE_list_of_variable_identifiers                        = 341
	SV2017ParserRULE_list_of_variable_port_identifiers                   = 342
	SV2017ParserRULE_defparam_assignment                                 = 343
	SV2017ParserRULE_net_decl_assignment                                 = 344
	SV2017ParserRULE_specparam_assignment                                = 345
	SV2017ParserRULE_error_limit_value                                   = 346
	SV2017ParserRULE_reject_limit_value                                  = 347
	SV2017ParserRULE_pulse_control_specparam                             = 348
	SV2017ParserRULE_identifier_doted_index_at_end                       = 349
	SV2017ParserRULE_specify_terminal_descriptor                         = 350
	SV2017ParserRULE_specify_input_terminal_descriptor                   = 351
	SV2017ParserRULE_specify_output_terminal_descriptor                  = 352
	SV2017ParserRULE_specify_item                                        = 353
	SV2017ParserRULE_pulsestyle_declaration                              = 354
	SV2017ParserRULE_showcancelled_declaration                           = 355
	SV2017ParserRULE_path_declaration                                    = 356
	SV2017ParserRULE_simple_path_declaration                             = 357
	SV2017ParserRULE_path_delay_value                                    = 358
	SV2017ParserRULE_list_of_path_outputs                                = 359
	SV2017ParserRULE_list_of_path_inputs                                 = 360
	SV2017ParserRULE_list_of_paths                                       = 361
	SV2017ParserRULE_list_of_path_delay_expressions                      = 362
	SV2017ParserRULE_t_path_delay_expression                             = 363
	SV2017ParserRULE_trise_path_delay_expression                         = 364
	SV2017ParserRULE_tfall_path_delay_expression                         = 365
	SV2017ParserRULE_tz_path_delay_expression                            = 366
	SV2017ParserRULE_t01_path_delay_expression                           = 367
	SV2017ParserRULE_t10_path_delay_expression                           = 368
	SV2017ParserRULE_t0z_path_delay_expression                           = 369
	SV2017ParserRULE_tz1_path_delay_expression                           = 370
	SV2017ParserRULE_t1z_path_delay_expression                           = 371
	SV2017ParserRULE_tz0_path_delay_expression                           = 372
	SV2017ParserRULE_t0x_path_delay_expression                           = 373
	SV2017ParserRULE_tx1_path_delay_expression                           = 374
	SV2017ParserRULE_t1x_path_delay_expression                           = 375
	SV2017ParserRULE_tx0_path_delay_expression                           = 376
	SV2017ParserRULE_txz_path_delay_expression                           = 377
	SV2017ParserRULE_tzx_path_delay_expression                           = 378
	SV2017ParserRULE_parallel_path_description                           = 379
	SV2017ParserRULE_full_path_description                               = 380
	SV2017ParserRULE_identifier_list                                     = 381
	SV2017ParserRULE_specparam_declaration                               = 382
	SV2017ParserRULE_edge_sensitive_path_declaration                     = 383
	SV2017ParserRULE_parallel_edge_sensitive_path_description            = 384
	SV2017ParserRULE_full_edge_sensitive_path_description                = 385
	SV2017ParserRULE_data_source_expression                              = 386
	SV2017ParserRULE_data_declaration                                    = 387
	SV2017ParserRULE_module_path_expression                              = 388
	SV2017ParserRULE_state_dependent_path_declaration                    = 389
	SV2017ParserRULE_package_export_declaration                          = 390
	SV2017ParserRULE_genvar_declaration                                  = 391
	SV2017ParserRULE_net_declaration                                     = 392
	SV2017ParserRULE_parameter_port_list                                 = 393
	SV2017ParserRULE_parameter_port_declaration                          = 394
	SV2017ParserRULE_list_of_port_declarations_ansi_item                 = 395
	SV2017ParserRULE_list_of_port_declarations                           = 396
	SV2017ParserRULE_nonansi_port_declaration                            = 397
	SV2017ParserRULE_nonansi_port                                        = 398
	SV2017ParserRULE_nonansi_port__expr                                  = 399
	SV2017ParserRULE_port_identifier                                     = 400
	SV2017ParserRULE_ansi_port_declaration                               = 401
	SV2017ParserRULE_system_timing_check                                 = 402
	SV2017ParserRULE_dolar_setup_timing_check                            = 403
	SV2017ParserRULE_dolar_hold_timing_check                             = 404
	SV2017ParserRULE_dolar_setuphold_timing_check                        = 405
	SV2017ParserRULE_dolar_recovery_timing_check                         = 406
	SV2017ParserRULE_dolar_removal_timing_check                          = 407
	SV2017ParserRULE_dolar_recrem_timing_check                           = 408
	SV2017ParserRULE_dolar_skew_timing_check                             = 409
	SV2017ParserRULE_dolar_timeskew_timing_check                         = 410
	SV2017ParserRULE_dolar_fullskew_timing_check                         = 411
	SV2017ParserRULE_dolar_period_timing_check                           = 412
	SV2017ParserRULE_dolar_width_timing_check                            = 413
	SV2017ParserRULE_dolar_nochange_timing_check                         = 414
	SV2017ParserRULE_timecheck_condition                                 = 415
	SV2017ParserRULE_controlled_reference_event                          = 416
	SV2017ParserRULE_delayed_reference                                   = 417
	SV2017ParserRULE_end_edge_offset                                     = 418
	SV2017ParserRULE_event_based_flag                                    = 419
	SV2017ParserRULE_notifier                                            = 420
	SV2017ParserRULE_remain_active_flag                                  = 421
	SV2017ParserRULE_timestamp_condition                                 = 422
	SV2017ParserRULE_start_edge_offset                                   = 423
	SV2017ParserRULE_threshold                                           = 424
	SV2017ParserRULE_timing_check_limit                                  = 425
	SV2017ParserRULE_timing_check_event                                  = 426
	SV2017ParserRULE_timing_check_condition                              = 427
	SV2017ParserRULE_scalar_timing_check_condition                       = 428
	SV2017ParserRULE_controlled_timing_check_event                       = 429
	SV2017ParserRULE_function_data_type_or_implicit                      = 430
	SV2017ParserRULE_extern_tf_declaration                               = 431
	SV2017ParserRULE_function_declaration                                = 432
	SV2017ParserRULE_task_prototype                                      = 433
	SV2017ParserRULE_function_prototype                                  = 434
	SV2017ParserRULE_dpi_import_export                                   = 435
	SV2017ParserRULE_dpi_function_import_property                        = 436
	SV2017ParserRULE_dpi_task_import_property                            = 437
	SV2017ParserRULE_task_and_function_declaration_common                = 438
	SV2017ParserRULE_task_declaration                                    = 439
	SV2017ParserRULE_method_prototype                                    = 440
	SV2017ParserRULE_extern_constraint_declaration                       = 441
	SV2017ParserRULE_constraint_block                                    = 442
	SV2017ParserRULE_checker_port_list                                   = 443
	SV2017ParserRULE_checker_port_item                                   = 444
	SV2017ParserRULE_checker_port_direction                              = 445
	SV2017ParserRULE_checker_declaration                                 = 446
	SV2017ParserRULE_class_declaration                                   = 447
	SV2017ParserRULE_always_construct                                    = 448
	SV2017ParserRULE_interface_class_type                                = 449
	SV2017ParserRULE_interface_class_declaration                         = 450
	SV2017ParserRULE_interface_class_item                                = 451
	SV2017ParserRULE_interface_class_method                              = 452
	SV2017ParserRULE_package_declaration                                 = 453
	SV2017ParserRULE_package_item                                        = 454
	SV2017ParserRULE_package_item_item                                   = 455
	SV2017ParserRULE_program_declaration                                 = 456
	SV2017ParserRULE_program_header                                      = 457
	SV2017ParserRULE_program_item                                        = 458
	SV2017ParserRULE_non_port_program_item                               = 459
	SV2017ParserRULE_anonymous_program                                   = 460
	SV2017ParserRULE_anonymous_program_item                              = 461
	SV2017ParserRULE_sequence_declaration                                = 462
	SV2017ParserRULE_sequence_port_list                                  = 463
	SV2017ParserRULE_sequence_port_item                                  = 464
	SV2017ParserRULE_property_declaration                                = 465
	SV2017ParserRULE_property_port_list                                  = 466
	SV2017ParserRULE_property_port_item                                  = 467
	SV2017ParserRULE_continuous_assign                                   = 468
	SV2017ParserRULE_checker_or_generate_item                            = 469
	SV2017ParserRULE_constraint_prototype                                = 470
	SV2017ParserRULE_class_constraint                                    = 471
	SV2017ParserRULE_constraint_declaration                              = 472
	SV2017ParserRULE_class_constructor_declaration                       = 473
	SV2017ParserRULE_class_property                                      = 474
	SV2017ParserRULE_class_method                                        = 475
	SV2017ParserRULE_class_constructor_prototype                         = 476
	SV2017ParserRULE_class_item                                          = 477
	SV2017ParserRULE_parameter_override                                  = 478
	SV2017ParserRULE_gate_instantiation                                  = 479
	SV2017ParserRULE_enable_gate_or_mos_switch_or_cmos_switch_instance   = 480
	SV2017ParserRULE_n_input_gate_instance                               = 481
	SV2017ParserRULE_n_output_gate_instance                              = 482
	SV2017ParserRULE_pass_switch_instance                                = 483
	SV2017ParserRULE_pass_enable_switch_instance                         = 484
	SV2017ParserRULE_pull_gate_instance                                  = 485
	SV2017ParserRULE_pulldown_strength                                   = 486
	SV2017ParserRULE_pullup_strength                                     = 487
	SV2017ParserRULE_enable_terminal                                     = 488
	SV2017ParserRULE_inout_terminal                                      = 489
	SV2017ParserRULE_input_terminal                                      = 490
	SV2017ParserRULE_output_terminal                                     = 491
	SV2017ParserRULE_udp_instantiation                                   = 492
	SV2017ParserRULE_udp_instance                                        = 493
	SV2017ParserRULE_udp_instance_body                                   = 494
	SV2017ParserRULE_module_or_interface_or_program_or_udp_instantiation = 495
	SV2017ParserRULE_hierarchical_instance                               = 496
	SV2017ParserRULE_list_of_port_connections                            = 497
	SV2017ParserRULE_ordered_port_connection                             = 498
	SV2017ParserRULE_named_port_connection                               = 499
	SV2017ParserRULE_bind_directive                                      = 500
	SV2017ParserRULE_bind_target_instance                                = 501
	SV2017ParserRULE_bind_target_instance_list                           = 502
	SV2017ParserRULE_bind_instantiation                                  = 503
	SV2017ParserRULE_config_declaration                                  = 504
	SV2017ParserRULE_design_statement                                    = 505
	SV2017ParserRULE_config_rule_statement                               = 506
	SV2017ParserRULE_inst_clause                                         = 507
	SV2017ParserRULE_inst_name                                           = 508
	SV2017ParserRULE_cell_clause                                         = 509
	SV2017ParserRULE_liblist_clause                                      = 510
	SV2017ParserRULE_use_clause                                          = 511
	SV2017ParserRULE_net_alias                                           = 512
	SV2017ParserRULE_specify_block                                       = 513
	SV2017ParserRULE_generate_region                                     = 514
	SV2017ParserRULE_genvar_expression                                   = 515
	SV2017ParserRULE_loop_generate_construct                             = 516
	SV2017ParserRULE_genvar_initialization                               = 517
	SV2017ParserRULE_genvar_iteration                                    = 518
	SV2017ParserRULE_conditional_generate_construct                      = 519
	SV2017ParserRULE_if_generate_construct                               = 520
	SV2017ParserRULE_case_generate_construct                             = 521
	SV2017ParserRULE_case_generate_item                                  = 522
	SV2017ParserRULE_generate_begin_end_block                            = 523
	SV2017ParserRULE_generate_item_item                                  = 524
	SV2017ParserRULE_generate_item                                       = 525
	SV2017ParserRULE_program_generate_item                               = 526
	SV2017ParserRULE_elaboration_system_task                             = 527
	SV2017ParserRULE_core_item_item                                      = 528
	SV2017ParserRULE_module_item_item                                    = 529
	SV2017ParserRULE_module_item                                         = 530
)

// ISource_textContext is an interface to support dynamic dispatch.
type ISource_textContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSource_textContext differentiates from other interfaces.
	IsSource_textContext()
}

type Source_textContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySource_textContext() *Source_textContext {
	var p = new(Source_textContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_source_text
	return p
}

func (*Source_textContext) IsSource_textContext() {}

func NewSource_textContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Source_textContext {
	var p = new(Source_textContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_source_text

	return p
}

func (s *Source_textContext) GetParser() antlr.Parser { return s.parser }

func (s *Source_textContext) EOF() antlr.TerminalNode {
	return s.GetToken(SV2017ParserEOF, 0)
}

func (s *Source_textContext) Timeunits_declaration() ITimeunits_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITimeunits_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITimeunits_declarationContext)
}

func (s *Source_textContext) AllDescription() []IDescriptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDescriptionContext)(nil)).Elem())
	var tst = make([]IDescriptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDescriptionContext)
		}
	}

	return tst
}

func (s *Source_textContext) Description(i int) IDescriptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDescriptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDescriptionContext)
}

func (s *Source_textContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Source_textContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Source_textContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterSource_text(s)
	}
}

func (s *Source_textContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitSource_text(s)
	}
}

func (p *SV2017Parser) Source_text() (localctx ISource_textContext) {
	localctx = NewSource_textContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, SV2017ParserRULE_source_text)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1063)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 0, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1062)
			p.Timeunits_declaration()
		}

	}
	p.SetState(1068)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SV2017ParserTICK_TIMESCALE)|(1<<SV2017ParserTICK_DEFAULT_NETTYPE)|(1<<SV2017ParserTICK_INCLUDE)|(1<<SV2017ParserKW_DOLAR_ROOT))) != 0) || (((_la-35)&-(0x1f+1)) == 0 && ((1<<uint((_la-35)))&((1<<(SV2017ParserKW_DOLAR_UNIT-35))|(1<<(SV2017ParserKW_AUTOMATIC-35))|(1<<(SV2017ParserKW_BIND-35))|(1<<(SV2017ParserKW_BIT-35))|(1<<(SV2017ParserKW_BYTE-35))|(1<<(SV2017ParserKW_CHANDLE-35)))) != 0) || (((_la-67)&-(0x1f+1)) == 0 && ((1<<uint((_la-67)))&((1<<(SV2017ParserKW_CHECKER-67))|(1<<(SV2017ParserKW_CLASS-67))|(1<<(SV2017ParserKW_CONFIG-67))|(1<<(SV2017ParserKW_CONST-67))|(1<<(SV2017ParserKW_CONSTRAINT-67))|(1<<(SV2017ParserKW_COVERGROUP-67)))) != 0) || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(SV2017ParserKW_ENUM-107))|(1<<(SV2017ParserKW_EVENT-107))|(1<<(SV2017ParserKW_EXPORT-107))|(1<<(SV2017ParserKW_EXTERN-107))|(1<<(SV2017ParserKW_FUNCTION-107))|(1<<(SV2017ParserKW_IMPORT-107)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_INTERCONNECT-141))|(1<<(SV2017ParserKW_INTERFACE-141))|(1<<(SV2017ParserKW_LET-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOCALPARAM-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141))|(1<<(SV2017ParserKW_MACROMODULE-141))|(1<<(SV2017ParserKW_MODULE-141))|(1<<(SV2017ParserKW_NETTYPE-141))|(1<<(SV2017ParserKW_NONE-141)))) != 0) || (((_la-174)&-(0x1f+1)) == 0 && ((1<<uint((_la-174)))&((1<<(SV2017ParserKW_OPTION-174))|(1<<(SV2017ParserKW_PACKAGE-174))|(1<<(SV2017ParserKW_PARAMETER-174))|(1<<(SV2017ParserKW_PRIMITIVE-174))|(1<<(SV2017ParserKW_PROGRAM-174))|(1<<(SV2017ParserKW_PROPERTY-174))|(1<<(SV2017ParserKW_RANDOMIZE-174))|(1<<(SV2017ParserKW_REAL-174))|(1<<(SV2017ParserKW_REALTIME-174))|(1<<(SV2017ParserKW_REG-174)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SEQUENCE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STATIC-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_STRUCT-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_SUPPLY0-219))|(1<<(SV2017ParserKW_SUPPLY1-219))|(1<<(SV2017ParserKW_TASK-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219))|(1<<(SV2017ParserKW_TIMEPRECISION-219))|(1<<(SV2017ParserKW_TIMEUNIT-219)))) != 0) || (((_la-254)&-(0x1f+1)) == 0 && ((1<<uint((_la-254)))&((1<<(SV2017ParserKW_TRI-254))|(1<<(SV2017ParserKW_TRI0-254))|(1<<(SV2017ParserKW_TRI1-254))|(1<<(SV2017ParserKW_TRIAND-254))|(1<<(SV2017ParserKW_TRIOR-254))|(1<<(SV2017ParserKW_TRIREG-254))|(1<<(SV2017ParserKW_TYPE-254))|(1<<(SV2017ParserKW_TYPE_OPTION-254))|(1<<(SV2017ParserKW_TYPEDEF-254))|(1<<(SV2017ParserKW_UNION-254))|(1<<(SV2017ParserKW_UNSIGNED-254))|(1<<(SV2017ParserKW_UWIRE-254))|(1<<(SV2017ParserKW_VAR-254))|(1<<(SV2017ParserKW_VIRTUAL-254))|(1<<(SV2017ParserKW_WAND-254))|(1<<(SV2017ParserKW_WIRE-254)))) != 0) || (((_la-287)&-(0x1f+1)) == 0 && ((1<<uint((_la-287)))&((1<<(SV2017ParserKW_WOR-287))|(1<<(SV2017ParserC_IDENTIFIER-287))|(1<<(SV2017ParserTICK_IDENTIFIER-287))|(1<<(SV2017ParserESCAPED_IDENTIFIER-287))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-287))|(1<<(SV2017ParserSEMI-287))|(1<<(SV2017ParserLPAREN-287))|(1<<(SV2017ParserLSQUARE_BR-287)))) != 0) {
		{
			p.SetState(1065)
			p.Description()
		}

		p.SetState(1070)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1071)
		p.Match(SV2017ParserEOF)
	}

	return localctx
}

// IDescriptionContext is an interface to support dynamic dispatch.
type IDescriptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDescriptionContext differentiates from other interfaces.
	IsDescriptionContext()
}

type DescriptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescriptionContext() *DescriptionContext {
	var p = new(DescriptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_description
	return p
}

func (*DescriptionContext) IsDescriptionContext() {}

func NewDescriptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DescriptionContext {
	var p = new(DescriptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_description

	return p
}

func (s *DescriptionContext) GetParser() antlr.Parser { return s.parser }

func (s *DescriptionContext) Header_text() IHeader_textContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHeader_textContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHeader_textContext)
}

func (s *DescriptionContext) Module_declaration() IModule_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModule_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModule_declarationContext)
}

func (s *DescriptionContext) Udp_declaration() IUdp_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUdp_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUdp_declarationContext)
}

func (s *DescriptionContext) Interface_declaration() IInterface_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterface_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInterface_declarationContext)
}

func (s *DescriptionContext) Program_declaration() IProgram_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProgram_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProgram_declarationContext)
}

func (s *DescriptionContext) Package_declaration() IPackage_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackage_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackage_declarationContext)
}

func (s *DescriptionContext) Package_item_item() IPackage_item_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackage_item_itemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackage_item_itemContext)
}

func (s *DescriptionContext) Bind_directive() IBind_directiveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBind_directiveContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBind_directiveContext)
}

func (s *DescriptionContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *DescriptionContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *DescriptionContext) Config_declaration() IConfig_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConfig_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConfig_declarationContext)
}

func (s *DescriptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DescriptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DescriptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterDescription(s)
	}
}

func (s *DescriptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitDescription(s)
	}
}

func (p *SV2017Parser) Description() (localctx IDescriptionContext) {
	localctx = NewDescriptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, SV2017ParserRULE_description)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(1090)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1073)
			p.Header_text()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1074)
			p.Module_declaration()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1075)
			p.Udp_declaration()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1076)
			p.Interface_declaration()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1077)
			p.Program_declaration()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1078)
			p.Package_declaration()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		p.SetState(1082)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 2, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1079)
					p.Attribute_instance()
				}

			}
			p.SetState(1084)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 2, p.GetParserRuleContext())
		}
		p.SetState(1087)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_AUTOMATIC, SV2017ParserKW_BIT, SV2017ParserKW_BYTE, SV2017ParserKW_CHANDLE, SV2017ParserKW_CHECKER, SV2017ParserKW_CLASS, SV2017ParserKW_CONST, SV2017ParserKW_CONSTRAINT, SV2017ParserKW_COVERGROUP, SV2017ParserKW_ENUM, SV2017ParserKW_EVENT, SV2017ParserKW_EXPORT, SV2017ParserKW_FUNCTION, SV2017ParserKW_IMPORT, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_INTERCONNECT, SV2017ParserKW_INTERFACE, SV2017ParserKW_LET, SV2017ParserKW_LOCAL, SV2017ParserKW_LOCALPARAM, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_NETTYPE, SV2017ParserKW_NONE, SV2017ParserKW_OPTION, SV2017ParserKW_PARAMETER, SV2017ParserKW_PROGRAM, SV2017ParserKW_PROPERTY, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_SAMPLE, SV2017ParserKW_SEQUENCE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_STATIC, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_SUPPLY0, SV2017ParserKW_SUPPLY1, SV2017ParserKW_TASK, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TIMEPRECISION, SV2017ParserKW_TIMEUNIT, SV2017ParserKW_TRI, SV2017ParserKW_TRI0, SV2017ParserKW_TRI1, SV2017ParserKW_TRIAND, SV2017ParserKW_TRIOR, SV2017ParserKW_TRIREG, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_TYPEDEF, SV2017ParserKW_UNION, SV2017ParserKW_UNSIGNED, SV2017ParserKW_UWIRE, SV2017ParserKW_VAR, SV2017ParserKW_VIRTUAL, SV2017ParserKW_WAND, SV2017ParserKW_WIRE, SV2017ParserKW_WOR, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSEMI, SV2017ParserLSQUARE_BR:
			{
				p.SetState(1085)
				p.Package_item_item()
			}

		case SV2017ParserKW_BIND:
			{
				p.SetState(1086)
				p.Bind_directive()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1089)
			p.Config_declaration()
		}

	}

	return localctx
}

// IHeader_textContext is an interface to support dynamic dispatch.
type IHeader_textContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHeader_textContext differentiates from other interfaces.
	IsHeader_textContext()
}

type Header_textContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHeader_textContext() *Header_textContext {
	var p = new(Header_textContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_header_text
	return p
}

func (*Header_textContext) IsHeader_textContext() {}

func NewHeader_textContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Header_textContext {
	var p = new(Header_textContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_header_text

	return p
}

func (s *Header_textContext) GetParser() antlr.Parser { return s.parser }

func (s *Header_textContext) Compiler_directive() ICompiler_directiveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICompiler_directiveContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICompiler_directiveContext)
}

func (s *Header_textContext) Design_attribute() IDesign_attributeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDesign_attributeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDesign_attributeContext)
}

func (s *Header_textContext) Package_import_declaration() IPackage_import_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackage_import_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackage_import_declarationContext)
}

func (s *Header_textContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Header_textContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Header_textContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterHeader_text(s)
	}
}

func (s *Header_textContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitHeader_text(s)
	}
}

func (p *SV2017Parser) Header_text() (localctx IHeader_textContext) {
	localctx = NewHeader_textContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, SV2017ParserRULE_header_text)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1095)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserTICK_TIMESCALE, SV2017ParserTICK_DEFAULT_NETTYPE, SV2017ParserTICK_INCLUDE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1092)
			p.Compiler_directive()
		}

	case SV2017ParserTICK_IDENTIFIER, SV2017ParserLPAREN:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1093)
			p.Design_attribute()
		}

	case SV2017ParserKW_IMPORT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1094)
			p.Package_import_declaration()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDesign_attributeContext is an interface to support dynamic dispatch.
type IDesign_attributeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDesign_attributeContext differentiates from other interfaces.
	IsDesign_attributeContext()
}

type Design_attributeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDesign_attributeContext() *Design_attributeContext {
	var p = new(Design_attributeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_design_attribute
	return p
}

func (*Design_attributeContext) IsDesign_attributeContext() {}

func NewDesign_attributeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Design_attributeContext {
	var p = new(Design_attributeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_design_attribute

	return p
}

func (s *Design_attributeContext) GetParser() antlr.Parser { return s.parser }

func (s *Design_attributeContext) Attribute_instance() IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Design_attributeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Design_attributeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Design_attributeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterDesign_attribute(s)
	}
}

func (s *Design_attributeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitDesign_attribute(s)
	}
}

func (p *SV2017Parser) Design_attribute() (localctx IDesign_attributeContext) {
	localctx = NewDesign_attributeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, SV2017ParserRULE_design_attribute)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1097)
		p.Attribute_instance()
	}

	return localctx
}

// ICompiler_directiveContext is an interface to support dynamic dispatch.
type ICompiler_directiveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCompiler_directiveContext differentiates from other interfaces.
	IsCompiler_directiveContext()
}

type Compiler_directiveContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCompiler_directiveContext() *Compiler_directiveContext {
	var p = new(Compiler_directiveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_compiler_directive
	return p
}

func (*Compiler_directiveContext) IsCompiler_directiveContext() {}

func NewCompiler_directiveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Compiler_directiveContext {
	var p = new(Compiler_directiveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_compiler_directive

	return p
}

func (s *Compiler_directiveContext) GetParser() antlr.Parser { return s.parser }

func (s *Compiler_directiveContext) Timescale_compiler_directive() ITimescale_compiler_directiveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITimescale_compiler_directiveContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITimescale_compiler_directiveContext)
}

func (s *Compiler_directiveContext) Default_nettype_statement() IDefault_nettype_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefault_nettype_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefault_nettype_statementContext)
}

func (s *Compiler_directiveContext) Include_svh() IInclude_svhContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInclude_svhContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInclude_svhContext)
}

func (s *Compiler_directiveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Compiler_directiveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Compiler_directiveContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCompiler_directive(s)
	}
}

func (s *Compiler_directiveContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCompiler_directive(s)
	}
}

func (p *SV2017Parser) Compiler_directive() (localctx ICompiler_directiveContext) {
	localctx = NewCompiler_directiveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, SV2017ParserRULE_compiler_directive)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1102)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserTICK_TIMESCALE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1099)
			p.Timescale_compiler_directive()
		}

	case SV2017ParserTICK_DEFAULT_NETTYPE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1100)
			p.Default_nettype_statement()
		}

	case SV2017ParserTICK_INCLUDE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1101)
			p.Include_svh()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITime_numContext is an interface to support dynamic dispatch.
type ITime_numContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTime_numContext differentiates from other interfaces.
	IsTime_numContext()
}

type Time_numContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTime_numContext() *Time_numContext {
	var p = new(Time_numContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_time_num
	return p
}

func (*Time_numContext) IsTime_numContext() {}

func NewTime_numContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Time_numContext {
	var p = new(Time_numContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_time_num

	return p
}

func (s *Time_numContext) GetParser() antlr.Parser { return s.parser }

func (s *Time_numContext) UNSIGNED_NUMBER() antlr.TerminalNode {
	return s.GetToken(SV2017ParserUNSIGNED_NUMBER, 0)
}

func (s *Time_numContext) FIXED_POINT_NUMBER() antlr.TerminalNode {
	return s.GetToken(SV2017ParserFIXED_POINT_NUMBER, 0)
}

func (s *Time_numContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Time_numContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Time_numContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterTime_num(s)
	}
}

func (s *Time_numContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitTime_num(s)
	}
}

func (p *SV2017Parser) Time_num() (localctx ITime_numContext) {
	localctx = NewTime_numContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, SV2017ParserRULE_time_num)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1104)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserFIXED_POINT_NUMBER || _la == SV2017ParserUNSIGNED_NUMBER) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ITime_litContext is an interface to support dynamic dispatch.
type ITime_litContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTime_litContext differentiates from other interfaces.
	IsTime_litContext()
}

type Time_litContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTime_litContext() *Time_litContext {
	var p = new(Time_litContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_time_lit
	return p
}

func (*Time_litContext) IsTime_litContext() {}

func NewTime_litContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Time_litContext {
	var p = new(Time_litContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_time_lit

	return p
}

func (s *Time_litContext) GetParser() antlr.Parser { return s.parser }

func (s *Time_litContext) Time_num() ITime_numContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITime_numContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITime_numContext)
}

func (s *Time_litContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Time_litContext) TIME_LITERAL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserTIME_LITERAL, 0)
}

func (s *Time_litContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Time_litContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Time_litContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterTime_lit(s)
	}
}

func (s *Time_litContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitTime_lit(s)
	}
}

func (p *SV2017Parser) Time_lit() (localctx ITime_litContext) {
	localctx = NewTime_litContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, SV2017ParserRULE_time_lit)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1110)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserFIXED_POINT_NUMBER, SV2017ParserUNSIGNED_NUMBER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1106)
			p.Time_num()
		}
		{
			p.SetState(1107)
			p.Identifier()
		}

	case SV2017ParserTIME_LITERAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1109)
			p.Match(SV2017ParserTIME_LITERAL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITimescale_compiler_directiveContext is an interface to support dynamic dispatch.
type ITimescale_compiler_directiveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTimescale_compiler_directiveContext differentiates from other interfaces.
	IsTimescale_compiler_directiveContext()
}

type Timescale_compiler_directiveContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTimescale_compiler_directiveContext() *Timescale_compiler_directiveContext {
	var p = new(Timescale_compiler_directiveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_timescale_compiler_directive
	return p
}

func (*Timescale_compiler_directiveContext) IsTimescale_compiler_directiveContext() {}

func NewTimescale_compiler_directiveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Timescale_compiler_directiveContext {
	var p = new(Timescale_compiler_directiveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_timescale_compiler_directive

	return p
}

func (s *Timescale_compiler_directiveContext) GetParser() antlr.Parser { return s.parser }

func (s *Timescale_compiler_directiveContext) TICK_TIMESCALE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserTICK_TIMESCALE, 0)
}

func (s *Timescale_compiler_directiveContext) AllTime_lit() []ITime_litContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITime_litContext)(nil)).Elem())
	var tst = make([]ITime_litContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITime_litContext)
		}
	}

	return tst
}

func (s *Timescale_compiler_directiveContext) Time_lit(i int) ITime_litContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITime_litContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITime_litContext)
}

func (s *Timescale_compiler_directiveContext) DIV() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDIV, 0)
}

func (s *Timescale_compiler_directiveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Timescale_compiler_directiveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Timescale_compiler_directiveContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterTimescale_compiler_directive(s)
	}
}

func (s *Timescale_compiler_directiveContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitTimescale_compiler_directive(s)
	}
}

func (p *SV2017Parser) Timescale_compiler_directive() (localctx ITimescale_compiler_directiveContext) {
	localctx = NewTimescale_compiler_directiveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, SV2017ParserRULE_timescale_compiler_directive)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1112)
		p.Match(SV2017ParserTICK_TIMESCALE)
	}
	{
		p.SetState(1113)
		p.Time_lit()
	}
	{
		p.SetState(1114)
		p.Match(SV2017ParserDIV)
	}
	{
		p.SetState(1115)
		p.Time_lit()
	}

	return localctx
}

// IDefault_nettype_statementContext is an interface to support dynamic dispatch.
type IDefault_nettype_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDefault_nettype_statementContext differentiates from other interfaces.
	IsDefault_nettype_statementContext()
}

type Default_nettype_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefault_nettype_statementContext() *Default_nettype_statementContext {
	var p = new(Default_nettype_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_default_nettype_statement
	return p
}

func (*Default_nettype_statementContext) IsDefault_nettype_statementContext() {}

func NewDefault_nettype_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Default_nettype_statementContext {
	var p = new(Default_nettype_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_default_nettype_statement

	return p
}

func (s *Default_nettype_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Default_nettype_statementContext) TICK_DEFAULT_NETTYPE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserTICK_DEFAULT_NETTYPE, 0)
}

func (s *Default_nettype_statementContext) Net_type() INet_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INet_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INet_typeContext)
}

func (s *Default_nettype_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Default_nettype_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Default_nettype_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterDefault_nettype_statement(s)
	}
}

func (s *Default_nettype_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitDefault_nettype_statement(s)
	}
}

func (p *SV2017Parser) Default_nettype_statement() (localctx IDefault_nettype_statementContext) {
	localctx = NewDefault_nettype_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, SV2017ParserRULE_default_nettype_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1117)
		p.Match(SV2017ParserTICK_DEFAULT_NETTYPE)
	}
	{
		p.SetState(1118)
		p.Net_type()
	}

	return localctx
}

// IInclude_svhContext is an interface to support dynamic dispatch.
type IInclude_svhContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInclude_svhContext differentiates from other interfaces.
	IsInclude_svhContext()
}

type Include_svhContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInclude_svhContext() *Include_svhContext {
	var p = new(Include_svhContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_include_svh
	return p
}

func (*Include_svhContext) IsInclude_svhContext() {}

func NewInclude_svhContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Include_svhContext {
	var p = new(Include_svhContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_include_svh

	return p
}

func (s *Include_svhContext) GetParser() antlr.Parser { return s.parser }

func (s *Include_svhContext) TICK_INCLUDE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserTICK_INCLUDE, 0)
}

func (s *Include_svhContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSTRING_LITERAL, 0)
}

func (s *Include_svhContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Include_svhContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Include_svhContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterInclude_svh(s)
	}
}

func (s *Include_svhContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitInclude_svh(s)
	}
}

func (p *SV2017Parser) Include_svh() (localctx IInclude_svhContext) {
	localctx = NewInclude_svhContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, SV2017ParserRULE_include_svh)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1120)
		p.Match(SV2017ParserTICK_INCLUDE)
	}
	{
		p.SetState(1121)
		p.Match(SV2017ParserSTRING_LITERAL)
	}

	return localctx
}

// IAssignment_operatorContext is an interface to support dynamic dispatch.
type IAssignment_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignment_operatorContext differentiates from other interfaces.
	IsAssignment_operatorContext()
}

type Assignment_operatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignment_operatorContext() *Assignment_operatorContext {
	var p = new(Assignment_operatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_assignment_operator
	return p
}

func (*Assignment_operatorContext) IsAssignment_operatorContext() {}

func NewAssignment_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Assignment_operatorContext {
	var p = new(Assignment_operatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_assignment_operator

	return p
}

func (s *Assignment_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Assignment_operatorContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserASSIGN, 0)
}

func (s *Assignment_operatorContext) PLUS_ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserPLUS_ASSIGN, 0)
}

func (s *Assignment_operatorContext) MINUS_ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserMINUS_ASSIGN, 0)
}

func (s *Assignment_operatorContext) MUL_ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserMUL_ASSIGN, 0)
}

func (s *Assignment_operatorContext) DIV_ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDIV_ASSIGN, 0)
}

func (s *Assignment_operatorContext) MOD_ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserMOD_ASSIGN, 0)
}

func (s *Assignment_operatorContext) AND_ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserAND_ASSIGN, 0)
}

func (s *Assignment_operatorContext) OR_ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserOR_ASSIGN, 0)
}

func (s *Assignment_operatorContext) XOR_ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserXOR_ASSIGN, 0)
}

func (s *Assignment_operatorContext) SHIFT_LEFT_ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSHIFT_LEFT_ASSIGN, 0)
}

func (s *Assignment_operatorContext) SHIFT_RIGHT_ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSHIFT_RIGHT_ASSIGN, 0)
}

func (s *Assignment_operatorContext) ARITH_SHIFT_LEFT_ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserARITH_SHIFT_LEFT_ASSIGN, 0)
}

func (s *Assignment_operatorContext) ARITH_SHIFT_RIGHT_ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserARITH_SHIFT_RIGHT_ASSIGN, 0)
}

func (s *Assignment_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Assignment_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Assignment_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterAssignment_operator(s)
	}
}

func (s *Assignment_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitAssignment_operator(s)
	}
}

func (p *SV2017Parser) Assignment_operator() (localctx IAssignment_operatorContext) {
	localctx = NewAssignment_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, SV2017ParserRULE_assignment_operator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1123)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-338)&-(0x1f+1)) == 0 && ((1<<uint((_la-338)))&((1<<(SV2017ParserASSIGN-338))|(1<<(SV2017ParserPLUS_ASSIGN-338))|(1<<(SV2017ParserMINUS_ASSIGN-338))|(1<<(SV2017ParserMUL_ASSIGN-338))|(1<<(SV2017ParserDIV_ASSIGN-338))|(1<<(SV2017ParserMOD_ASSIGN-338))|(1<<(SV2017ParserAND_ASSIGN-338))|(1<<(SV2017ParserOR_ASSIGN-338))|(1<<(SV2017ParserXOR_ASSIGN-338))|(1<<(SV2017ParserSHIFT_LEFT_ASSIGN-338))|(1<<(SV2017ParserSHIFT_RIGHT_ASSIGN-338))|(1<<(SV2017ParserARITH_SHIFT_LEFT_ASSIGN-338))|(1<<(SV2017ParserARITH_SHIFT_RIGHT_ASSIGN-338)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IEdge_identifierContext is an interface to support dynamic dispatch.
type IEdge_identifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEdge_identifierContext differentiates from other interfaces.
	IsEdge_identifierContext()
}

type Edge_identifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEdge_identifierContext() *Edge_identifierContext {
	var p = new(Edge_identifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_edge_identifier
	return p
}

func (*Edge_identifierContext) IsEdge_identifierContext() {}

func NewEdge_identifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Edge_identifierContext {
	var p = new(Edge_identifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_edge_identifier

	return p
}

func (s *Edge_identifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Edge_identifierContext) KW_POSEDGE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_POSEDGE, 0)
}

func (s *Edge_identifierContext) KW_NEGEDGE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_NEGEDGE, 0)
}

func (s *Edge_identifierContext) KW_EDGE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_EDGE, 0)
}

func (s *Edge_identifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Edge_identifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Edge_identifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterEdge_identifier(s)
	}
}

func (s *Edge_identifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitEdge_identifier(s)
	}
}

func (p *SV2017Parser) Edge_identifier() (localctx IEdge_identifierContext) {
	localctx = NewEdge_identifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, SV2017ParserRULE_edge_identifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1125)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserKW_EDGE || _la == SV2017ParserKW_NEGEDGE || _la == SV2017ParserKW_POSEDGE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IIdentifierContext is an interface to support dynamic dispatch.
type IIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierContext differentiates from other interfaces.
	IsIdentifierContext()
}

type IdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierContext() *IdentifierContext {
	var p = new(IdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_identifier
	return p
}

func (*IdentifierContext) IsIdentifierContext() {}

func NewIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierContext {
	var p = new(IdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_identifier

	return p
}

func (s *IdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierContext) C_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(SV2017ParserC_IDENTIFIER, 0)
}

func (s *IdentifierContext) TICK_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(SV2017ParserTICK_IDENTIFIER, 0)
}

func (s *IdentifierContext) SIMPLE_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSIMPLE_IDENTIFIER, 0)
}

func (s *IdentifierContext) ESCAPED_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(SV2017ParserESCAPED_IDENTIFIER, 0)
}

func (s *IdentifierContext) KW_SAMPLE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_SAMPLE, 0)
}

func (s *IdentifierContext) KW_RANDOMIZE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_RANDOMIZE, 0)
}

func (s *IdentifierContext) KW_TYPE_OPTION() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_TYPE_OPTION, 0)
}

func (s *IdentifierContext) KW_OPTION() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_OPTION, 0)
}

func (s *IdentifierContext) KW_STD() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_STD, 0)
}

func (s *IdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterIdentifier(s)
	}
}

func (s *IdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitIdentifier(s)
	}
}

func (p *SV2017Parser) Identifier() (localctx IIdentifierContext) {
	localctx = NewIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, SV2017ParserRULE_identifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1127)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IInteger_typeContext is an interface to support dynamic dispatch.
type IInteger_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInteger_typeContext differentiates from other interfaces.
	IsInteger_typeContext()
}

type Integer_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInteger_typeContext() *Integer_typeContext {
	var p = new(Integer_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_integer_type
	return p
}

func (*Integer_typeContext) IsInteger_typeContext() {}

func NewInteger_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Integer_typeContext {
	var p = new(Integer_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_integer_type

	return p
}

func (s *Integer_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Integer_typeContext) Integer_vector_type() IInteger_vector_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInteger_vector_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInteger_vector_typeContext)
}

func (s *Integer_typeContext) Integer_atom_type() IInteger_atom_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInteger_atom_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInteger_atom_typeContext)
}

func (s *Integer_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Integer_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Integer_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterInteger_type(s)
	}
}

func (s *Integer_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitInteger_type(s)
	}
}

func (p *SV2017Parser) Integer_type() (localctx IInteger_typeContext) {
	localctx = NewInteger_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, SV2017ParserRULE_integer_type)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1131)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_BIT, SV2017ParserKW_LOGIC, SV2017ParserKW_REG:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1129)
			p.Integer_vector_type()
		}

	case SV2017ParserKW_BYTE, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LONGINT, SV2017ParserKW_SHORTINT, SV2017ParserKW_TIME:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1130)
			p.Integer_atom_type()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IInteger_atom_typeContext is an interface to support dynamic dispatch.
type IInteger_atom_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInteger_atom_typeContext differentiates from other interfaces.
	IsInteger_atom_typeContext()
}

type Integer_atom_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInteger_atom_typeContext() *Integer_atom_typeContext {
	var p = new(Integer_atom_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_integer_atom_type
	return p
}

func (*Integer_atom_typeContext) IsInteger_atom_typeContext() {}

func NewInteger_atom_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Integer_atom_typeContext {
	var p = new(Integer_atom_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_integer_atom_type

	return p
}

func (s *Integer_atom_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Integer_atom_typeContext) KW_BYTE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_BYTE, 0)
}

func (s *Integer_atom_typeContext) KW_SHORTINT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_SHORTINT, 0)
}

func (s *Integer_atom_typeContext) KW_INT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_INT, 0)
}

func (s *Integer_atom_typeContext) KW_LONGINT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_LONGINT, 0)
}

func (s *Integer_atom_typeContext) KW_INTEGER() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_INTEGER, 0)
}

func (s *Integer_atom_typeContext) KW_TIME() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_TIME, 0)
}

func (s *Integer_atom_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Integer_atom_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Integer_atom_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterInteger_atom_type(s)
	}
}

func (s *Integer_atom_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitInteger_atom_type(s)
	}
}

func (p *SV2017Parser) Integer_atom_type() (localctx IInteger_atom_typeContext) {
	localctx = NewInteger_atom_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, SV2017ParserRULE_integer_atom_type)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1133)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserKW_BYTE || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || _la == SV2017ParserKW_SHORTINT || _la == SV2017ParserKW_TIME) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IInteger_vector_typeContext is an interface to support dynamic dispatch.
type IInteger_vector_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInteger_vector_typeContext differentiates from other interfaces.
	IsInteger_vector_typeContext()
}

type Integer_vector_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInteger_vector_typeContext() *Integer_vector_typeContext {
	var p = new(Integer_vector_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_integer_vector_type
	return p
}

func (*Integer_vector_typeContext) IsInteger_vector_typeContext() {}

func NewInteger_vector_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Integer_vector_typeContext {
	var p = new(Integer_vector_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_integer_vector_type

	return p
}

func (s *Integer_vector_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Integer_vector_typeContext) KW_BIT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_BIT, 0)
}

func (s *Integer_vector_typeContext) KW_LOGIC() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_LOGIC, 0)
}

func (s *Integer_vector_typeContext) KW_REG() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_REG, 0)
}

func (s *Integer_vector_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Integer_vector_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Integer_vector_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterInteger_vector_type(s)
	}
}

func (s *Integer_vector_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitInteger_vector_type(s)
	}
}

func (p *SV2017Parser) Integer_vector_type() (localctx IInteger_vector_typeContext) {
	localctx = NewInteger_vector_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, SV2017ParserRULE_integer_vector_type)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1135)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserKW_BIT || _la == SV2017ParserKW_LOGIC || _la == SV2017ParserKW_REG) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// INon_integer_typeContext is an interface to support dynamic dispatch.
type INon_integer_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNon_integer_typeContext differentiates from other interfaces.
	IsNon_integer_typeContext()
}

type Non_integer_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNon_integer_typeContext() *Non_integer_typeContext {
	var p = new(Non_integer_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_non_integer_type
	return p
}

func (*Non_integer_typeContext) IsNon_integer_typeContext() {}

func NewNon_integer_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Non_integer_typeContext {
	var p = new(Non_integer_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_non_integer_type

	return p
}

func (s *Non_integer_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Non_integer_typeContext) KW_SHORTREAL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_SHORTREAL, 0)
}

func (s *Non_integer_typeContext) KW_REAL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_REAL, 0)
}

func (s *Non_integer_typeContext) KW_REALTIME() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_REALTIME, 0)
}

func (s *Non_integer_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Non_integer_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Non_integer_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterNon_integer_type(s)
	}
}

func (s *Non_integer_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitNon_integer_type(s)
	}
}

func (p *SV2017Parser) Non_integer_type() (localctx INon_integer_typeContext) {
	localctx = NewNon_integer_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, SV2017ParserRULE_non_integer_type)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1137)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-200)&-(0x1f+1)) == 0 && ((1<<uint((_la-200)))&((1<<(SV2017ParserKW_REAL-200))|(1<<(SV2017ParserKW_REALTIME-200))|(1<<(SV2017ParserKW_SHORTREAL-200)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// INet_typeContext is an interface to support dynamic dispatch.
type INet_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNet_typeContext differentiates from other interfaces.
	IsNet_typeContext()
}

type Net_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNet_typeContext() *Net_typeContext {
	var p = new(Net_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_net_type
	return p
}

func (*Net_typeContext) IsNet_typeContext() {}

func NewNet_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Net_typeContext {
	var p = new(Net_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_net_type

	return p
}

func (s *Net_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Net_typeContext) KW_SUPPLY0() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_SUPPLY0, 0)
}

func (s *Net_typeContext) KW_SUPPLY1() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_SUPPLY1, 0)
}

func (s *Net_typeContext) KW_TRI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_TRI, 0)
}

func (s *Net_typeContext) KW_TRIAND() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_TRIAND, 0)
}

func (s *Net_typeContext) KW_TRIOR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_TRIOR, 0)
}

func (s *Net_typeContext) KW_TRIREG() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_TRIREG, 0)
}

func (s *Net_typeContext) KW_TRI0() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_TRI0, 0)
}

func (s *Net_typeContext) KW_TRI1() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_TRI1, 0)
}

func (s *Net_typeContext) KW_UWIRE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_UWIRE, 0)
}

func (s *Net_typeContext) KW_WIRE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_WIRE, 0)
}

func (s *Net_typeContext) KW_WAND() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_WAND, 0)
}

func (s *Net_typeContext) KW_WOR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_WOR, 0)
}

func (s *Net_typeContext) KW_NONE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_NONE, 0)
}

func (s *Net_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Net_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Net_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterNet_type(s)
	}
}

func (s *Net_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitNet_type(s)
	}
}

func (p *SV2017Parser) Net_type() (localctx INet_typeContext) {
	localctx = NewNet_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, SV2017ParserRULE_net_type)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1139)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserKW_NONE || (((_la-239)&-(0x1f+1)) == 0 && ((1<<uint((_la-239)))&((1<<(SV2017ParserKW_SUPPLY0-239))|(1<<(SV2017ParserKW_SUPPLY1-239))|(1<<(SV2017ParserKW_TRI-239))|(1<<(SV2017ParserKW_TRI0-239))|(1<<(SV2017ParserKW_TRI1-239))|(1<<(SV2017ParserKW_TRIAND-239))|(1<<(SV2017ParserKW_TRIOR-239))|(1<<(SV2017ParserKW_TRIREG-239)))) != 0) || (((_la-271)&-(0x1f+1)) == 0 && ((1<<uint((_la-271)))&((1<<(SV2017ParserKW_UWIRE-271))|(1<<(SV2017ParserKW_WAND-271))|(1<<(SV2017ParserKW_WIRE-271))|(1<<(SV2017ParserKW_WOR-271)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IUnary_module_path_operatorContext is an interface to support dynamic dispatch.
type IUnary_module_path_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnary_module_path_operatorContext differentiates from other interfaces.
	IsUnary_module_path_operatorContext()
}

type Unary_module_path_operatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnary_module_path_operatorContext() *Unary_module_path_operatorContext {
	var p = new(Unary_module_path_operatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_unary_module_path_operator
	return p
}

func (*Unary_module_path_operatorContext) IsUnary_module_path_operatorContext() {}

func NewUnary_module_path_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unary_module_path_operatorContext {
	var p = new(Unary_module_path_operatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_unary_module_path_operator

	return p
}

func (s *Unary_module_path_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Unary_module_path_operatorContext) NOT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserNOT, 0)
}

func (s *Unary_module_path_operatorContext) NEG() antlr.TerminalNode {
	return s.GetToken(SV2017ParserNEG, 0)
}

func (s *Unary_module_path_operatorContext) AMPERSAND() antlr.TerminalNode {
	return s.GetToken(SV2017ParserAMPERSAND, 0)
}

func (s *Unary_module_path_operatorContext) NAND() antlr.TerminalNode {
	return s.GetToken(SV2017ParserNAND, 0)
}

func (s *Unary_module_path_operatorContext) BAR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserBAR, 0)
}

func (s *Unary_module_path_operatorContext) NOR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserNOR, 0)
}

func (s *Unary_module_path_operatorContext) XOR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserXOR, 0)
}

func (s *Unary_module_path_operatorContext) NXOR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserNXOR, 0)
}

func (s *Unary_module_path_operatorContext) XORN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserXORN, 0)
}

func (s *Unary_module_path_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unary_module_path_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unary_module_path_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterUnary_module_path_operator(s)
	}
}

func (s *Unary_module_path_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitUnary_module_path_operator(s)
	}
}

func (p *SV2017Parser) Unary_module_path_operator() (localctx IUnary_module_path_operatorContext) {
	localctx = NewUnary_module_path_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, SV2017ParserRULE_unary_module_path_operator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1141)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-320)&-(0x1f+1)) == 0 && ((1<<uint((_la-320)))&((1<<(SV2017ParserNOT-320))|(1<<(SV2017ParserNEG-320))|(1<<(SV2017ParserNAND-320))|(1<<(SV2017ParserNOR-320))|(1<<(SV2017ParserXOR-320))|(1<<(SV2017ParserNXOR-320))|(1<<(SV2017ParserXORN-320)))) != 0) || _la == SV2017ParserAMPERSAND || _la == SV2017ParserBAR) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IUnary_operatorContext is an interface to support dynamic dispatch.
type IUnary_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnary_operatorContext differentiates from other interfaces.
	IsUnary_operatorContext()
}

type Unary_operatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnary_operatorContext() *Unary_operatorContext {
	var p = new(Unary_operatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_unary_operator
	return p
}

func (*Unary_operatorContext) IsUnary_operatorContext() {}

func NewUnary_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unary_operatorContext {
	var p = new(Unary_operatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_unary_operator

	return p
}

func (s *Unary_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Unary_operatorContext) PLUS() antlr.TerminalNode {
	return s.GetToken(SV2017ParserPLUS, 0)
}

func (s *Unary_operatorContext) MINUS() antlr.TerminalNode {
	return s.GetToken(SV2017ParserMINUS, 0)
}

func (s *Unary_operatorContext) Unary_module_path_operator() IUnary_module_path_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnary_module_path_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnary_module_path_operatorContext)
}

func (s *Unary_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unary_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unary_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterUnary_operator(s)
	}
}

func (s *Unary_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitUnary_operator(s)
	}
}

func (p *SV2017Parser) Unary_operator() (localctx IUnary_operatorContext) {
	localctx = NewUnary_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, SV2017ParserRULE_unary_operator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1146)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserPLUS:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1143)
			p.Match(SV2017ParserPLUS)
		}

	case SV2017ParserMINUS:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1144)
			p.Match(SV2017ParserMINUS)
		}

	case SV2017ParserNOT, SV2017ParserNEG, SV2017ParserNAND, SV2017ParserNOR, SV2017ParserXOR, SV2017ParserNXOR, SV2017ParserXORN, SV2017ParserAMPERSAND, SV2017ParserBAR:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1145)
			p.Unary_module_path_operator()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IInc_or_dec_operatorContext is an interface to support dynamic dispatch.
type IInc_or_dec_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInc_or_dec_operatorContext differentiates from other interfaces.
	IsInc_or_dec_operatorContext()
}

type Inc_or_dec_operatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInc_or_dec_operatorContext() *Inc_or_dec_operatorContext {
	var p = new(Inc_or_dec_operatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_inc_or_dec_operator
	return p
}

func (*Inc_or_dec_operatorContext) IsInc_or_dec_operatorContext() {}

func NewInc_or_dec_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Inc_or_dec_operatorContext {
	var p = new(Inc_or_dec_operatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_inc_or_dec_operator

	return p
}

func (s *Inc_or_dec_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Inc_or_dec_operatorContext) INCR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserINCR, 0)
}

func (s *Inc_or_dec_operatorContext) DECR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDECR, 0)
}

func (s *Inc_or_dec_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Inc_or_dec_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Inc_or_dec_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterInc_or_dec_operator(s)
	}
}

func (s *Inc_or_dec_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitInc_or_dec_operator(s)
	}
}

func (p *SV2017Parser) Inc_or_dec_operator() (localctx IInc_or_dec_operatorContext) {
	localctx = NewInc_or_dec_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, SV2017ParserRULE_inc_or_dec_operator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1148)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserINCR || _la == SV2017ParserDECR) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IImplicit_class_handleContext is an interface to support dynamic dispatch.
type IImplicit_class_handleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImplicit_class_handleContext differentiates from other interfaces.
	IsImplicit_class_handleContext()
}

type Implicit_class_handleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImplicit_class_handleContext() *Implicit_class_handleContext {
	var p = new(Implicit_class_handleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_implicit_class_handle
	return p
}

func (*Implicit_class_handleContext) IsImplicit_class_handleContext() {}

func NewImplicit_class_handleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Implicit_class_handleContext {
	var p = new(Implicit_class_handleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_implicit_class_handle

	return p
}

func (s *Implicit_class_handleContext) GetParser() antlr.Parser { return s.parser }

func (s *Implicit_class_handleContext) KW_THIS() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_THIS, 0)
}

func (s *Implicit_class_handleContext) DOT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOT, 0)
}

func (s *Implicit_class_handleContext) KW_SUPER() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_SUPER, 0)
}

func (s *Implicit_class_handleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Implicit_class_handleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Implicit_class_handleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterImplicit_class_handle(s)
	}
}

func (s *Implicit_class_handleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitImplicit_class_handle(s)
	}
}

func (p *SV2017Parser) Implicit_class_handle() (localctx IImplicit_class_handleContext) {
	localctx = NewImplicit_class_handleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, SV2017ParserRULE_implicit_class_handle)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1156)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_THIS:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1150)
			p.Match(SV2017ParserKW_THIS)
		}
		p.SetState(1153)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 10, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1151)
				p.Match(SV2017ParserDOT)
			}
			{
				p.SetState(1152)
				p.Match(SV2017ParserKW_SUPER)
			}

		}

	case SV2017ParserKW_SUPER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1155)
			p.Match(SV2017ParserKW_SUPER)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IIntegral_numberContext is an interface to support dynamic dispatch.
type IIntegral_numberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIntegral_numberContext differentiates from other interfaces.
	IsIntegral_numberContext()
}

type Integral_numberContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntegral_numberContext() *Integral_numberContext {
	var p = new(Integral_numberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_integral_number
	return p
}

func (*Integral_numberContext) IsIntegral_numberContext() {}

func NewIntegral_numberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Integral_numberContext {
	var p = new(Integral_numberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_integral_number

	return p
}

func (s *Integral_numberContext) GetParser() antlr.Parser { return s.parser }

func (s *Integral_numberContext) BASED_NUMBER_WITH_SIZE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserBASED_NUMBER_WITH_SIZE, 0)
}

func (s *Integral_numberContext) ANY_BASED_NUMBER() antlr.TerminalNode {
	return s.GetToken(SV2017ParserANY_BASED_NUMBER, 0)
}

func (s *Integral_numberContext) UNSIGNED_NUMBER() antlr.TerminalNode {
	return s.GetToken(SV2017ParserUNSIGNED_NUMBER, 0)
}

func (s *Integral_numberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Integral_numberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Integral_numberContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterIntegral_number(s)
	}
}

func (s *Integral_numberContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitIntegral_number(s)
	}
}

func (p *SV2017Parser) Integral_number() (localctx IIntegral_numberContext) {
	localctx = NewIntegral_numberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, SV2017ParserRULE_integral_number)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1164)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 13, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1158)
			p.Match(SV2017ParserBASED_NUMBER_WITH_SIZE)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1160)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserUNSIGNED_NUMBER {
			{
				p.SetState(1159)
				p.Match(SV2017ParserUNSIGNED_NUMBER)
			}

		}
		{
			p.SetState(1162)
			p.Match(SV2017ParserANY_BASED_NUMBER)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1163)
			p.Match(SV2017ParserUNSIGNED_NUMBER)
		}

	}

	return localctx
}

// IReal_numberContext is an interface to support dynamic dispatch.
type IReal_numberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReal_numberContext differentiates from other interfaces.
	IsReal_numberContext()
}

type Real_numberContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReal_numberContext() *Real_numberContext {
	var p = new(Real_numberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_real_number
	return p
}

func (*Real_numberContext) IsReal_numberContext() {}

func NewReal_numberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Real_numberContext {
	var p = new(Real_numberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_real_number

	return p
}

func (s *Real_numberContext) GetParser() antlr.Parser { return s.parser }

func (s *Real_numberContext) REAL_NUMBER_WITH_EXP() antlr.TerminalNode {
	return s.GetToken(SV2017ParserREAL_NUMBER_WITH_EXP, 0)
}

func (s *Real_numberContext) FIXED_POINT_NUMBER() antlr.TerminalNode {
	return s.GetToken(SV2017ParserFIXED_POINT_NUMBER, 0)
}

func (s *Real_numberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Real_numberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Real_numberContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterReal_number(s)
	}
}

func (s *Real_numberContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitReal_number(s)
	}
}

func (p *SV2017Parser) Real_number() (localctx IReal_numberContext) {
	localctx = NewReal_numberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, SV2017ParserRULE_real_number)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1166)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserREAL_NUMBER_WITH_EXP || _la == SV2017ParserFIXED_POINT_NUMBER) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IAny_system_tf_identifierContext is an interface to support dynamic dispatch.
type IAny_system_tf_identifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAny_system_tf_identifierContext differentiates from other interfaces.
	IsAny_system_tf_identifierContext()
}

type Any_system_tf_identifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAny_system_tf_identifierContext() *Any_system_tf_identifierContext {
	var p = new(Any_system_tf_identifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_any_system_tf_identifier
	return p
}

func (*Any_system_tf_identifierContext) IsAny_system_tf_identifierContext() {}

func NewAny_system_tf_identifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Any_system_tf_identifierContext {
	var p = new(Any_system_tf_identifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_any_system_tf_identifier

	return p
}

func (s *Any_system_tf_identifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Any_system_tf_identifierContext) SYSTEM_TF_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSYSTEM_TF_IDENTIFIER, 0)
}

func (s *Any_system_tf_identifierContext) KW_DOLAR_SETUPHOLD() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DOLAR_SETUPHOLD, 0)
}

func (s *Any_system_tf_identifierContext) KW_DOLAR_SETUP() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DOLAR_SETUP, 0)
}

func (s *Any_system_tf_identifierContext) KW_DOLAR_FULLSKEW() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DOLAR_FULLSKEW, 0)
}

func (s *Any_system_tf_identifierContext) KW_DOLAR_WARNING() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DOLAR_WARNING, 0)
}

func (s *Any_system_tf_identifierContext) KW_DOLAR_WIDTH() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DOLAR_WIDTH, 0)
}

func (s *Any_system_tf_identifierContext) KW_DOLAR_ROOT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DOLAR_ROOT, 0)
}

func (s *Any_system_tf_identifierContext) KW_DOLAR_RECOVERY() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DOLAR_RECOVERY, 0)
}

func (s *Any_system_tf_identifierContext) KW_DOLAR_SKEW() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DOLAR_SKEW, 0)
}

func (s *Any_system_tf_identifierContext) KW_DOLAR_FATAL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DOLAR_FATAL, 0)
}

func (s *Any_system_tf_identifierContext) KW_DOLAR_REMOVAL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DOLAR_REMOVAL, 0)
}

func (s *Any_system_tf_identifierContext) KW_DOLAR_RECREM() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DOLAR_RECREM, 0)
}

func (s *Any_system_tf_identifierContext) KW_DOLAR_ERROR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DOLAR_ERROR, 0)
}

func (s *Any_system_tf_identifierContext) KW_DOLAR_PERIOD() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DOLAR_PERIOD, 0)
}

func (s *Any_system_tf_identifierContext) KW_DOLAR_HOLD() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DOLAR_HOLD, 0)
}

func (s *Any_system_tf_identifierContext) KW_DOLAR_INFO() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DOLAR_INFO, 0)
}

func (s *Any_system_tf_identifierContext) KW_DOLAR_UNIT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DOLAR_UNIT, 0)
}

func (s *Any_system_tf_identifierContext) KW_DOLAR_TIMESKEW() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DOLAR_TIMESKEW, 0)
}

func (s *Any_system_tf_identifierContext) KW_DOLAR_NOCHANGE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DOLAR_NOCHANGE, 0)
}

func (s *Any_system_tf_identifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Any_system_tf_identifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Any_system_tf_identifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterAny_system_tf_identifier(s)
	}
}

func (s *Any_system_tf_identifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitAny_system_tf_identifier(s)
	}
}

func (p *SV2017Parser) Any_system_tf_identifier() (localctx IAny_system_tf_identifierContext) {
	localctx = NewAny_system_tf_identifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, SV2017ParserRULE_any_system_tf_identifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1168)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || _la == SV2017ParserSYSTEM_TF_IDENTIFIER) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ISigningContext is an interface to support dynamic dispatch.
type ISigningContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSigningContext differentiates from other interfaces.
	IsSigningContext()
}

type SigningContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySigningContext() *SigningContext {
	var p = new(SigningContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_signing
	return p
}

func (*SigningContext) IsSigningContext() {}

func NewSigningContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SigningContext {
	var p = new(SigningContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_signing

	return p
}

func (s *SigningContext) GetParser() antlr.Parser { return s.parser }

func (s *SigningContext) KW_SIGNED() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_SIGNED, 0)
}

func (s *SigningContext) KW_UNSIGNED() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_UNSIGNED, 0)
}

func (s *SigningContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SigningContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SigningContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterSigning(s)
	}
}

func (s *SigningContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitSigning(s)
	}
}

func (p *SV2017Parser) Signing() (localctx ISigningContext) {
	localctx = NewSigningContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, SV2017ParserRULE_signing)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1170)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserKW_SIGNED || _la == SV2017ParserKW_UNSIGNED) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// INumberContext is an interface to support dynamic dispatch.
type INumberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNumberContext differentiates from other interfaces.
	IsNumberContext()
}

type NumberContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumberContext() *NumberContext {
	var p = new(NumberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_number
	return p
}

func (*NumberContext) IsNumberContext() {}

func NewNumberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NumberContext {
	var p = new(NumberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_number

	return p
}

func (s *NumberContext) GetParser() antlr.Parser { return s.parser }

func (s *NumberContext) Integral_number() IIntegral_numberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntegral_numberContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntegral_numberContext)
}

func (s *NumberContext) Real_number() IReal_numberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReal_numberContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReal_numberContext)
}

func (s *NumberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NumberContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterNumber(s)
	}
}

func (s *NumberContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitNumber(s)
	}
}

func (p *SV2017Parser) Number() (localctx INumberContext) {
	localctx = NewNumberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, SV2017ParserRULE_number)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1174)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserANY_BASED_NUMBER, SV2017ParserBASED_NUMBER_WITH_SIZE, SV2017ParserUNSIGNED_NUMBER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1172)
			p.Integral_number()
		}

	case SV2017ParserREAL_NUMBER_WITH_EXP, SV2017ParserFIXED_POINT_NUMBER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1173)
			p.Real_number()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITimeunits_declarationContext is an interface to support dynamic dispatch.
type ITimeunits_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTimeunits_declarationContext differentiates from other interfaces.
	IsTimeunits_declarationContext()
}

type Timeunits_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTimeunits_declarationContext() *Timeunits_declarationContext {
	var p = new(Timeunits_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_timeunits_declaration
	return p
}

func (*Timeunits_declarationContext) IsTimeunits_declarationContext() {}

func NewTimeunits_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Timeunits_declarationContext {
	var p = new(Timeunits_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_timeunits_declaration

	return p
}

func (s *Timeunits_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Timeunits_declarationContext) KW_TIMEUNIT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_TIMEUNIT, 0)
}

func (s *Timeunits_declarationContext) AllTime_lit() []ITime_litContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITime_litContext)(nil)).Elem())
	var tst = make([]ITime_litContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITime_litContext)
		}
	}

	return tst
}

func (s *Timeunits_declarationContext) Time_lit(i int) ITime_litContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITime_litContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITime_litContext)
}

func (s *Timeunits_declarationContext) AllSEMI() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserSEMI)
}

func (s *Timeunits_declarationContext) SEMI(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, i)
}

func (s *Timeunits_declarationContext) DIV() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDIV, 0)
}

func (s *Timeunits_declarationContext) KW_TIMEPRECISION() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_TIMEPRECISION, 0)
}

func (s *Timeunits_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Timeunits_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Timeunits_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterTimeunits_declaration(s)
	}
}

func (s *Timeunits_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitTimeunits_declaration(s)
	}
}

func (p *SV2017Parser) Timeunits_declaration() (localctx ITimeunits_declarationContext) {
	localctx = NewTimeunits_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, SV2017ParserRULE_timeunits_declaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1197)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_TIMEUNIT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1176)
			p.Match(SV2017ParserKW_TIMEUNIT)
		}
		{
			p.SetState(1177)
			p.Time_lit()
		}
		p.SetState(1184)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 16, p.GetParserRuleContext()) == 1 {
			p.SetState(1181)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case SV2017ParserDIV:
				{
					p.SetState(1178)
					p.Match(SV2017ParserDIV)
				}

			case SV2017ParserSEMI:
				{
					p.SetState(1179)
					p.Match(SV2017ParserSEMI)
				}
				{
					p.SetState(1180)
					p.Match(SV2017ParserKW_TIMEPRECISION)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}
			{
				p.SetState(1183)
				p.Time_lit()
			}

		}
		{
			p.SetState(1186)
			p.Match(SV2017ParserSEMI)
		}

	case SV2017ParserKW_TIMEPRECISION:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1188)
			p.Match(SV2017ParserKW_TIMEPRECISION)
		}
		{
			p.SetState(1189)
			p.Time_lit()
		}
		{
			p.SetState(1190)
			p.Match(SV2017ParserSEMI)
		}
		p.SetState(1195)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 17, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1191)
				p.Match(SV2017ParserKW_TIMEUNIT)
			}
			{
				p.SetState(1192)
				p.Time_lit()
			}
			{
				p.SetState(1193)
				p.Match(SV2017ParserSEMI)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ILifetimeContext is an interface to support dynamic dispatch.
type ILifetimeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLifetimeContext differentiates from other interfaces.
	IsLifetimeContext()
}

type LifetimeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLifetimeContext() *LifetimeContext {
	var p = new(LifetimeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_lifetime
	return p
}

func (*LifetimeContext) IsLifetimeContext() {}

func NewLifetimeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LifetimeContext {
	var p = new(LifetimeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_lifetime

	return p
}

func (s *LifetimeContext) GetParser() antlr.Parser { return s.parser }

func (s *LifetimeContext) KW_STATIC() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_STATIC, 0)
}

func (s *LifetimeContext) KW_AUTOMATIC() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_AUTOMATIC, 0)
}

func (s *LifetimeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LifetimeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LifetimeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterLifetime(s)
	}
}

func (s *LifetimeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitLifetime(s)
	}
}

func (p *SV2017Parser) Lifetime() (localctx ILifetimeContext) {
	localctx = NewLifetimeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, SV2017ParserRULE_lifetime)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1199)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserKW_AUTOMATIC || _la == SV2017ParserKW_STATIC) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IPort_directionContext is an interface to support dynamic dispatch.
type IPort_directionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPort_directionContext differentiates from other interfaces.
	IsPort_directionContext()
}

type Port_directionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPort_directionContext() *Port_directionContext {
	var p = new(Port_directionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_port_direction
	return p
}

func (*Port_directionContext) IsPort_directionContext() {}

func NewPort_directionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Port_directionContext {
	var p = new(Port_directionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_port_direction

	return p
}

func (s *Port_directionContext) GetParser() antlr.Parser { return s.parser }

func (s *Port_directionContext) KW_INPUT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_INPUT, 0)
}

func (s *Port_directionContext) KW_OUTPUT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_OUTPUT, 0)
}

func (s *Port_directionContext) KW_INOUT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_INOUT, 0)
}

func (s *Port_directionContext) KW_REF() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_REF, 0)
}

func (s *Port_directionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Port_directionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Port_directionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPort_direction(s)
	}
}

func (s *Port_directionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPort_direction(s)
	}
}

func (p *SV2017Parser) Port_direction() (localctx IPort_directionContext) {
	localctx = NewPort_directionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, SV2017ParserRULE_port_direction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1201)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserKW_INOUT || _la == SV2017ParserKW_INPUT || _la == SV2017ParserKW_OUTPUT || _la == SV2017ParserKW_REF) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IAlways_keywordContext is an interface to support dynamic dispatch.
type IAlways_keywordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlways_keywordContext differentiates from other interfaces.
	IsAlways_keywordContext()
}

type Always_keywordContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlways_keywordContext() *Always_keywordContext {
	var p = new(Always_keywordContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_always_keyword
	return p
}

func (*Always_keywordContext) IsAlways_keywordContext() {}

func NewAlways_keywordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Always_keywordContext {
	var p = new(Always_keywordContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_always_keyword

	return p
}

func (s *Always_keywordContext) GetParser() antlr.Parser { return s.parser }

func (s *Always_keywordContext) KW_ALWAYS() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ALWAYS, 0)
}

func (s *Always_keywordContext) KW_ALWAYS_COMB() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ALWAYS_COMB, 0)
}

func (s *Always_keywordContext) KW_ALWAYS_LATCH() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ALWAYS_LATCH, 0)
}

func (s *Always_keywordContext) KW_ALWAYS_FF() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ALWAYS_FF, 0)
}

func (s *Always_keywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Always_keywordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Always_keywordContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterAlways_keyword(s)
	}
}

func (s *Always_keywordContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitAlways_keyword(s)
	}
}

func (p *SV2017Parser) Always_keyword() (localctx IAlways_keywordContext) {
	localctx = NewAlways_keywordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, SV2017ParserRULE_always_keyword)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1203)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-42)&-(0x1f+1)) == 0 && ((1<<uint((_la-42)))&((1<<(SV2017ParserKW_ALWAYS-42))|(1<<(SV2017ParserKW_ALWAYS_COMB-42))|(1<<(SV2017ParserKW_ALWAYS_FF-42))|(1<<(SV2017ParserKW_ALWAYS_LATCH-42)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IJoin_keywordContext is an interface to support dynamic dispatch.
type IJoin_keywordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJoin_keywordContext differentiates from other interfaces.
	IsJoin_keywordContext()
}

type Join_keywordContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoin_keywordContext() *Join_keywordContext {
	var p = new(Join_keywordContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_join_keyword
	return p
}

func (*Join_keywordContext) IsJoin_keywordContext() {}

func NewJoin_keywordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Join_keywordContext {
	var p = new(Join_keywordContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_join_keyword

	return p
}

func (s *Join_keywordContext) GetParser() antlr.Parser { return s.parser }

func (s *Join_keywordContext) KW_JOIN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_JOIN, 0)
}

func (s *Join_keywordContext) KW_JOIN_ANY() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_JOIN_ANY, 0)
}

func (s *Join_keywordContext) KW_JOIN_NONE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_JOIN_NONE, 0)
}

func (s *Join_keywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Join_keywordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Join_keywordContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterJoin_keyword(s)
	}
}

func (s *Join_keywordContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitJoin_keyword(s)
	}
}

func (p *SV2017Parser) Join_keyword() (localctx IJoin_keywordContext) {
	localctx = NewJoin_keywordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, SV2017ParserRULE_join_keyword)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1205)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-146)&-(0x1f+1)) == 0 && ((1<<uint((_la-146)))&((1<<(SV2017ParserKW_JOIN-146))|(1<<(SV2017ParserKW_JOIN_ANY-146))|(1<<(SV2017ParserKW_JOIN_NONE-146)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IUnique_priorityContext is an interface to support dynamic dispatch.
type IUnique_priorityContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnique_priorityContext differentiates from other interfaces.
	IsUnique_priorityContext()
}

type Unique_priorityContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnique_priorityContext() *Unique_priorityContext {
	var p = new(Unique_priorityContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_unique_priority
	return p
}

func (*Unique_priorityContext) IsUnique_priorityContext() {}

func NewUnique_priorityContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unique_priorityContext {
	var p = new(Unique_priorityContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_unique_priority

	return p
}

func (s *Unique_priorityContext) GetParser() antlr.Parser { return s.parser }

func (s *Unique_priorityContext) KW_UNIQUE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_UNIQUE, 0)
}

func (s *Unique_priorityContext) KW_UNIQUE0() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_UNIQUE0, 0)
}

func (s *Unique_priorityContext) KW_PRIORITY() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_PRIORITY, 0)
}

func (s *Unique_priorityContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unique_priorityContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unique_priorityContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterUnique_priority(s)
	}
}

func (s *Unique_priorityContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitUnique_priority(s)
	}
}

func (p *SV2017Parser) Unique_priority() (localctx IUnique_priorityContext) {
	localctx = NewUnique_priorityContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, SV2017ParserRULE_unique_priority)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1207)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserKW_PRIORITY || _la == SV2017ParserKW_UNIQUE || _la == SV2017ParserKW_UNIQUE0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IDrive_strengthContext is an interface to support dynamic dispatch.
type IDrive_strengthContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrive_strengthContext differentiates from other interfaces.
	IsDrive_strengthContext()
}

type Drive_strengthContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrive_strengthContext() *Drive_strengthContext {
	var p = new(Drive_strengthContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_drive_strength
	return p
}

func (*Drive_strengthContext) IsDrive_strengthContext() {}

func NewDrive_strengthContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drive_strengthContext {
	var p = new(Drive_strengthContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_drive_strength

	return p
}

func (s *Drive_strengthContext) GetParser() antlr.Parser { return s.parser }

func (s *Drive_strengthContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Drive_strengthContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Drive_strengthContext) KW_HIGHZ0() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_HIGHZ0, 0)
}

func (s *Drive_strengthContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, 0)
}

func (s *Drive_strengthContext) Strength1() IStrength1Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrength1Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStrength1Context)
}

func (s *Drive_strengthContext) KW_HIGHZ1() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_HIGHZ1, 0)
}

func (s *Drive_strengthContext) Strength0() IStrength0Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrength0Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStrength0Context)
}

func (s *Drive_strengthContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drive_strengthContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drive_strengthContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterDrive_strength(s)
	}
}

func (s *Drive_strengthContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitDrive_strength(s)
	}
}

func (p *SV2017Parser) Drive_strength() (localctx IDrive_strengthContext) {
	localctx = NewDrive_strengthContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, SV2017ParserRULE_drive_strength)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1209)
		p.Match(SV2017ParserLPAREN)
	}
	p.SetState(1228)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_HIGHZ0:
		{
			p.SetState(1210)
			p.Match(SV2017ParserKW_HIGHZ0)
		}
		{
			p.SetState(1211)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(1212)
			p.Strength1()
		}

	case SV2017ParserKW_HIGHZ1:
		{
			p.SetState(1213)
			p.Match(SV2017ParserKW_HIGHZ1)
		}
		{
			p.SetState(1214)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(1215)
			p.Strength0()
		}

	case SV2017ParserKW_PULL0, SV2017ParserKW_STRONG0, SV2017ParserKW_SUPPLY0, SV2017ParserKW_WEAK0:
		{
			p.SetState(1216)
			p.Strength0()
		}
		{
			p.SetState(1217)
			p.Match(SV2017ParserCOMMA)
		}
		p.SetState(1220)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SV2017ParserKW_HIGHZ1:
			{
				p.SetState(1218)
				p.Match(SV2017ParserKW_HIGHZ1)
			}

		case SV2017ParserKW_PULL1, SV2017ParserKW_STRONG1, SV2017ParserKW_SUPPLY1, SV2017ParserKW_WEAK1:
			{
				p.SetState(1219)
				p.Strength1()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case SV2017ParserKW_PULL1, SV2017ParserKW_STRONG1, SV2017ParserKW_SUPPLY1, SV2017ParserKW_WEAK1:
		{
			p.SetState(1222)
			p.Strength1()
		}
		{
			p.SetState(1223)
			p.Match(SV2017ParserCOMMA)
		}
		p.SetState(1226)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SV2017ParserKW_HIGHZ0:
			{
				p.SetState(1224)
				p.Match(SV2017ParserKW_HIGHZ0)
			}

		case SV2017ParserKW_PULL0, SV2017ParserKW_STRONG0, SV2017ParserKW_SUPPLY0, SV2017ParserKW_WEAK0:
			{
				p.SetState(1225)
				p.Strength0()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(1230)
		p.Match(SV2017ParserRPAREN)
	}

	return localctx
}

// IStrength0Context is an interface to support dynamic dispatch.
type IStrength0Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStrength0Context differentiates from other interfaces.
	IsStrength0Context()
}

type Strength0Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStrength0Context() *Strength0Context {
	var p = new(Strength0Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_strength0
	return p
}

func (*Strength0Context) IsStrength0Context() {}

func NewStrength0Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Strength0Context {
	var p = new(Strength0Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_strength0

	return p
}

func (s *Strength0Context) GetParser() antlr.Parser { return s.parser }

func (s *Strength0Context) KW_SUPPLY0() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_SUPPLY0, 0)
}

func (s *Strength0Context) KW_STRONG0() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_STRONG0, 0)
}

func (s *Strength0Context) KW_PULL0() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_PULL0, 0)
}

func (s *Strength0Context) KW_WEAK0() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_WEAK0, 0)
}

func (s *Strength0Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Strength0Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Strength0Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterStrength0(s)
	}
}

func (s *Strength0Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitStrength0(s)
	}
}

func (p *SV2017Parser) Strength0() (localctx IStrength0Context) {
	localctx = NewStrength0Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, SV2017ParserRULE_strength0)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1232)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserKW_PULL0 || _la == SV2017ParserKW_STRONG0 || _la == SV2017ParserKW_SUPPLY0 || _la == SV2017ParserKW_WEAK0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IStrength1Context is an interface to support dynamic dispatch.
type IStrength1Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStrength1Context differentiates from other interfaces.
	IsStrength1Context()
}

type Strength1Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStrength1Context() *Strength1Context {
	var p = new(Strength1Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_strength1
	return p
}

func (*Strength1Context) IsStrength1Context() {}

func NewStrength1Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Strength1Context {
	var p = new(Strength1Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_strength1

	return p
}

func (s *Strength1Context) GetParser() antlr.Parser { return s.parser }

func (s *Strength1Context) KW_SUPPLY1() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_SUPPLY1, 0)
}

func (s *Strength1Context) KW_STRONG1() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_STRONG1, 0)
}

func (s *Strength1Context) KW_PULL1() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_PULL1, 0)
}

func (s *Strength1Context) KW_WEAK1() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_WEAK1, 0)
}

func (s *Strength1Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Strength1Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Strength1Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterStrength1(s)
	}
}

func (s *Strength1Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitStrength1(s)
	}
}

func (p *SV2017Parser) Strength1() (localctx IStrength1Context) {
	localctx = NewStrength1Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, SV2017ParserRULE_strength1)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1234)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserKW_PULL1 || _la == SV2017ParserKW_STRONG1 || _la == SV2017ParserKW_SUPPLY1 || _la == SV2017ParserKW_WEAK1) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ICharge_strengthContext is an interface to support dynamic dispatch.
type ICharge_strengthContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCharge_strengthContext differentiates from other interfaces.
	IsCharge_strengthContext()
}

type Charge_strengthContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCharge_strengthContext() *Charge_strengthContext {
	var p = new(Charge_strengthContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_charge_strength
	return p
}

func (*Charge_strengthContext) IsCharge_strengthContext() {}

func NewCharge_strengthContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Charge_strengthContext {
	var p = new(Charge_strengthContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_charge_strength

	return p
}

func (s *Charge_strengthContext) GetParser() antlr.Parser { return s.parser }

func (s *Charge_strengthContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Charge_strengthContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Charge_strengthContext) KW_SMALL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_SMALL, 0)
}

func (s *Charge_strengthContext) KW_MEDIUM() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_MEDIUM, 0)
}

func (s *Charge_strengthContext) KW_LARGE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_LARGE, 0)
}

func (s *Charge_strengthContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Charge_strengthContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Charge_strengthContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCharge_strength(s)
	}
}

func (s *Charge_strengthContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCharge_strength(s)
	}
}

func (p *SV2017Parser) Charge_strength() (localctx ICharge_strengthContext) {
	localctx = NewCharge_strengthContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, SV2017ParserRULE_charge_strength)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1236)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(1237)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserKW_LARGE || _la == SV2017ParserKW_MEDIUM || _la == SV2017ParserKW_SMALL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1238)
		p.Match(SV2017ParserRPAREN)
	}

	return localctx
}

// ISequence_lvar_port_directionContext is an interface to support dynamic dispatch.
type ISequence_lvar_port_directionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSequence_lvar_port_directionContext differentiates from other interfaces.
	IsSequence_lvar_port_directionContext()
}

type Sequence_lvar_port_directionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySequence_lvar_port_directionContext() *Sequence_lvar_port_directionContext {
	var p = new(Sequence_lvar_port_directionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_sequence_lvar_port_direction
	return p
}

func (*Sequence_lvar_port_directionContext) IsSequence_lvar_port_directionContext() {}

func NewSequence_lvar_port_directionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sequence_lvar_port_directionContext {
	var p = new(Sequence_lvar_port_directionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_sequence_lvar_port_direction

	return p
}

func (s *Sequence_lvar_port_directionContext) GetParser() antlr.Parser { return s.parser }

func (s *Sequence_lvar_port_directionContext) KW_INPUT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_INPUT, 0)
}

func (s *Sequence_lvar_port_directionContext) KW_INOUT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_INOUT, 0)
}

func (s *Sequence_lvar_port_directionContext) KW_OUTPUT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_OUTPUT, 0)
}

func (s *Sequence_lvar_port_directionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sequence_lvar_port_directionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sequence_lvar_port_directionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterSequence_lvar_port_direction(s)
	}
}

func (s *Sequence_lvar_port_directionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitSequence_lvar_port_direction(s)
	}
}

func (p *SV2017Parser) Sequence_lvar_port_direction() (localctx ISequence_lvar_port_directionContext) {
	localctx = NewSequence_lvar_port_directionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, SV2017ParserRULE_sequence_lvar_port_direction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1240)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserKW_INOUT || _la == SV2017ParserKW_INPUT || _la == SV2017ParserKW_OUTPUT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IBins_keywordContext is an interface to support dynamic dispatch.
type IBins_keywordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBins_keywordContext differentiates from other interfaces.
	IsBins_keywordContext()
}

type Bins_keywordContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBins_keywordContext() *Bins_keywordContext {
	var p = new(Bins_keywordContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_bins_keyword
	return p
}

func (*Bins_keywordContext) IsBins_keywordContext() {}

func NewBins_keywordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bins_keywordContext {
	var p = new(Bins_keywordContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_bins_keyword

	return p
}

func (s *Bins_keywordContext) GetParser() antlr.Parser { return s.parser }

func (s *Bins_keywordContext) KW_BINS() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_BINS, 0)
}

func (s *Bins_keywordContext) KW_ILLEGAL_BINS() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ILLEGAL_BINS, 0)
}

func (s *Bins_keywordContext) KW_IGNORE_BINS() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_IGNORE_BINS, 0)
}

func (s *Bins_keywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bins_keywordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bins_keywordContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterBins_keyword(s)
	}
}

func (s *Bins_keywordContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitBins_keyword(s)
	}
}

func (p *SV2017Parser) Bins_keyword() (localctx IBins_keywordContext) {
	localctx = NewBins_keywordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, SV2017ParserRULE_bins_keyword)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1242)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserKW_BINS || _la == SV2017ParserKW_IGNORE_BINS || _la == SV2017ParserKW_ILLEGAL_BINS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IClass_item_qualifierContext is an interface to support dynamic dispatch.
type IClass_item_qualifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClass_item_qualifierContext differentiates from other interfaces.
	IsClass_item_qualifierContext()
}

type Class_item_qualifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClass_item_qualifierContext() *Class_item_qualifierContext {
	var p = new(Class_item_qualifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_class_item_qualifier
	return p
}

func (*Class_item_qualifierContext) IsClass_item_qualifierContext() {}

func NewClass_item_qualifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Class_item_qualifierContext {
	var p = new(Class_item_qualifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_class_item_qualifier

	return p
}

func (s *Class_item_qualifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Class_item_qualifierContext) KW_STATIC() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_STATIC, 0)
}

func (s *Class_item_qualifierContext) KW_PROTECTED() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_PROTECTED, 0)
}

func (s *Class_item_qualifierContext) KW_LOCAL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_LOCAL, 0)
}

func (s *Class_item_qualifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Class_item_qualifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Class_item_qualifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterClass_item_qualifier(s)
	}
}

func (s *Class_item_qualifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitClass_item_qualifier(s)
	}
}

func (p *SV2017Parser) Class_item_qualifier() (localctx IClass_item_qualifierContext) {
	localctx = NewClass_item_qualifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, SV2017ParserRULE_class_item_qualifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1244)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserKW_LOCAL || _la == SV2017ParserKW_PROTECTED || _la == SV2017ParserKW_STATIC) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IRandom_qualifierContext is an interface to support dynamic dispatch.
type IRandom_qualifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRandom_qualifierContext differentiates from other interfaces.
	IsRandom_qualifierContext()
}

type Random_qualifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRandom_qualifierContext() *Random_qualifierContext {
	var p = new(Random_qualifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_random_qualifier
	return p
}

func (*Random_qualifierContext) IsRandom_qualifierContext() {}

func NewRandom_qualifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Random_qualifierContext {
	var p = new(Random_qualifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_random_qualifier

	return p
}

func (s *Random_qualifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Random_qualifierContext) KW_RAND() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_RAND, 0)
}

func (s *Random_qualifierContext) KW_RANDC() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_RANDC, 0)
}

func (s *Random_qualifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Random_qualifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Random_qualifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterRandom_qualifier(s)
	}
}

func (s *Random_qualifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitRandom_qualifier(s)
	}
}

func (p *SV2017Parser) Random_qualifier() (localctx IRandom_qualifierContext) {
	localctx = NewRandom_qualifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, SV2017ParserRULE_random_qualifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1246)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserKW_RAND || _la == SV2017ParserKW_RANDC) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IProperty_qualifierContext is an interface to support dynamic dispatch.
type IProperty_qualifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProperty_qualifierContext differentiates from other interfaces.
	IsProperty_qualifierContext()
}

type Property_qualifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProperty_qualifierContext() *Property_qualifierContext {
	var p = new(Property_qualifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_property_qualifier
	return p
}

func (*Property_qualifierContext) IsProperty_qualifierContext() {}

func NewProperty_qualifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Property_qualifierContext {
	var p = new(Property_qualifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_property_qualifier

	return p
}

func (s *Property_qualifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Property_qualifierContext) Random_qualifier() IRandom_qualifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRandom_qualifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRandom_qualifierContext)
}

func (s *Property_qualifierContext) Class_item_qualifier() IClass_item_qualifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_item_qualifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_item_qualifierContext)
}

func (s *Property_qualifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Property_qualifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Property_qualifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterProperty_qualifier(s)
	}
}

func (s *Property_qualifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitProperty_qualifier(s)
	}
}

func (p *SV2017Parser) Property_qualifier() (localctx IProperty_qualifierContext) {
	localctx = NewProperty_qualifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, SV2017ParserRULE_property_qualifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1250)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_RAND, SV2017ParserKW_RANDC:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1248)
			p.Random_qualifier()
		}

	case SV2017ParserKW_LOCAL, SV2017ParserKW_PROTECTED, SV2017ParserKW_STATIC:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1249)
			p.Class_item_qualifier()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IMethod_qualifierContext is an interface to support dynamic dispatch.
type IMethod_qualifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMethod_qualifierContext differentiates from other interfaces.
	IsMethod_qualifierContext()
}

type Method_qualifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMethod_qualifierContext() *Method_qualifierContext {
	var p = new(Method_qualifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_method_qualifier
	return p
}

func (*Method_qualifierContext) IsMethod_qualifierContext() {}

func NewMethod_qualifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Method_qualifierContext {
	var p = new(Method_qualifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_method_qualifier

	return p
}

func (s *Method_qualifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Method_qualifierContext) KW_VIRTUAL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_VIRTUAL, 0)
}

func (s *Method_qualifierContext) KW_PURE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_PURE, 0)
}

func (s *Method_qualifierContext) Class_item_qualifier() IClass_item_qualifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_item_qualifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_item_qualifierContext)
}

func (s *Method_qualifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Method_qualifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Method_qualifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterMethod_qualifier(s)
	}
}

func (s *Method_qualifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitMethod_qualifier(s)
	}
}

func (p *SV2017Parser) Method_qualifier() (localctx IMethod_qualifierContext) {
	localctx = NewMethod_qualifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, SV2017ParserRULE_method_qualifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1257)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_PURE, SV2017ParserKW_VIRTUAL:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1253)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_PURE {
			{
				p.SetState(1252)
				p.Match(SV2017ParserKW_PURE)
			}

		}
		{
			p.SetState(1255)
			p.Match(SV2017ParserKW_VIRTUAL)
		}

	case SV2017ParserKW_LOCAL, SV2017ParserKW_PROTECTED, SV2017ParserKW_STATIC:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1256)
			p.Class_item_qualifier()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IConstraint_prototype_qualifierContext is an interface to support dynamic dispatch.
type IConstraint_prototype_qualifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstraint_prototype_qualifierContext differentiates from other interfaces.
	IsConstraint_prototype_qualifierContext()
}

type Constraint_prototype_qualifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstraint_prototype_qualifierContext() *Constraint_prototype_qualifierContext {
	var p = new(Constraint_prototype_qualifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_constraint_prototype_qualifier
	return p
}

func (*Constraint_prototype_qualifierContext) IsConstraint_prototype_qualifierContext() {}

func NewConstraint_prototype_qualifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Constraint_prototype_qualifierContext {
	var p = new(Constraint_prototype_qualifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_constraint_prototype_qualifier

	return p
}

func (s *Constraint_prototype_qualifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Constraint_prototype_qualifierContext) KW_EXTERN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_EXTERN, 0)
}

func (s *Constraint_prototype_qualifierContext) KW_PURE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_PURE, 0)
}

func (s *Constraint_prototype_qualifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Constraint_prototype_qualifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Constraint_prototype_qualifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterConstraint_prototype_qualifier(s)
	}
}

func (s *Constraint_prototype_qualifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitConstraint_prototype_qualifier(s)
	}
}

func (p *SV2017Parser) Constraint_prototype_qualifier() (localctx IConstraint_prototype_qualifierContext) {
	localctx = NewConstraint_prototype_qualifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, SV2017ParserRULE_constraint_prototype_qualifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1259)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserKW_EXTERN || _la == SV2017ParserKW_PURE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ICmos_switchtypeContext is an interface to support dynamic dispatch.
type ICmos_switchtypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCmos_switchtypeContext differentiates from other interfaces.
	IsCmos_switchtypeContext()
}

type Cmos_switchtypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCmos_switchtypeContext() *Cmos_switchtypeContext {
	var p = new(Cmos_switchtypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_cmos_switchtype
	return p
}

func (*Cmos_switchtypeContext) IsCmos_switchtypeContext() {}

func NewCmos_switchtypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cmos_switchtypeContext {
	var p = new(Cmos_switchtypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_cmos_switchtype

	return p
}

func (s *Cmos_switchtypeContext) GetParser() antlr.Parser { return s.parser }

func (s *Cmos_switchtypeContext) KW_CMOS() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_CMOS, 0)
}

func (s *Cmos_switchtypeContext) KW_RCMOS() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_RCMOS, 0)
}

func (s *Cmos_switchtypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cmos_switchtypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Cmos_switchtypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCmos_switchtype(s)
	}
}

func (s *Cmos_switchtypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCmos_switchtype(s)
	}
}

func (p *SV2017Parser) Cmos_switchtype() (localctx ICmos_switchtypeContext) {
	localctx = NewCmos_switchtypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, SV2017ParserRULE_cmos_switchtype)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1261)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserKW_CMOS || _la == SV2017ParserKW_RCMOS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IEnable_gatetypeContext is an interface to support dynamic dispatch.
type IEnable_gatetypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnable_gatetypeContext differentiates from other interfaces.
	IsEnable_gatetypeContext()
}

type Enable_gatetypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnable_gatetypeContext() *Enable_gatetypeContext {
	var p = new(Enable_gatetypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_enable_gatetype
	return p
}

func (*Enable_gatetypeContext) IsEnable_gatetypeContext() {}

func NewEnable_gatetypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Enable_gatetypeContext {
	var p = new(Enable_gatetypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_enable_gatetype

	return p
}

func (s *Enable_gatetypeContext) GetParser() antlr.Parser { return s.parser }

func (s *Enable_gatetypeContext) KW_BUFIF0() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_BUFIF0, 0)
}

func (s *Enable_gatetypeContext) KW_BUFIF1() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_BUFIF1, 0)
}

func (s *Enable_gatetypeContext) KW_NOTIF0() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_NOTIF0, 0)
}

func (s *Enable_gatetypeContext) KW_NOTIF1() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_NOTIF1, 0)
}

func (s *Enable_gatetypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Enable_gatetypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Enable_gatetypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterEnable_gatetype(s)
	}
}

func (s *Enable_gatetypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitEnable_gatetype(s)
	}
}

func (p *SV2017Parser) Enable_gatetype() (localctx IEnable_gatetypeContext) {
	localctx = NewEnable_gatetypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, SV2017ParserRULE_enable_gatetype)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1263)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserKW_BUFIF0 || _la == SV2017ParserKW_BUFIF1 || _la == SV2017ParserKW_NOTIF0 || _la == SV2017ParserKW_NOTIF1) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IMos_switchtypeContext is an interface to support dynamic dispatch.
type IMos_switchtypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMos_switchtypeContext differentiates from other interfaces.
	IsMos_switchtypeContext()
}

type Mos_switchtypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMos_switchtypeContext() *Mos_switchtypeContext {
	var p = new(Mos_switchtypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_mos_switchtype
	return p
}

func (*Mos_switchtypeContext) IsMos_switchtypeContext() {}

func NewMos_switchtypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Mos_switchtypeContext {
	var p = new(Mos_switchtypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_mos_switchtype

	return p
}

func (s *Mos_switchtypeContext) GetParser() antlr.Parser { return s.parser }

func (s *Mos_switchtypeContext) KW_NMOS() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_NMOS, 0)
}

func (s *Mos_switchtypeContext) KW_PMOS() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_PMOS, 0)
}

func (s *Mos_switchtypeContext) KW_RNMOS() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_RNMOS, 0)
}

func (s *Mos_switchtypeContext) KW_RPMOS() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_RPMOS, 0)
}

func (s *Mos_switchtypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Mos_switchtypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Mos_switchtypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterMos_switchtype(s)
	}
}

func (s *Mos_switchtypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitMos_switchtype(s)
	}
}

func (p *SV2017Parser) Mos_switchtype() (localctx IMos_switchtypeContext) {
	localctx = NewMos_switchtypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, SV2017ParserRULE_mos_switchtype)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1265)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserKW_NMOS || _la == SV2017ParserKW_PMOS || _la == SV2017ParserKW_RNMOS || _la == SV2017ParserKW_RPMOS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IN_input_gatetypeContext is an interface to support dynamic dispatch.
type IN_input_gatetypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsN_input_gatetypeContext differentiates from other interfaces.
	IsN_input_gatetypeContext()
}

type N_input_gatetypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyN_input_gatetypeContext() *N_input_gatetypeContext {
	var p = new(N_input_gatetypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_n_input_gatetype
	return p
}

func (*N_input_gatetypeContext) IsN_input_gatetypeContext() {}

func NewN_input_gatetypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *N_input_gatetypeContext {
	var p = new(N_input_gatetypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_n_input_gatetype

	return p
}

func (s *N_input_gatetypeContext) GetParser() antlr.Parser { return s.parser }

func (s *N_input_gatetypeContext) KW_AND() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_AND, 0)
}

func (s *N_input_gatetypeContext) KW_NAND() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_NAND, 0)
}

func (s *N_input_gatetypeContext) KW_OR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_OR, 0)
}

func (s *N_input_gatetypeContext) KW_NOR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_NOR, 0)
}

func (s *N_input_gatetypeContext) KW_XOR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_XOR, 0)
}

func (s *N_input_gatetypeContext) KW_XNOR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_XNOR, 0)
}

func (s *N_input_gatetypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *N_input_gatetypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *N_input_gatetypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterN_input_gatetype(s)
	}
}

func (s *N_input_gatetypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitN_input_gatetype(s)
	}
}

func (p *SV2017Parser) N_input_gatetype() (localctx IN_input_gatetypeContext) {
	localctx = NewN_input_gatetypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, SV2017ParserRULE_n_input_gatetype)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1267)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserKW_AND || (((_la-161)&-(0x1f+1)) == 0 && ((1<<uint((_la-161)))&((1<<(SV2017ParserKW_NAND-161))|(1<<(SV2017ParserKW_NOR-161))|(1<<(SV2017ParserKW_OR-161)))) != 0) || _la == SV2017ParserKW_XNOR || _la == SV2017ParserKW_XOR) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IN_output_gatetypeContext is an interface to support dynamic dispatch.
type IN_output_gatetypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsN_output_gatetypeContext differentiates from other interfaces.
	IsN_output_gatetypeContext()
}

type N_output_gatetypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyN_output_gatetypeContext() *N_output_gatetypeContext {
	var p = new(N_output_gatetypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_n_output_gatetype
	return p
}

func (*N_output_gatetypeContext) IsN_output_gatetypeContext() {}

func NewN_output_gatetypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *N_output_gatetypeContext {
	var p = new(N_output_gatetypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_n_output_gatetype

	return p
}

func (s *N_output_gatetypeContext) GetParser() antlr.Parser { return s.parser }

func (s *N_output_gatetypeContext) KW_BUF() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_BUF, 0)
}

func (s *N_output_gatetypeContext) KW_NOT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_NOT, 0)
}

func (s *N_output_gatetypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *N_output_gatetypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *N_output_gatetypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterN_output_gatetype(s)
	}
}

func (s *N_output_gatetypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitN_output_gatetype(s)
	}
}

func (p *SV2017Parser) N_output_gatetype() (localctx IN_output_gatetypeContext) {
	localctx = NewN_output_gatetypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, SV2017ParserRULE_n_output_gatetype)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1269)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserKW_BUF || _la == SV2017ParserKW_NOT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IPass_en_switchtypeContext is an interface to support dynamic dispatch.
type IPass_en_switchtypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPass_en_switchtypeContext differentiates from other interfaces.
	IsPass_en_switchtypeContext()
}

type Pass_en_switchtypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPass_en_switchtypeContext() *Pass_en_switchtypeContext {
	var p = new(Pass_en_switchtypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_pass_en_switchtype
	return p
}

func (*Pass_en_switchtypeContext) IsPass_en_switchtypeContext() {}

func NewPass_en_switchtypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pass_en_switchtypeContext {
	var p = new(Pass_en_switchtypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_pass_en_switchtype

	return p
}

func (s *Pass_en_switchtypeContext) GetParser() antlr.Parser { return s.parser }

func (s *Pass_en_switchtypeContext) KW_TRANIF0() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_TRANIF0, 0)
}

func (s *Pass_en_switchtypeContext) KW_TRANIF1() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_TRANIF1, 0)
}

func (s *Pass_en_switchtypeContext) KW_RTRANIF1() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_RTRANIF1, 0)
}

func (s *Pass_en_switchtypeContext) KW_RTRANIF0() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_RTRANIF0, 0)
}

func (s *Pass_en_switchtypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pass_en_switchtypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pass_en_switchtypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPass_en_switchtype(s)
	}
}

func (s *Pass_en_switchtypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPass_en_switchtype(s)
	}
}

func (p *SV2017Parser) Pass_en_switchtype() (localctx IPass_en_switchtypeContext) {
	localctx = NewPass_en_switchtypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, SV2017ParserRULE_pass_en_switchtype)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1271)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserKW_RTRANIF0 || _la == SV2017ParserKW_RTRANIF1 || _la == SV2017ParserKW_TRANIF0 || _la == SV2017ParserKW_TRANIF1) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IPass_switchtypeContext is an interface to support dynamic dispatch.
type IPass_switchtypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPass_switchtypeContext differentiates from other interfaces.
	IsPass_switchtypeContext()
}

type Pass_switchtypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPass_switchtypeContext() *Pass_switchtypeContext {
	var p = new(Pass_switchtypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_pass_switchtype
	return p
}

func (*Pass_switchtypeContext) IsPass_switchtypeContext() {}

func NewPass_switchtypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pass_switchtypeContext {
	var p = new(Pass_switchtypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_pass_switchtype

	return p
}

func (s *Pass_switchtypeContext) GetParser() antlr.Parser { return s.parser }

func (s *Pass_switchtypeContext) KW_TRAN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_TRAN, 0)
}

func (s *Pass_switchtypeContext) KW_RTRAN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_RTRAN, 0)
}

func (s *Pass_switchtypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pass_switchtypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pass_switchtypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPass_switchtype(s)
	}
}

func (s *Pass_switchtypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPass_switchtype(s)
	}
}

func (p *SV2017Parser) Pass_switchtype() (localctx IPass_switchtypeContext) {
	localctx = NewPass_switchtypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, SV2017ParserRULE_pass_switchtype)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1273)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserKW_RTRAN || _la == SV2017ParserKW_TRAN) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IAny_implicationContext is an interface to support dynamic dispatch.
type IAny_implicationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAny_implicationContext differentiates from other interfaces.
	IsAny_implicationContext()
}

type Any_implicationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAny_implicationContext() *Any_implicationContext {
	var p = new(Any_implicationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_any_implication
	return p
}

func (*Any_implicationContext) IsAny_implicationContext() {}

func NewAny_implicationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Any_implicationContext {
	var p = new(Any_implicationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_any_implication

	return p
}

func (s *Any_implicationContext) GetParser() antlr.Parser { return s.parser }

func (s *Any_implicationContext) IMPLIES() antlr.TerminalNode {
	return s.GetToken(SV2017ParserIMPLIES, 0)
}

func (s *Any_implicationContext) IMPLIES_P() antlr.TerminalNode {
	return s.GetToken(SV2017ParserIMPLIES_P, 0)
}

func (s *Any_implicationContext) IMPLIES_N() antlr.TerminalNode {
	return s.GetToken(SV2017ParserIMPLIES_N, 0)
}

func (s *Any_implicationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Any_implicationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Any_implicationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterAny_implication(s)
	}
}

func (s *Any_implicationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitAny_implication(s)
	}
}

func (p *SV2017Parser) Any_implication() (localctx IAny_implicationContext) {
	localctx = NewAny_implicationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, SV2017ParserRULE_any_implication)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1275)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-373)&-(0x1f+1)) == 0 && ((1<<uint((_la-373)))&((1<<(SV2017ParserIMPLIES-373))|(1<<(SV2017ParserIMPLIES_P-373))|(1<<(SV2017ParserIMPLIES_N-373)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IPolarity_operatorContext is an interface to support dynamic dispatch.
type IPolarity_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPolarity_operatorContext differentiates from other interfaces.
	IsPolarity_operatorContext()
}

type Polarity_operatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPolarity_operatorContext() *Polarity_operatorContext {
	var p = new(Polarity_operatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_polarity_operator
	return p
}

func (*Polarity_operatorContext) IsPolarity_operatorContext() {}

func NewPolarity_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Polarity_operatorContext {
	var p = new(Polarity_operatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_polarity_operator

	return p
}

func (s *Polarity_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Polarity_operatorContext) PLUS() antlr.TerminalNode {
	return s.GetToken(SV2017ParserPLUS, 0)
}

func (s *Polarity_operatorContext) MINUS() antlr.TerminalNode {
	return s.GetToken(SV2017ParserMINUS, 0)
}

func (s *Polarity_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Polarity_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Polarity_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPolarity_operator(s)
	}
}

func (s *Polarity_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPolarity_operator(s)
	}
}

func (p *SV2017Parser) Polarity_operator() (localctx IPolarity_operatorContext) {
	localctx = NewPolarity_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, SV2017ParserRULE_polarity_operator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1277)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserPLUS || _la == SV2017ParserMINUS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ITiming_check_event_controlContext is an interface to support dynamic dispatch.
type ITiming_check_event_controlContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTiming_check_event_controlContext differentiates from other interfaces.
	IsTiming_check_event_controlContext()
}

type Timing_check_event_controlContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTiming_check_event_controlContext() *Timing_check_event_controlContext {
	var p = new(Timing_check_event_controlContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_timing_check_event_control
	return p
}

func (*Timing_check_event_controlContext) IsTiming_check_event_controlContext() {}

func NewTiming_check_event_controlContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Timing_check_event_controlContext {
	var p = new(Timing_check_event_controlContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_timing_check_event_control

	return p
}

func (s *Timing_check_event_controlContext) GetParser() antlr.Parser { return s.parser }

func (s *Timing_check_event_controlContext) KW_POSEDGE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_POSEDGE, 0)
}

func (s *Timing_check_event_controlContext) KW_NEGEDGE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_NEGEDGE, 0)
}

func (s *Timing_check_event_controlContext) KW_EDGE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_EDGE, 0)
}

func (s *Timing_check_event_controlContext) EDGE_CONTROL_SPECIFIER() antlr.TerminalNode {
	return s.GetToken(SV2017ParserEDGE_CONTROL_SPECIFIER, 0)
}

func (s *Timing_check_event_controlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Timing_check_event_controlContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Timing_check_event_controlContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterTiming_check_event_control(s)
	}
}

func (s *Timing_check_event_controlContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitTiming_check_event_control(s)
	}
}

func (p *SV2017Parser) Timing_check_event_control() (localctx ITiming_check_event_controlContext) {
	localctx = NewTiming_check_event_controlContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, SV2017ParserRULE_timing_check_event_control)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1279)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserKW_EDGE || _la == SV2017ParserKW_NEGEDGE || _la == SV2017ParserKW_POSEDGE || _la == SV2017ParserEDGE_CONTROL_SPECIFIER) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IImport_exportContext is an interface to support dynamic dispatch.
type IImport_exportContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImport_exportContext differentiates from other interfaces.
	IsImport_exportContext()
}

type Import_exportContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImport_exportContext() *Import_exportContext {
	var p = new(Import_exportContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_import_export
	return p
}

func (*Import_exportContext) IsImport_exportContext() {}

func NewImport_exportContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Import_exportContext {
	var p = new(Import_exportContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_import_export

	return p
}

func (s *Import_exportContext) GetParser() antlr.Parser { return s.parser }

func (s *Import_exportContext) KW_IMPORT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_IMPORT, 0)
}

func (s *Import_exportContext) KW_EXPORT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_EXPORT, 0)
}

func (s *Import_exportContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Import_exportContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Import_exportContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterImport_export(s)
	}
}

func (s *Import_exportContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitImport_export(s)
	}
}

func (p *SV2017Parser) Import_export() (localctx IImport_exportContext) {
	localctx = NewImport_exportContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, SV2017ParserRULE_import_export)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1281)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserKW_EXPORT || _la == SV2017ParserKW_IMPORT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IArray_method_nameContext is an interface to support dynamic dispatch.
type IArray_method_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArray_method_nameContext differentiates from other interfaces.
	IsArray_method_nameContext()
}

type Array_method_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArray_method_nameContext() *Array_method_nameContext {
	var p = new(Array_method_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_array_method_name
	return p
}

func (*Array_method_nameContext) IsArray_method_nameContext() {}

func NewArray_method_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Array_method_nameContext {
	var p = new(Array_method_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_array_method_name

	return p
}

func (s *Array_method_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Array_method_nameContext) KW_UNIQUE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_UNIQUE, 0)
}

func (s *Array_method_nameContext) KW_AND() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_AND, 0)
}

func (s *Array_method_nameContext) KW_OR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_OR, 0)
}

func (s *Array_method_nameContext) KW_XOR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_XOR, 0)
}

func (s *Array_method_nameContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Array_method_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_method_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Array_method_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterArray_method_name(s)
	}
}

func (s *Array_method_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitArray_method_name(s)
	}
}

func (p *SV2017Parser) Array_method_name() (localctx IArray_method_nameContext) {
	localctx = NewArray_method_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, SV2017ParserRULE_array_method_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1288)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_UNIQUE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1283)
			p.Match(SV2017ParserKW_UNIQUE)
		}

	case SV2017ParserKW_AND:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1284)
			p.Match(SV2017ParserKW_AND)
		}

	case SV2017ParserKW_OR:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1285)
			p.Match(SV2017ParserKW_OR)
		}

	case SV2017ParserKW_XOR:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1286)
			p.Match(SV2017ParserKW_XOR)
		}

	case SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_SAMPLE, SV2017ParserKW_STD, SV2017ParserKW_TYPE_OPTION, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1287)
			p.Identifier()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOperator_mul_div_modContext is an interface to support dynamic dispatch.
type IOperator_mul_div_modContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOperator_mul_div_modContext differentiates from other interfaces.
	IsOperator_mul_div_modContext()
}

type Operator_mul_div_modContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOperator_mul_div_modContext() *Operator_mul_div_modContext {
	var p = new(Operator_mul_div_modContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_operator_mul_div_mod
	return p
}

func (*Operator_mul_div_modContext) IsOperator_mul_div_modContext() {}

func NewOperator_mul_div_modContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Operator_mul_div_modContext {
	var p = new(Operator_mul_div_modContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_operator_mul_div_mod

	return p
}

func (s *Operator_mul_div_modContext) GetParser() antlr.Parser { return s.parser }

func (s *Operator_mul_div_modContext) MUL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserMUL, 0)
}

func (s *Operator_mul_div_modContext) DIV() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDIV, 0)
}

func (s *Operator_mul_div_modContext) MOD() antlr.TerminalNode {
	return s.GetToken(SV2017ParserMOD, 0)
}

func (s *Operator_mul_div_modContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Operator_mul_div_modContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Operator_mul_div_modContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterOperator_mul_div_mod(s)
	}
}

func (s *Operator_mul_div_modContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitOperator_mul_div_mod(s)
	}
}

func (p *SV2017Parser) Operator_mul_div_mod() (localctx IOperator_mul_div_modContext) {
	localctx = NewOperator_mul_div_modContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, SV2017ParserRULE_operator_mul_div_mod)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1290)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserMOD || _la == SV2017ParserMUL || _la == SV2017ParserDIV) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IOperator_plus_minusContext is an interface to support dynamic dispatch.
type IOperator_plus_minusContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOperator_plus_minusContext differentiates from other interfaces.
	IsOperator_plus_minusContext()
}

type Operator_plus_minusContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOperator_plus_minusContext() *Operator_plus_minusContext {
	var p = new(Operator_plus_minusContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_operator_plus_minus
	return p
}

func (*Operator_plus_minusContext) IsOperator_plus_minusContext() {}

func NewOperator_plus_minusContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Operator_plus_minusContext {
	var p = new(Operator_plus_minusContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_operator_plus_minus

	return p
}

func (s *Operator_plus_minusContext) GetParser() antlr.Parser { return s.parser }

func (s *Operator_plus_minusContext) PLUS() antlr.TerminalNode {
	return s.GetToken(SV2017ParserPLUS, 0)
}

func (s *Operator_plus_minusContext) MINUS() antlr.TerminalNode {
	return s.GetToken(SV2017ParserMINUS, 0)
}

func (s *Operator_plus_minusContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Operator_plus_minusContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Operator_plus_minusContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterOperator_plus_minus(s)
	}
}

func (s *Operator_plus_minusContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitOperator_plus_minus(s)
	}
}

func (p *SV2017Parser) Operator_plus_minus() (localctx IOperator_plus_minusContext) {
	localctx = NewOperator_plus_minusContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, SV2017ParserRULE_operator_plus_minus)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1292)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserPLUS || _la == SV2017ParserMINUS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IOperator_shiftContext is an interface to support dynamic dispatch.
type IOperator_shiftContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOperator_shiftContext differentiates from other interfaces.
	IsOperator_shiftContext()
}

type Operator_shiftContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOperator_shiftContext() *Operator_shiftContext {
	var p = new(Operator_shiftContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_operator_shift
	return p
}

func (*Operator_shiftContext) IsOperator_shiftContext() {}

func NewOperator_shiftContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Operator_shiftContext {
	var p = new(Operator_shiftContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_operator_shift

	return p
}

func (s *Operator_shiftContext) GetParser() antlr.Parser { return s.parser }

func (s *Operator_shiftContext) SHIFT_LEFT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSHIFT_LEFT, 0)
}

func (s *Operator_shiftContext) SHIFT_RIGHT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSHIFT_RIGHT, 0)
}

func (s *Operator_shiftContext) ARITH_SHIFT_LEFT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserARITH_SHIFT_LEFT, 0)
}

func (s *Operator_shiftContext) ARITH_SHIFT_RIGHT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserARITH_SHIFT_RIGHT, 0)
}

func (s *Operator_shiftContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Operator_shiftContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Operator_shiftContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterOperator_shift(s)
	}
}

func (s *Operator_shiftContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitOperator_shift(s)
	}
}

func (p *SV2017Parser) Operator_shift() (localctx IOperator_shiftContext) {
	localctx = NewOperator_shiftContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, SV2017ParserRULE_operator_shift)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1294)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-314)&-(0x1f+1)) == 0 && ((1<<uint((_la-314)))&((1<<(SV2017ParserSHIFT_LEFT-314))|(1<<(SV2017ParserSHIFT_RIGHT-314))|(1<<(SV2017ParserARITH_SHIFT_LEFT-314))|(1<<(SV2017ParserARITH_SHIFT_RIGHT-314)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IOperator_cmpContext is an interface to support dynamic dispatch.
type IOperator_cmpContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOperator_cmpContext differentiates from other interfaces.
	IsOperator_cmpContext()
}

type Operator_cmpContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOperator_cmpContext() *Operator_cmpContext {
	var p = new(Operator_cmpContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_operator_cmp
	return p
}

func (*Operator_cmpContext) IsOperator_cmpContext() {}

func NewOperator_cmpContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Operator_cmpContext {
	var p = new(Operator_cmpContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_operator_cmp

	return p
}

func (s *Operator_cmpContext) GetParser() antlr.Parser { return s.parser }

func (s *Operator_cmpContext) LT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLT, 0)
}

func (s *Operator_cmpContext) LE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLE, 0)
}

func (s *Operator_cmpContext) GT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserGT, 0)
}

func (s *Operator_cmpContext) GE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserGE, 0)
}

func (s *Operator_cmpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Operator_cmpContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Operator_cmpContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterOperator_cmp(s)
	}
}

func (s *Operator_cmpContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitOperator_cmp(s)
	}
}

func (p *SV2017Parser) Operator_cmp() (localctx IOperator_cmpContext) {
	localctx = NewOperator_cmpContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, SV2017ParserRULE_operator_cmp)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1296)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-339)&-(0x1f+1)) == 0 && ((1<<uint((_la-339)))&((1<<(SV2017ParserLT-339))|(1<<(SV2017ParserGT-339))|(1<<(SV2017ParserGE-339))|(1<<(SV2017ParserLE-339)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IOperator_eq_neqContext is an interface to support dynamic dispatch.
type IOperator_eq_neqContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOperator_eq_neqContext differentiates from other interfaces.
	IsOperator_eq_neqContext()
}

type Operator_eq_neqContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOperator_eq_neqContext() *Operator_eq_neqContext {
	var p = new(Operator_eq_neqContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_operator_eq_neq
	return p
}

func (*Operator_eq_neqContext) IsOperator_eq_neqContext() {}

func NewOperator_eq_neqContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Operator_eq_neqContext {
	var p = new(Operator_eq_neqContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_operator_eq_neq

	return p
}

func (s *Operator_eq_neqContext) GetParser() antlr.Parser { return s.parser }

func (s *Operator_eq_neqContext) EQ() antlr.TerminalNode {
	return s.GetToken(SV2017ParserEQ, 0)
}

func (s *Operator_eq_neqContext) NEQ() antlr.TerminalNode {
	return s.GetToken(SV2017ParserNEQ, 0)
}

func (s *Operator_eq_neqContext) CASE_EQ() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCASE_EQ, 0)
}

func (s *Operator_eq_neqContext) CASE_NEQ() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCASE_NEQ, 0)
}

func (s *Operator_eq_neqContext) WILDCARD_EQ() antlr.TerminalNode {
	return s.GetToken(SV2017ParserWILDCARD_EQ, 0)
}

func (s *Operator_eq_neqContext) WILDCARD_NEQ() antlr.TerminalNode {
	return s.GetToken(SV2017ParserWILDCARD_NEQ, 0)
}

func (s *Operator_eq_neqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Operator_eq_neqContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Operator_eq_neqContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterOperator_eq_neq(s)
	}
}

func (s *Operator_eq_neqContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitOperator_eq_neq(s)
	}
}

func (p *SV2017Parser) Operator_eq_neq() (localctx IOperator_eq_neqContext) {
	localctx = NewOperator_eq_neqContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, SV2017ParserRULE_operator_eq_neq)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1298)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-332)&-(0x1f+1)) == 0 && ((1<<uint((_la-332)))&((1<<(SV2017ParserEQ-332))|(1<<(SV2017ParserNEQ-332))|(1<<(SV2017ParserCASE_EQ-332))|(1<<(SV2017ParserCASE_NEQ-332))|(1<<(SV2017ParserWILDCARD_EQ-332))|(1<<(SV2017ParserWILDCARD_NEQ-332)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IOperator_xorContext is an interface to support dynamic dispatch.
type IOperator_xorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOperator_xorContext differentiates from other interfaces.
	IsOperator_xorContext()
}

type Operator_xorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOperator_xorContext() *Operator_xorContext {
	var p = new(Operator_xorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_operator_xor
	return p
}

func (*Operator_xorContext) IsOperator_xorContext() {}

func NewOperator_xorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Operator_xorContext {
	var p = new(Operator_xorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_operator_xor

	return p
}

func (s *Operator_xorContext) GetParser() antlr.Parser { return s.parser }

func (s *Operator_xorContext) XOR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserXOR, 0)
}

func (s *Operator_xorContext) NXOR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserNXOR, 0)
}

func (s *Operator_xorContext) XORN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserXORN, 0)
}

func (s *Operator_xorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Operator_xorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Operator_xorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterOperator_xor(s)
	}
}

func (s *Operator_xorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitOperator_xor(s)
	}
}

func (p *SV2017Parser) Operator_xor() (localctx IOperator_xorContext) {
	localctx = NewOperator_xorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, SV2017ParserRULE_operator_xor)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1300)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IOperator_implContext is an interface to support dynamic dispatch.
type IOperator_implContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOperator_implContext differentiates from other interfaces.
	IsOperator_implContext()
}

type Operator_implContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOperator_implContext() *Operator_implContext {
	var p = new(Operator_implContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_operator_impl
	return p
}

func (*Operator_implContext) IsOperator_implContext() {}

func NewOperator_implContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Operator_implContext {
	var p = new(Operator_implContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_operator_impl

	return p
}

func (s *Operator_implContext) GetParser() antlr.Parser { return s.parser }

func (s *Operator_implContext) ARROW() antlr.TerminalNode {
	return s.GetToken(SV2017ParserARROW, 0)
}

func (s *Operator_implContext) BI_DIR_ARROW() antlr.TerminalNode {
	return s.GetToken(SV2017ParserBI_DIR_ARROW, 0)
}

func (s *Operator_implContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Operator_implContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Operator_implContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterOperator_impl(s)
	}
}

func (s *Operator_implContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitOperator_impl(s)
	}
}

func (p *SV2017Parser) Operator_impl() (localctx IOperator_implContext) {
	localctx = NewOperator_implContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, SV2017ParserRULE_operator_impl)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1302)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserBI_DIR_ARROW || _la == SV2017ParserARROW) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IUdp_nonansi_declarationContext is an interface to support dynamic dispatch.
type IUdp_nonansi_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUdp_nonansi_declarationContext differentiates from other interfaces.
	IsUdp_nonansi_declarationContext()
}

type Udp_nonansi_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUdp_nonansi_declarationContext() *Udp_nonansi_declarationContext {
	var p = new(Udp_nonansi_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_udp_nonansi_declaration
	return p
}

func (*Udp_nonansi_declarationContext) IsUdp_nonansi_declarationContext() {}

func NewUdp_nonansi_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Udp_nonansi_declarationContext {
	var p = new(Udp_nonansi_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_udp_nonansi_declaration

	return p
}

func (s *Udp_nonansi_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Udp_nonansi_declarationContext) KW_PRIMITIVE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_PRIMITIVE, 0)
}

func (s *Udp_nonansi_declarationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Udp_nonansi_declarationContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Udp_nonansi_declarationContext) Identifier_list_2plus() IIdentifier_list_2plusContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_list_2plusContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_list_2plusContext)
}

func (s *Udp_nonansi_declarationContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Udp_nonansi_declarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Udp_nonansi_declarationContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Udp_nonansi_declarationContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Udp_nonansi_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Udp_nonansi_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Udp_nonansi_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterUdp_nonansi_declaration(s)
	}
}

func (s *Udp_nonansi_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitUdp_nonansi_declaration(s)
	}
}

func (p *SV2017Parser) Udp_nonansi_declaration() (localctx IUdp_nonansi_declarationContext) {
	localctx = NewUdp_nonansi_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, SV2017ParserRULE_udp_nonansi_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1307)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserTICK_IDENTIFIER || _la == SV2017ParserLPAREN {
		{
			p.SetState(1304)
			p.Attribute_instance()
		}

		p.SetState(1309)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1310)
		p.Match(SV2017ParserKW_PRIMITIVE)
	}
	{
		p.SetState(1311)
		p.Identifier()
	}
	{
		p.SetState(1312)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(1313)
		p.Identifier_list_2plus()
	}
	{
		p.SetState(1314)
		p.Match(SV2017ParserRPAREN)
	}
	{
		p.SetState(1315)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IUdp_ansi_declarationContext is an interface to support dynamic dispatch.
type IUdp_ansi_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUdp_ansi_declarationContext differentiates from other interfaces.
	IsUdp_ansi_declarationContext()
}

type Udp_ansi_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUdp_ansi_declarationContext() *Udp_ansi_declarationContext {
	var p = new(Udp_ansi_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_udp_ansi_declaration
	return p
}

func (*Udp_ansi_declarationContext) IsUdp_ansi_declarationContext() {}

func NewUdp_ansi_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Udp_ansi_declarationContext {
	var p = new(Udp_ansi_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_udp_ansi_declaration

	return p
}

func (s *Udp_ansi_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Udp_ansi_declarationContext) KW_PRIMITIVE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_PRIMITIVE, 0)
}

func (s *Udp_ansi_declarationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Udp_ansi_declarationContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Udp_ansi_declarationContext) Udp_declaration_port_list() IUdp_declaration_port_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUdp_declaration_port_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUdp_declaration_port_listContext)
}

func (s *Udp_ansi_declarationContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Udp_ansi_declarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Udp_ansi_declarationContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Udp_ansi_declarationContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Udp_ansi_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Udp_ansi_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Udp_ansi_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterUdp_ansi_declaration(s)
	}
}

func (s *Udp_ansi_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitUdp_ansi_declaration(s)
	}
}

func (p *SV2017Parser) Udp_ansi_declaration() (localctx IUdp_ansi_declarationContext) {
	localctx = NewUdp_ansi_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, SV2017ParserRULE_udp_ansi_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1320)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserTICK_IDENTIFIER || _la == SV2017ParserLPAREN {
		{
			p.SetState(1317)
			p.Attribute_instance()
		}

		p.SetState(1322)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1323)
		p.Match(SV2017ParserKW_PRIMITIVE)
	}
	{
		p.SetState(1324)
		p.Identifier()
	}
	{
		p.SetState(1325)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(1326)
		p.Udp_declaration_port_list()
	}
	{
		p.SetState(1327)
		p.Match(SV2017ParserRPAREN)
	}
	{
		p.SetState(1328)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IUdp_declarationContext is an interface to support dynamic dispatch.
type IUdp_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUdp_declarationContext differentiates from other interfaces.
	IsUdp_declarationContext()
}

type Udp_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUdp_declarationContext() *Udp_declarationContext {
	var p = new(Udp_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_udp_declaration
	return p
}

func (*Udp_declarationContext) IsUdp_declarationContext() {}

func NewUdp_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Udp_declarationContext {
	var p = new(Udp_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_udp_declaration

	return p
}

func (s *Udp_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Udp_declarationContext) KW_EXTERN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_EXTERN, 0)
}

func (s *Udp_declarationContext) Udp_nonansi_declaration() IUdp_nonansi_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUdp_nonansi_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUdp_nonansi_declarationContext)
}

func (s *Udp_declarationContext) Udp_ansi_declaration() IUdp_ansi_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUdp_ansi_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUdp_ansi_declarationContext)
}

func (s *Udp_declarationContext) Udp_body() IUdp_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUdp_bodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUdp_bodyContext)
}

func (s *Udp_declarationContext) KW_ENDPRIMITIVE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ENDPRIMITIVE, 0)
}

func (s *Udp_declarationContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Udp_declarationContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Udp_declarationContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Udp_declarationContext) AllUdp_port_declaration() []IUdp_port_declarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUdp_port_declarationContext)(nil)).Elem())
	var tst = make([]IUdp_port_declarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUdp_port_declarationContext)
		}
	}

	return tst
}

func (s *Udp_declarationContext) Udp_port_declaration(i int) IUdp_port_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUdp_port_declarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUdp_port_declarationContext)
}

func (s *Udp_declarationContext) KW_PRIMITIVE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_PRIMITIVE, 0)
}

func (s *Udp_declarationContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Udp_declarationContext) DOT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOT, 0)
}

func (s *Udp_declarationContext) MUL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserMUL, 0)
}

func (s *Udp_declarationContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Udp_declarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Udp_declarationContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Udp_declarationContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Udp_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Udp_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Udp_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterUdp_declaration(s)
	}
}

func (s *Udp_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitUdp_declaration(s)
	}
}

func (p *SV2017Parser) Udp_declaration() (localctx IUdp_declarationContext) {
	localctx = NewUdp_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, SV2017ParserRULE_udp_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1370)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_EXTERN:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1330)
			p.Match(SV2017ParserKW_EXTERN)
		}
		p.SetState(1333)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 28, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1331)
				p.Udp_nonansi_declaration()
			}

		case 2:
			{
				p.SetState(1332)
				p.Udp_ansi_declaration()
			}

		}

	case SV2017ParserKW_PRIMITIVE, SV2017ParserTICK_IDENTIFIER, SV2017ParserLPAREN:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1361)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 32, p.GetParserRuleContext()) {
		case 1:
			p.SetState(1352)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 30, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(1335)
					p.Udp_nonansi_declaration()
				}
				{
					p.SetState(1336)
					p.Udp_port_declaration()
				}

			case 2:
				p.SetState(1341)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == SV2017ParserTICK_IDENTIFIER || _la == SV2017ParserLPAREN {
					{
						p.SetState(1338)
						p.Attribute_instance()
					}

					p.SetState(1343)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(1344)
					p.Match(SV2017ParserKW_PRIMITIVE)
				}
				{
					p.SetState(1345)
					p.Identifier()
				}
				{
					p.SetState(1346)
					p.Match(SV2017ParserLPAREN)
				}
				{
					p.SetState(1347)
					p.Match(SV2017ParserDOT)
				}
				{
					p.SetState(1348)
					p.Match(SV2017ParserMUL)
				}
				{
					p.SetState(1349)
					p.Match(SV2017ParserRPAREN)
				}
				{
					p.SetState(1350)
					p.Match(SV2017ParserSEMI)
				}

			}
			p.SetState(1357)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SV2017ParserKW_INPUT || _la == SV2017ParserKW_OUTPUT || _la == SV2017ParserKW_REG || _la == SV2017ParserTICK_IDENTIFIER || _la == SV2017ParserLPAREN {
				{
					p.SetState(1354)
					p.Udp_port_declaration()
				}

				p.SetState(1359)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		case 2:
			{
				p.SetState(1360)
				p.Udp_ansi_declaration()
			}

		}
		{
			p.SetState(1363)
			p.Udp_body()
		}
		{
			p.SetState(1364)
			p.Match(SV2017ParserKW_ENDPRIMITIVE)
		}
		p.SetState(1368)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SV2017ParserCOLON:
			{
				p.SetState(1365)
				p.Match(SV2017ParserCOLON)
			}
			{
				p.SetState(1366)
				p.Identifier()
			}

		case SV2017ParserEOF, SV2017ParserTICK_TIMESCALE, SV2017ParserTICK_DEFAULT_NETTYPE, SV2017ParserTICK_INCLUDE, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_AUTOMATIC, SV2017ParserKW_BIND, SV2017ParserKW_BIT, SV2017ParserKW_BYTE, SV2017ParserKW_CHANDLE, SV2017ParserKW_CHECKER, SV2017ParserKW_CLASS, SV2017ParserKW_CONFIG, SV2017ParserKW_CONST, SV2017ParserKW_CONSTRAINT, SV2017ParserKW_COVERGROUP, SV2017ParserKW_ENUM, SV2017ParserKW_EVENT, SV2017ParserKW_EXPORT, SV2017ParserKW_EXTERN, SV2017ParserKW_FUNCTION, SV2017ParserKW_IMPORT, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_INTERCONNECT, SV2017ParserKW_INTERFACE, SV2017ParserKW_LET, SV2017ParserKW_LOCAL, SV2017ParserKW_LOCALPARAM, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_MACROMODULE, SV2017ParserKW_MODULE, SV2017ParserKW_NETTYPE, SV2017ParserKW_NONE, SV2017ParserKW_OPTION, SV2017ParserKW_PACKAGE, SV2017ParserKW_PARAMETER, SV2017ParserKW_PRIMITIVE, SV2017ParserKW_PROGRAM, SV2017ParserKW_PROPERTY, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_SAMPLE, SV2017ParserKW_SEQUENCE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_STATIC, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_SUPPLY0, SV2017ParserKW_SUPPLY1, SV2017ParserKW_TASK, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TIMEPRECISION, SV2017ParserKW_TIMEUNIT, SV2017ParserKW_TRI, SV2017ParserKW_TRI0, SV2017ParserKW_TRI1, SV2017ParserKW_TRIAND, SV2017ParserKW_TRIOR, SV2017ParserKW_TRIREG, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_TYPEDEF, SV2017ParserKW_UNION, SV2017ParserKW_UNSIGNED, SV2017ParserKW_UWIRE, SV2017ParserKW_VAR, SV2017ParserKW_VIRTUAL, SV2017ParserKW_WAND, SV2017ParserKW_WIRE, SV2017ParserKW_WOR, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSEMI, SV2017ParserLPAREN, SV2017ParserLSQUARE_BR:

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IUdp_declaration_port_listContext is an interface to support dynamic dispatch.
type IUdp_declaration_port_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUdp_declaration_port_listContext differentiates from other interfaces.
	IsUdp_declaration_port_listContext()
}

type Udp_declaration_port_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUdp_declaration_port_listContext() *Udp_declaration_port_listContext {
	var p = new(Udp_declaration_port_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_udp_declaration_port_list
	return p
}

func (*Udp_declaration_port_listContext) IsUdp_declaration_port_listContext() {}

func NewUdp_declaration_port_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Udp_declaration_port_listContext {
	var p = new(Udp_declaration_port_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_udp_declaration_port_list

	return p
}

func (s *Udp_declaration_port_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Udp_declaration_port_listContext) Udp_output_declaration() IUdp_output_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUdp_output_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUdp_output_declarationContext)
}

func (s *Udp_declaration_port_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Udp_declaration_port_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Udp_declaration_port_listContext) AllUdp_input_declaration() []IUdp_input_declarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUdp_input_declarationContext)(nil)).Elem())
	var tst = make([]IUdp_input_declarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUdp_input_declarationContext)
		}
	}

	return tst
}

func (s *Udp_declaration_port_listContext) Udp_input_declaration(i int) IUdp_input_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUdp_input_declarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUdp_input_declarationContext)
}

func (s *Udp_declaration_port_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Udp_declaration_port_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Udp_declaration_port_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterUdp_declaration_port_list(s)
	}
}

func (s *Udp_declaration_port_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitUdp_declaration_port_list(s)
	}
}

func (p *SV2017Parser) Udp_declaration_port_list() (localctx IUdp_declaration_port_listContext) {
	localctx = NewUdp_declaration_port_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, SV2017ParserRULE_udp_declaration_port_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1372)
		p.Udp_output_declaration()
	}
	p.SetState(1375)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == SV2017ParserCOMMA {
		{
			p.SetState(1373)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(1374)
			p.Udp_input_declaration()
		}

		p.SetState(1377)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IUdp_port_declarationContext is an interface to support dynamic dispatch.
type IUdp_port_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUdp_port_declarationContext differentiates from other interfaces.
	IsUdp_port_declarationContext()
}

type Udp_port_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUdp_port_declarationContext() *Udp_port_declarationContext {
	var p = new(Udp_port_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_udp_port_declaration
	return p
}

func (*Udp_port_declarationContext) IsUdp_port_declarationContext() {}

func NewUdp_port_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Udp_port_declarationContext {
	var p = new(Udp_port_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_udp_port_declaration

	return p
}

func (s *Udp_port_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Udp_port_declarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Udp_port_declarationContext) Udp_output_declaration() IUdp_output_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUdp_output_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUdp_output_declarationContext)
}

func (s *Udp_port_declarationContext) Udp_input_declaration() IUdp_input_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUdp_input_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUdp_input_declarationContext)
}

func (s *Udp_port_declarationContext) Udp_reg_declaration() IUdp_reg_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUdp_reg_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUdp_reg_declarationContext)
}

func (s *Udp_port_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Udp_port_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Udp_port_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterUdp_port_declaration(s)
	}
}

func (s *Udp_port_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitUdp_port_declaration(s)
	}
}

func (p *SV2017Parser) Udp_port_declaration() (localctx IUdp_port_declarationContext) {
	localctx = NewUdp_port_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, SV2017ParserRULE_udp_port_declaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1382)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 36, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1379)
			p.Udp_output_declaration()
		}

	case 2:
		{
			p.SetState(1380)
			p.Udp_input_declaration()
		}

	case 3:
		{
			p.SetState(1381)
			p.Udp_reg_declaration()
		}

	}
	{
		p.SetState(1384)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IUdp_output_declarationContext is an interface to support dynamic dispatch.
type IUdp_output_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUdp_output_declarationContext differentiates from other interfaces.
	IsUdp_output_declarationContext()
}

type Udp_output_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUdp_output_declarationContext() *Udp_output_declarationContext {
	var p = new(Udp_output_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_udp_output_declaration
	return p
}

func (*Udp_output_declarationContext) IsUdp_output_declarationContext() {}

func NewUdp_output_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Udp_output_declarationContext {
	var p = new(Udp_output_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_udp_output_declaration

	return p
}

func (s *Udp_output_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Udp_output_declarationContext) KW_OUTPUT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_OUTPUT, 0)
}

func (s *Udp_output_declarationContext) KW_REG() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_REG, 0)
}

func (s *Udp_output_declarationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Udp_output_declarationContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Udp_output_declarationContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Udp_output_declarationContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserASSIGN, 0)
}

func (s *Udp_output_declarationContext) Constant_expression() IConstant_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_expressionContext)
}

func (s *Udp_output_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Udp_output_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Udp_output_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterUdp_output_declaration(s)
	}
}

func (s *Udp_output_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitUdp_output_declaration(s)
	}
}

func (p *SV2017Parser) Udp_output_declaration() (localctx IUdp_output_declarationContext) {
	localctx = NewUdp_output_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, SV2017ParserRULE_udp_output_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1389)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserTICK_IDENTIFIER || _la == SV2017ParserLPAREN {
		{
			p.SetState(1386)
			p.Attribute_instance()
		}

		p.SetState(1391)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1392)
		p.Match(SV2017ParserKW_OUTPUT)
	}
	p.SetState(1400)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_REG:
		{
			p.SetState(1393)
			p.Match(SV2017ParserKW_REG)
		}
		{
			p.SetState(1394)
			p.Identifier()
		}
		p.SetState(1397)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserASSIGN {
			{
				p.SetState(1395)
				p.Match(SV2017ParserASSIGN)
			}
			{
				p.SetState(1396)
				p.Constant_expression()
			}

		}

	case SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_SAMPLE, SV2017ParserKW_STD, SV2017ParserKW_TYPE_OPTION, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
		{
			p.SetState(1399)
			p.Identifier()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IUdp_input_declarationContext is an interface to support dynamic dispatch.
type IUdp_input_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUdp_input_declarationContext differentiates from other interfaces.
	IsUdp_input_declarationContext()
}

type Udp_input_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUdp_input_declarationContext() *Udp_input_declarationContext {
	var p = new(Udp_input_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_udp_input_declaration
	return p
}

func (*Udp_input_declarationContext) IsUdp_input_declarationContext() {}

func NewUdp_input_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Udp_input_declarationContext {
	var p = new(Udp_input_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_udp_input_declaration

	return p
}

func (s *Udp_input_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Udp_input_declarationContext) KW_INPUT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_INPUT, 0)
}

func (s *Udp_input_declarationContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Udp_input_declarationContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Udp_input_declarationContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Udp_input_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Udp_input_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Udp_input_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterUdp_input_declaration(s)
	}
}

func (s *Udp_input_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitUdp_input_declaration(s)
	}
}

func (p *SV2017Parser) Udp_input_declaration() (localctx IUdp_input_declarationContext) {
	localctx = NewUdp_input_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, SV2017ParserRULE_udp_input_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1405)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserTICK_IDENTIFIER || _la == SV2017ParserLPAREN {
		{
			p.SetState(1402)
			p.Attribute_instance()
		}

		p.SetState(1407)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1408)
		p.Match(SV2017ParserKW_INPUT)
	}
	{
		p.SetState(1409)
		p.Identifier_list()
	}

	return localctx
}

// IUdp_reg_declarationContext is an interface to support dynamic dispatch.
type IUdp_reg_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUdp_reg_declarationContext differentiates from other interfaces.
	IsUdp_reg_declarationContext()
}

type Udp_reg_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUdp_reg_declarationContext() *Udp_reg_declarationContext {
	var p = new(Udp_reg_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_udp_reg_declaration
	return p
}

func (*Udp_reg_declarationContext) IsUdp_reg_declarationContext() {}

func NewUdp_reg_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Udp_reg_declarationContext {
	var p = new(Udp_reg_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_udp_reg_declaration

	return p
}

func (s *Udp_reg_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Udp_reg_declarationContext) KW_REG() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_REG, 0)
}

func (s *Udp_reg_declarationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Udp_reg_declarationContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Udp_reg_declarationContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Udp_reg_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Udp_reg_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Udp_reg_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterUdp_reg_declaration(s)
	}
}

func (s *Udp_reg_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitUdp_reg_declaration(s)
	}
}

func (p *SV2017Parser) Udp_reg_declaration() (localctx IUdp_reg_declarationContext) {
	localctx = NewUdp_reg_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, SV2017ParserRULE_udp_reg_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1414)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserTICK_IDENTIFIER || _la == SV2017ParserLPAREN {
		{
			p.SetState(1411)
			p.Attribute_instance()
		}

		p.SetState(1416)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1417)
		p.Match(SV2017ParserKW_REG)
	}
	{
		p.SetState(1418)
		p.Identifier()
	}

	return localctx
}

// IUdp_bodyContext is an interface to support dynamic dispatch.
type IUdp_bodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUdp_bodyContext differentiates from other interfaces.
	IsUdp_bodyContext()
}

type Udp_bodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUdp_bodyContext() *Udp_bodyContext {
	var p = new(Udp_bodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_udp_body
	return p
}

func (*Udp_bodyContext) IsUdp_bodyContext() {}

func NewUdp_bodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Udp_bodyContext {
	var p = new(Udp_bodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_udp_body

	return p
}

func (s *Udp_bodyContext) GetParser() antlr.Parser { return s.parser }

func (s *Udp_bodyContext) Combinational_body() ICombinational_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICombinational_bodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICombinational_bodyContext)
}

func (s *Udp_bodyContext) Sequential_body() ISequential_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISequential_bodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISequential_bodyContext)
}

func (s *Udp_bodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Udp_bodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Udp_bodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterUdp_body(s)
	}
}

func (s *Udp_bodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitUdp_body(s)
	}
}

func (p *SV2017Parser) Udp_body() (localctx IUdp_bodyContext) {
	localctx = NewUdp_bodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, SV2017ParserRULE_udp_body)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1422)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 42, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1420)
			p.Combinational_body()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1421)
			p.Sequential_body()
		}

	}

	return localctx
}

// ICombinational_bodyContext is an interface to support dynamic dispatch.
type ICombinational_bodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCombinational_bodyContext differentiates from other interfaces.
	IsCombinational_bodyContext()
}

type Combinational_bodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCombinational_bodyContext() *Combinational_bodyContext {
	var p = new(Combinational_bodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_combinational_body
	return p
}

func (*Combinational_bodyContext) IsCombinational_bodyContext() {}

func NewCombinational_bodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Combinational_bodyContext {
	var p = new(Combinational_bodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_combinational_body

	return p
}

func (s *Combinational_bodyContext) GetParser() antlr.Parser { return s.parser }

func (s *Combinational_bodyContext) KW_TABLE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_TABLE, 0)
}

func (s *Combinational_bodyContext) KW_ENDTABLE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ENDTABLE, 0)
}

func (s *Combinational_bodyContext) AllCombinational_entry() []ICombinational_entryContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICombinational_entryContext)(nil)).Elem())
	var tst = make([]ICombinational_entryContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICombinational_entryContext)
		}
	}

	return tst
}

func (s *Combinational_bodyContext) Combinational_entry(i int) ICombinational_entryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICombinational_entryContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICombinational_entryContext)
}

func (s *Combinational_bodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Combinational_bodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Combinational_bodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCombinational_body(s)
	}
}

func (s *Combinational_bodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCombinational_body(s)
	}
}

func (p *SV2017Parser) Combinational_body() (localctx ICombinational_bodyContext) {
	localctx = NewCombinational_bodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, SV2017ParserRULE_combinational_body)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1424)
		p.Match(SV2017ParserKW_TABLE)
	}
	p.SetState(1426)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == SV2017ParserLEVEL_SYMBOL {
		{
			p.SetState(1425)
			p.Combinational_entry()
		}

		p.SetState(1428)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1430)
		p.Match(SV2017ParserKW_ENDTABLE)
	}

	return localctx
}

// ICombinational_entryContext is an interface to support dynamic dispatch.
type ICombinational_entryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCombinational_entryContext differentiates from other interfaces.
	IsCombinational_entryContext()
}

type Combinational_entryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCombinational_entryContext() *Combinational_entryContext {
	var p = new(Combinational_entryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_combinational_entry
	return p
}

func (*Combinational_entryContext) IsCombinational_entryContext() {}

func NewCombinational_entryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Combinational_entryContext {
	var p = new(Combinational_entryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_combinational_entry

	return p
}

func (s *Combinational_entryContext) GetParser() antlr.Parser { return s.parser }

func (s *Combinational_entryContext) Level_input_list() ILevel_input_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILevel_input_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILevel_input_listContext)
}

func (s *Combinational_entryContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Combinational_entryContext) LEVEL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLEVEL_SYMBOL, 0)
}

func (s *Combinational_entryContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Combinational_entryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Combinational_entryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Combinational_entryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCombinational_entry(s)
	}
}

func (s *Combinational_entryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCombinational_entry(s)
	}
}

func (p *SV2017Parser) Combinational_entry() (localctx ICombinational_entryContext) {
	localctx = NewCombinational_entryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, SV2017ParserRULE_combinational_entry)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1432)
		p.Level_input_list()
	}
	{
		p.SetState(1433)
		p.Match(SV2017ParserCOLON)
	}
	{
		p.SetState(1434)
		p.Match(SV2017ParserLEVEL_SYMBOL)
	}
	{
		p.SetState(1435)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// ISequential_bodyContext is an interface to support dynamic dispatch.
type ISequential_bodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSequential_bodyContext differentiates from other interfaces.
	IsSequential_bodyContext()
}

type Sequential_bodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySequential_bodyContext() *Sequential_bodyContext {
	var p = new(Sequential_bodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_sequential_body
	return p
}

func (*Sequential_bodyContext) IsSequential_bodyContext() {}

func NewSequential_bodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sequential_bodyContext {
	var p = new(Sequential_bodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_sequential_body

	return p
}

func (s *Sequential_bodyContext) GetParser() antlr.Parser { return s.parser }

func (s *Sequential_bodyContext) KW_TABLE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_TABLE, 0)
}

func (s *Sequential_bodyContext) KW_ENDTABLE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ENDTABLE, 0)
}

func (s *Sequential_bodyContext) Udp_initial_statement() IUdp_initial_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUdp_initial_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUdp_initial_statementContext)
}

func (s *Sequential_bodyContext) AllSequential_entry() []ISequential_entryContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISequential_entryContext)(nil)).Elem())
	var tst = make([]ISequential_entryContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISequential_entryContext)
		}
	}

	return tst
}

func (s *Sequential_bodyContext) Sequential_entry(i int) ISequential_entryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISequential_entryContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISequential_entryContext)
}

func (s *Sequential_bodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sequential_bodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sequential_bodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterSequential_body(s)
	}
}

func (s *Sequential_bodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitSequential_body(s)
	}
}

func (p *SV2017Parser) Sequential_body() (localctx ISequential_bodyContext) {
	localctx = NewSequential_bodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, SV2017ParserRULE_sequential_body)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1438)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_INITIAL {
		{
			p.SetState(1437)
			p.Udp_initial_statement()
		}

	}
	{
		p.SetState(1440)
		p.Match(SV2017ParserKW_TABLE)
	}
	p.SetState(1442)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == SV2017ParserLPAREN || _la == SV2017ParserLEVEL_SYMBOL || _la == SV2017ParserEDGE_SYMBOL {
		{
			p.SetState(1441)
			p.Sequential_entry()
		}

		p.SetState(1444)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1446)
		p.Match(SV2017ParserKW_ENDTABLE)
	}

	return localctx
}

// IUdp_initial_statementContext is an interface to support dynamic dispatch.
type IUdp_initial_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUdp_initial_statementContext differentiates from other interfaces.
	IsUdp_initial_statementContext()
}

type Udp_initial_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUdp_initial_statementContext() *Udp_initial_statementContext {
	var p = new(Udp_initial_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_udp_initial_statement
	return p
}

func (*Udp_initial_statementContext) IsUdp_initial_statementContext() {}

func NewUdp_initial_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Udp_initial_statementContext {
	var p = new(Udp_initial_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_udp_initial_statement

	return p
}

func (s *Udp_initial_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Udp_initial_statementContext) KW_INITIAL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_INITIAL, 0)
}

func (s *Udp_initial_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Udp_initial_statementContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserASSIGN, 0)
}

func (s *Udp_initial_statementContext) Integral_number() IIntegral_numberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntegral_numberContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntegral_numberContext)
}

func (s *Udp_initial_statementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Udp_initial_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Udp_initial_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Udp_initial_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterUdp_initial_statement(s)
	}
}

func (s *Udp_initial_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitUdp_initial_statement(s)
	}
}

func (p *SV2017Parser) Udp_initial_statement() (localctx IUdp_initial_statementContext) {
	localctx = NewUdp_initial_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, SV2017ParserRULE_udp_initial_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1448)
		p.Match(SV2017ParserKW_INITIAL)
	}
	{
		p.SetState(1449)
		p.Identifier()
	}
	{
		p.SetState(1450)
		p.Match(SV2017ParserASSIGN)
	}
	{
		p.SetState(1451)
		p.Integral_number()
	}
	{
		p.SetState(1452)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// ISequential_entryContext is an interface to support dynamic dispatch.
type ISequential_entryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSequential_entryContext differentiates from other interfaces.
	IsSequential_entryContext()
}

type Sequential_entryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySequential_entryContext() *Sequential_entryContext {
	var p = new(Sequential_entryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_sequential_entry
	return p
}

func (*Sequential_entryContext) IsSequential_entryContext() {}

func NewSequential_entryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sequential_entryContext {
	var p = new(Sequential_entryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_sequential_entry

	return p
}

func (s *Sequential_entryContext) GetParser() antlr.Parser { return s.parser }

func (s *Sequential_entryContext) Seq_input_list() ISeq_input_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISeq_input_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISeq_input_listContext)
}

func (s *Sequential_entryContext) AllCOLON() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOLON)
}

func (s *Sequential_entryContext) COLON(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, i)
}

func (s *Sequential_entryContext) Current_state() ICurrent_stateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICurrent_stateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICurrent_stateContext)
}

func (s *Sequential_entryContext) Next_state() INext_stateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INext_stateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INext_stateContext)
}

func (s *Sequential_entryContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Sequential_entryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sequential_entryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sequential_entryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterSequential_entry(s)
	}
}

func (s *Sequential_entryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitSequential_entry(s)
	}
}

func (p *SV2017Parser) Sequential_entry() (localctx ISequential_entryContext) {
	localctx = NewSequential_entryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, SV2017ParserRULE_sequential_entry)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1454)
		p.Seq_input_list()
	}
	{
		p.SetState(1455)
		p.Match(SV2017ParserCOLON)
	}
	{
		p.SetState(1456)
		p.Current_state()
	}
	{
		p.SetState(1457)
		p.Match(SV2017ParserCOLON)
	}
	{
		p.SetState(1458)
		p.Next_state()
	}
	{
		p.SetState(1459)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// ISeq_input_listContext is an interface to support dynamic dispatch.
type ISeq_input_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSeq_input_listContext differentiates from other interfaces.
	IsSeq_input_listContext()
}

type Seq_input_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySeq_input_listContext() *Seq_input_listContext {
	var p = new(Seq_input_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_seq_input_list
	return p
}

func (*Seq_input_listContext) IsSeq_input_listContext() {}

func NewSeq_input_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Seq_input_listContext {
	var p = new(Seq_input_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_seq_input_list

	return p
}

func (s *Seq_input_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Seq_input_listContext) Level_input_list() ILevel_input_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILevel_input_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILevel_input_listContext)
}

func (s *Seq_input_listContext) Edge_input_list() IEdge_input_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEdge_input_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEdge_input_listContext)
}

func (s *Seq_input_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Seq_input_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Seq_input_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterSeq_input_list(s)
	}
}

func (s *Seq_input_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitSeq_input_list(s)
	}
}

func (p *SV2017Parser) Seq_input_list() (localctx ISeq_input_listContext) {
	localctx = NewSeq_input_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, SV2017ParserRULE_seq_input_list)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1463)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 46, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1461)
			p.Level_input_list()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1462)
			p.Edge_input_list()
		}

	}

	return localctx
}

// ILevel_input_listContext is an interface to support dynamic dispatch.
type ILevel_input_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLevel_input_listContext differentiates from other interfaces.
	IsLevel_input_listContext()
}

type Level_input_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLevel_input_listContext() *Level_input_listContext {
	var p = new(Level_input_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_level_input_list
	return p
}

func (*Level_input_listContext) IsLevel_input_listContext() {}

func NewLevel_input_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Level_input_listContext {
	var p = new(Level_input_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_level_input_list

	return p
}

func (s *Level_input_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Level_input_listContext) AllLEVEL_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserLEVEL_SYMBOL)
}

func (s *Level_input_listContext) LEVEL_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserLEVEL_SYMBOL, i)
}

func (s *Level_input_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Level_input_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Level_input_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterLevel_input_list(s)
	}
}

func (s *Level_input_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitLevel_input_list(s)
	}
}

func (p *SV2017Parser) Level_input_list() (localctx ILevel_input_listContext) {
	localctx = NewLevel_input_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, SV2017ParserRULE_level_input_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1466)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == SV2017ParserLEVEL_SYMBOL {
		{
			p.SetState(1465)
			p.Match(SV2017ParserLEVEL_SYMBOL)
		}

		p.SetState(1468)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IEdge_input_listContext is an interface to support dynamic dispatch.
type IEdge_input_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEdge_input_listContext differentiates from other interfaces.
	IsEdge_input_listContext()
}

type Edge_input_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEdge_input_listContext() *Edge_input_listContext {
	var p = new(Edge_input_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_edge_input_list
	return p
}

func (*Edge_input_listContext) IsEdge_input_listContext() {}

func NewEdge_input_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Edge_input_listContext {
	var p = new(Edge_input_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_edge_input_list

	return p
}

func (s *Edge_input_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Edge_input_listContext) Edge_indicator() IEdge_indicatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEdge_indicatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEdge_indicatorContext)
}

func (s *Edge_input_listContext) AllLEVEL_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserLEVEL_SYMBOL)
}

func (s *Edge_input_listContext) LEVEL_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserLEVEL_SYMBOL, i)
}

func (s *Edge_input_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Edge_input_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Edge_input_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterEdge_input_list(s)
	}
}

func (s *Edge_input_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitEdge_input_list(s)
	}
}

func (p *SV2017Parser) Edge_input_list() (localctx IEdge_input_listContext) {
	localctx = NewEdge_input_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, SV2017ParserRULE_edge_input_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1473)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserLEVEL_SYMBOL {
		{
			p.SetState(1470)
			p.Match(SV2017ParserLEVEL_SYMBOL)
		}

		p.SetState(1475)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1476)
		p.Edge_indicator()
	}
	p.SetState(1480)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserLEVEL_SYMBOL {
		{
			p.SetState(1477)
			p.Match(SV2017ParserLEVEL_SYMBOL)
		}

		p.SetState(1482)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IEdge_indicatorContext is an interface to support dynamic dispatch.
type IEdge_indicatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEdge_indicatorContext differentiates from other interfaces.
	IsEdge_indicatorContext()
}

type Edge_indicatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEdge_indicatorContext() *Edge_indicatorContext {
	var p = new(Edge_indicatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_edge_indicator
	return p
}

func (*Edge_indicatorContext) IsEdge_indicatorContext() {}

func NewEdge_indicatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Edge_indicatorContext {
	var p = new(Edge_indicatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_edge_indicator

	return p
}

func (s *Edge_indicatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Edge_indicatorContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Edge_indicatorContext) AllLEVEL_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserLEVEL_SYMBOL)
}

func (s *Edge_indicatorContext) LEVEL_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserLEVEL_SYMBOL, i)
}

func (s *Edge_indicatorContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Edge_indicatorContext) EDGE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserEDGE_SYMBOL, 0)
}

func (s *Edge_indicatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Edge_indicatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Edge_indicatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterEdge_indicator(s)
	}
}

func (s *Edge_indicatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitEdge_indicator(s)
	}
}

func (p *SV2017Parser) Edge_indicator() (localctx IEdge_indicatorContext) {
	localctx = NewEdge_indicatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, SV2017ParserRULE_edge_indicator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1488)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserLPAREN:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1483)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(1484)
			p.Match(SV2017ParserLEVEL_SYMBOL)
		}
		{
			p.SetState(1485)
			p.Match(SV2017ParserLEVEL_SYMBOL)
		}
		{
			p.SetState(1486)
			p.Match(SV2017ParserRPAREN)
		}

	case SV2017ParserEDGE_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1487)
			p.Match(SV2017ParserEDGE_SYMBOL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICurrent_stateContext is an interface to support dynamic dispatch.
type ICurrent_stateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCurrent_stateContext differentiates from other interfaces.
	IsCurrent_stateContext()
}

type Current_stateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCurrent_stateContext() *Current_stateContext {
	var p = new(Current_stateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_current_state
	return p
}

func (*Current_stateContext) IsCurrent_stateContext() {}

func NewCurrent_stateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Current_stateContext {
	var p = new(Current_stateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_current_state

	return p
}

func (s *Current_stateContext) GetParser() antlr.Parser { return s.parser }

func (s *Current_stateContext) LEVEL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLEVEL_SYMBOL, 0)
}

func (s *Current_stateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Current_stateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Current_stateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCurrent_state(s)
	}
}

func (s *Current_stateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCurrent_state(s)
	}
}

func (p *SV2017Parser) Current_state() (localctx ICurrent_stateContext) {
	localctx = NewCurrent_stateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, SV2017ParserRULE_current_state)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1490)
		p.Match(SV2017ParserLEVEL_SYMBOL)
	}

	return localctx
}

// INext_stateContext is an interface to support dynamic dispatch.
type INext_stateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNext_stateContext differentiates from other interfaces.
	IsNext_stateContext()
}

type Next_stateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNext_stateContext() *Next_stateContext {
	var p = new(Next_stateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_next_state
	return p
}

func (*Next_stateContext) IsNext_stateContext() {}

func NewNext_stateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Next_stateContext {
	var p = new(Next_stateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_next_state

	return p
}

func (s *Next_stateContext) GetParser() antlr.Parser { return s.parser }

func (s *Next_stateContext) LEVEL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLEVEL_SYMBOL, 0)
}

func (s *Next_stateContext) MINUS() antlr.TerminalNode {
	return s.GetToken(SV2017ParserMINUS, 0)
}

func (s *Next_stateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Next_stateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Next_stateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterNext_state(s)
	}
}

func (s *Next_stateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitNext_state(s)
	}
}

func (p *SV2017Parser) Next_state() (localctx INext_stateContext) {
	localctx = NewNext_stateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, SV2017ParserRULE_next_state)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1492)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserMINUS || _la == SV2017ParserLEVEL_SYMBOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IInterface_declarationContext is an interface to support dynamic dispatch.
type IInterface_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInterface_declarationContext differentiates from other interfaces.
	IsInterface_declarationContext()
}

type Interface_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterface_declarationContext() *Interface_declarationContext {
	var p = new(Interface_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_interface_declaration
	return p
}

func (*Interface_declarationContext) IsInterface_declarationContext() {}

func NewInterface_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Interface_declarationContext {
	var p = new(Interface_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_interface_declaration

	return p
}

func (s *Interface_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Interface_declarationContext) KW_EXTERN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_EXTERN, 0)
}

func (s *Interface_declarationContext) Interface_header() IInterface_headerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterface_headerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInterface_headerContext)
}

func (s *Interface_declarationContext) KW_ENDINTERFACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ENDINTERFACE, 0)
}

func (s *Interface_declarationContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Interface_declarationContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Interface_declarationContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Interface_declarationContext) KW_INTERFACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_INTERFACE, 0)
}

func (s *Interface_declarationContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Interface_declarationContext) DOT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOT, 0)
}

func (s *Interface_declarationContext) MUL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserMUL, 0)
}

func (s *Interface_declarationContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Interface_declarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Interface_declarationContext) Timeunits_declaration() ITimeunits_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITimeunits_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITimeunits_declarationContext)
}

func (s *Interface_declarationContext) AllInterface_item() []IInterface_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInterface_itemContext)(nil)).Elem())
	var tst = make([]IInterface_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInterface_itemContext)
		}
	}

	return tst
}

func (s *Interface_declarationContext) Interface_item(i int) IInterface_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterface_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInterface_itemContext)
}

func (s *Interface_declarationContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Interface_declarationContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Interface_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Interface_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Interface_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterInterface_declaration(s)
	}
}

func (s *Interface_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitInterface_declaration(s)
	}
}

func (p *SV2017Parser) Interface_declaration() (localctx IInterface_declarationContext) {
	localctx = NewInterface_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, SV2017ParserRULE_interface_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1528)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_EXTERN:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1494)
			p.Match(SV2017ParserKW_EXTERN)
		}
		{
			p.SetState(1495)
			p.Interface_header()
		}

	case SV2017ParserKW_INTERFACE, SV2017ParserTICK_IDENTIFIER, SV2017ParserLPAREN:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1511)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 52, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1496)
				p.Interface_header()
			}

		case 2:
			p.SetState(1500)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SV2017ParserTICK_IDENTIFIER || _la == SV2017ParserLPAREN {
				{
					p.SetState(1497)
					p.Attribute_instance()
				}

				p.SetState(1502)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1503)
				p.Match(SV2017ParserKW_INTERFACE)
			}
			{
				p.SetState(1504)
				p.Identifier()
			}
			{
				p.SetState(1505)
				p.Match(SV2017ParserLPAREN)
			}
			{
				p.SetState(1506)
				p.Match(SV2017ParserDOT)
			}
			{
				p.SetState(1507)
				p.Match(SV2017ParserMUL)
			}
			{
				p.SetState(1508)
				p.Match(SV2017ParserRPAREN)
			}
			{
				p.SetState(1509)
				p.Match(SV2017ParserSEMI)
			}

		}
		p.SetState(1514)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 53, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1513)
				p.Timeunits_declaration()
			}

		}
		p.SetState(1519)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_ALIAS-20))|(1<<(SV2017ParserKW_ALWAYS-20))|(1<<(SV2017ParserKW_ALWAYS_COMB-20))|(1<<(SV2017ParserKW_ALWAYS_FF-20))|(1<<(SV2017ParserKW_ALWAYS_LATCH-20))|(1<<(SV2017ParserKW_ASSERT-20))|(1<<(SV2017ParserKW_ASSIGN-20))|(1<<(SV2017ParserKW_ASSUME-20))|(1<<(SV2017ParserKW_AUTOMATIC-20)))) != 0) || (((_la-53)&-(0x1f+1)) == 0 && ((1<<uint((_la-53)))&((1<<(SV2017ParserKW_BIND-53))|(1<<(SV2017ParserKW_BIT-53))|(1<<(SV2017ParserKW_BYTE-53))|(1<<(SV2017ParserKW_CASE-53))|(1<<(SV2017ParserKW_CHANDLE-53))|(1<<(SV2017ParserKW_CHECKER-53))|(1<<(SV2017ParserKW_CLASS-53))|(1<<(SV2017ParserKW_CLOCKING-53))|(1<<(SV2017ParserKW_CONST-53))|(1<<(SV2017ParserKW_CONSTRAINT-53))|(1<<(SV2017ParserKW_COVER-53))|(1<<(SV2017ParserKW_COVERGROUP-53))|(1<<(SV2017ParserKW_DEFAULT-53)))) != 0) || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(SV2017ParserKW_ENUM-107))|(1<<(SV2017ParserKW_EVENT-107))|(1<<(SV2017ParserKW_EXPORT-107))|(1<<(SV2017ParserKW_EXTERN-107))|(1<<(SV2017ParserKW_FINAL-107))|(1<<(SV2017ParserKW_FOR-107))|(1<<(SV2017ParserKW_FUNCTION-107))|(1<<(SV2017ParserKW_GENERATE-107))|(1<<(SV2017ParserKW_GENVAR-107))|(1<<(SV2017ParserKW_GLOBAL-107))|(1<<(SV2017ParserKW_IF-107))|(1<<(SV2017ParserKW_IMPORT-107))|(1<<(SV2017ParserKW_INITIAL-107))|(1<<(SV2017ParserKW_INOUT-107))|(1<<(SV2017ParserKW_INPUT-107)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_INTERCONNECT-141))|(1<<(SV2017ParserKW_INTERFACE-141))|(1<<(SV2017ParserKW_LET-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOCALPARAM-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141))|(1<<(SV2017ParserKW_MODPORT-141))|(1<<(SV2017ParserKW_NETTYPE-141))|(1<<(SV2017ParserKW_NONE-141)))) != 0) || (((_la-174)&-(0x1f+1)) == 0 && ((1<<uint((_la-174)))&((1<<(SV2017ParserKW_OPTION-174))|(1<<(SV2017ParserKW_OUTPUT-174))|(1<<(SV2017ParserKW_PARAMETER-174))|(1<<(SV2017ParserKW_PROGRAM-174))|(1<<(SV2017ParserKW_PROPERTY-174))|(1<<(SV2017ParserKW_RANDOMIZE-174))|(1<<(SV2017ParserKW_REAL-174))|(1<<(SV2017ParserKW_REALTIME-174))|(1<<(SV2017ParserKW_REF-174))|(1<<(SV2017ParserKW_REG-174)))) != 0) || (((_la-207)&-(0x1f+1)) == 0 && ((1<<uint((_la-207)))&((1<<(SV2017ParserKW_RESTRICT-207))|(1<<(SV2017ParserKW_SAMPLE-207))|(1<<(SV2017ParserKW_SEQUENCE-207))|(1<<(SV2017ParserKW_SHORTINT-207))|(1<<(SV2017ParserKW_SHORTREAL-207))|(1<<(SV2017ParserKW_SIGNED-207))|(1<<(SV2017ParserKW_STATIC-207))|(1<<(SV2017ParserKW_STD-207))|(1<<(SV2017ParserKW_STRING-207))|(1<<(SV2017ParserKW_STRUCT-207))|(1<<(SV2017ParserKW_SUPER-207)))) != 0) || (((_la-239)&-(0x1f+1)) == 0 && ((1<<uint((_la-239)))&((1<<(SV2017ParserKW_SUPPLY0-239))|(1<<(SV2017ParserKW_SUPPLY1-239))|(1<<(SV2017ParserKW_TASK-239))|(1<<(SV2017ParserKW_THIS-239))|(1<<(SV2017ParserKW_TIME-239))|(1<<(SV2017ParserKW_TIMEPRECISION-239))|(1<<(SV2017ParserKW_TIMEUNIT-239))|(1<<(SV2017ParserKW_TRI-239))|(1<<(SV2017ParserKW_TRI0-239))|(1<<(SV2017ParserKW_TRI1-239))|(1<<(SV2017ParserKW_TRIAND-239))|(1<<(SV2017ParserKW_TRIOR-239))|(1<<(SV2017ParserKW_TRIREG-239))|(1<<(SV2017ParserKW_TYPE-239))|(1<<(SV2017ParserKW_TYPE_OPTION-239))|(1<<(SV2017ParserKW_TYPEDEF-239))|(1<<(SV2017ParserKW_UNION-239))|(1<<(SV2017ParserKW_UNSIGNED-239)))) != 0) || (((_la-271)&-(0x1f+1)) == 0 && ((1<<uint((_la-271)))&((1<<(SV2017ParserKW_UWIRE-271))|(1<<(SV2017ParserKW_VAR-271))|(1<<(SV2017ParserKW_VIRTUAL-271))|(1<<(SV2017ParserKW_WAND-271))|(1<<(SV2017ParserKW_WIRE-271))|(1<<(SV2017ParserKW_WOR-271))|(1<<(SV2017ParserC_IDENTIFIER-271))|(1<<(SV2017ParserTICK_IDENTIFIER-271))|(1<<(SV2017ParserESCAPED_IDENTIFIER-271)))) != 0) || (((_la-303)&-(0x1f+1)) == 0 && ((1<<uint((_la-303)))&((1<<(SV2017ParserSIMPLE_IDENTIFIER-303))|(1<<(SV2017ParserSEMI-303))|(1<<(SV2017ParserLPAREN-303))|(1<<(SV2017ParserLSQUARE_BR-303))|(1<<(SV2017ParserDOT-303)))) != 0) {
			{
				p.SetState(1516)
				p.Interface_item()
			}

			p.SetState(1521)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

		{
			p.SetState(1522)
			p.Match(SV2017ParserKW_ENDINTERFACE)
		}
		p.SetState(1526)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SV2017ParserCOLON:
			{
				p.SetState(1523)
				p.Match(SV2017ParserCOLON)
			}
			{
				p.SetState(1524)
				p.Identifier()
			}

		case SV2017ParserEOF, SV2017ParserTICK_TIMESCALE, SV2017ParserTICK_DEFAULT_NETTYPE, SV2017ParserTICK_INCLUDE, SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_FATAL, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_DOLAR_WARNING, SV2017ParserKW_ALIAS, SV2017ParserKW_ALWAYS, SV2017ParserKW_ALWAYS_COMB, SV2017ParserKW_ALWAYS_FF, SV2017ParserKW_ALWAYS_LATCH, SV2017ParserKW_AND, SV2017ParserKW_ASSERT, SV2017ParserKW_ASSIGN, SV2017ParserKW_ASSUME, SV2017ParserKW_AUTOMATIC, SV2017ParserKW_BIND, SV2017ParserKW_BIT, SV2017ParserKW_BUF, SV2017ParserKW_BUFIF0, SV2017ParserKW_BUFIF1, SV2017ParserKW_BYTE, SV2017ParserKW_CASE, SV2017ParserKW_CHANDLE, SV2017ParserKW_CHECKER, SV2017ParserKW_CLASS, SV2017ParserKW_CLOCKING, SV2017ParserKW_CMOS, SV2017ParserKW_CONFIG, SV2017ParserKW_CONST, SV2017ParserKW_CONSTRAINT, SV2017ParserKW_COVER, SV2017ParserKW_COVERGROUP, SV2017ParserKW_DEFAULT, SV2017ParserKW_DEFPARAM, SV2017ParserKW_ENDINTERFACE, SV2017ParserKW_ENDMODULE, SV2017ParserKW_ENUM, SV2017ParserKW_EVENT, SV2017ParserKW_EXPORT, SV2017ParserKW_EXTERN, SV2017ParserKW_FINAL, SV2017ParserKW_FOR, SV2017ParserKW_FUNCTION, SV2017ParserKW_GENERATE, SV2017ParserKW_GENVAR, SV2017ParserKW_GLOBAL, SV2017ParserKW_IF, SV2017ParserKW_IMPORT, SV2017ParserKW_INITIAL, SV2017ParserKW_INOUT, SV2017ParserKW_INPUT, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_INTERCONNECT, SV2017ParserKW_INTERFACE, SV2017ParserKW_LET, SV2017ParserKW_LOCAL, SV2017ParserKW_LOCALPARAM, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_MACROMODULE, SV2017ParserKW_MODPORT, SV2017ParserKW_MODULE, SV2017ParserKW_NAND, SV2017ParserKW_NETTYPE, SV2017ParserKW_NMOS, SV2017ParserKW_NOR, SV2017ParserKW_NONE, SV2017ParserKW_NOT, SV2017ParserKW_NOTIF0, SV2017ParserKW_NOTIF1, SV2017ParserKW_OPTION, SV2017ParserKW_OR, SV2017ParserKW_OUTPUT, SV2017ParserKW_PACKAGE, SV2017ParserKW_PARAMETER, SV2017ParserKW_PMOS, SV2017ParserKW_PRIMITIVE, SV2017ParserKW_PROGRAM, SV2017ParserKW_PROPERTY, SV2017ParserKW_PULLDOWN, SV2017ParserKW_PULLUP, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_RCMOS, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REF, SV2017ParserKW_REG, SV2017ParserKW_RESTRICT, SV2017ParserKW_RNMOS, SV2017ParserKW_RPMOS, SV2017ParserKW_RTRAN, SV2017ParserKW_RTRANIF0, SV2017ParserKW_RTRANIF1, SV2017ParserKW_SAMPLE, SV2017ParserKW_SEQUENCE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_SPECIFY, SV2017ParserKW_SPECPARAM, SV2017ParserKW_STATIC, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_SUPPLY0, SV2017ParserKW_SUPPLY1, SV2017ParserKW_TASK, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TIMEPRECISION, SV2017ParserKW_TIMEUNIT, SV2017ParserKW_TRAN, SV2017ParserKW_TRANIF0, SV2017ParserKW_TRANIF1, SV2017ParserKW_TRI, SV2017ParserKW_TRI0, SV2017ParserKW_TRI1, SV2017ParserKW_TRIAND, SV2017ParserKW_TRIOR, SV2017ParserKW_TRIREG, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_TYPEDEF, SV2017ParserKW_UNION, SV2017ParserKW_UNSIGNED, SV2017ParserKW_UWIRE, SV2017ParserKW_VAR, SV2017ParserKW_VIRTUAL, SV2017ParserKW_WAND, SV2017ParserKW_WIRE, SV2017ParserKW_WOR, SV2017ParserKW_XNOR, SV2017ParserKW_XOR, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSEMI, SV2017ParserLPAREN, SV2017ParserLSQUARE_BR, SV2017ParserDOT:

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IInterface_headerContext is an interface to support dynamic dispatch.
type IInterface_headerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInterface_headerContext differentiates from other interfaces.
	IsInterface_headerContext()
}

type Interface_headerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterface_headerContext() *Interface_headerContext {
	var p = new(Interface_headerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_interface_header
	return p
}

func (*Interface_headerContext) IsInterface_headerContext() {}

func NewInterface_headerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Interface_headerContext {
	var p = new(Interface_headerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_interface_header

	return p
}

func (s *Interface_headerContext) GetParser() antlr.Parser { return s.parser }

func (s *Interface_headerContext) KW_INTERFACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_INTERFACE, 0)
}

func (s *Interface_headerContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Interface_headerContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Interface_headerContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Interface_headerContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Interface_headerContext) Lifetime() ILifetimeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILifetimeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILifetimeContext)
}

func (s *Interface_headerContext) AllPackage_import_declaration() []IPackage_import_declarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPackage_import_declarationContext)(nil)).Elem())
	var tst = make([]IPackage_import_declarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPackage_import_declarationContext)
		}
	}

	return tst
}

func (s *Interface_headerContext) Package_import_declaration(i int) IPackage_import_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackage_import_declarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPackage_import_declarationContext)
}

func (s *Interface_headerContext) Parameter_port_list() IParameter_port_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameter_port_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameter_port_listContext)
}

func (s *Interface_headerContext) List_of_port_declarations() IList_of_port_declarationsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_port_declarationsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_port_declarationsContext)
}

func (s *Interface_headerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Interface_headerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Interface_headerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterInterface_header(s)
	}
}

func (s *Interface_headerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitInterface_header(s)
	}
}

func (p *SV2017Parser) Interface_header() (localctx IInterface_headerContext) {
	localctx = NewInterface_headerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, SV2017ParserRULE_interface_header)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1533)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserTICK_IDENTIFIER || _la == SV2017ParserLPAREN {
		{
			p.SetState(1530)
			p.Attribute_instance()
		}

		p.SetState(1535)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1536)
		p.Match(SV2017ParserKW_INTERFACE)
	}
	p.SetState(1538)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_AUTOMATIC || _la == SV2017ParserKW_STATIC {
		{
			p.SetState(1537)
			p.Lifetime()
		}

	}
	{
		p.SetState(1540)
		p.Identifier()
	}
	p.SetState(1544)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserKW_IMPORT {
		{
			p.SetState(1541)
			p.Package_import_declaration()
		}

		p.SetState(1546)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1548)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserHASH {
		{
			p.SetState(1547)
			p.Parameter_port_list()
		}

	}
	p.SetState(1551)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserLPAREN {
		{
			p.SetState(1550)
			p.List_of_port_declarations()
		}

	}
	{
		p.SetState(1553)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IInterface_itemContext is an interface to support dynamic dispatch.
type IInterface_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInterface_itemContext differentiates from other interfaces.
	IsInterface_itemContext()
}

type Interface_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterface_itemContext() *Interface_itemContext {
	var p = new(Interface_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_interface_item
	return p
}

func (*Interface_itemContext) IsInterface_itemContext() {}

func NewInterface_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Interface_itemContext {
	var p = new(Interface_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_interface_item

	return p
}

func (s *Interface_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Interface_itemContext) Ansi_port_declaration() IAnsi_port_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnsi_port_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnsi_port_declarationContext)
}

func (s *Interface_itemContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Interface_itemContext) Generate_region() IGenerate_regionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenerate_regionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenerate_regionContext)
}

func (s *Interface_itemContext) Net_declaration() INet_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INet_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INet_declarationContext)
}

func (s *Interface_itemContext) Data_declaration() IData_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_declarationContext)
}

func (s *Interface_itemContext) Task_declaration() ITask_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITask_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITask_declarationContext)
}

func (s *Interface_itemContext) Function_declaration() IFunction_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_declarationContext)
}

func (s *Interface_itemContext) Checker_declaration() IChecker_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChecker_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChecker_declarationContext)
}

func (s *Interface_itemContext) Dpi_import_export() IDpi_import_exportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDpi_import_exportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDpi_import_exportContext)
}

func (s *Interface_itemContext) Extern_constraint_declaration() IExtern_constraint_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExtern_constraint_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExtern_constraint_declarationContext)
}

func (s *Interface_itemContext) Class_declaration() IClass_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_declarationContext)
}

func (s *Interface_itemContext) Interface_class_declaration() IInterface_class_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterface_class_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInterface_class_declarationContext)
}

func (s *Interface_itemContext) Class_constructor_declaration() IClass_constructor_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_constructor_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_constructor_declarationContext)
}

func (s *Interface_itemContext) Covergroup_declaration() ICovergroup_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICovergroup_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICovergroup_declarationContext)
}

func (s *Interface_itemContext) Property_declaration() IProperty_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProperty_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProperty_declarationContext)
}

func (s *Interface_itemContext) Sequence_declaration() ISequence_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISequence_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISequence_declarationContext)
}

func (s *Interface_itemContext) Let_declaration() ILet_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILet_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILet_declarationContext)
}

func (s *Interface_itemContext) Genvar_declaration() IGenvar_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenvar_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenvar_declarationContext)
}

func (s *Interface_itemContext) Clocking_declaration() IClocking_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClocking_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClocking_declarationContext)
}

func (s *Interface_itemContext) Module_or_interface_or_program_or_udp_instantiation() IModule_or_interface_or_program_or_udp_instantiationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModule_or_interface_or_program_or_udp_instantiationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModule_or_interface_or_program_or_udp_instantiationContext)
}

func (s *Interface_itemContext) Assertion_item() IAssertion_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssertion_itemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssertion_itemContext)
}

func (s *Interface_itemContext) Bind_directive() IBind_directiveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBind_directiveContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBind_directiveContext)
}

func (s *Interface_itemContext) Continuous_assign() IContinuous_assignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContinuous_assignContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IContinuous_assignContext)
}

func (s *Interface_itemContext) Net_alias() INet_aliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INet_aliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INet_aliasContext)
}

func (s *Interface_itemContext) Initial_construct() IInitial_constructContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitial_constructContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitial_constructContext)
}

func (s *Interface_itemContext) Final_construct() IFinal_constructContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFinal_constructContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFinal_constructContext)
}

func (s *Interface_itemContext) Always_construct() IAlways_constructContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlways_constructContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlways_constructContext)
}

func (s *Interface_itemContext) Loop_generate_construct() ILoop_generate_constructContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoop_generate_constructContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoop_generate_constructContext)
}

func (s *Interface_itemContext) Conditional_generate_construct() IConditional_generate_constructContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditional_generate_constructContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditional_generate_constructContext)
}

func (s *Interface_itemContext) Elaboration_system_task() IElaboration_system_taskContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElaboration_system_taskContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElaboration_system_taskContext)
}

func (s *Interface_itemContext) Extern_tf_declaration() IExtern_tf_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExtern_tf_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExtern_tf_declarationContext)
}

func (s *Interface_itemContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Interface_itemContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Interface_itemContext) Default_clocking_or_dissable_construct() IDefault_clocking_or_dissable_constructContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefault_clocking_or_dissable_constructContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefault_clocking_or_dissable_constructContext)
}

func (s *Interface_itemContext) Local_parameter_declaration() ILocal_parameter_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILocal_parameter_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILocal_parameter_declarationContext)
}

func (s *Interface_itemContext) Parameter_declaration() IParameter_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameter_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameter_declarationContext)
}

func (s *Interface_itemContext) Program_declaration() IProgram_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProgram_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProgram_declarationContext)
}

func (s *Interface_itemContext) Modport_declaration() IModport_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModport_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModport_declarationContext)
}

func (s *Interface_itemContext) Interface_declaration() IInterface_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterface_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInterface_declarationContext)
}

func (s *Interface_itemContext) Timeunits_declaration() ITimeunits_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITimeunits_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITimeunits_declarationContext)
}

func (s *Interface_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Interface_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Interface_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterInterface_item(s)
	}
}

func (s *Interface_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitInterface_item(s)
	}
}

func (p *SV2017Parser) Interface_item() (localctx IInterface_itemContext) {
	localctx = NewInterface_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, SV2017ParserRULE_interface_item)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(1605)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 65, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1555)
			p.Ansi_port_declaration()
		}
		{
			p.SetState(1556)
			p.Match(SV2017ParserSEMI)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1558)
			p.Generate_region()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(1562)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 62, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1559)
					p.Attribute_instance()
				}

			}
			p.SetState(1564)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 62, p.GetParserRuleContext())
		}
		p.SetState(1599)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 64, p.GetParserRuleContext()) {
		case 1:
			p.SetState(1568)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case SV2017ParserKW_DEFAULT:
				{
					p.SetState(1565)
					p.Default_clocking_or_dissable_construct()
				}

			case SV2017ParserKW_LOCALPARAM:
				{
					p.SetState(1566)
					p.Local_parameter_declaration()
				}

			case SV2017ParserKW_PARAMETER:
				{
					p.SetState(1567)
					p.Parameter_declaration()
				}

			case SV2017ParserSEMI:

			default:
			}
			{
				p.SetState(1570)
				p.Match(SV2017ParserSEMI)
			}

		case 2:
			{
				p.SetState(1571)
				p.Net_declaration()
			}

		case 3:
			{
				p.SetState(1572)
				p.Data_declaration()
			}

		case 4:
			{
				p.SetState(1573)
				p.Task_declaration()
			}

		case 5:
			{
				p.SetState(1574)
				p.Function_declaration()
			}

		case 6:
			{
				p.SetState(1575)
				p.Checker_declaration()
			}

		case 7:
			{
				p.SetState(1576)
				p.Dpi_import_export()
			}

		case 8:
			{
				p.SetState(1577)
				p.Extern_constraint_declaration()
			}

		case 9:
			{
				p.SetState(1578)
				p.Class_declaration()
			}

		case 10:
			{
				p.SetState(1579)
				p.Interface_class_declaration()
			}

		case 11:
			{
				p.SetState(1580)
				p.Class_constructor_declaration()
			}

		case 12:
			{
				p.SetState(1581)
				p.Covergroup_declaration()
			}

		case 13:
			{
				p.SetState(1582)
				p.Property_declaration()
			}

		case 14:
			{
				p.SetState(1583)
				p.Sequence_declaration()
			}

		case 15:
			{
				p.SetState(1584)
				p.Let_declaration()
			}

		case 16:
			{
				p.SetState(1585)
				p.Genvar_declaration()
			}

		case 17:
			{
				p.SetState(1586)
				p.Clocking_declaration()
			}

		case 18:
			{
				p.SetState(1587)
				p.Module_or_interface_or_program_or_udp_instantiation()
			}

		case 19:
			{
				p.SetState(1588)
				p.Assertion_item()
			}

		case 20:
			{
				p.SetState(1589)
				p.Bind_directive()
			}

		case 21:
			{
				p.SetState(1590)
				p.Continuous_assign()
			}

		case 22:
			{
				p.SetState(1591)
				p.Net_alias()
			}

		case 23:
			{
				p.SetState(1592)
				p.Initial_construct()
			}

		case 24:
			{
				p.SetState(1593)
				p.Final_construct()
			}

		case 25:
			{
				p.SetState(1594)
				p.Always_construct()
			}

		case 26:
			{
				p.SetState(1595)
				p.Loop_generate_construct()
			}

		case 27:
			{
				p.SetState(1596)
				p.Conditional_generate_construct()
			}

		case 28:
			{
				p.SetState(1597)
				p.Elaboration_system_task()
			}

		case 29:
			{
				p.SetState(1598)
				p.Extern_tf_declaration()
			}

		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1601)
			p.Program_declaration()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1602)
			p.Modport_declaration()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1603)
			p.Interface_declaration()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1604)
			p.Timeunits_declaration()
		}

	}

	return localctx
}

// IModport_declarationContext is an interface to support dynamic dispatch.
type IModport_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModport_declarationContext differentiates from other interfaces.
	IsModport_declarationContext()
}

type Modport_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModport_declarationContext() *Modport_declarationContext {
	var p = new(Modport_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_modport_declaration
	return p
}

func (*Modport_declarationContext) IsModport_declarationContext() {}

func NewModport_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Modport_declarationContext {
	var p = new(Modport_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_modport_declaration

	return p
}

func (s *Modport_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Modport_declarationContext) KW_MODPORT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_MODPORT, 0)
}

func (s *Modport_declarationContext) AllModport_item() []IModport_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IModport_itemContext)(nil)).Elem())
	var tst = make([]IModport_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IModport_itemContext)
		}
	}

	return tst
}

func (s *Modport_declarationContext) Modport_item(i int) IModport_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModport_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IModport_itemContext)
}

func (s *Modport_declarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Modport_declarationContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Modport_declarationContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Modport_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Modport_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Modport_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterModport_declaration(s)
	}
}

func (s *Modport_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitModport_declaration(s)
	}
}

func (p *SV2017Parser) Modport_declaration() (localctx IModport_declarationContext) {
	localctx = NewModport_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, SV2017ParserRULE_modport_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1607)
		p.Match(SV2017ParserKW_MODPORT)
	}
	{
		p.SetState(1608)
		p.Modport_item()
	}
	p.SetState(1613)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserCOMMA {
		{
			p.SetState(1609)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(1610)
			p.Modport_item()
		}

		p.SetState(1615)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1616)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IModport_itemContext is an interface to support dynamic dispatch.
type IModport_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModport_itemContext differentiates from other interfaces.
	IsModport_itemContext()
}

type Modport_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModport_itemContext() *Modport_itemContext {
	var p = new(Modport_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_modport_item
	return p
}

func (*Modport_itemContext) IsModport_itemContext() {}

func NewModport_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Modport_itemContext {
	var p = new(Modport_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_modport_item

	return p
}

func (s *Modport_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Modport_itemContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Modport_itemContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Modport_itemContext) AllModport_ports_declaration() []IModport_ports_declarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IModport_ports_declarationContext)(nil)).Elem())
	var tst = make([]IModport_ports_declarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IModport_ports_declarationContext)
		}
	}

	return tst
}

func (s *Modport_itemContext) Modport_ports_declaration(i int) IModport_ports_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModport_ports_declarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IModport_ports_declarationContext)
}

func (s *Modport_itemContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Modport_itemContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Modport_itemContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Modport_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Modport_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Modport_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterModport_item(s)
	}
}

func (s *Modport_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitModport_item(s)
	}
}

func (p *SV2017Parser) Modport_item() (localctx IModport_itemContext) {
	localctx = NewModport_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, SV2017ParserRULE_modport_item)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1618)
		p.Identifier()
	}
	{
		p.SetState(1619)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(1620)
		p.Modport_ports_declaration()
	}
	p.SetState(1625)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserCOMMA {
		{
			p.SetState(1621)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(1622)
			p.Modport_ports_declaration()
		}

		p.SetState(1627)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1628)
		p.Match(SV2017ParserRPAREN)
	}

	return localctx
}

// IModport_ports_declarationContext is an interface to support dynamic dispatch.
type IModport_ports_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModport_ports_declarationContext differentiates from other interfaces.
	IsModport_ports_declarationContext()
}

type Modport_ports_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModport_ports_declarationContext() *Modport_ports_declarationContext {
	var p = new(Modport_ports_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_modport_ports_declaration
	return p
}

func (*Modport_ports_declarationContext) IsModport_ports_declarationContext() {}

func NewModport_ports_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Modport_ports_declarationContext {
	var p = new(Modport_ports_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_modport_ports_declaration

	return p
}

func (s *Modport_ports_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Modport_ports_declarationContext) Modport_simple_ports_declaration() IModport_simple_ports_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModport_simple_ports_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModport_simple_ports_declarationContext)
}

func (s *Modport_ports_declarationContext) Modport_tf_ports_declaration() IModport_tf_ports_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModport_tf_ports_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModport_tf_ports_declarationContext)
}

func (s *Modport_ports_declarationContext) Modport_clocking_declaration() IModport_clocking_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModport_clocking_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModport_clocking_declarationContext)
}

func (s *Modport_ports_declarationContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Modport_ports_declarationContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Modport_ports_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Modport_ports_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Modport_ports_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterModport_ports_declaration(s)
	}
}

func (s *Modport_ports_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitModport_ports_declaration(s)
	}
}

func (p *SV2017Parser) Modport_ports_declaration() (localctx IModport_ports_declarationContext) {
	localctx = NewModport_ports_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, SV2017ParserRULE_modport_ports_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1633)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserTICK_IDENTIFIER || _la == SV2017ParserLPAREN {
		{
			p.SetState(1630)
			p.Attribute_instance()
		}

		p.SetState(1635)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1639)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_INOUT, SV2017ParserKW_INPUT, SV2017ParserKW_OUTPUT, SV2017ParserKW_REF:
		{
			p.SetState(1636)
			p.Modport_simple_ports_declaration()
		}

	case SV2017ParserKW_EXPORT, SV2017ParserKW_IMPORT:
		{
			p.SetState(1637)
			p.Modport_tf_ports_declaration()
		}

	case SV2017ParserKW_CLOCKING:
		{
			p.SetState(1638)
			p.Modport_clocking_declaration()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IModport_clocking_declarationContext is an interface to support dynamic dispatch.
type IModport_clocking_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModport_clocking_declarationContext differentiates from other interfaces.
	IsModport_clocking_declarationContext()
}

type Modport_clocking_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModport_clocking_declarationContext() *Modport_clocking_declarationContext {
	var p = new(Modport_clocking_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_modport_clocking_declaration
	return p
}

func (*Modport_clocking_declarationContext) IsModport_clocking_declarationContext() {}

func NewModport_clocking_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Modport_clocking_declarationContext {
	var p = new(Modport_clocking_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_modport_clocking_declaration

	return p
}

func (s *Modport_clocking_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Modport_clocking_declarationContext) KW_CLOCKING() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_CLOCKING, 0)
}

func (s *Modport_clocking_declarationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Modport_clocking_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Modport_clocking_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Modport_clocking_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterModport_clocking_declaration(s)
	}
}

func (s *Modport_clocking_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitModport_clocking_declaration(s)
	}
}

func (p *SV2017Parser) Modport_clocking_declaration() (localctx IModport_clocking_declarationContext) {
	localctx = NewModport_clocking_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, SV2017ParserRULE_modport_clocking_declaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1641)
		p.Match(SV2017ParserKW_CLOCKING)
	}
	{
		p.SetState(1642)
		p.Identifier()
	}

	return localctx
}

// IModport_simple_ports_declarationContext is an interface to support dynamic dispatch.
type IModport_simple_ports_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModport_simple_ports_declarationContext differentiates from other interfaces.
	IsModport_simple_ports_declarationContext()
}

type Modport_simple_ports_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModport_simple_ports_declarationContext() *Modport_simple_ports_declarationContext {
	var p = new(Modport_simple_ports_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_modport_simple_ports_declaration
	return p
}

func (*Modport_simple_ports_declarationContext) IsModport_simple_ports_declarationContext() {}

func NewModport_simple_ports_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Modport_simple_ports_declarationContext {
	var p = new(Modport_simple_ports_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_modport_simple_ports_declaration

	return p
}

func (s *Modport_simple_ports_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Modport_simple_ports_declarationContext) Port_direction() IPort_directionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPort_directionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPort_directionContext)
}

func (s *Modport_simple_ports_declarationContext) AllModport_simple_port() []IModport_simple_portContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IModport_simple_portContext)(nil)).Elem())
	var tst = make([]IModport_simple_portContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IModport_simple_portContext)
		}
	}

	return tst
}

func (s *Modport_simple_ports_declarationContext) Modport_simple_port(i int) IModport_simple_portContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModport_simple_portContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IModport_simple_portContext)
}

func (s *Modport_simple_ports_declarationContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Modport_simple_ports_declarationContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Modport_simple_ports_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Modport_simple_ports_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Modport_simple_ports_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterModport_simple_ports_declaration(s)
	}
}

func (s *Modport_simple_ports_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitModport_simple_ports_declaration(s)
	}
}

func (p *SV2017Parser) Modport_simple_ports_declaration() (localctx IModport_simple_ports_declarationContext) {
	localctx = NewModport_simple_ports_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, SV2017ParserRULE_modport_simple_ports_declaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1644)
		p.Port_direction()
	}
	{
		p.SetState(1645)
		p.Modport_simple_port()
	}
	p.SetState(1650)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 70, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1646)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(1647)
				p.Modport_simple_port()
			}

		}
		p.SetState(1652)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 70, p.GetParserRuleContext())
	}

	return localctx
}

// IModport_simple_portContext is an interface to support dynamic dispatch.
type IModport_simple_portContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModport_simple_portContext differentiates from other interfaces.
	IsModport_simple_portContext()
}

type Modport_simple_portContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModport_simple_portContext() *Modport_simple_portContext {
	var p = new(Modport_simple_portContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_modport_simple_port
	return p
}

func (*Modport_simple_portContext) IsModport_simple_portContext() {}

func NewModport_simple_portContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Modport_simple_portContext {
	var p = new(Modport_simple_portContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_modport_simple_port

	return p
}

func (s *Modport_simple_portContext) GetParser() antlr.Parser { return s.parser }

func (s *Modport_simple_portContext) List_of_arguments_named_item() IList_of_arguments_named_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_arguments_named_itemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_arguments_named_itemContext)
}

func (s *Modport_simple_portContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Modport_simple_portContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Modport_simple_portContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Modport_simple_portContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterModport_simple_port(s)
	}
}

func (s *Modport_simple_portContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitModport_simple_port(s)
	}
}

func (p *SV2017Parser) Modport_simple_port() (localctx IModport_simple_portContext) {
	localctx = NewModport_simple_portContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, SV2017ParserRULE_modport_simple_port)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1655)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserDOT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1653)
			p.List_of_arguments_named_item()
		}

	case SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_SAMPLE, SV2017ParserKW_STD, SV2017ParserKW_TYPE_OPTION, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1654)
			p.Identifier()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IModport_tf_ports_declarationContext is an interface to support dynamic dispatch.
type IModport_tf_ports_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModport_tf_ports_declarationContext differentiates from other interfaces.
	IsModport_tf_ports_declarationContext()
}

type Modport_tf_ports_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModport_tf_ports_declarationContext() *Modport_tf_ports_declarationContext {
	var p = new(Modport_tf_ports_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_modport_tf_ports_declaration
	return p
}

func (*Modport_tf_ports_declarationContext) IsModport_tf_ports_declarationContext() {}

func NewModport_tf_ports_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Modport_tf_ports_declarationContext {
	var p = new(Modport_tf_ports_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_modport_tf_ports_declaration

	return p
}

func (s *Modport_tf_ports_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Modport_tf_ports_declarationContext) Import_export() IImport_exportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImport_exportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImport_exportContext)
}

func (s *Modport_tf_ports_declarationContext) AllModport_tf_port() []IModport_tf_portContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IModport_tf_portContext)(nil)).Elem())
	var tst = make([]IModport_tf_portContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IModport_tf_portContext)
		}
	}

	return tst
}

func (s *Modport_tf_ports_declarationContext) Modport_tf_port(i int) IModport_tf_portContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModport_tf_portContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IModport_tf_portContext)
}

func (s *Modport_tf_ports_declarationContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Modport_tf_ports_declarationContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Modport_tf_ports_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Modport_tf_ports_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Modport_tf_ports_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterModport_tf_ports_declaration(s)
	}
}

func (s *Modport_tf_ports_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitModport_tf_ports_declaration(s)
	}
}

func (p *SV2017Parser) Modport_tf_ports_declaration() (localctx IModport_tf_ports_declarationContext) {
	localctx = NewModport_tf_ports_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, SV2017ParserRULE_modport_tf_ports_declaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1657)
		p.Import_export()
	}
	{
		p.SetState(1658)
		p.Modport_tf_port()
	}
	p.SetState(1663)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 72, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1659)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(1660)
				p.Modport_tf_port()
			}

		}
		p.SetState(1665)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 72, p.GetParserRuleContext())
	}

	return localctx
}

// IModport_tf_portContext is an interface to support dynamic dispatch.
type IModport_tf_portContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModport_tf_portContext differentiates from other interfaces.
	IsModport_tf_portContext()
}

type Modport_tf_portContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModport_tf_portContext() *Modport_tf_portContext {
	var p = new(Modport_tf_portContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_modport_tf_port
	return p
}

func (*Modport_tf_portContext) IsModport_tf_portContext() {}

func NewModport_tf_portContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Modport_tf_portContext {
	var p = new(Modport_tf_portContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_modport_tf_port

	return p
}

func (s *Modport_tf_portContext) GetParser() antlr.Parser { return s.parser }

func (s *Modport_tf_portContext) Method_prototype() IMethod_prototypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMethod_prototypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMethod_prototypeContext)
}

func (s *Modport_tf_portContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Modport_tf_portContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Modport_tf_portContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Modport_tf_portContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterModport_tf_port(s)
	}
}

func (s *Modport_tf_portContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitModport_tf_port(s)
	}
}

func (p *SV2017Parser) Modport_tf_port() (localctx IModport_tf_portContext) {
	localctx = NewModport_tf_portContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, SV2017ParserRULE_modport_tf_port)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1668)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_FUNCTION, SV2017ParserKW_TASK:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1666)
			p.Method_prototype()
		}

	case SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_SAMPLE, SV2017ParserKW_STD, SV2017ParserKW_TYPE_OPTION, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1667)
			p.Identifier()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IStatement_or_nullContext is an interface to support dynamic dispatch.
type IStatement_or_nullContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatement_or_nullContext differentiates from other interfaces.
	IsStatement_or_nullContext()
}

type Statement_or_nullContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatement_or_nullContext() *Statement_or_nullContext {
	var p = new(Statement_or_nullContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_statement_or_null
	return p
}

func (*Statement_or_nullContext) IsStatement_or_nullContext() {}

func NewStatement_or_nullContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Statement_or_nullContext {
	var p = new(Statement_or_nullContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_statement_or_null

	return p
}

func (s *Statement_or_nullContext) GetParser() antlr.Parser { return s.parser }

func (s *Statement_or_nullContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *Statement_or_nullContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Statement_or_nullContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Statement_or_nullContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Statement_or_nullContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Statement_or_nullContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Statement_or_nullContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterStatement_or_null(s)
	}
}

func (s *Statement_or_nullContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitStatement_or_null(s)
	}
}

func (p *SV2017Parser) Statement_or_null() (localctx IStatement_or_nullContext) {
	localctx = NewStatement_or_nullContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, SV2017ParserRULE_statement_or_null)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1678)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 75, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1670)
			p.Statement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1674)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserTICK_IDENTIFIER || _la == SV2017ParserLPAREN {
			{
				p.SetState(1671)
				p.Attribute_instance()
			}

			p.SetState(1676)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1677)
			p.Match(SV2017ParserSEMI)
		}

	}

	return localctx
}

// IInitial_constructContext is an interface to support dynamic dispatch.
type IInitial_constructContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInitial_constructContext differentiates from other interfaces.
	IsInitial_constructContext()
}

type Initial_constructContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitial_constructContext() *Initial_constructContext {
	var p = new(Initial_constructContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_initial_construct
	return p
}

func (*Initial_constructContext) IsInitial_constructContext() {}

func NewInitial_constructContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Initial_constructContext {
	var p = new(Initial_constructContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_initial_construct

	return p
}

func (s *Initial_constructContext) GetParser() antlr.Parser { return s.parser }

func (s *Initial_constructContext) KW_INITIAL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_INITIAL, 0)
}

func (s *Initial_constructContext) Statement_or_null() IStatement_or_nullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_or_nullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_or_nullContext)
}

func (s *Initial_constructContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Initial_constructContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Initial_constructContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterInitial_construct(s)
	}
}

func (s *Initial_constructContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitInitial_construct(s)
	}
}

func (p *SV2017Parser) Initial_construct() (localctx IInitial_constructContext) {
	localctx = NewInitial_constructContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, SV2017ParserRULE_initial_construct)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1680)
		p.Match(SV2017ParserKW_INITIAL)
	}
	{
		p.SetState(1681)
		p.Statement_or_null()
	}

	return localctx
}

// IDefault_clocking_or_dissable_constructContext is an interface to support dynamic dispatch.
type IDefault_clocking_or_dissable_constructContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDefault_clocking_or_dissable_constructContext differentiates from other interfaces.
	IsDefault_clocking_or_dissable_constructContext()
}

type Default_clocking_or_dissable_constructContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefault_clocking_or_dissable_constructContext() *Default_clocking_or_dissable_constructContext {
	var p = new(Default_clocking_or_dissable_constructContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_default_clocking_or_dissable_construct
	return p
}

func (*Default_clocking_or_dissable_constructContext) IsDefault_clocking_or_dissable_constructContext() {
}

func NewDefault_clocking_or_dissable_constructContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Default_clocking_or_dissable_constructContext {
	var p = new(Default_clocking_or_dissable_constructContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_default_clocking_or_dissable_construct

	return p
}

func (s *Default_clocking_or_dissable_constructContext) GetParser() antlr.Parser { return s.parser }

func (s *Default_clocking_or_dissable_constructContext) KW_DEFAULT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DEFAULT, 0)
}

func (s *Default_clocking_or_dissable_constructContext) KW_CLOCKING() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_CLOCKING, 0)
}

func (s *Default_clocking_or_dissable_constructContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Default_clocking_or_dissable_constructContext) KW_DISABLE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DISABLE, 0)
}

func (s *Default_clocking_or_dissable_constructContext) KW_IFF() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_IFF, 0)
}

func (s *Default_clocking_or_dissable_constructContext) Expression_or_dist() IExpression_or_distContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_or_distContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_or_distContext)
}

func (s *Default_clocking_or_dissable_constructContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Default_clocking_or_dissable_constructContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Default_clocking_or_dissable_constructContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterDefault_clocking_or_dissable_construct(s)
	}
}

func (s *Default_clocking_or_dissable_constructContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitDefault_clocking_or_dissable_construct(s)
	}
}

func (p *SV2017Parser) Default_clocking_or_dissable_construct() (localctx IDefault_clocking_or_dissable_constructContext) {
	localctx = NewDefault_clocking_or_dissable_constructContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, SV2017ParserRULE_default_clocking_or_dissable_construct)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1683)
		p.Match(SV2017ParserKW_DEFAULT)
	}
	p.SetState(1689)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_CLOCKING:
		{
			p.SetState(1684)
			p.Match(SV2017ParserKW_CLOCKING)
		}
		{
			p.SetState(1685)
			p.Identifier()
		}

	case SV2017ParserKW_DISABLE:
		{
			p.SetState(1686)
			p.Match(SV2017ParserKW_DISABLE)
		}
		{
			p.SetState(1687)
			p.Match(SV2017ParserKW_IFF)
		}
		{
			p.SetState(1688)
			p.Expression_or_dist()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_statement
	return p
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) Statement_item() IStatement_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_itemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_itemContext)
}

func (s *StatementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *StatementContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *StatementContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *StatementContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterStatement(s)
	}
}

func (s *StatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitStatement(s)
	}
}

func (p *SV2017Parser) Statement() (localctx IStatementContext) {
	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, SV2017ParserRULE_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1694)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 77, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1691)
			p.Identifier()
		}
		{
			p.SetState(1692)
			p.Match(SV2017ParserCOLON)
		}

	}
	p.SetState(1699)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 78, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1696)
				p.Attribute_instance()
			}

		}
		p.SetState(1701)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 78, p.GetParserRuleContext())
	}
	{
		p.SetState(1702)
		p.Statement_item()
	}

	return localctx
}

// IStatement_itemContext is an interface to support dynamic dispatch.
type IStatement_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatement_itemContext differentiates from other interfaces.
	IsStatement_itemContext()
}

type Statement_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatement_itemContext() *Statement_itemContext {
	var p = new(Statement_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_statement_item
	return p
}

func (*Statement_itemContext) IsStatement_itemContext() {}

func NewStatement_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Statement_itemContext {
	var p = new(Statement_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_statement_item

	return p
}

func (s *Statement_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Statement_itemContext) CopyFrom(ctx *Statement_itemContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Statement_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Statement_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type StmtItemCaseContext struct {
	*Statement_itemContext
}

func NewStmtItemCaseContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtItemCaseContext {
	var p = new(StmtItemCaseContext)

	p.Statement_itemContext = NewEmptyStatement_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Statement_itemContext))

	return p
}

func (s *StmtItemCaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtItemCaseContext) Case_statement() ICase_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICase_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICase_statementContext)
}

func (s *StmtItemCaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterStmtItemCase(s)
	}
}

func (s *StmtItemCaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitStmtItemCase(s)
	}
}

type StmtItemProcTimeContext struct {
	*Statement_itemContext
}

func NewStmtItemProcTimeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtItemProcTimeContext {
	var p = new(StmtItemProcTimeContext)

	p.Statement_itemContext = NewEmptyStatement_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Statement_itemContext))

	return p
}

func (s *StmtItemProcTimeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtItemProcTimeContext) Procedural_timing_control_statement() IProcedural_timing_control_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProcedural_timing_control_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProcedural_timing_control_statementContext)
}

func (s *StmtItemProcTimeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterStmtItemProcTime(s)
	}
}

func (s *StmtItemProcTimeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitStmtItemProcTime(s)
	}
}

type StmtItemDisableContext struct {
	*Statement_itemContext
}

func NewStmtItemDisableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtItemDisableContext {
	var p = new(StmtItemDisableContext)

	p.Statement_itemContext = NewEmptyStatement_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Statement_itemContext))

	return p
}

func (s *StmtItemDisableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtItemDisableContext) Disable_statement() IDisable_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDisable_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDisable_statementContext)
}

func (s *StmtItemDisableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterStmtItemDisable(s)
	}
}

func (s *StmtItemDisableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitStmtItemDisable(s)
	}
}

type StmtItemJumpContext struct {
	*Statement_itemContext
}

func NewStmtItemJumpContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtItemJumpContext {
	var p = new(StmtItemJumpContext)

	p.Statement_itemContext = NewEmptyStatement_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Statement_itemContext))

	return p
}

func (s *StmtItemJumpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtItemJumpContext) Jump_statement() IJump_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJump_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJump_statementContext)
}

func (s *StmtItemJumpContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterStmtItemJump(s)
	}
}

func (s *StmtItemJumpContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitStmtItemJump(s)
	}
}

type StmtItemMainContext struct {
	*Statement_itemContext
}

func NewStmtItemMainContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtItemMainContext {
	var p = new(StmtItemMainContext)

	p.Statement_itemContext = NewEmptyStatement_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Statement_itemContext))

	return p
}

func (s *StmtItemMainContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtItemMainContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *StmtItemMainContext) Blocking_assignment() IBlocking_assignmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlocking_assignmentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlocking_assignmentContext)
}

func (s *StmtItemMainContext) Nonblocking_assignment() INonblocking_assignmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INonblocking_assignmentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INonblocking_assignmentContext)
}

func (s *StmtItemMainContext) Procedural_continuous_assignment() IProcedural_continuous_assignmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProcedural_continuous_assignmentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProcedural_continuous_assignmentContext)
}

func (s *StmtItemMainContext) Inc_or_dec_expression() IInc_or_dec_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInc_or_dec_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInc_or_dec_expressionContext)
}

func (s *StmtItemMainContext) Macro_statement() IMacro_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMacro_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMacro_statementContext)
}

func (s *StmtItemMainContext) Primary() IPrimaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryContext)
}

func (s *StmtItemMainContext) Clocking_drive() IClocking_driveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClocking_driveContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClocking_driveContext)
}

func (s *StmtItemMainContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterStmtItemMain(s)
	}
}

func (s *StmtItemMainContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitStmtItemMain(s)
	}
}

type StmtItemRandseqContext struct {
	*Statement_itemContext
}

func NewStmtItemRandseqContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtItemRandseqContext {
	var p = new(StmtItemRandseqContext)

	p.Statement_itemContext = NewEmptyStatement_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Statement_itemContext))

	return p
}

func (s *StmtItemRandseqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtItemRandseqContext) Randsequence_statement() IRandsequence_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRandsequence_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRandsequence_statementContext)
}

func (s *StmtItemRandseqContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterStmtItemRandseq(s)
	}
}

func (s *StmtItemRandseqContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitStmtItemRandseq(s)
	}
}

type StmtItemParContext struct {
	*Statement_itemContext
}

func NewStmtItemParContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtItemParContext {
	var p = new(StmtItemParContext)

	p.Statement_itemContext = NewEmptyStatement_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Statement_itemContext))

	return p
}

func (s *StmtItemParContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtItemParContext) Par_block() IPar_blockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPar_blockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPar_blockContext)
}

func (s *StmtItemParContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterStmtItemPar(s)
	}
}

func (s *StmtItemParContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitStmtItemPar(s)
	}
}

type StmtItemSeqContext struct {
	*Statement_itemContext
}

func NewStmtItemSeqContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtItemSeqContext {
	var p = new(StmtItemSeqContext)

	p.Statement_itemContext = NewEmptyStatement_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Statement_itemContext))

	return p
}

func (s *StmtItemSeqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtItemSeqContext) Seq_block() ISeq_blockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISeq_blockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISeq_blockContext)
}

func (s *StmtItemSeqContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterStmtItemSeq(s)
	}
}

func (s *StmtItemSeqContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitStmtItemSeq(s)
	}
}

type StmtItemLoopContext struct {
	*Statement_itemContext
}

func NewStmtItemLoopContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtItemLoopContext {
	var p = new(StmtItemLoopContext)

	p.Statement_itemContext = NewEmptyStatement_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Statement_itemContext))

	return p
}

func (s *StmtItemLoopContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtItemLoopContext) Loop_statement() ILoop_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoop_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoop_statementContext)
}

func (s *StmtItemLoopContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterStmtItemLoop(s)
	}
}

func (s *StmtItemLoopContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitStmtItemLoop(s)
	}
}

type StmtItemSubCallContext struct {
	*Statement_itemContext
}

func NewStmtItemSubCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtItemSubCallContext {
	var p = new(StmtItemSubCallContext)

	p.Statement_itemContext = NewEmptyStatement_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Statement_itemContext))

	return p
}

func (s *StmtItemSubCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtItemSubCallContext) Subroutine_call_statement() ISubroutine_call_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubroutine_call_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubroutine_call_statementContext)
}

func (s *StmtItemSubCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterStmtItemSubCall(s)
	}
}

func (s *StmtItemSubCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitStmtItemSubCall(s)
	}
}

type StmtItemEventContext struct {
	*Statement_itemContext
}

func NewStmtItemEventContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtItemEventContext {
	var p = new(StmtItemEventContext)

	p.Statement_itemContext = NewEmptyStatement_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Statement_itemContext))

	return p
}

func (s *StmtItemEventContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtItemEventContext) Event_trigger() IEvent_triggerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEvent_triggerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEvent_triggerContext)
}

func (s *StmtItemEventContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterStmtItemEvent(s)
	}
}

func (s *StmtItemEventContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitStmtItemEvent(s)
	}
}

type StmtItemProcAssertContext struct {
	*Statement_itemContext
}

func NewStmtItemProcAssertContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtItemProcAssertContext {
	var p = new(StmtItemProcAssertContext)

	p.Statement_itemContext = NewEmptyStatement_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Statement_itemContext))

	return p
}

func (s *StmtItemProcAssertContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtItemProcAssertContext) Procedural_assertion_statement() IProcedural_assertion_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProcedural_assertion_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProcedural_assertion_statementContext)
}

func (s *StmtItemProcAssertContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterStmtItemProcAssert(s)
	}
}

func (s *StmtItemProcAssertContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitStmtItemProcAssert(s)
	}
}

type StmtItemMacroContext struct {
	*Statement_itemContext
}

func NewStmtItemMacroContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtItemMacroContext {
	var p = new(StmtItemMacroContext)

	p.Statement_itemContext = NewEmptyStatement_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Statement_itemContext))

	return p
}

func (s *StmtItemMacroContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtItemMacroContext) Macro_statement() IMacro_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMacro_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMacro_statementContext)
}

func (s *StmtItemMacroContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterStmtItemMacro(s)
	}
}

func (s *StmtItemMacroContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitStmtItemMacro(s)
	}
}

type StmtItemWaitContext struct {
	*Statement_itemContext
}

func NewStmtItemWaitContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtItemWaitContext {
	var p = new(StmtItemWaitContext)

	p.Statement_itemContext = NewEmptyStatement_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Statement_itemContext))

	return p
}

func (s *StmtItemWaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtItemWaitContext) Wait_statement() IWait_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWait_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWait_statementContext)
}

func (s *StmtItemWaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterStmtItemWait(s)
	}
}

func (s *StmtItemWaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitStmtItemWait(s)
	}
}

type StmtItemRandcaseContext struct {
	*Statement_itemContext
}

func NewStmtItemRandcaseContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtItemRandcaseContext {
	var p = new(StmtItemRandcaseContext)

	p.Statement_itemContext = NewEmptyStatement_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Statement_itemContext))

	return p
}

func (s *StmtItemRandcaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtItemRandcaseContext) Randcase_statement() IRandcase_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRandcase_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRandcase_statementContext)
}

func (s *StmtItemRandcaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterStmtItemRandcase(s)
	}
}

func (s *StmtItemRandcaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitStmtItemRandcase(s)
	}
}

type StmtItemCondContext struct {
	*Statement_itemContext
}

func NewStmtItemCondContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtItemCondContext {
	var p = new(StmtItemCondContext)

	p.Statement_itemContext = NewEmptyStatement_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Statement_itemContext))

	return p
}

func (s *StmtItemCondContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtItemCondContext) Conditional_statement() IConditional_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditional_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditional_statementContext)
}

func (s *StmtItemCondContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterStmtItemCond(s)
	}
}

func (s *StmtItemCondContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitStmtItemCond(s)
	}
}

type StmtItemExpectContext struct {
	*Statement_itemContext
}

func NewStmtItemExpectContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtItemExpectContext {
	var p = new(StmtItemExpectContext)

	p.Statement_itemContext = NewEmptyStatement_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Statement_itemContext))

	return p
}

func (s *StmtItemExpectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtItemExpectContext) Expect_property_statement() IExpect_property_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpect_property_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpect_property_statementContext)
}

func (s *StmtItemExpectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterStmtItemExpect(s)
	}
}

func (s *StmtItemExpectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitStmtItemExpect(s)
	}
}

func (p *SV2017Parser) Statement_item() (localctx IStatement_itemContext) {
	localctx = NewStatement_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, SV2017ParserRULE_statement_item)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1731)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 80, p.GetParserRuleContext()) {
	case 1:
		localctx = NewStmtItemMainContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1711)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 79, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1704)
				p.Blocking_assignment()
			}

		case 2:
			{
				p.SetState(1705)
				p.Nonblocking_assignment()
			}

		case 3:
			{
				p.SetState(1706)
				p.Procedural_continuous_assignment()
			}

		case 4:
			{
				p.SetState(1707)
				p.Inc_or_dec_expression()
			}

		case 5:
			{
				p.SetState(1708)
				p.Macro_statement()
			}

		case 6:
			{
				p.SetState(1709)
				p.primary(0)
			}

		case 7:
			{
				p.SetState(1710)
				p.Clocking_drive()
			}

		}
		{
			p.SetState(1713)
			p.Match(SV2017ParserSEMI)
		}

	case 2:
		localctx = NewStmtItemMacroContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1715)
			p.Macro_statement()
		}

	case 3:
		localctx = NewStmtItemCaseContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1716)
			p.Case_statement()
		}

	case 4:
		localctx = NewStmtItemCondContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1717)
			p.Conditional_statement()
		}

	case 5:
		localctx = NewStmtItemSubCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1718)
			p.Subroutine_call_statement()
		}

	case 6:
		localctx = NewStmtItemDisableContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1719)
			p.Disable_statement()
		}

	case 7:
		localctx = NewStmtItemEventContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1720)
			p.Event_trigger()
		}

	case 8:
		localctx = NewStmtItemLoopContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1721)
			p.Loop_statement()
		}

	case 9:
		localctx = NewStmtItemJumpContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1722)
			p.Jump_statement()
		}

	case 10:
		localctx = NewStmtItemParContext(p, localctx)
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1723)
			p.Par_block()
		}

	case 11:
		localctx = NewStmtItemProcTimeContext(p, localctx)
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1724)
			p.Procedural_timing_control_statement()
		}

	case 12:
		localctx = NewStmtItemSeqContext(p, localctx)
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1725)
			p.Seq_block()
		}

	case 13:
		localctx = NewStmtItemWaitContext(p, localctx)
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1726)
			p.Wait_statement()
		}

	case 14:
		localctx = NewStmtItemProcAssertContext(p, localctx)
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(1727)
			p.Procedural_assertion_statement()
		}

	case 15:
		localctx = NewStmtItemRandseqContext(p, localctx)
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(1728)
			p.Randsequence_statement()
		}

	case 16:
		localctx = NewStmtItemRandcaseContext(p, localctx)
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(1729)
			p.Randcase_statement()
		}

	case 17:
		localctx = NewStmtItemExpectContext(p, localctx)
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(1730)
			p.Expect_property_statement()
		}

	}

	return localctx
}

// IMacro_statementContext is an interface to support dynamic dispatch.
type IMacro_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMacro_statementContext differentiates from other interfaces.
	IsMacro_statementContext()
}

type Macro_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMacro_statementContext() *Macro_statementContext {
	var p = new(Macro_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_macro_statement
	return p
}

func (*Macro_statementContext) IsMacro_statementContext() {}

func NewMacro_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Macro_statementContext {
	var p = new(Macro_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_macro_statement

	return p
}

func (s *Macro_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Macro_statementContext) TICK_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(SV2017ParserTICK_IDENTIFIER, 0)
}

func (s *Macro_statementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Macro_statementContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Macro_statementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Macro_statementContext) List_of_arguments() IList_of_argumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_argumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_argumentsContext)
}

func (s *Macro_statementContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *Macro_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Macro_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Macro_statementContext) Clocking_event() IClocking_eventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClocking_eventContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClocking_eventContext)
}

func (s *Macro_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Macro_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Macro_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterMacro_statement(s)
	}
}

func (s *Macro_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitMacro_statement(s)
	}
}

func (p *SV2017Parser) Macro_statement() (localctx IMacro_statementContext) {
	localctx = NewMacro_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, SV2017ParserRULE_macro_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1733)
		p.Match(SV2017ParserTICK_IDENTIFIER)
	}
	p.SetState(1758)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 84, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1734)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(1735)
			p.Data_type()
		}
		p.SetState(1738)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 81, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1736)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(1737)
				p.List_of_arguments()
			}

		}
		p.SetState(1742)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserCOMMA {
			{
				p.SetState(1740)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(1741)
				p.Clocking_event()
			}

		}
		{
			p.SetState(1744)
			p.Match(SV2017ParserRPAREN)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 84, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(1746)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(1747)
			p.List_of_arguments()
		}
		p.SetState(1750)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserCOMMA {
			{
				p.SetState(1748)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(1749)
				p.Clocking_event()
			}

		}
		{
			p.SetState(1752)
			p.Match(SV2017ParserRPAREN)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 84, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(1754)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(1755)
			p.Statement()
		}
		{
			p.SetState(1756)
			p.Match(SV2017ParserRPAREN)
		}

	}

	return localctx
}

// ICycle_delayContext is an interface to support dynamic dispatch.
type ICycle_delayContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCycle_delayContext differentiates from other interfaces.
	IsCycle_delayContext()
}

type Cycle_delayContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCycle_delayContext() *Cycle_delayContext {
	var p = new(Cycle_delayContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_cycle_delay
	return p
}

func (*Cycle_delayContext) IsCycle_delayContext() {}

func NewCycle_delayContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cycle_delayContext {
	var p = new(Cycle_delayContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_cycle_delay

	return p
}

func (s *Cycle_delayContext) GetParser() antlr.Parser { return s.parser }

func (s *Cycle_delayContext) DOUBLE_HASH() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOUBLE_HASH, 0)
}

func (s *Cycle_delayContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Cycle_delayContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Cycle_delayContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Cycle_delayContext) Integral_number() IIntegral_numberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntegral_numberContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntegral_numberContext)
}

func (s *Cycle_delayContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Cycle_delayContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cycle_delayContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Cycle_delayContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCycle_delay(s)
	}
}

func (s *Cycle_delayContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCycle_delay(s)
	}
}

func (p *SV2017Parser) Cycle_delay() (localctx ICycle_delayContext) {
	localctx = NewCycle_delayContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, SV2017ParserRULE_cycle_delay)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1760)
		p.Match(SV2017ParserDOUBLE_HASH)
	}
	p.SetState(1767)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserLPAREN:
		{
			p.SetState(1761)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(1762)
			p.expression(0)
		}
		{
			p.SetState(1763)
			p.Match(SV2017ParserRPAREN)
		}

	case SV2017ParserANY_BASED_NUMBER, SV2017ParserBASED_NUMBER_WITH_SIZE, SV2017ParserUNSIGNED_NUMBER:
		{
			p.SetState(1765)
			p.Integral_number()
		}

	case SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_SAMPLE, SV2017ParserKW_STD, SV2017ParserKW_TYPE_OPTION, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
		{
			p.SetState(1766)
			p.Identifier()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IClocking_driveContext is an interface to support dynamic dispatch.
type IClocking_driveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClocking_driveContext differentiates from other interfaces.
	IsClocking_driveContext()
}

type Clocking_driveContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClocking_driveContext() *Clocking_driveContext {
	var p = new(Clocking_driveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_clocking_drive
	return p
}

func (*Clocking_driveContext) IsClocking_driveContext() {}

func NewClocking_driveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Clocking_driveContext {
	var p = new(Clocking_driveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_clocking_drive

	return p
}

func (s *Clocking_driveContext) GetParser() antlr.Parser { return s.parser }

func (s *Clocking_driveContext) Clockvar_expression() IClockvar_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClockvar_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClockvar_expressionContext)
}

func (s *Clocking_driveContext) LE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLE, 0)
}

func (s *Clocking_driveContext) Cycle_delay() ICycle_delayContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICycle_delayContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICycle_delayContext)
}

func (s *Clocking_driveContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Clocking_driveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Clocking_driveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Clocking_driveContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterClocking_drive(s)
	}
}

func (s *Clocking_driveContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitClocking_drive(s)
	}
}

func (p *SV2017Parser) Clocking_drive() (localctx IClocking_driveContext) {
	localctx = NewClocking_driveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, SV2017ParserRULE_clocking_drive)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1769)
		p.Clockvar_expression()
	}
	{
		p.SetState(1770)
		p.Match(SV2017ParserLE)
	}
	{
		p.SetState(1771)
		p.Cycle_delay()
	}
	{
		p.SetState(1772)
		p.expression(0)
	}

	return localctx
}

// IClockvar_expressionContext is an interface to support dynamic dispatch.
type IClockvar_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClockvar_expressionContext differentiates from other interfaces.
	IsClockvar_expressionContext()
}

type Clockvar_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClockvar_expressionContext() *Clockvar_expressionContext {
	var p = new(Clockvar_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_clockvar_expression
	return p
}

func (*Clockvar_expressionContext) IsClockvar_expressionContext() {}

func NewClockvar_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Clockvar_expressionContext {
	var p = new(Clockvar_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_clockvar_expression

	return p
}

func (s *Clockvar_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Clockvar_expressionContext) Hierarchical_identifier() IHierarchical_identifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHierarchical_identifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHierarchical_identifierContext)
}

func (s *Clockvar_expressionContext) Select_() ISelect_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_Context)
}

func (s *Clockvar_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Clockvar_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Clockvar_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterClockvar_expression(s)
	}
}

func (s *Clockvar_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitClockvar_expression(s)
	}
}

func (p *SV2017Parser) Clockvar_expression() (localctx IClockvar_expressionContext) {
	localctx = NewClockvar_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 204, SV2017ParserRULE_clockvar_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1774)
		p.Hierarchical_identifier()
	}
	{
		p.SetState(1775)
		p.Select_()
	}

	return localctx
}

// IFinal_constructContext is an interface to support dynamic dispatch.
type IFinal_constructContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFinal_constructContext differentiates from other interfaces.
	IsFinal_constructContext()
}

type Final_constructContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFinal_constructContext() *Final_constructContext {
	var p = new(Final_constructContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_final_construct
	return p
}

func (*Final_constructContext) IsFinal_constructContext() {}

func NewFinal_constructContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Final_constructContext {
	var p = new(Final_constructContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_final_construct

	return p
}

func (s *Final_constructContext) GetParser() antlr.Parser { return s.parser }

func (s *Final_constructContext) KW_FINAL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_FINAL, 0)
}

func (s *Final_constructContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *Final_constructContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Final_constructContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Final_constructContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterFinal_construct(s)
	}
}

func (s *Final_constructContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitFinal_construct(s)
	}
}

func (p *SV2017Parser) Final_construct() (localctx IFinal_constructContext) {
	localctx = NewFinal_constructContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, SV2017ParserRULE_final_construct)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1777)
		p.Match(SV2017ParserKW_FINAL)
	}
	{
		p.SetState(1778)
		p.Statement()
	}

	return localctx
}

// IBlocking_assignmentContext is an interface to support dynamic dispatch.
type IBlocking_assignmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlocking_assignmentContext differentiates from other interfaces.
	IsBlocking_assignmentContext()
}

type Blocking_assignmentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlocking_assignmentContext() *Blocking_assignmentContext {
	var p = new(Blocking_assignmentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_blocking_assignment
	return p
}

func (*Blocking_assignmentContext) IsBlocking_assignmentContext() {}

func NewBlocking_assignmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Blocking_assignmentContext {
	var p = new(Blocking_assignmentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_blocking_assignment

	return p
}

func (s *Blocking_assignmentContext) GetParser() antlr.Parser { return s.parser }

func (s *Blocking_assignmentContext) Variable_lvalue() IVariable_lvalueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_lvalueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_lvalueContext)
}

func (s *Blocking_assignmentContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserASSIGN, 0)
}

func (s *Blocking_assignmentContext) Delay_or_event_control() IDelay_or_event_controlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelay_or_event_controlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelay_or_event_controlContext)
}

func (s *Blocking_assignmentContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Blocking_assignmentContext) Dynamic_array_new() IDynamic_array_newContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDynamic_array_newContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDynamic_array_newContext)
}

func (s *Blocking_assignmentContext) Package_or_class_scoped_hier_id_with_select() IPackage_or_class_scoped_hier_id_with_selectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackage_or_class_scoped_hier_id_with_selectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackage_or_class_scoped_hier_id_with_selectContext)
}

func (s *Blocking_assignmentContext) Class_new() IClass_newContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_newContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_newContext)
}

func (s *Blocking_assignmentContext) Operator_assignment() IOperator_assignmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperator_assignmentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperator_assignmentContext)
}

func (s *Blocking_assignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Blocking_assignmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Blocking_assignmentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterBlocking_assignment(s)
	}
}

func (s *Blocking_assignmentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitBlocking_assignment(s)
	}
}

func (p *SV2017Parser) Blocking_assignment() (localctx IBlocking_assignmentContext) {
	localctx = NewBlocking_assignmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 208, SV2017ParserRULE_blocking_assignment)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1793)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 87, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1780)
			p.Variable_lvalue()
		}
		{
			p.SetState(1781)
			p.Match(SV2017ParserASSIGN)
		}
		p.SetState(1786)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SV2017ParserKW_REPEAT, SV2017ParserAT, SV2017ParserHASH:
			{
				p.SetState(1782)
				p.Delay_or_event_control()
			}
			{
				p.SetState(1783)
				p.expression(0)
			}

		case SV2017ParserKW_NEW:
			{
				p.SetState(1785)
				p.Dynamic_array_new()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1788)
			p.Package_or_class_scoped_hier_id_with_select()
		}
		{
			p.SetState(1789)
			p.Match(SV2017ParserASSIGN)
		}
		{
			p.SetState(1790)
			p.Class_new()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1792)
			p.Operator_assignment()
		}

	}

	return localctx
}

// IProcedural_timing_control_statementContext is an interface to support dynamic dispatch.
type IProcedural_timing_control_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProcedural_timing_control_statementContext differentiates from other interfaces.
	IsProcedural_timing_control_statementContext()
}

type Procedural_timing_control_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProcedural_timing_control_statementContext() *Procedural_timing_control_statementContext {
	var p = new(Procedural_timing_control_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_procedural_timing_control_statement
	return p
}

func (*Procedural_timing_control_statementContext) IsProcedural_timing_control_statementContext() {}

func NewProcedural_timing_control_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Procedural_timing_control_statementContext {
	var p = new(Procedural_timing_control_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_procedural_timing_control_statement

	return p
}

func (s *Procedural_timing_control_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Procedural_timing_control_statementContext) Procedural_timing_control() IProcedural_timing_controlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProcedural_timing_controlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProcedural_timing_controlContext)
}

func (s *Procedural_timing_control_statementContext) Statement_or_null() IStatement_or_nullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_or_nullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_or_nullContext)
}

func (s *Procedural_timing_control_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Procedural_timing_control_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Procedural_timing_control_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterProcedural_timing_control_statement(s)
	}
}

func (s *Procedural_timing_control_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitProcedural_timing_control_statement(s)
	}
}

func (p *SV2017Parser) Procedural_timing_control_statement() (localctx IProcedural_timing_control_statementContext) {
	localctx = NewProcedural_timing_control_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 210, SV2017ParserRULE_procedural_timing_control_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1795)
		p.Procedural_timing_control()
	}
	{
		p.SetState(1796)
		p.Statement_or_null()
	}

	return localctx
}

// IProcedural_timing_controlContext is an interface to support dynamic dispatch.
type IProcedural_timing_controlContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProcedural_timing_controlContext differentiates from other interfaces.
	IsProcedural_timing_controlContext()
}

type Procedural_timing_controlContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProcedural_timing_controlContext() *Procedural_timing_controlContext {
	var p = new(Procedural_timing_controlContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_procedural_timing_control
	return p
}

func (*Procedural_timing_controlContext) IsProcedural_timing_controlContext() {}

func NewProcedural_timing_controlContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Procedural_timing_controlContext {
	var p = new(Procedural_timing_controlContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_procedural_timing_control

	return p
}

func (s *Procedural_timing_controlContext) GetParser() antlr.Parser { return s.parser }

func (s *Procedural_timing_controlContext) Delay_control() IDelay_controlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelay_controlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelay_controlContext)
}

func (s *Procedural_timing_controlContext) Event_control() IEvent_controlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEvent_controlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEvent_controlContext)
}

func (s *Procedural_timing_controlContext) Cycle_delay() ICycle_delayContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICycle_delayContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICycle_delayContext)
}

func (s *Procedural_timing_controlContext) Cycle_delay_range() ICycle_delay_rangeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICycle_delay_rangeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICycle_delay_rangeContext)
}

func (s *Procedural_timing_controlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Procedural_timing_controlContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Procedural_timing_controlContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterProcedural_timing_control(s)
	}
}

func (s *Procedural_timing_controlContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitProcedural_timing_control(s)
	}
}

func (p *SV2017Parser) Procedural_timing_control() (localctx IProcedural_timing_controlContext) {
	localctx = NewProcedural_timing_controlContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 212, SV2017ParserRULE_procedural_timing_control)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1802)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 88, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1798)
			p.Delay_control()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1799)
			p.Event_control()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1800)
			p.Cycle_delay()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1801)
			p.Cycle_delay_range()
		}

	}

	return localctx
}

// IEvent_controlContext is an interface to support dynamic dispatch.
type IEvent_controlContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEvent_controlContext differentiates from other interfaces.
	IsEvent_controlContext()
}

type Event_controlContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEvent_controlContext() *Event_controlContext {
	var p = new(Event_controlContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_event_control
	return p
}

func (*Event_controlContext) IsEvent_controlContext() {}

func NewEvent_controlContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Event_controlContext {
	var p = new(Event_controlContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_event_control

	return p
}

func (s *Event_controlContext) GetParser() antlr.Parser { return s.parser }

func (s *Event_controlContext) AT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserAT, 0)
}

func (s *Event_controlContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Event_controlContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Event_controlContext) MUL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserMUL, 0)
}

func (s *Event_controlContext) Package_or_class_scoped_hier_id_with_select() IPackage_or_class_scoped_hier_id_with_selectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackage_or_class_scoped_hier_id_with_selectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackage_or_class_scoped_hier_id_with_selectContext)
}

func (s *Event_controlContext) Event_expression() IEvent_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEvent_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEvent_expressionContext)
}

func (s *Event_controlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Event_controlContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Event_controlContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterEvent_control(s)
	}
}

func (s *Event_controlContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitEvent_control(s)
	}
}

func (p *SV2017Parser) Event_control() (localctx IEvent_controlContext) {
	localctx = NewEvent_controlContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 214, SV2017ParserRULE_event_control)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1804)
		p.Match(SV2017ParserAT)
	}
	p.SetState(1813)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserLPAREN:
		{
			p.SetState(1805)
			p.Match(SV2017ParserLPAREN)
		}
		p.SetState(1808)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SV2017ParserMUL:
			{
				p.SetState(1806)
				p.Match(SV2017ParserMUL)
			}

		case SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_FATAL, SV2017ParserKW_DOLAR_FULLSKEW, SV2017ParserKW_DOLAR_HOLD, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_NOCHANGE, SV2017ParserKW_DOLAR_PERIOD, SV2017ParserKW_DOLAR_RECOVERY, SV2017ParserKW_DOLAR_RECREM, SV2017ParserKW_DOLAR_REMOVAL, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_SETUP, SV2017ParserKW_DOLAR_SETUPHOLD, SV2017ParserKW_DOLAR_SKEW, SV2017ParserKW_DOLAR_TIMESKEW, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_DOLAR_WARNING, SV2017ParserKW_DOLAR_WIDTH, SV2017ParserKW_BIT, SV2017ParserKW_BYTE, SV2017ParserKW_CONST, SV2017ParserKW_EDGE, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LOCAL, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_NEGEDGE, SV2017ParserKW_NULL, SV2017ParserKW_OPTION, SV2017ParserKW_POSEDGE, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_SAMPLE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_SUPER, SV2017ParserKW_TAGGED, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_UNSIGNED, SV2017ParserTIME_LITERAL, SV2017ParserANY_BASED_NUMBER, SV2017ParserBASED_NUMBER_WITH_SIZE, SV2017ParserREAL_NUMBER_WITH_EXP, SV2017ParserFIXED_POINT_NUMBER, SV2017ParserUNSIGNED_NUMBER, SV2017ParserUNBASED_UNSIZED_LITERAL, SV2017ParserSTRING_LITERAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSYSTEM_TF_IDENTIFIER, SV2017ParserLPAREN, SV2017ParserLBRACE, SV2017ParserAPOSTROPHE_LBRACE, SV2017ParserDOLAR, SV2017ParserNOT, SV2017ParserNEG, SV2017ParserNAND, SV2017ParserNOR, SV2017ParserXOR, SV2017ParserNXOR, SV2017ParserXORN, SV2017ParserPLUS, SV2017ParserMINUS, SV2017ParserAMPERSAND, SV2017ParserBAR, SV2017ParserINCR, SV2017ParserDECR:
			{
				p.SetState(1807)
				p.Event_expression()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(1810)
			p.Match(SV2017ParserRPAREN)
		}

	case SV2017ParserMUL:
		{
			p.SetState(1811)
			p.Match(SV2017ParserMUL)
		}

	case SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_LOCAL, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_SAMPLE, SV2017ParserKW_STD, SV2017ParserKW_SUPER, SV2017ParserKW_THIS, SV2017ParserKW_TYPE_OPTION, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
		{
			p.SetState(1812)
			p.Package_or_class_scoped_hier_id_with_select()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDelay_or_event_controlContext is an interface to support dynamic dispatch.
type IDelay_or_event_controlContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDelay_or_event_controlContext differentiates from other interfaces.
	IsDelay_or_event_controlContext()
}

type Delay_or_event_controlContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDelay_or_event_controlContext() *Delay_or_event_controlContext {
	var p = new(Delay_or_event_controlContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_delay_or_event_control
	return p
}

func (*Delay_or_event_controlContext) IsDelay_or_event_controlContext() {}

func NewDelay_or_event_controlContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Delay_or_event_controlContext {
	var p = new(Delay_or_event_controlContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_delay_or_event_control

	return p
}

func (s *Delay_or_event_controlContext) GetParser() antlr.Parser { return s.parser }

func (s *Delay_or_event_controlContext) Delay_control() IDelay_controlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelay_controlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelay_controlContext)
}

func (s *Delay_or_event_controlContext) Event_control() IEvent_controlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEvent_controlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEvent_controlContext)
}

func (s *Delay_or_event_controlContext) KW_REPEAT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_REPEAT, 0)
}

func (s *Delay_or_event_controlContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Delay_or_event_controlContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Delay_or_event_controlContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Delay_or_event_controlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Delay_or_event_controlContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Delay_or_event_controlContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterDelay_or_event_control(s)
	}
}

func (s *Delay_or_event_controlContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitDelay_or_event_control(s)
	}
}

func (p *SV2017Parser) Delay_or_event_control() (localctx IDelay_or_event_controlContext) {
	localctx = NewDelay_or_event_controlContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 216, SV2017ParserRULE_delay_or_event_control)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1824)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserHASH:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1815)
			p.Delay_control()
		}

	case SV2017ParserKW_REPEAT, SV2017ParserAT:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1821)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_REPEAT {
			{
				p.SetState(1816)
				p.Match(SV2017ParserKW_REPEAT)
			}
			{
				p.SetState(1817)
				p.Match(SV2017ParserLPAREN)
			}
			{
				p.SetState(1818)
				p.expression(0)
			}
			{
				p.SetState(1819)
				p.Match(SV2017ParserRPAREN)
			}

		}
		{
			p.SetState(1823)
			p.Event_control()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDelay3Context is an interface to support dynamic dispatch.
type IDelay3Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDelay3Context differentiates from other interfaces.
	IsDelay3Context()
}

type Delay3Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDelay3Context() *Delay3Context {
	var p = new(Delay3Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_delay3
	return p
}

func (*Delay3Context) IsDelay3Context() {}

func NewDelay3Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Delay3Context {
	var p = new(Delay3Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_delay3

	return p
}

func (s *Delay3Context) GetParser() antlr.Parser { return s.parser }

func (s *Delay3Context) HASH() antlr.TerminalNode {
	return s.GetToken(SV2017ParserHASH, 0)
}

func (s *Delay3Context) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Delay3Context) AllMintypmax_expression() []IMintypmax_expressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMintypmax_expressionContext)(nil)).Elem())
	var tst = make([]IMintypmax_expressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMintypmax_expressionContext)
		}
	}

	return tst
}

func (s *Delay3Context) Mintypmax_expression(i int) IMintypmax_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMintypmax_expressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMintypmax_expressionContext)
}

func (s *Delay3Context) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Delay3Context) Delay_value() IDelay_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelay_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelay_valueContext)
}

func (s *Delay3Context) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Delay3Context) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Delay3Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Delay3Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Delay3Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterDelay3(s)
	}
}

func (s *Delay3Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitDelay3(s)
	}
}

func (p *SV2017Parser) Delay3() (localctx IDelay3Context) {
	localctx = NewDelay3Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 218, SV2017ParserRULE_delay3)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1826)
		p.Match(SV2017ParserHASH)
	}
	p.SetState(1840)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserLPAREN:
		{
			p.SetState(1827)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(1828)
			p.Mintypmax_expression()
		}
		p.SetState(1835)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserCOMMA {
			{
				p.SetState(1829)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(1830)
				p.Mintypmax_expression()
			}
			p.SetState(1833)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SV2017ParserCOMMA {
				{
					p.SetState(1831)
					p.Match(SV2017ParserCOMMA)
				}
				{
					p.SetState(1832)
					p.Mintypmax_expression()
				}

			}

		}
		{
			p.SetState(1837)
			p.Match(SV2017ParserRPAREN)
		}

	case SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_1STEP, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_SAMPLE, SV2017ParserKW_STD, SV2017ParserKW_TYPE_OPTION, SV2017ParserTIME_LITERAL, SV2017ParserREAL_NUMBER_WITH_EXP, SV2017ParserFIXED_POINT_NUMBER, SV2017ParserUNSIGNED_NUMBER, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
		{
			p.SetState(1839)
			p.Delay_value()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDelay2Context is an interface to support dynamic dispatch.
type IDelay2Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDelay2Context differentiates from other interfaces.
	IsDelay2Context()
}

type Delay2Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDelay2Context() *Delay2Context {
	var p = new(Delay2Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_delay2
	return p
}

func (*Delay2Context) IsDelay2Context() {}

func NewDelay2Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Delay2Context {
	var p = new(Delay2Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_delay2

	return p
}

func (s *Delay2Context) GetParser() antlr.Parser { return s.parser }

func (s *Delay2Context) HASH() antlr.TerminalNode {
	return s.GetToken(SV2017ParserHASH, 0)
}

func (s *Delay2Context) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Delay2Context) AllMintypmax_expression() []IMintypmax_expressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMintypmax_expressionContext)(nil)).Elem())
	var tst = make([]IMintypmax_expressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMintypmax_expressionContext)
		}
	}

	return tst
}

func (s *Delay2Context) Mintypmax_expression(i int) IMintypmax_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMintypmax_expressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMintypmax_expressionContext)
}

func (s *Delay2Context) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Delay2Context) Delay_value() IDelay_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelay_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelay_valueContext)
}

func (s *Delay2Context) COMMA() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, 0)
}

func (s *Delay2Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Delay2Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Delay2Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterDelay2(s)
	}
}

func (s *Delay2Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitDelay2(s)
	}
}

func (p *SV2017Parser) Delay2() (localctx IDelay2Context) {
	localctx = NewDelay2Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 220, SV2017ParserRULE_delay2)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1842)
		p.Match(SV2017ParserHASH)
	}
	p.SetState(1852)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserLPAREN:
		{
			p.SetState(1843)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(1844)
			p.Mintypmax_expression()
		}
		p.SetState(1847)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserCOMMA {
			{
				p.SetState(1845)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(1846)
				p.Mintypmax_expression()
			}

		}
		{
			p.SetState(1849)
			p.Match(SV2017ParserRPAREN)
		}

	case SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_1STEP, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_SAMPLE, SV2017ParserKW_STD, SV2017ParserKW_TYPE_OPTION, SV2017ParserTIME_LITERAL, SV2017ParserREAL_NUMBER_WITH_EXP, SV2017ParserFIXED_POINT_NUMBER, SV2017ParserUNSIGNED_NUMBER, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
		{
			p.SetState(1851)
			p.Delay_value()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDelay_valueContext is an interface to support dynamic dispatch.
type IDelay_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDelay_valueContext differentiates from other interfaces.
	IsDelay_valueContext()
}

type Delay_valueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDelay_valueContext() *Delay_valueContext {
	var p = new(Delay_valueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_delay_value
	return p
}

func (*Delay_valueContext) IsDelay_valueContext() {}

func NewDelay_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Delay_valueContext {
	var p = new(Delay_valueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_delay_value

	return p
}

func (s *Delay_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Delay_valueContext) UNSIGNED_NUMBER() antlr.TerminalNode {
	return s.GetToken(SV2017ParserUNSIGNED_NUMBER, 0)
}

func (s *Delay_valueContext) Time_lit() ITime_litContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITime_litContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITime_litContext)
}

func (s *Delay_valueContext) KW_1STEP() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_1STEP, 0)
}

func (s *Delay_valueContext) Real_number() IReal_numberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReal_numberContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReal_numberContext)
}

func (s *Delay_valueContext) Ps_identifier() IPs_identifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPs_identifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPs_identifierContext)
}

func (s *Delay_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Delay_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Delay_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterDelay_value(s)
	}
}

func (s *Delay_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitDelay_value(s)
	}
}

func (p *SV2017Parser) Delay_value() (localctx IDelay_valueContext) {
	localctx = NewDelay_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 222, SV2017ParserRULE_delay_value)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1859)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 98, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1854)
			p.Match(SV2017ParserUNSIGNED_NUMBER)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1855)
			p.Time_lit()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1856)
			p.Match(SV2017ParserKW_1STEP)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1857)
			p.Real_number()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1858)
			p.Ps_identifier()
		}

	}

	return localctx
}

// IDelay_controlContext is an interface to support dynamic dispatch.
type IDelay_controlContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDelay_controlContext differentiates from other interfaces.
	IsDelay_controlContext()
}

type Delay_controlContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDelay_controlContext() *Delay_controlContext {
	var p = new(Delay_controlContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_delay_control
	return p
}

func (*Delay_controlContext) IsDelay_controlContext() {}

func NewDelay_controlContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Delay_controlContext {
	var p = new(Delay_controlContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_delay_control

	return p
}

func (s *Delay_controlContext) GetParser() antlr.Parser { return s.parser }

func (s *Delay_controlContext) HASH() antlr.TerminalNode {
	return s.GetToken(SV2017ParserHASH, 0)
}

func (s *Delay_controlContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Delay_controlContext) Mintypmax_expression() IMintypmax_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMintypmax_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMintypmax_expressionContext)
}

func (s *Delay_controlContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Delay_controlContext) Delay_value() IDelay_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelay_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelay_valueContext)
}

func (s *Delay_controlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Delay_controlContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Delay_controlContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterDelay_control(s)
	}
}

func (s *Delay_controlContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitDelay_control(s)
	}
}

func (p *SV2017Parser) Delay_control() (localctx IDelay_controlContext) {
	localctx = NewDelay_controlContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 224, SV2017ParserRULE_delay_control)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1861)
		p.Match(SV2017ParserHASH)
	}
	p.SetState(1867)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserLPAREN:
		{
			p.SetState(1862)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(1863)
			p.Mintypmax_expression()
		}
		{
			p.SetState(1864)
			p.Match(SV2017ParserRPAREN)
		}

	case SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_1STEP, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_SAMPLE, SV2017ParserKW_STD, SV2017ParserKW_TYPE_OPTION, SV2017ParserTIME_LITERAL, SV2017ParserREAL_NUMBER_WITH_EXP, SV2017ParserFIXED_POINT_NUMBER, SV2017ParserUNSIGNED_NUMBER, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
		{
			p.SetState(1866)
			p.Delay_value()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// INonblocking_assignmentContext is an interface to support dynamic dispatch.
type INonblocking_assignmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNonblocking_assignmentContext differentiates from other interfaces.
	IsNonblocking_assignmentContext()
}

type Nonblocking_assignmentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNonblocking_assignmentContext() *Nonblocking_assignmentContext {
	var p = new(Nonblocking_assignmentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_nonblocking_assignment
	return p
}

func (*Nonblocking_assignmentContext) IsNonblocking_assignmentContext() {}

func NewNonblocking_assignmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Nonblocking_assignmentContext {
	var p = new(Nonblocking_assignmentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_nonblocking_assignment

	return p
}

func (s *Nonblocking_assignmentContext) GetParser() antlr.Parser { return s.parser }

func (s *Nonblocking_assignmentContext) Variable_lvalue() IVariable_lvalueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_lvalueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_lvalueContext)
}

func (s *Nonblocking_assignmentContext) LE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLE, 0)
}

func (s *Nonblocking_assignmentContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Nonblocking_assignmentContext) Delay_or_event_control() IDelay_or_event_controlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelay_or_event_controlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelay_or_event_controlContext)
}

func (s *Nonblocking_assignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Nonblocking_assignmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Nonblocking_assignmentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterNonblocking_assignment(s)
	}
}

func (s *Nonblocking_assignmentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitNonblocking_assignment(s)
	}
}

func (p *SV2017Parser) Nonblocking_assignment() (localctx INonblocking_assignmentContext) {
	localctx = NewNonblocking_assignmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 226, SV2017ParserRULE_nonblocking_assignment)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1869)
		p.Variable_lvalue()
	}
	{
		p.SetState(1870)
		p.Match(SV2017ParserLE)
	}
	p.SetState(1872)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_REPEAT || _la == SV2017ParserAT || _la == SV2017ParserHASH {
		{
			p.SetState(1871)
			p.Delay_or_event_control()
		}

	}
	{
		p.SetState(1874)
		p.expression(0)
	}

	return localctx
}

// IProcedural_continuous_assignmentContext is an interface to support dynamic dispatch.
type IProcedural_continuous_assignmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProcedural_continuous_assignmentContext differentiates from other interfaces.
	IsProcedural_continuous_assignmentContext()
}

type Procedural_continuous_assignmentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProcedural_continuous_assignmentContext() *Procedural_continuous_assignmentContext {
	var p = new(Procedural_continuous_assignmentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_procedural_continuous_assignment
	return p
}

func (*Procedural_continuous_assignmentContext) IsProcedural_continuous_assignmentContext() {}

func NewProcedural_continuous_assignmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Procedural_continuous_assignmentContext {
	var p = new(Procedural_continuous_assignmentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_procedural_continuous_assignment

	return p
}

func (s *Procedural_continuous_assignmentContext) GetParser() antlr.Parser { return s.parser }

func (s *Procedural_continuous_assignmentContext) KW_ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ASSIGN, 0)
}

func (s *Procedural_continuous_assignmentContext) Variable_assignment() IVariable_assignmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_assignmentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_assignmentContext)
}

func (s *Procedural_continuous_assignmentContext) KW_DEASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DEASSIGN, 0)
}

func (s *Procedural_continuous_assignmentContext) Variable_lvalue() IVariable_lvalueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_lvalueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_lvalueContext)
}

func (s *Procedural_continuous_assignmentContext) KW_FORCE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_FORCE, 0)
}

func (s *Procedural_continuous_assignmentContext) KW_RELEASE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_RELEASE, 0)
}

func (s *Procedural_continuous_assignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Procedural_continuous_assignmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Procedural_continuous_assignmentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterProcedural_continuous_assignment(s)
	}
}

func (s *Procedural_continuous_assignmentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitProcedural_continuous_assignment(s)
	}
}

func (p *SV2017Parser) Procedural_continuous_assignment() (localctx IProcedural_continuous_assignmentContext) {
	localctx = NewProcedural_continuous_assignmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 228, SV2017ParserRULE_procedural_continuous_assignment)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1884)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_ASSIGN:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1876)
			p.Match(SV2017ParserKW_ASSIGN)
		}
		{
			p.SetState(1877)
			p.Variable_assignment()
		}

	case SV2017ParserKW_DEASSIGN:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1878)
			p.Match(SV2017ParserKW_DEASSIGN)
		}
		{
			p.SetState(1879)
			p.Variable_lvalue()
		}

	case SV2017ParserKW_FORCE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1880)
			p.Match(SV2017ParserKW_FORCE)
		}
		{
			p.SetState(1881)
			p.Variable_assignment()
		}

	case SV2017ParserKW_RELEASE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1882)
			p.Match(SV2017ParserKW_RELEASE)
		}
		{
			p.SetState(1883)
			p.Variable_lvalue()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IVariable_assignmentContext is an interface to support dynamic dispatch.
type IVariable_assignmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariable_assignmentContext differentiates from other interfaces.
	IsVariable_assignmentContext()
}

type Variable_assignmentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariable_assignmentContext() *Variable_assignmentContext {
	var p = new(Variable_assignmentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_variable_assignment
	return p
}

func (*Variable_assignmentContext) IsVariable_assignmentContext() {}

func NewVariable_assignmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Variable_assignmentContext {
	var p = new(Variable_assignmentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_variable_assignment

	return p
}

func (s *Variable_assignmentContext) GetParser() antlr.Parser { return s.parser }

func (s *Variable_assignmentContext) Variable_lvalue() IVariable_lvalueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_lvalueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_lvalueContext)
}

func (s *Variable_assignmentContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserASSIGN, 0)
}

func (s *Variable_assignmentContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Variable_assignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Variable_assignmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Variable_assignmentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterVariable_assignment(s)
	}
}

func (s *Variable_assignmentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitVariable_assignment(s)
	}
}

func (p *SV2017Parser) Variable_assignment() (localctx IVariable_assignmentContext) {
	localctx = NewVariable_assignmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 230, SV2017ParserRULE_variable_assignment)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1886)
		p.Variable_lvalue()
	}
	{
		p.SetState(1887)
		p.Match(SV2017ParserASSIGN)
	}
	{
		p.SetState(1888)
		p.expression(0)
	}

	return localctx
}

// IAction_blockContext is an interface to support dynamic dispatch.
type IAction_blockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAction_blockContext differentiates from other interfaces.
	IsAction_blockContext()
}

type Action_blockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAction_blockContext() *Action_blockContext {
	var p = new(Action_blockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_action_block
	return p
}

func (*Action_blockContext) IsAction_blockContext() {}

func NewAction_blockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Action_blockContext {
	var p = new(Action_blockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_action_block

	return p
}

func (s *Action_blockContext) GetParser() antlr.Parser { return s.parser }

func (s *Action_blockContext) KW_ELSE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ELSE, 0)
}

func (s *Action_blockContext) AllStatement_or_null() []IStatement_or_nullContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatement_or_nullContext)(nil)).Elem())
	var tst = make([]IStatement_or_nullContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatement_or_nullContext)
		}
	}

	return tst
}

func (s *Action_blockContext) Statement_or_null(i int) IStatement_or_nullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_or_nullContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatement_or_nullContext)
}

func (s *Action_blockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Action_blockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Action_blockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterAction_block(s)
	}
}

func (s *Action_blockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitAction_block(s)
	}
}

func (p *SV2017Parser) Action_block() (localctx IAction_blockContext) {
	localctx = NewAction_blockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 232, SV2017ParserRULE_action_block)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1898)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_ELSE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1890)
			p.Match(SV2017ParserKW_ELSE)
		}
		{
			p.SetState(1891)
			p.Statement_or_null()
		}

	case SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_FATAL, SV2017ParserKW_DOLAR_FULLSKEW, SV2017ParserKW_DOLAR_HOLD, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_NOCHANGE, SV2017ParserKW_DOLAR_PERIOD, SV2017ParserKW_DOLAR_RECOVERY, SV2017ParserKW_DOLAR_RECREM, SV2017ParserKW_DOLAR_REMOVAL, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_SETUP, SV2017ParserKW_DOLAR_SETUPHOLD, SV2017ParserKW_DOLAR_SKEW, SV2017ParserKW_DOLAR_TIMESKEW, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_DOLAR_WARNING, SV2017ParserKW_DOLAR_WIDTH, SV2017ParserKW_ASSERT, SV2017ParserKW_ASSIGN, SV2017ParserKW_ASSUME, SV2017ParserKW_BEGIN, SV2017ParserKW_BIT, SV2017ParserKW_BREAK, SV2017ParserKW_BYTE, SV2017ParserKW_CASE, SV2017ParserKW_CASEX, SV2017ParserKW_CASEZ, SV2017ParserKW_CONST, SV2017ParserKW_CONTINUE, SV2017ParserKW_COVER, SV2017ParserKW_DEASSIGN, SV2017ParserKW_DISABLE, SV2017ParserKW_DO, SV2017ParserKW_EXPECT, SV2017ParserKW_FOR, SV2017ParserKW_FORCE, SV2017ParserKW_FOREACH, SV2017ParserKW_FOREVER, SV2017ParserKW_FORK, SV2017ParserKW_IF, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LOCAL, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_NULL, SV2017ParserKW_OPTION, SV2017ParserKW_PRIORITY, SV2017ParserKW_RANDCASE, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_RANDSEQUENCE, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_RELEASE, SV2017ParserKW_REPEAT, SV2017ParserKW_RESTRICT, SV2017ParserKW_RETURN, SV2017ParserKW_SAMPLE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_SUPER, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_UNIQUE, SV2017ParserKW_UNIQUE0, SV2017ParserKW_UNSIGNED, SV2017ParserKW_VOID, SV2017ParserKW_WAIT, SV2017ParserKW_WAIT_ORDER, SV2017ParserKW_WHILE, SV2017ParserTIME_LITERAL, SV2017ParserANY_BASED_NUMBER, SV2017ParserBASED_NUMBER_WITH_SIZE, SV2017ParserREAL_NUMBER_WITH_EXP, SV2017ParserFIXED_POINT_NUMBER, SV2017ParserUNSIGNED_NUMBER, SV2017ParserUNBASED_UNSIZED_LITERAL, SV2017ParserSTRING_LITERAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSYSTEM_TF_IDENTIFIER, SV2017ParserSEMI, SV2017ParserLPAREN, SV2017ParserLBRACE, SV2017ParserAPOSTROPHE_LBRACE, SV2017ParserDOLAR, SV2017ParserARROW, SV2017ParserDOUBLE_RIGHT_ARROW, SV2017ParserINCR, SV2017ParserDECR, SV2017ParserAT, SV2017ParserHASH, SV2017ParserDOUBLE_HASH:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1892)
			p.Statement_or_null()
		}
		p.SetState(1896)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 102, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1893)
				p.Match(SV2017ParserKW_ELSE)
			}
			{
				p.SetState(1894)
				p.Statement_or_null()
			}

		case 2:

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISeq_blockContext is an interface to support dynamic dispatch.
type ISeq_blockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSeq_blockContext differentiates from other interfaces.
	IsSeq_blockContext()
}

type Seq_blockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySeq_blockContext() *Seq_blockContext {
	var p = new(Seq_blockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_seq_block
	return p
}

func (*Seq_blockContext) IsSeq_blockContext() {}

func NewSeq_blockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Seq_blockContext {
	var p = new(Seq_blockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_seq_block

	return p
}

func (s *Seq_blockContext) GetParser() antlr.Parser { return s.parser }

func (s *Seq_blockContext) KW_BEGIN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_BEGIN, 0)
}

func (s *Seq_blockContext) KW_END() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_END, 0)
}

func (s *Seq_blockContext) AllCOLON() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOLON)
}

func (s *Seq_blockContext) COLON(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, i)
}

func (s *Seq_blockContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Seq_blockContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Seq_blockContext) AllBlock_item_declaration() []IBlock_item_declarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBlock_item_declarationContext)(nil)).Elem())
	var tst = make([]IBlock_item_declarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBlock_item_declarationContext)
		}
	}

	return tst
}

func (s *Seq_blockContext) Block_item_declaration(i int) IBlock_item_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlock_item_declarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBlock_item_declarationContext)
}

func (s *Seq_blockContext) AllStatement_or_null() []IStatement_or_nullContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatement_or_nullContext)(nil)).Elem())
	var tst = make([]IStatement_or_nullContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatement_or_nullContext)
		}
	}

	return tst
}

func (s *Seq_blockContext) Statement_or_null(i int) IStatement_or_nullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_or_nullContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatement_or_nullContext)
}

func (s *Seq_blockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Seq_blockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Seq_blockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterSeq_block(s)
	}
}

func (s *Seq_blockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitSeq_block(s)
	}
}

func (p *SV2017Parser) Seq_block() (localctx ISeq_blockContext) {
	localctx = NewSeq_blockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 234, SV2017ParserRULE_seq_block)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1900)
		p.Match(SV2017ParserKW_BEGIN)
	}
	p.SetState(1904)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserCOLON:
		{
			p.SetState(1901)
			p.Match(SV2017ParserCOLON)
		}
		{
			p.SetState(1902)
			p.Identifier()
		}

	case SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_FATAL, SV2017ParserKW_DOLAR_FULLSKEW, SV2017ParserKW_DOLAR_HOLD, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_NOCHANGE, SV2017ParserKW_DOLAR_PERIOD, SV2017ParserKW_DOLAR_RECOVERY, SV2017ParserKW_DOLAR_RECREM, SV2017ParserKW_DOLAR_REMOVAL, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_SETUP, SV2017ParserKW_DOLAR_SETUPHOLD, SV2017ParserKW_DOLAR_SKEW, SV2017ParserKW_DOLAR_TIMESKEW, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_DOLAR_WARNING, SV2017ParserKW_DOLAR_WIDTH, SV2017ParserKW_ASSERT, SV2017ParserKW_ASSIGN, SV2017ParserKW_ASSUME, SV2017ParserKW_AUTOMATIC, SV2017ParserKW_BEGIN, SV2017ParserKW_BIT, SV2017ParserKW_BREAK, SV2017ParserKW_BYTE, SV2017ParserKW_CASE, SV2017ParserKW_CASEX, SV2017ParserKW_CASEZ, SV2017ParserKW_CHANDLE, SV2017ParserKW_CONST, SV2017ParserKW_CONTINUE, SV2017ParserKW_COVER, SV2017ParserKW_DEASSIGN, SV2017ParserKW_DISABLE, SV2017ParserKW_DO, SV2017ParserKW_END, SV2017ParserKW_ENUM, SV2017ParserKW_EVENT, SV2017ParserKW_EXPECT, SV2017ParserKW_FOR, SV2017ParserKW_FORCE, SV2017ParserKW_FOREACH, SV2017ParserKW_FOREVER, SV2017ParserKW_FORK, SV2017ParserKW_IF, SV2017ParserKW_IMPORT, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LET, SV2017ParserKW_LOCAL, SV2017ParserKW_LOCALPARAM, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_NETTYPE, SV2017ParserKW_NULL, SV2017ParserKW_OPTION, SV2017ParserKW_PARAMETER, SV2017ParserKW_PRIORITY, SV2017ParserKW_RANDCASE, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_RANDSEQUENCE, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_RELEASE, SV2017ParserKW_REPEAT, SV2017ParserKW_RESTRICT, SV2017ParserKW_RETURN, SV2017ParserKW_SAMPLE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_STATIC, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_TYPEDEF, SV2017ParserKW_UNION, SV2017ParserKW_UNIQUE, SV2017ParserKW_UNIQUE0, SV2017ParserKW_UNSIGNED, SV2017ParserKW_VAR, SV2017ParserKW_VIRTUAL, SV2017ParserKW_VOID, SV2017ParserKW_WAIT, SV2017ParserKW_WAIT_ORDER, SV2017ParserKW_WHILE, SV2017ParserTIME_LITERAL, SV2017ParserANY_BASED_NUMBER, SV2017ParserBASED_NUMBER_WITH_SIZE, SV2017ParserREAL_NUMBER_WITH_EXP, SV2017ParserFIXED_POINT_NUMBER, SV2017ParserUNSIGNED_NUMBER, SV2017ParserUNBASED_UNSIZED_LITERAL, SV2017ParserSTRING_LITERAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSYSTEM_TF_IDENTIFIER, SV2017ParserSEMI, SV2017ParserLPAREN, SV2017ParserLSQUARE_BR, SV2017ParserLBRACE, SV2017ParserAPOSTROPHE_LBRACE, SV2017ParserDOLAR, SV2017ParserARROW, SV2017ParserDOUBLE_RIGHT_ARROW, SV2017ParserINCR, SV2017ParserDECR, SV2017ParserAT, SV2017ParserHASH, SV2017ParserDOUBLE_HASH:

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(1909)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 105, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1906)
				p.Block_item_declaration()
			}

		}
		p.SetState(1911)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 105, p.GetParserRuleContext())
	}
	p.SetState(1915)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20))|(1<<(SV2017ParserKW_ASSERT-20))|(1<<(SV2017ParserKW_ASSIGN-20))|(1<<(SV2017ParserKW_ASSUME-20)))) != 0) || (((_la-52)&-(0x1f+1)) == 0 && ((1<<uint((_la-52)))&((1<<(SV2017ParserKW_BEGIN-52))|(1<<(SV2017ParserKW_BIT-52))|(1<<(SV2017ParserKW_BREAK-52))|(1<<(SV2017ParserKW_BYTE-52))|(1<<(SV2017ParserKW_CASE-52))|(1<<(SV2017ParserKW_CASEX-52))|(1<<(SV2017ParserKW_CASEZ-52))|(1<<(SV2017ParserKW_CONST-52))|(1<<(SV2017ParserKW_CONTINUE-52))|(1<<(SV2017ParserKW_COVER-52))|(1<<(SV2017ParserKW_DEASSIGN-52)))) != 0) || (((_la-84)&-(0x1f+1)) == 0 && ((1<<uint((_la-84)))&((1<<(SV2017ParserKW_DISABLE-84))|(1<<(SV2017ParserKW_DO-84))|(1<<(SV2017ParserKW_EXPECT-84)))) != 0) || (((_la-116)&-(0x1f+1)) == 0 && ((1<<uint((_la-116)))&((1<<(SV2017ParserKW_FOR-116))|(1<<(SV2017ParserKW_FORCE-116))|(1<<(SV2017ParserKW_FOREACH-116))|(1<<(SV2017ParserKW_FOREVER-116))|(1<<(SV2017ParserKW_FORK-116))|(1<<(SV2017ParserKW_IF-116))|(1<<(SV2017ParserKW_INT-116))|(1<<(SV2017ParserKW_INTEGER-116)))) != 0) || (((_la-152)&-(0x1f+1)) == 0 && ((1<<uint((_la-152)))&((1<<(SV2017ParserKW_LOCAL-152))|(1<<(SV2017ParserKW_LOGIC-152))|(1<<(SV2017ParserKW_LONGINT-152))|(1<<(SV2017ParserKW_NULL-152))|(1<<(SV2017ParserKW_OPTION-152))|(1<<(SV2017ParserKW_PRIORITY-152)))) != 0) || (((_la-196)&-(0x1f+1)) == 0 && ((1<<uint((_la-196)))&((1<<(SV2017ParserKW_RANDCASE-196))|(1<<(SV2017ParserKW_RANDOMIZE-196))|(1<<(SV2017ParserKW_RANDSEQUENCE-196))|(1<<(SV2017ParserKW_REAL-196))|(1<<(SV2017ParserKW_REALTIME-196))|(1<<(SV2017ParserKW_REG-196))|(1<<(SV2017ParserKW_RELEASE-196))|(1<<(SV2017ParserKW_REPEAT-196))|(1<<(SV2017ParserKW_RESTRICT-196))|(1<<(SV2017ParserKW_RETURN-196))|(1<<(SV2017ParserKW_SAMPLE-196))|(1<<(SV2017ParserKW_SHORTINT-196))|(1<<(SV2017ParserKW_SHORTREAL-196))|(1<<(SV2017ParserKW_SIGNED-196)))) != 0) || (((_la-232)&-(0x1f+1)) == 0 && ((1<<uint((_la-232)))&((1<<(SV2017ParserKW_STD-232))|(1<<(SV2017ParserKW_STRING-232))|(1<<(SV2017ParserKW_SUPER-232))|(1<<(SV2017ParserKW_THIS-232))|(1<<(SV2017ParserKW_TIME-232))|(1<<(SV2017ParserKW_TYPE-232))|(1<<(SV2017ParserKW_TYPE_OPTION-232)))) != 0) || (((_la-264)&-(0x1f+1)) == 0 && ((1<<uint((_la-264)))&((1<<(SV2017ParserKW_UNIQUE-264))|(1<<(SV2017ParserKW_UNIQUE0-264))|(1<<(SV2017ParserKW_UNSIGNED-264))|(1<<(SV2017ParserKW_VOID-264))|(1<<(SV2017ParserKW_WAIT-264))|(1<<(SV2017ParserKW_WAIT_ORDER-264))|(1<<(SV2017ParserKW_WHILE-264))|(1<<(SV2017ParserTIME_LITERAL-264))|(1<<(SV2017ParserANY_BASED_NUMBER-264))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-264))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-264))|(1<<(SV2017ParserFIXED_POINT_NUMBER-264)))) != 0) || (((_la-296)&-(0x1f+1)) == 0 && ((1<<uint((_la-296)))&((1<<(SV2017ParserUNSIGNED_NUMBER-296))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-296))|(1<<(SV2017ParserSTRING_LITERAL-296))|(1<<(SV2017ParserC_IDENTIFIER-296))|(1<<(SV2017ParserTICK_IDENTIFIER-296))|(1<<(SV2017ParserESCAPED_IDENTIFIER-296))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-296))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-296))|(1<<(SV2017ParserSEMI-296))|(1<<(SV2017ParserLPAREN-296))|(1<<(SV2017ParserLBRACE-296))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-296))|(1<<(SV2017ParserDOLAR-296)))) != 0) || (((_la-366)&-(0x1f+1)) == 0 && ((1<<uint((_la-366)))&((1<<(SV2017ParserARROW-366))|(1<<(SV2017ParserDOUBLE_RIGHT_ARROW-366))|(1<<(SV2017ParserINCR-366))|(1<<(SV2017ParserDECR-366))|(1<<(SV2017ParserAT-366))|(1<<(SV2017ParserHASH-366))|(1<<(SV2017ParserDOUBLE_HASH-366)))) != 0) {
		{
			p.SetState(1912)
			p.Statement_or_null()
		}

		p.SetState(1917)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1918)
		p.Match(SV2017ParserKW_END)
	}
	p.SetState(1922)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserCOLON:
		{
			p.SetState(1919)
			p.Match(SV2017ParserCOLON)
		}
		{
			p.SetState(1920)
			p.Identifier()
		}

	case SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_FATAL, SV2017ParserKW_DOLAR_FULLSKEW, SV2017ParserKW_DOLAR_HOLD, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_NOCHANGE, SV2017ParserKW_DOLAR_PERIOD, SV2017ParserKW_DOLAR_RECOVERY, SV2017ParserKW_DOLAR_RECREM, SV2017ParserKW_DOLAR_REMOVAL, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_SETUP, SV2017ParserKW_DOLAR_SETUPHOLD, SV2017ParserKW_DOLAR_SKEW, SV2017ParserKW_DOLAR_TIMESKEW, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_DOLAR_WARNING, SV2017ParserKW_DOLAR_WIDTH, SV2017ParserKW_ALIAS, SV2017ParserKW_ALWAYS, SV2017ParserKW_ALWAYS_COMB, SV2017ParserKW_ALWAYS_FF, SV2017ParserKW_ALWAYS_LATCH, SV2017ParserKW_AND, SV2017ParserKW_ASSERT, SV2017ParserKW_ASSIGN, SV2017ParserKW_ASSUME, SV2017ParserKW_AUTOMATIC, SV2017ParserKW_BEGIN, SV2017ParserKW_BIND, SV2017ParserKW_BIT, SV2017ParserKW_BREAK, SV2017ParserKW_BUF, SV2017ParserKW_BUFIF0, SV2017ParserKW_BUFIF1, SV2017ParserKW_BYTE, SV2017ParserKW_CASE, SV2017ParserKW_CASEX, SV2017ParserKW_CASEZ, SV2017ParserKW_CHANDLE, SV2017ParserKW_CHECKER, SV2017ParserKW_CLASS, SV2017ParserKW_CLOCKING, SV2017ParserKW_CMOS, SV2017ParserKW_CONST, SV2017ParserKW_CONSTRAINT, SV2017ParserKW_CONTINUE, SV2017ParserKW_COVER, SV2017ParserKW_COVERGROUP, SV2017ParserKW_DEASSIGN, SV2017ParserKW_DEFAULT, SV2017ParserKW_DEFPARAM, SV2017ParserKW_DISABLE, SV2017ParserKW_DO, SV2017ParserKW_ELSE, SV2017ParserKW_END, SV2017ParserKW_ENDCASE, SV2017ParserKW_ENDCHECKER, SV2017ParserKW_ENDFUNCTION, SV2017ParserKW_ENDGENERATE, SV2017ParserKW_ENDINTERFACE, SV2017ParserKW_ENDMODULE, SV2017ParserKW_ENDPROGRAM, SV2017ParserKW_ENDTASK, SV2017ParserKW_ENUM, SV2017ParserKW_EVENT, SV2017ParserKW_EXPECT, SV2017ParserKW_EXPORT, SV2017ParserKW_EXTERN, SV2017ParserKW_FINAL, SV2017ParserKW_FOR, SV2017ParserKW_FORCE, SV2017ParserKW_FOREACH, SV2017ParserKW_FOREVER, SV2017ParserKW_FORK, SV2017ParserKW_FUNCTION, SV2017ParserKW_GENERATE, SV2017ParserKW_GENVAR, SV2017ParserKW_GLOBAL, SV2017ParserKW_IF, SV2017ParserKW_IMPORT, SV2017ParserKW_INITIAL, SV2017ParserKW_INOUT, SV2017ParserKW_INPUT, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_INTERCONNECT, SV2017ParserKW_INTERFACE, SV2017ParserKW_JOIN, SV2017ParserKW_JOIN_ANY, SV2017ParserKW_JOIN_NONE, SV2017ParserKW_LET, SV2017ParserKW_LOCAL, SV2017ParserKW_LOCALPARAM, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_MACROMODULE, SV2017ParserKW_MODPORT, SV2017ParserKW_MODULE, SV2017ParserKW_NAND, SV2017ParserKW_NETTYPE, SV2017ParserKW_NMOS, SV2017ParserKW_NOR, SV2017ParserKW_NONE, SV2017ParserKW_NOT, SV2017ParserKW_NOTIF0, SV2017ParserKW_NOTIF1, SV2017ParserKW_NULL, SV2017ParserKW_OPTION, SV2017ParserKW_OR, SV2017ParserKW_OUTPUT, SV2017ParserKW_PARAMETER, SV2017ParserKW_PMOS, SV2017ParserKW_PRIORITY, SV2017ParserKW_PROGRAM, SV2017ParserKW_PROPERTY, SV2017ParserKW_PULLDOWN, SV2017ParserKW_PULLUP, SV2017ParserKW_RAND, SV2017ParserKW_RANDCASE, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_RANDSEQUENCE, SV2017ParserKW_RCMOS, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REF, SV2017ParserKW_REG, SV2017ParserKW_RELEASE, SV2017ParserKW_REPEAT, SV2017ParserKW_RESTRICT, SV2017ParserKW_RETURN, SV2017ParserKW_RNMOS, SV2017ParserKW_RPMOS, SV2017ParserKW_RTRAN, SV2017ParserKW_RTRANIF0, SV2017ParserKW_RTRANIF1, SV2017ParserKW_SAMPLE, SV2017ParserKW_SEQUENCE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_SPECIFY, SV2017ParserKW_SPECPARAM, SV2017ParserKW_STATIC, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_SUPPLY0, SV2017ParserKW_SUPPLY1, SV2017ParserKW_TAGGED, SV2017ParserKW_TASK, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TIMEPRECISION, SV2017ParserKW_TIMEUNIT, SV2017ParserKW_TRAN, SV2017ParserKW_TRANIF0, SV2017ParserKW_TRANIF1, SV2017ParserKW_TRI, SV2017ParserKW_TRI0, SV2017ParserKW_TRI1, SV2017ParserKW_TRIAND, SV2017ParserKW_TRIOR, SV2017ParserKW_TRIREG, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_TYPEDEF, SV2017ParserKW_UNION, SV2017ParserKW_UNIQUE, SV2017ParserKW_UNIQUE0, SV2017ParserKW_UNSIGNED, SV2017ParserKW_UWIRE, SV2017ParserKW_VAR, SV2017ParserKW_VIRTUAL, SV2017ParserKW_VOID, SV2017ParserKW_WAIT, SV2017ParserKW_WAIT_ORDER, SV2017ParserKW_WAND, SV2017ParserKW_WHILE, SV2017ParserKW_WIRE, SV2017ParserKW_WOR, SV2017ParserKW_XNOR, SV2017ParserKW_XOR, SV2017ParserTIME_LITERAL, SV2017ParserANY_BASED_NUMBER, SV2017ParserBASED_NUMBER_WITH_SIZE, SV2017ParserREAL_NUMBER_WITH_EXP, SV2017ParserFIXED_POINT_NUMBER, SV2017ParserUNSIGNED_NUMBER, SV2017ParserUNBASED_UNSIZED_LITERAL, SV2017ParserSTRING_LITERAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSYSTEM_TF_IDENTIFIER, SV2017ParserSEMI, SV2017ParserLPAREN, SV2017ParserRPAREN, SV2017ParserLSQUARE_BR, SV2017ParserLBRACE, SV2017ParserRBRACE, SV2017ParserAPOSTROPHE_LBRACE, SV2017ParserDOLAR, SV2017ParserNOT, SV2017ParserNEG, SV2017ParserNAND, SV2017ParserNOR, SV2017ParserXOR, SV2017ParserNXOR, SV2017ParserXORN, SV2017ParserDOT, SV2017ParserPLUS, SV2017ParserMINUS, SV2017ParserAMPERSAND, SV2017ParserBAR, SV2017ParserARROW, SV2017ParserDOUBLE_RIGHT_ARROW, SV2017ParserINCR, SV2017ParserDECR, SV2017ParserAT, SV2017ParserHASH, SV2017ParserDOUBLE_HASH:

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPar_blockContext is an interface to support dynamic dispatch.
type IPar_blockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPar_blockContext differentiates from other interfaces.
	IsPar_blockContext()
}

type Par_blockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPar_blockContext() *Par_blockContext {
	var p = new(Par_blockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_par_block
	return p
}

func (*Par_blockContext) IsPar_blockContext() {}

func NewPar_blockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Par_blockContext {
	var p = new(Par_blockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_par_block

	return p
}

func (s *Par_blockContext) GetParser() antlr.Parser { return s.parser }

func (s *Par_blockContext) KW_FORK() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_FORK, 0)
}

func (s *Par_blockContext) Join_keyword() IJoin_keywordContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJoin_keywordContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJoin_keywordContext)
}

func (s *Par_blockContext) AllCOLON() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOLON)
}

func (s *Par_blockContext) COLON(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, i)
}

func (s *Par_blockContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Par_blockContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Par_blockContext) AllBlock_item_declaration() []IBlock_item_declarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBlock_item_declarationContext)(nil)).Elem())
	var tst = make([]IBlock_item_declarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBlock_item_declarationContext)
		}
	}

	return tst
}

func (s *Par_blockContext) Block_item_declaration(i int) IBlock_item_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlock_item_declarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBlock_item_declarationContext)
}

func (s *Par_blockContext) AllStatement_or_null() []IStatement_or_nullContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatement_or_nullContext)(nil)).Elem())
	var tst = make([]IStatement_or_nullContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatement_or_nullContext)
		}
	}

	return tst
}

func (s *Par_blockContext) Statement_or_null(i int) IStatement_or_nullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_or_nullContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatement_or_nullContext)
}

func (s *Par_blockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Par_blockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Par_blockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPar_block(s)
	}
}

func (s *Par_blockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPar_block(s)
	}
}

func (p *SV2017Parser) Par_block() (localctx IPar_blockContext) {
	localctx = NewPar_blockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 236, SV2017ParserRULE_par_block)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1924)
		p.Match(SV2017ParserKW_FORK)
	}
	p.SetState(1928)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserCOLON:
		{
			p.SetState(1925)
			p.Match(SV2017ParserCOLON)
		}
		{
			p.SetState(1926)
			p.Identifier()
		}

	case SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_FATAL, SV2017ParserKW_DOLAR_FULLSKEW, SV2017ParserKW_DOLAR_HOLD, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_NOCHANGE, SV2017ParserKW_DOLAR_PERIOD, SV2017ParserKW_DOLAR_RECOVERY, SV2017ParserKW_DOLAR_RECREM, SV2017ParserKW_DOLAR_REMOVAL, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_SETUP, SV2017ParserKW_DOLAR_SETUPHOLD, SV2017ParserKW_DOLAR_SKEW, SV2017ParserKW_DOLAR_TIMESKEW, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_DOLAR_WARNING, SV2017ParserKW_DOLAR_WIDTH, SV2017ParserKW_ASSERT, SV2017ParserKW_ASSIGN, SV2017ParserKW_ASSUME, SV2017ParserKW_AUTOMATIC, SV2017ParserKW_BEGIN, SV2017ParserKW_BIT, SV2017ParserKW_BREAK, SV2017ParserKW_BYTE, SV2017ParserKW_CASE, SV2017ParserKW_CASEX, SV2017ParserKW_CASEZ, SV2017ParserKW_CHANDLE, SV2017ParserKW_CONST, SV2017ParserKW_CONTINUE, SV2017ParserKW_COVER, SV2017ParserKW_DEASSIGN, SV2017ParserKW_DISABLE, SV2017ParserKW_DO, SV2017ParserKW_ENUM, SV2017ParserKW_EVENT, SV2017ParserKW_EXPECT, SV2017ParserKW_FOR, SV2017ParserKW_FORCE, SV2017ParserKW_FOREACH, SV2017ParserKW_FOREVER, SV2017ParserKW_FORK, SV2017ParserKW_IF, SV2017ParserKW_IMPORT, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_JOIN, SV2017ParserKW_JOIN_ANY, SV2017ParserKW_JOIN_NONE, SV2017ParserKW_LET, SV2017ParserKW_LOCAL, SV2017ParserKW_LOCALPARAM, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_NETTYPE, SV2017ParserKW_NULL, SV2017ParserKW_OPTION, SV2017ParserKW_PARAMETER, SV2017ParserKW_PRIORITY, SV2017ParserKW_RANDCASE, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_RANDSEQUENCE, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_RELEASE, SV2017ParserKW_REPEAT, SV2017ParserKW_RESTRICT, SV2017ParserKW_RETURN, SV2017ParserKW_SAMPLE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_STATIC, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_TYPEDEF, SV2017ParserKW_UNION, SV2017ParserKW_UNIQUE, SV2017ParserKW_UNIQUE0, SV2017ParserKW_UNSIGNED, SV2017ParserKW_VAR, SV2017ParserKW_VIRTUAL, SV2017ParserKW_VOID, SV2017ParserKW_WAIT, SV2017ParserKW_WAIT_ORDER, SV2017ParserKW_WHILE, SV2017ParserTIME_LITERAL, SV2017ParserANY_BASED_NUMBER, SV2017ParserBASED_NUMBER_WITH_SIZE, SV2017ParserREAL_NUMBER_WITH_EXP, SV2017ParserFIXED_POINT_NUMBER, SV2017ParserUNSIGNED_NUMBER, SV2017ParserUNBASED_UNSIZED_LITERAL, SV2017ParserSTRING_LITERAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSYSTEM_TF_IDENTIFIER, SV2017ParserSEMI, SV2017ParserLPAREN, SV2017ParserLSQUARE_BR, SV2017ParserLBRACE, SV2017ParserAPOSTROPHE_LBRACE, SV2017ParserDOLAR, SV2017ParserARROW, SV2017ParserDOUBLE_RIGHT_ARROW, SV2017ParserINCR, SV2017ParserDECR, SV2017ParserAT, SV2017ParserHASH, SV2017ParserDOUBLE_HASH:

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(1933)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 109, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1930)
				p.Block_item_declaration()
			}

		}
		p.SetState(1935)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 109, p.GetParserRuleContext())
	}
	p.SetState(1939)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20))|(1<<(SV2017ParserKW_ASSERT-20))|(1<<(SV2017ParserKW_ASSIGN-20))|(1<<(SV2017ParserKW_ASSUME-20)))) != 0) || (((_la-52)&-(0x1f+1)) == 0 && ((1<<uint((_la-52)))&((1<<(SV2017ParserKW_BEGIN-52))|(1<<(SV2017ParserKW_BIT-52))|(1<<(SV2017ParserKW_BREAK-52))|(1<<(SV2017ParserKW_BYTE-52))|(1<<(SV2017ParserKW_CASE-52))|(1<<(SV2017ParserKW_CASEX-52))|(1<<(SV2017ParserKW_CASEZ-52))|(1<<(SV2017ParserKW_CONST-52))|(1<<(SV2017ParserKW_CONTINUE-52))|(1<<(SV2017ParserKW_COVER-52))|(1<<(SV2017ParserKW_DEASSIGN-52)))) != 0) || (((_la-84)&-(0x1f+1)) == 0 && ((1<<uint((_la-84)))&((1<<(SV2017ParserKW_DISABLE-84))|(1<<(SV2017ParserKW_DO-84))|(1<<(SV2017ParserKW_EXPECT-84)))) != 0) || (((_la-116)&-(0x1f+1)) == 0 && ((1<<uint((_la-116)))&((1<<(SV2017ParserKW_FOR-116))|(1<<(SV2017ParserKW_FORCE-116))|(1<<(SV2017ParserKW_FOREACH-116))|(1<<(SV2017ParserKW_FOREVER-116))|(1<<(SV2017ParserKW_FORK-116))|(1<<(SV2017ParserKW_IF-116))|(1<<(SV2017ParserKW_INT-116))|(1<<(SV2017ParserKW_INTEGER-116)))) != 0) || (((_la-152)&-(0x1f+1)) == 0 && ((1<<uint((_la-152)))&((1<<(SV2017ParserKW_LOCAL-152))|(1<<(SV2017ParserKW_LOGIC-152))|(1<<(SV2017ParserKW_LONGINT-152))|(1<<(SV2017ParserKW_NULL-152))|(1<<(SV2017ParserKW_OPTION-152))|(1<<(SV2017ParserKW_PRIORITY-152)))) != 0) || (((_la-196)&-(0x1f+1)) == 0 && ((1<<uint((_la-196)))&((1<<(SV2017ParserKW_RANDCASE-196))|(1<<(SV2017ParserKW_RANDOMIZE-196))|(1<<(SV2017ParserKW_RANDSEQUENCE-196))|(1<<(SV2017ParserKW_REAL-196))|(1<<(SV2017ParserKW_REALTIME-196))|(1<<(SV2017ParserKW_REG-196))|(1<<(SV2017ParserKW_RELEASE-196))|(1<<(SV2017ParserKW_REPEAT-196))|(1<<(SV2017ParserKW_RESTRICT-196))|(1<<(SV2017ParserKW_RETURN-196))|(1<<(SV2017ParserKW_SAMPLE-196))|(1<<(SV2017ParserKW_SHORTINT-196))|(1<<(SV2017ParserKW_SHORTREAL-196))|(1<<(SV2017ParserKW_SIGNED-196)))) != 0) || (((_la-232)&-(0x1f+1)) == 0 && ((1<<uint((_la-232)))&((1<<(SV2017ParserKW_STD-232))|(1<<(SV2017ParserKW_STRING-232))|(1<<(SV2017ParserKW_SUPER-232))|(1<<(SV2017ParserKW_THIS-232))|(1<<(SV2017ParserKW_TIME-232))|(1<<(SV2017ParserKW_TYPE-232))|(1<<(SV2017ParserKW_TYPE_OPTION-232)))) != 0) || (((_la-264)&-(0x1f+1)) == 0 && ((1<<uint((_la-264)))&((1<<(SV2017ParserKW_UNIQUE-264))|(1<<(SV2017ParserKW_UNIQUE0-264))|(1<<(SV2017ParserKW_UNSIGNED-264))|(1<<(SV2017ParserKW_VOID-264))|(1<<(SV2017ParserKW_WAIT-264))|(1<<(SV2017ParserKW_WAIT_ORDER-264))|(1<<(SV2017ParserKW_WHILE-264))|(1<<(SV2017ParserTIME_LITERAL-264))|(1<<(SV2017ParserANY_BASED_NUMBER-264))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-264))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-264))|(1<<(SV2017ParserFIXED_POINT_NUMBER-264)))) != 0) || (((_la-296)&-(0x1f+1)) == 0 && ((1<<uint((_la-296)))&((1<<(SV2017ParserUNSIGNED_NUMBER-296))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-296))|(1<<(SV2017ParserSTRING_LITERAL-296))|(1<<(SV2017ParserC_IDENTIFIER-296))|(1<<(SV2017ParserTICK_IDENTIFIER-296))|(1<<(SV2017ParserESCAPED_IDENTIFIER-296))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-296))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-296))|(1<<(SV2017ParserSEMI-296))|(1<<(SV2017ParserLPAREN-296))|(1<<(SV2017ParserLBRACE-296))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-296))|(1<<(SV2017ParserDOLAR-296)))) != 0) || (((_la-366)&-(0x1f+1)) == 0 && ((1<<uint((_la-366)))&((1<<(SV2017ParserARROW-366))|(1<<(SV2017ParserDOUBLE_RIGHT_ARROW-366))|(1<<(SV2017ParserINCR-366))|(1<<(SV2017ParserDECR-366))|(1<<(SV2017ParserAT-366))|(1<<(SV2017ParserHASH-366))|(1<<(SV2017ParserDOUBLE_HASH-366)))) != 0) {
		{
			p.SetState(1936)
			p.Statement_or_null()
		}

		p.SetState(1941)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1942)
		p.Join_keyword()
	}
	p.SetState(1946)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserCOLON:
		{
			p.SetState(1943)
			p.Match(SV2017ParserCOLON)
		}
		{
			p.SetState(1944)
			p.Identifier()
		}

	case SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_FATAL, SV2017ParserKW_DOLAR_FULLSKEW, SV2017ParserKW_DOLAR_HOLD, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_NOCHANGE, SV2017ParserKW_DOLAR_PERIOD, SV2017ParserKW_DOLAR_RECOVERY, SV2017ParserKW_DOLAR_RECREM, SV2017ParserKW_DOLAR_REMOVAL, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_SETUP, SV2017ParserKW_DOLAR_SETUPHOLD, SV2017ParserKW_DOLAR_SKEW, SV2017ParserKW_DOLAR_TIMESKEW, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_DOLAR_WARNING, SV2017ParserKW_DOLAR_WIDTH, SV2017ParserKW_ALIAS, SV2017ParserKW_ALWAYS, SV2017ParserKW_ALWAYS_COMB, SV2017ParserKW_ALWAYS_FF, SV2017ParserKW_ALWAYS_LATCH, SV2017ParserKW_AND, SV2017ParserKW_ASSERT, SV2017ParserKW_ASSIGN, SV2017ParserKW_ASSUME, SV2017ParserKW_AUTOMATIC, SV2017ParserKW_BEGIN, SV2017ParserKW_BIND, SV2017ParserKW_BIT, SV2017ParserKW_BREAK, SV2017ParserKW_BUF, SV2017ParserKW_BUFIF0, SV2017ParserKW_BUFIF1, SV2017ParserKW_BYTE, SV2017ParserKW_CASE, SV2017ParserKW_CASEX, SV2017ParserKW_CASEZ, SV2017ParserKW_CHANDLE, SV2017ParserKW_CHECKER, SV2017ParserKW_CLASS, SV2017ParserKW_CLOCKING, SV2017ParserKW_CMOS, SV2017ParserKW_CONST, SV2017ParserKW_CONSTRAINT, SV2017ParserKW_CONTINUE, SV2017ParserKW_COVER, SV2017ParserKW_COVERGROUP, SV2017ParserKW_DEASSIGN, SV2017ParserKW_DEFAULT, SV2017ParserKW_DEFPARAM, SV2017ParserKW_DISABLE, SV2017ParserKW_DO, SV2017ParserKW_ELSE, SV2017ParserKW_END, SV2017ParserKW_ENDCASE, SV2017ParserKW_ENDCHECKER, SV2017ParserKW_ENDFUNCTION, SV2017ParserKW_ENDGENERATE, SV2017ParserKW_ENDINTERFACE, SV2017ParserKW_ENDMODULE, SV2017ParserKW_ENDPROGRAM, SV2017ParserKW_ENDTASK, SV2017ParserKW_ENUM, SV2017ParserKW_EVENT, SV2017ParserKW_EXPECT, SV2017ParserKW_EXPORT, SV2017ParserKW_EXTERN, SV2017ParserKW_FINAL, SV2017ParserKW_FOR, SV2017ParserKW_FORCE, SV2017ParserKW_FOREACH, SV2017ParserKW_FOREVER, SV2017ParserKW_FORK, SV2017ParserKW_FUNCTION, SV2017ParserKW_GENERATE, SV2017ParserKW_GENVAR, SV2017ParserKW_GLOBAL, SV2017ParserKW_IF, SV2017ParserKW_IMPORT, SV2017ParserKW_INITIAL, SV2017ParserKW_INOUT, SV2017ParserKW_INPUT, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_INTERCONNECT, SV2017ParserKW_INTERFACE, SV2017ParserKW_JOIN, SV2017ParserKW_JOIN_ANY, SV2017ParserKW_JOIN_NONE, SV2017ParserKW_LET, SV2017ParserKW_LOCAL, SV2017ParserKW_LOCALPARAM, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_MACROMODULE, SV2017ParserKW_MODPORT, SV2017ParserKW_MODULE, SV2017ParserKW_NAND, SV2017ParserKW_NETTYPE, SV2017ParserKW_NMOS, SV2017ParserKW_NOR, SV2017ParserKW_NONE, SV2017ParserKW_NOT, SV2017ParserKW_NOTIF0, SV2017ParserKW_NOTIF1, SV2017ParserKW_NULL, SV2017ParserKW_OPTION, SV2017ParserKW_OR, SV2017ParserKW_OUTPUT, SV2017ParserKW_PARAMETER, SV2017ParserKW_PMOS, SV2017ParserKW_PRIORITY, SV2017ParserKW_PROGRAM, SV2017ParserKW_PROPERTY, SV2017ParserKW_PULLDOWN, SV2017ParserKW_PULLUP, SV2017ParserKW_RAND, SV2017ParserKW_RANDCASE, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_RANDSEQUENCE, SV2017ParserKW_RCMOS, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REF, SV2017ParserKW_REG, SV2017ParserKW_RELEASE, SV2017ParserKW_REPEAT, SV2017ParserKW_RESTRICT, SV2017ParserKW_RETURN, SV2017ParserKW_RNMOS, SV2017ParserKW_RPMOS, SV2017ParserKW_RTRAN, SV2017ParserKW_RTRANIF0, SV2017ParserKW_RTRANIF1, SV2017ParserKW_SAMPLE, SV2017ParserKW_SEQUENCE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_SPECIFY, SV2017ParserKW_SPECPARAM, SV2017ParserKW_STATIC, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_SUPPLY0, SV2017ParserKW_SUPPLY1, SV2017ParserKW_TAGGED, SV2017ParserKW_TASK, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TIMEPRECISION, SV2017ParserKW_TIMEUNIT, SV2017ParserKW_TRAN, SV2017ParserKW_TRANIF0, SV2017ParserKW_TRANIF1, SV2017ParserKW_TRI, SV2017ParserKW_TRI0, SV2017ParserKW_TRI1, SV2017ParserKW_TRIAND, SV2017ParserKW_TRIOR, SV2017ParserKW_TRIREG, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_TYPEDEF, SV2017ParserKW_UNION, SV2017ParserKW_UNIQUE, SV2017ParserKW_UNIQUE0, SV2017ParserKW_UNSIGNED, SV2017ParserKW_UWIRE, SV2017ParserKW_VAR, SV2017ParserKW_VIRTUAL, SV2017ParserKW_VOID, SV2017ParserKW_WAIT, SV2017ParserKW_WAIT_ORDER, SV2017ParserKW_WAND, SV2017ParserKW_WHILE, SV2017ParserKW_WIRE, SV2017ParserKW_WOR, SV2017ParserKW_XNOR, SV2017ParserKW_XOR, SV2017ParserTIME_LITERAL, SV2017ParserANY_BASED_NUMBER, SV2017ParserBASED_NUMBER_WITH_SIZE, SV2017ParserREAL_NUMBER_WITH_EXP, SV2017ParserFIXED_POINT_NUMBER, SV2017ParserUNSIGNED_NUMBER, SV2017ParserUNBASED_UNSIZED_LITERAL, SV2017ParserSTRING_LITERAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSYSTEM_TF_IDENTIFIER, SV2017ParserSEMI, SV2017ParserLPAREN, SV2017ParserRPAREN, SV2017ParserLSQUARE_BR, SV2017ParserLBRACE, SV2017ParserRBRACE, SV2017ParserAPOSTROPHE_LBRACE, SV2017ParserDOLAR, SV2017ParserNOT, SV2017ParserNEG, SV2017ParserNAND, SV2017ParserNOR, SV2017ParserXOR, SV2017ParserNXOR, SV2017ParserXORN, SV2017ParserDOT, SV2017ParserPLUS, SV2017ParserMINUS, SV2017ParserAMPERSAND, SV2017ParserBAR, SV2017ParserARROW, SV2017ParserDOUBLE_RIGHT_ARROW, SV2017ParserINCR, SV2017ParserDECR, SV2017ParserAT, SV2017ParserHASH, SV2017ParserDOUBLE_HASH:

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICase_statementContext is an interface to support dynamic dispatch.
type ICase_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCase_statementContext differentiates from other interfaces.
	IsCase_statementContext()
}

type Case_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCase_statementContext() *Case_statementContext {
	var p = new(Case_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_case_statement
	return p
}

func (*Case_statementContext) IsCase_statementContext() {}

func NewCase_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Case_statementContext {
	var p = new(Case_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_case_statement

	return p
}

func (s *Case_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Case_statementContext) KW_ENDCASE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ENDCASE, 0)
}

func (s *Case_statementContext) KW_CASE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_CASE, 0)
}

func (s *Case_statementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Case_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Case_statementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Case_statementContext) KW_INSIDE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_INSIDE, 0)
}

func (s *Case_statementContext) Case_keyword() ICase_keywordContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICase_keywordContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICase_keywordContext)
}

func (s *Case_statementContext) Unique_priority() IUnique_priorityContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnique_priorityContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnique_priorityContext)
}

func (s *Case_statementContext) KW_MATCHES() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_MATCHES, 0)
}

func (s *Case_statementContext) AllCase_inside_item() []ICase_inside_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICase_inside_itemContext)(nil)).Elem())
	var tst = make([]ICase_inside_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICase_inside_itemContext)
		}
	}

	return tst
}

func (s *Case_statementContext) Case_inside_item(i int) ICase_inside_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICase_inside_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICase_inside_itemContext)
}

func (s *Case_statementContext) AllCase_pattern_item() []ICase_pattern_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICase_pattern_itemContext)(nil)).Elem())
	var tst = make([]ICase_pattern_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICase_pattern_itemContext)
		}
	}

	return tst
}

func (s *Case_statementContext) Case_pattern_item(i int) ICase_pattern_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICase_pattern_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICase_pattern_itemContext)
}

func (s *Case_statementContext) AllCase_item() []ICase_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICase_itemContext)(nil)).Elem())
	var tst = make([]ICase_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICase_itemContext)
		}
	}

	return tst
}

func (s *Case_statementContext) Case_item(i int) ICase_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICase_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICase_itemContext)
}

func (s *Case_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Case_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Case_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCase_statement(s)
	}
}

func (s *Case_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCase_statement(s)
	}
}

func (p *SV2017Parser) Case_statement() (localctx ICase_statementContext) {
	localctx = NewCase_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 238, SV2017ParserRULE_case_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1949)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_PRIORITY || _la == SV2017ParserKW_UNIQUE || _la == SV2017ParserKW_UNIQUE0 {
		{
			p.SetState(1948)
			p.Unique_priority()
		}

	}
	p.SetState(1978)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 117, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1951)
			p.Match(SV2017ParserKW_CASE)
		}
		{
			p.SetState(1952)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(1953)
			p.expression(0)
		}
		{
			p.SetState(1954)
			p.Match(SV2017ParserRPAREN)
		}
		{
			p.SetState(1955)
			p.Match(SV2017ParserKW_INSIDE)
		}
		p.SetState(1957)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56))|(1<<(SV2017ParserKW_DEFAULT-56)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TAGGED-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserTIME_LITERAL-260)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(SV2017ParserANY_BASED_NUMBER-292))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-292))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-292))|(1<<(SV2017ParserFIXED_POINT_NUMBER-292))|(1<<(SV2017ParserUNSIGNED_NUMBER-292))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-292))|(1<<(SV2017ParserSTRING_LITERAL-292))|(1<<(SV2017ParserC_IDENTIFIER-292))|(1<<(SV2017ParserTICK_IDENTIFIER-292))|(1<<(SV2017ParserESCAPED_IDENTIFIER-292))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-292))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-292))|(1<<(SV2017ParserLPAREN-292))|(1<<(SV2017ParserLSQUARE_BR-292))|(1<<(SV2017ParserLBRACE-292))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-292))|(1<<(SV2017ParserDOLAR-292))|(1<<(SV2017ParserNOT-292))|(1<<(SV2017ParserNEG-292))|(1<<(SV2017ParserNAND-292))|(1<<(SV2017ParserNOR-292)))) != 0) || (((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324))|(1<<(SV2017ParserPLUS-324)))) != 0) || (((_la-356)&-(0x1f+1)) == 0 && ((1<<uint((_la-356)))&((1<<(SV2017ParserMINUS-356))|(1<<(SV2017ParserAMPERSAND-356))|(1<<(SV2017ParserBAR-356))|(1<<(SV2017ParserINCR-356))|(1<<(SV2017ParserDECR-356)))) != 0) {
			{
				p.SetState(1956)
				p.Case_inside_item()
			}

			p.SetState(1959)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		{
			p.SetState(1961)
			p.Case_keyword()
		}
		{
			p.SetState(1962)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(1963)
			p.expression(0)
		}
		{
			p.SetState(1964)
			p.Match(SV2017ParserRPAREN)
		}
		p.SetState(1976)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SV2017ParserKW_MATCHES:
			{
				p.SetState(1965)
				p.Match(SV2017ParserKW_MATCHES)
			}
			p.SetState(1967)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for ok := true; ok; ok = (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56))|(1<<(SV2017ParserKW_DEFAULT-56)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TAGGED-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserTIME_LITERAL-260)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(SV2017ParserANY_BASED_NUMBER-292))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-292))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-292))|(1<<(SV2017ParserFIXED_POINT_NUMBER-292))|(1<<(SV2017ParserUNSIGNED_NUMBER-292))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-292))|(1<<(SV2017ParserSTRING_LITERAL-292))|(1<<(SV2017ParserC_IDENTIFIER-292))|(1<<(SV2017ParserTICK_IDENTIFIER-292))|(1<<(SV2017ParserESCAPED_IDENTIFIER-292))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-292))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-292))|(1<<(SV2017ParserLPAREN-292))|(1<<(SV2017ParserLBRACE-292))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-292))|(1<<(SV2017ParserDOLAR-292))|(1<<(SV2017ParserNOT-292))|(1<<(SV2017ParserNEG-292))|(1<<(SV2017ParserNAND-292))|(1<<(SV2017ParserNOR-292)))) != 0) || (((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324))|(1<<(SV2017ParserDOT-324))|(1<<(SV2017ParserPLUS-324)))) != 0) || (((_la-356)&-(0x1f+1)) == 0 && ((1<<uint((_la-356)))&((1<<(SV2017ParserMINUS-356))|(1<<(SV2017ParserAMPERSAND-356))|(1<<(SV2017ParserBAR-356))|(1<<(SV2017ParserINCR-356))|(1<<(SV2017ParserDECR-356)))) != 0) {
				{
					p.SetState(1966)
					p.Case_pattern_item()
				}

				p.SetState(1969)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		case SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_FATAL, SV2017ParserKW_DOLAR_FULLSKEW, SV2017ParserKW_DOLAR_HOLD, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_NOCHANGE, SV2017ParserKW_DOLAR_PERIOD, SV2017ParserKW_DOLAR_RECOVERY, SV2017ParserKW_DOLAR_RECREM, SV2017ParserKW_DOLAR_REMOVAL, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_SETUP, SV2017ParserKW_DOLAR_SETUPHOLD, SV2017ParserKW_DOLAR_SKEW, SV2017ParserKW_DOLAR_TIMESKEW, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_DOLAR_WARNING, SV2017ParserKW_DOLAR_WIDTH, SV2017ParserKW_BIT, SV2017ParserKW_BYTE, SV2017ParserKW_CONST, SV2017ParserKW_DEFAULT, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LOCAL, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_NULL, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_SAMPLE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_SUPER, SV2017ParserKW_TAGGED, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_UNSIGNED, SV2017ParserTIME_LITERAL, SV2017ParserANY_BASED_NUMBER, SV2017ParserBASED_NUMBER_WITH_SIZE, SV2017ParserREAL_NUMBER_WITH_EXP, SV2017ParserFIXED_POINT_NUMBER, SV2017ParserUNSIGNED_NUMBER, SV2017ParserUNBASED_UNSIZED_LITERAL, SV2017ParserSTRING_LITERAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSYSTEM_TF_IDENTIFIER, SV2017ParserLPAREN, SV2017ParserLBRACE, SV2017ParserAPOSTROPHE_LBRACE, SV2017ParserDOLAR, SV2017ParserNOT, SV2017ParserNEG, SV2017ParserNAND, SV2017ParserNOR, SV2017ParserXOR, SV2017ParserNXOR, SV2017ParserXORN, SV2017ParserPLUS, SV2017ParserMINUS, SV2017ParserAMPERSAND, SV2017ParserBAR, SV2017ParserINCR, SV2017ParserDECR:
			p.SetState(1972)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for ok := true; ok; ok = (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56))|(1<<(SV2017ParserKW_DEFAULT-56)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TAGGED-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserTIME_LITERAL-260)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(SV2017ParserANY_BASED_NUMBER-292))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-292))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-292))|(1<<(SV2017ParserFIXED_POINT_NUMBER-292))|(1<<(SV2017ParserUNSIGNED_NUMBER-292))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-292))|(1<<(SV2017ParserSTRING_LITERAL-292))|(1<<(SV2017ParserC_IDENTIFIER-292))|(1<<(SV2017ParserTICK_IDENTIFIER-292))|(1<<(SV2017ParserESCAPED_IDENTIFIER-292))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-292))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-292))|(1<<(SV2017ParserLPAREN-292))|(1<<(SV2017ParserLBRACE-292))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-292))|(1<<(SV2017ParserDOLAR-292))|(1<<(SV2017ParserNOT-292))|(1<<(SV2017ParserNEG-292))|(1<<(SV2017ParserNAND-292))|(1<<(SV2017ParserNOR-292)))) != 0) || (((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324))|(1<<(SV2017ParserPLUS-324)))) != 0) || (((_la-356)&-(0x1f+1)) == 0 && ((1<<uint((_la-356)))&((1<<(SV2017ParserMINUS-356))|(1<<(SV2017ParserAMPERSAND-356))|(1<<(SV2017ParserBAR-356))|(1<<(SV2017ParserINCR-356))|(1<<(SV2017ParserDECR-356)))) != 0) {
				{
					p.SetState(1971)
					p.Case_item()
				}

				p.SetState(1974)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}
	{
		p.SetState(1980)
		p.Match(SV2017ParserKW_ENDCASE)
	}

	return localctx
}

// ICase_keywordContext is an interface to support dynamic dispatch.
type ICase_keywordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCase_keywordContext differentiates from other interfaces.
	IsCase_keywordContext()
}

type Case_keywordContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCase_keywordContext() *Case_keywordContext {
	var p = new(Case_keywordContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_case_keyword
	return p
}

func (*Case_keywordContext) IsCase_keywordContext() {}

func NewCase_keywordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Case_keywordContext {
	var p = new(Case_keywordContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_case_keyword

	return p
}

func (s *Case_keywordContext) GetParser() antlr.Parser { return s.parser }

func (s *Case_keywordContext) KW_CASE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_CASE, 0)
}

func (s *Case_keywordContext) KW_CASEZ() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_CASEZ, 0)
}

func (s *Case_keywordContext) KW_CASEX() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_CASEX, 0)
}

func (s *Case_keywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Case_keywordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Case_keywordContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCase_keyword(s)
	}
}

func (s *Case_keywordContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCase_keyword(s)
	}
}

func (p *SV2017Parser) Case_keyword() (localctx ICase_keywordContext) {
	localctx = NewCase_keywordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 240, SV2017ParserRULE_case_keyword)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1982)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-62)&-(0x1f+1)) == 0 && ((1<<uint((_la-62)))&((1<<(SV2017ParserKW_CASE-62))|(1<<(SV2017ParserKW_CASEX-62))|(1<<(SV2017ParserKW_CASEZ-62)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ICase_itemContext is an interface to support dynamic dispatch.
type ICase_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCase_itemContext differentiates from other interfaces.
	IsCase_itemContext()
}

type Case_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCase_itemContext() *Case_itemContext {
	var p = new(Case_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_case_item
	return p
}

func (*Case_itemContext) IsCase_itemContext() {}

func NewCase_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Case_itemContext {
	var p = new(Case_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_case_item

	return p
}

func (s *Case_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Case_itemContext) Statement_or_null() IStatement_or_nullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_or_nullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_or_nullContext)
}

func (s *Case_itemContext) KW_DEFAULT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DEFAULT, 0)
}

func (s *Case_itemContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Case_itemContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Case_itemContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Case_itemContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Case_itemContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Case_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Case_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Case_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCase_item(s)
	}
}

func (s *Case_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCase_item(s)
	}
}

func (p *SV2017Parser) Case_item() (localctx ICase_itemContext) {
	localctx = NewCase_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 242, SV2017ParserRULE_case_item)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1998)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_DEFAULT:
		{
			p.SetState(1984)
			p.Match(SV2017ParserKW_DEFAULT)
		}
		p.SetState(1986)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserCOLON {
			{
				p.SetState(1985)
				p.Match(SV2017ParserCOLON)
			}

		}

	case SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_FATAL, SV2017ParserKW_DOLAR_FULLSKEW, SV2017ParserKW_DOLAR_HOLD, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_NOCHANGE, SV2017ParserKW_DOLAR_PERIOD, SV2017ParserKW_DOLAR_RECOVERY, SV2017ParserKW_DOLAR_RECREM, SV2017ParserKW_DOLAR_REMOVAL, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_SETUP, SV2017ParserKW_DOLAR_SETUPHOLD, SV2017ParserKW_DOLAR_SKEW, SV2017ParserKW_DOLAR_TIMESKEW, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_DOLAR_WARNING, SV2017ParserKW_DOLAR_WIDTH, SV2017ParserKW_BIT, SV2017ParserKW_BYTE, SV2017ParserKW_CONST, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LOCAL, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_NULL, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_SAMPLE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_SUPER, SV2017ParserKW_TAGGED, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_UNSIGNED, SV2017ParserTIME_LITERAL, SV2017ParserANY_BASED_NUMBER, SV2017ParserBASED_NUMBER_WITH_SIZE, SV2017ParserREAL_NUMBER_WITH_EXP, SV2017ParserFIXED_POINT_NUMBER, SV2017ParserUNSIGNED_NUMBER, SV2017ParserUNBASED_UNSIZED_LITERAL, SV2017ParserSTRING_LITERAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSYSTEM_TF_IDENTIFIER, SV2017ParserLPAREN, SV2017ParserLBRACE, SV2017ParserAPOSTROPHE_LBRACE, SV2017ParserDOLAR, SV2017ParserNOT, SV2017ParserNEG, SV2017ParserNAND, SV2017ParserNOR, SV2017ParserXOR, SV2017ParserNXOR, SV2017ParserXORN, SV2017ParserPLUS, SV2017ParserMINUS, SV2017ParserAMPERSAND, SV2017ParserBAR, SV2017ParserINCR, SV2017ParserDECR:
		{
			p.SetState(1988)
			p.expression(0)
		}
		p.SetState(1993)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserCOMMA {
			{
				p.SetState(1989)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(1990)
				p.expression(0)
			}

			p.SetState(1995)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1996)
			p.Match(SV2017ParserCOLON)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(2000)
		p.Statement_or_null()
	}

	return localctx
}

// ICase_pattern_itemContext is an interface to support dynamic dispatch.
type ICase_pattern_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCase_pattern_itemContext differentiates from other interfaces.
	IsCase_pattern_itemContext()
}

type Case_pattern_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCase_pattern_itemContext() *Case_pattern_itemContext {
	var p = new(Case_pattern_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_case_pattern_item
	return p
}

func (*Case_pattern_itemContext) IsCase_pattern_itemContext() {}

func NewCase_pattern_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Case_pattern_itemContext {
	var p = new(Case_pattern_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_case_pattern_item

	return p
}

func (s *Case_pattern_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Case_pattern_itemContext) Statement_or_null() IStatement_or_nullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_or_nullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_or_nullContext)
}

func (s *Case_pattern_itemContext) KW_DEFAULT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DEFAULT, 0)
}

func (s *Case_pattern_itemContext) Pattern() IPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPatternContext)
}

func (s *Case_pattern_itemContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Case_pattern_itemContext) TRIPLE_AND() antlr.TerminalNode {
	return s.GetToken(SV2017ParserTRIPLE_AND, 0)
}

func (s *Case_pattern_itemContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Case_pattern_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Case_pattern_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Case_pattern_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCase_pattern_item(s)
	}
}

func (s *Case_pattern_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCase_pattern_item(s)
	}
}

func (p *SV2017Parser) Case_pattern_item() (localctx ICase_pattern_itemContext) {
	localctx = NewCase_pattern_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 244, SV2017ParserRULE_case_pattern_item)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2013)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_DEFAULT:
		{
			p.SetState(2002)
			p.Match(SV2017ParserKW_DEFAULT)
		}
		p.SetState(2004)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserCOLON {
			{
				p.SetState(2003)
				p.Match(SV2017ParserCOLON)
			}

		}

	case SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_FATAL, SV2017ParserKW_DOLAR_FULLSKEW, SV2017ParserKW_DOLAR_HOLD, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_NOCHANGE, SV2017ParserKW_DOLAR_PERIOD, SV2017ParserKW_DOLAR_RECOVERY, SV2017ParserKW_DOLAR_RECREM, SV2017ParserKW_DOLAR_REMOVAL, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_SETUP, SV2017ParserKW_DOLAR_SETUPHOLD, SV2017ParserKW_DOLAR_SKEW, SV2017ParserKW_DOLAR_TIMESKEW, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_DOLAR_WARNING, SV2017ParserKW_DOLAR_WIDTH, SV2017ParserKW_BIT, SV2017ParserKW_BYTE, SV2017ParserKW_CONST, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LOCAL, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_NULL, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_SAMPLE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_SUPER, SV2017ParserKW_TAGGED, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_UNSIGNED, SV2017ParserTIME_LITERAL, SV2017ParserANY_BASED_NUMBER, SV2017ParserBASED_NUMBER_WITH_SIZE, SV2017ParserREAL_NUMBER_WITH_EXP, SV2017ParserFIXED_POINT_NUMBER, SV2017ParserUNSIGNED_NUMBER, SV2017ParserUNBASED_UNSIZED_LITERAL, SV2017ParserSTRING_LITERAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSYSTEM_TF_IDENTIFIER, SV2017ParserLPAREN, SV2017ParserLBRACE, SV2017ParserAPOSTROPHE_LBRACE, SV2017ParserDOLAR, SV2017ParserNOT, SV2017ParserNEG, SV2017ParserNAND, SV2017ParserNOR, SV2017ParserXOR, SV2017ParserNXOR, SV2017ParserXORN, SV2017ParserDOT, SV2017ParserPLUS, SV2017ParserMINUS, SV2017ParserAMPERSAND, SV2017ParserBAR, SV2017ParserINCR, SV2017ParserDECR:
		{
			p.SetState(2006)
			p.Pattern()
		}
		p.SetState(2009)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserTRIPLE_AND {
			{
				p.SetState(2007)
				p.Match(SV2017ParserTRIPLE_AND)
			}
			{
				p.SetState(2008)
				p.expression(0)
			}

		}
		{
			p.SetState(2011)
			p.Match(SV2017ParserCOLON)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(2015)
		p.Statement_or_null()
	}

	return localctx
}

// ICase_inside_itemContext is an interface to support dynamic dispatch.
type ICase_inside_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCase_inside_itemContext differentiates from other interfaces.
	IsCase_inside_itemContext()
}

type Case_inside_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCase_inside_itemContext() *Case_inside_itemContext {
	var p = new(Case_inside_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_case_inside_item
	return p
}

func (*Case_inside_itemContext) IsCase_inside_itemContext() {}

func NewCase_inside_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Case_inside_itemContext {
	var p = new(Case_inside_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_case_inside_item

	return p
}

func (s *Case_inside_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Case_inside_itemContext) Statement_or_null() IStatement_or_nullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_or_nullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_or_nullContext)
}

func (s *Case_inside_itemContext) KW_DEFAULT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DEFAULT, 0)
}

func (s *Case_inside_itemContext) Open_range_list() IOpen_range_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOpen_range_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOpen_range_listContext)
}

func (s *Case_inside_itemContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Case_inside_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Case_inside_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Case_inside_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCase_inside_item(s)
	}
}

func (s *Case_inside_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCase_inside_item(s)
	}
}

func (p *SV2017Parser) Case_inside_item() (localctx ICase_inside_itemContext) {
	localctx = NewCase_inside_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 246, SV2017ParserRULE_case_inside_item)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2024)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_DEFAULT:
		{
			p.SetState(2017)
			p.Match(SV2017ParserKW_DEFAULT)
		}
		p.SetState(2019)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserCOLON {
			{
				p.SetState(2018)
				p.Match(SV2017ParserCOLON)
			}

		}

	case SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_FATAL, SV2017ParserKW_DOLAR_FULLSKEW, SV2017ParserKW_DOLAR_HOLD, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_NOCHANGE, SV2017ParserKW_DOLAR_PERIOD, SV2017ParserKW_DOLAR_RECOVERY, SV2017ParserKW_DOLAR_RECREM, SV2017ParserKW_DOLAR_REMOVAL, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_SETUP, SV2017ParserKW_DOLAR_SETUPHOLD, SV2017ParserKW_DOLAR_SKEW, SV2017ParserKW_DOLAR_TIMESKEW, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_DOLAR_WARNING, SV2017ParserKW_DOLAR_WIDTH, SV2017ParserKW_BIT, SV2017ParserKW_BYTE, SV2017ParserKW_CONST, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LOCAL, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_NULL, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_SAMPLE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_SUPER, SV2017ParserKW_TAGGED, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_UNSIGNED, SV2017ParserTIME_LITERAL, SV2017ParserANY_BASED_NUMBER, SV2017ParserBASED_NUMBER_WITH_SIZE, SV2017ParserREAL_NUMBER_WITH_EXP, SV2017ParserFIXED_POINT_NUMBER, SV2017ParserUNSIGNED_NUMBER, SV2017ParserUNBASED_UNSIZED_LITERAL, SV2017ParserSTRING_LITERAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSYSTEM_TF_IDENTIFIER, SV2017ParserLPAREN, SV2017ParserLSQUARE_BR, SV2017ParserLBRACE, SV2017ParserAPOSTROPHE_LBRACE, SV2017ParserDOLAR, SV2017ParserNOT, SV2017ParserNEG, SV2017ParserNAND, SV2017ParserNOR, SV2017ParserXOR, SV2017ParserNXOR, SV2017ParserXORN, SV2017ParserPLUS, SV2017ParserMINUS, SV2017ParserAMPERSAND, SV2017ParserBAR, SV2017ParserINCR, SV2017ParserDECR:
		{
			p.SetState(2021)
			p.Open_range_list()
		}
		{
			p.SetState(2022)
			p.Match(SV2017ParserCOLON)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(2026)
		p.Statement_or_null()
	}

	return localctx
}

// IRandcase_statementContext is an interface to support dynamic dispatch.
type IRandcase_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRandcase_statementContext differentiates from other interfaces.
	IsRandcase_statementContext()
}

type Randcase_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRandcase_statementContext() *Randcase_statementContext {
	var p = new(Randcase_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_randcase_statement
	return p
}

func (*Randcase_statementContext) IsRandcase_statementContext() {}

func NewRandcase_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Randcase_statementContext {
	var p = new(Randcase_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_randcase_statement

	return p
}

func (s *Randcase_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Randcase_statementContext) KW_RANDCASE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_RANDCASE, 0)
}

func (s *Randcase_statementContext) KW_ENDCASE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ENDCASE, 0)
}

func (s *Randcase_statementContext) AllRandcase_item() []IRandcase_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRandcase_itemContext)(nil)).Elem())
	var tst = make([]IRandcase_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRandcase_itemContext)
		}
	}

	return tst
}

func (s *Randcase_statementContext) Randcase_item(i int) IRandcase_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRandcase_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRandcase_itemContext)
}

func (s *Randcase_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Randcase_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Randcase_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterRandcase_statement(s)
	}
}

func (s *Randcase_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitRandcase_statement(s)
	}
}

func (p *SV2017Parser) Randcase_statement() (localctx IRandcase_statementContext) {
	localctx = NewRandcase_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 248, SV2017ParserRULE_randcase_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2028)
		p.Match(SV2017ParserKW_RANDCASE)
	}
	p.SetState(2030)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TAGGED-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserTIME_LITERAL-260)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(SV2017ParserANY_BASED_NUMBER-292))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-292))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-292))|(1<<(SV2017ParserFIXED_POINT_NUMBER-292))|(1<<(SV2017ParserUNSIGNED_NUMBER-292))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-292))|(1<<(SV2017ParserSTRING_LITERAL-292))|(1<<(SV2017ParserC_IDENTIFIER-292))|(1<<(SV2017ParserTICK_IDENTIFIER-292))|(1<<(SV2017ParserESCAPED_IDENTIFIER-292))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-292))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-292))|(1<<(SV2017ParserLPAREN-292))|(1<<(SV2017ParserLBRACE-292))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-292))|(1<<(SV2017ParserDOLAR-292))|(1<<(SV2017ParserNOT-292))|(1<<(SV2017ParserNEG-292))|(1<<(SV2017ParserNAND-292))|(1<<(SV2017ParserNOR-292)))) != 0) || (((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324))|(1<<(SV2017ParserPLUS-324)))) != 0) || (((_la-356)&-(0x1f+1)) == 0 && ((1<<uint((_la-356)))&((1<<(SV2017ParserMINUS-356))|(1<<(SV2017ParserAMPERSAND-356))|(1<<(SV2017ParserBAR-356))|(1<<(SV2017ParserINCR-356))|(1<<(SV2017ParserDECR-356)))) != 0) {
		{
			p.SetState(2029)
			p.Randcase_item()
		}

		p.SetState(2032)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2034)
		p.Match(SV2017ParserKW_ENDCASE)
	}

	return localctx
}

// IRandcase_itemContext is an interface to support dynamic dispatch.
type IRandcase_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRandcase_itemContext differentiates from other interfaces.
	IsRandcase_itemContext()
}

type Randcase_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRandcase_itemContext() *Randcase_itemContext {
	var p = new(Randcase_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_randcase_item
	return p
}

func (*Randcase_itemContext) IsRandcase_itemContext() {}

func NewRandcase_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Randcase_itemContext {
	var p = new(Randcase_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_randcase_item

	return p
}

func (s *Randcase_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Randcase_itemContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Randcase_itemContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Randcase_itemContext) Statement_or_null() IStatement_or_nullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_or_nullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_or_nullContext)
}

func (s *Randcase_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Randcase_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Randcase_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterRandcase_item(s)
	}
}

func (s *Randcase_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitRandcase_item(s)
	}
}

func (p *SV2017Parser) Randcase_item() (localctx IRandcase_itemContext) {
	localctx = NewRandcase_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 250, SV2017ParserRULE_randcase_item)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2036)
		p.expression(0)
	}
	{
		p.SetState(2037)
		p.Match(SV2017ParserCOLON)
	}
	{
		p.SetState(2038)
		p.Statement_or_null()
	}

	return localctx
}

// ICond_predicateContext is an interface to support dynamic dispatch.
type ICond_predicateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCond_predicateContext differentiates from other interfaces.
	IsCond_predicateContext()
}

type Cond_predicateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCond_predicateContext() *Cond_predicateContext {
	var p = new(Cond_predicateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_cond_predicate
	return p
}

func (*Cond_predicateContext) IsCond_predicateContext() {}

func NewCond_predicateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cond_predicateContext {
	var p = new(Cond_predicateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_cond_predicate

	return p
}

func (s *Cond_predicateContext) GetParser() antlr.Parser { return s.parser }

func (s *Cond_predicateContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Cond_predicateContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Cond_predicateContext) AllKW_MATCHES() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserKW_MATCHES)
}

func (s *Cond_predicateContext) KW_MATCHES(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_MATCHES, i)
}

func (s *Cond_predicateContext) AllPattern() []IPatternContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPatternContext)(nil)).Elem())
	var tst = make([]IPatternContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPatternContext)
		}
	}

	return tst
}

func (s *Cond_predicateContext) Pattern(i int) IPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPatternContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPatternContext)
}

func (s *Cond_predicateContext) AllTRIPLE_AND() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserTRIPLE_AND)
}

func (s *Cond_predicateContext) TRIPLE_AND(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserTRIPLE_AND, i)
}

func (s *Cond_predicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cond_predicateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Cond_predicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCond_predicate(s)
	}
}

func (s *Cond_predicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCond_predicate(s)
	}
}

func (p *SV2017Parser) Cond_predicate() (localctx ICond_predicateContext) {
	localctx = NewCond_predicateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 252, SV2017ParserRULE_cond_predicate)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2040)
		p.expression(0)
	}
	p.SetState(2043)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_MATCHES {
		{
			p.SetState(2041)
			p.Match(SV2017ParserKW_MATCHES)
		}
		{
			p.SetState(2042)
			p.Pattern()
		}

	}
	p.SetState(2053)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserTRIPLE_AND {
		{
			p.SetState(2045)
			p.Match(SV2017ParserTRIPLE_AND)
		}
		{
			p.SetState(2046)
			p.expression(0)
		}
		p.SetState(2049)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_MATCHES {
			{
				p.SetState(2047)
				p.Match(SV2017ParserKW_MATCHES)
			}
			{
				p.SetState(2048)
				p.Pattern()
			}

		}

		p.SetState(2055)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IConditional_statementContext is an interface to support dynamic dispatch.
type IConditional_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConditional_statementContext differentiates from other interfaces.
	IsConditional_statementContext()
}

type Conditional_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditional_statementContext() *Conditional_statementContext {
	var p = new(Conditional_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_conditional_statement
	return p
}

func (*Conditional_statementContext) IsConditional_statementContext() {}

func NewConditional_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Conditional_statementContext {
	var p = new(Conditional_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_conditional_statement

	return p
}

func (s *Conditional_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Conditional_statementContext) KW_IF() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_IF, 0)
}

func (s *Conditional_statementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Conditional_statementContext) Cond_predicate() ICond_predicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICond_predicateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICond_predicateContext)
}

func (s *Conditional_statementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Conditional_statementContext) AllStatement_or_null() []IStatement_or_nullContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatement_or_nullContext)(nil)).Elem())
	var tst = make([]IStatement_or_nullContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatement_or_nullContext)
		}
	}

	return tst
}

func (s *Conditional_statementContext) Statement_or_null(i int) IStatement_or_nullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_or_nullContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatement_or_nullContext)
}

func (s *Conditional_statementContext) KW_ELSE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ELSE, 0)
}

func (s *Conditional_statementContext) Unique_priority() IUnique_priorityContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnique_priorityContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnique_priorityContext)
}

func (s *Conditional_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Conditional_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Conditional_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterConditional_statement(s)
	}
}

func (s *Conditional_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitConditional_statement(s)
	}
}

func (p *SV2017Parser) Conditional_statement() (localctx IConditional_statementContext) {
	localctx = NewConditional_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 254, SV2017ParserRULE_conditional_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2057)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_PRIORITY || _la == SV2017ParserKW_UNIQUE || _la == SV2017ParserKW_UNIQUE0 {
		{
			p.SetState(2056)
			p.Unique_priority()
		}

	}
	{
		p.SetState(2059)
		p.Match(SV2017ParserKW_IF)
	}
	{
		p.SetState(2060)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(2061)
		p.Cond_predicate()
	}
	{
		p.SetState(2062)
		p.Match(SV2017ParserRPAREN)
	}
	{
		p.SetState(2063)
		p.Statement_or_null()
	}
	p.SetState(2067)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 131, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(2064)
			p.Match(SV2017ParserKW_ELSE)
		}
		{
			p.SetState(2065)
			p.Statement_or_null()
		}

	case 2:

	}

	return localctx
}

// ISubroutine_call_statementContext is an interface to support dynamic dispatch.
type ISubroutine_call_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSubroutine_call_statementContext differentiates from other interfaces.
	IsSubroutine_call_statementContext()
}

type Subroutine_call_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySubroutine_call_statementContext() *Subroutine_call_statementContext {
	var p = new(Subroutine_call_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_subroutine_call_statement
	return p
}

func (*Subroutine_call_statementContext) IsSubroutine_call_statementContext() {}

func NewSubroutine_call_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Subroutine_call_statementContext {
	var p = new(Subroutine_call_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_subroutine_call_statement

	return p
}

func (s *Subroutine_call_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Subroutine_call_statementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Subroutine_call_statementContext) KW_VOID() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_VOID, 0)
}

func (s *Subroutine_call_statementContext) APOSTROPHE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserAPOSTROPHE, 0)
}

func (s *Subroutine_call_statementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Subroutine_call_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Subroutine_call_statementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Subroutine_call_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Subroutine_call_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Subroutine_call_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterSubroutine_call_statement(s)
	}
}

func (s *Subroutine_call_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitSubroutine_call_statement(s)
	}
}

func (p *SV2017Parser) Subroutine_call_statement() (localctx ISubroutine_call_statementContext) {
	localctx = NewSubroutine_call_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 256, SV2017ParserRULE_subroutine_call_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2069)
		p.Match(SV2017ParserKW_VOID)
	}
	{
		p.SetState(2070)
		p.Match(SV2017ParserAPOSTROPHE)
	}
	{
		p.SetState(2071)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(2072)
		p.expression(0)
	}
	{
		p.SetState(2073)
		p.Match(SV2017ParserRPAREN)
	}

	{
		p.SetState(2075)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IDisable_statementContext is an interface to support dynamic dispatch.
type IDisable_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDisable_statementContext differentiates from other interfaces.
	IsDisable_statementContext()
}

type Disable_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDisable_statementContext() *Disable_statementContext {
	var p = new(Disable_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_disable_statement
	return p
}

func (*Disable_statementContext) IsDisable_statementContext() {}

func NewDisable_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Disable_statementContext {
	var p = new(Disable_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_disable_statement

	return p
}

func (s *Disable_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Disable_statementContext) KW_DISABLE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DISABLE, 0)
}

func (s *Disable_statementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Disable_statementContext) KW_FORK() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_FORK, 0)
}

func (s *Disable_statementContext) Hierarchical_identifier() IHierarchical_identifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHierarchical_identifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHierarchical_identifierContext)
}

func (s *Disable_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Disable_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Disable_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterDisable_statement(s)
	}
}

func (s *Disable_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitDisable_statement(s)
	}
}

func (p *SV2017Parser) Disable_statement() (localctx IDisable_statementContext) {
	localctx = NewDisable_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 258, SV2017ParserRULE_disable_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2077)
		p.Match(SV2017ParserKW_DISABLE)
	}
	p.SetState(2080)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_FORK:
		{
			p.SetState(2078)
			p.Match(SV2017ParserKW_FORK)
		}

	case SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_SAMPLE, SV2017ParserKW_STD, SV2017ParserKW_TYPE_OPTION, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
		{
			p.SetState(2079)
			p.Hierarchical_identifier()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(2082)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IEvent_triggerContext is an interface to support dynamic dispatch.
type IEvent_triggerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEvent_triggerContext differentiates from other interfaces.
	IsEvent_triggerContext()
}

type Event_triggerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEvent_triggerContext() *Event_triggerContext {
	var p = new(Event_triggerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_event_trigger
	return p
}

func (*Event_triggerContext) IsEvent_triggerContext() {}

func NewEvent_triggerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Event_triggerContext {
	var p = new(Event_triggerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_event_trigger

	return p
}

func (s *Event_triggerContext) GetParser() antlr.Parser { return s.parser }

func (s *Event_triggerContext) Hierarchical_identifier() IHierarchical_identifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHierarchical_identifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHierarchical_identifierContext)
}

func (s *Event_triggerContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Event_triggerContext) ARROW() antlr.TerminalNode {
	return s.GetToken(SV2017ParserARROW, 0)
}

func (s *Event_triggerContext) DOUBLE_RIGHT_ARROW() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOUBLE_RIGHT_ARROW, 0)
}

func (s *Event_triggerContext) Delay_or_event_control() IDelay_or_event_controlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelay_or_event_controlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelay_or_event_controlContext)
}

func (s *Event_triggerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Event_triggerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Event_triggerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterEvent_trigger(s)
	}
}

func (s *Event_triggerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitEvent_trigger(s)
	}
}

func (p *SV2017Parser) Event_trigger() (localctx IEvent_triggerContext) {
	localctx = NewEvent_triggerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 260, SV2017ParserRULE_event_trigger)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2089)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserARROW:
		{
			p.SetState(2084)
			p.Match(SV2017ParserARROW)
		}

	case SV2017ParserDOUBLE_RIGHT_ARROW:
		{
			p.SetState(2085)
			p.Match(SV2017ParserDOUBLE_RIGHT_ARROW)
		}
		p.SetState(2087)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_REPEAT || _la == SV2017ParserAT || _la == SV2017ParserHASH {
			{
				p.SetState(2086)
				p.Delay_or_event_control()
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(2091)
		p.Hierarchical_identifier()
	}
	{
		p.SetState(2092)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// ILoop_statementContext is an interface to support dynamic dispatch.
type ILoop_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoop_statementContext differentiates from other interfaces.
	IsLoop_statementContext()
}

type Loop_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoop_statementContext() *Loop_statementContext {
	var p = new(Loop_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_loop_statement
	return p
}

func (*Loop_statementContext) IsLoop_statementContext() {}

func NewLoop_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Loop_statementContext {
	var p = new(Loop_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_loop_statement

	return p
}

func (s *Loop_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Loop_statementContext) Statement_or_null() IStatement_or_nullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_or_nullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_or_nullContext)
}

func (s *Loop_statementContext) KW_FOREVER() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_FOREVER, 0)
}

func (s *Loop_statementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Loop_statementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Loop_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Loop_statementContext) KW_FOR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_FOR, 0)
}

func (s *Loop_statementContext) AllSEMI() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserSEMI)
}

func (s *Loop_statementContext) SEMI(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, i)
}

func (s *Loop_statementContext) KW_REPEAT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_REPEAT, 0)
}

func (s *Loop_statementContext) KW_WHILE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_WHILE, 0)
}

func (s *Loop_statementContext) For_initialization() IFor_initializationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFor_initializationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFor_initializationContext)
}

func (s *Loop_statementContext) For_step() IFor_stepContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFor_stepContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFor_stepContext)
}

func (s *Loop_statementContext) KW_DO() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DO, 0)
}

func (s *Loop_statementContext) KW_FOREACH() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_FOREACH, 0)
}

func (s *Loop_statementContext) Package_or_class_scoped_hier_id_with_select() IPackage_or_class_scoped_hier_id_with_selectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackage_or_class_scoped_hier_id_with_selectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackage_or_class_scoped_hier_id_with_selectContext)
}

func (s *Loop_statementContext) LSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLSQUARE_BR, 0)
}

func (s *Loop_statementContext) Loop_variables() ILoop_variablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoop_variablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoop_variablesContext)
}

func (s *Loop_statementContext) RSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRSQUARE_BR, 0)
}

func (s *Loop_statementContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *Loop_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Loop_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Loop_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterLoop_statement(s)
	}
}

func (s *Loop_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitLoop_statement(s)
	}
}

func (p *SV2017Parser) Loop_statement() (localctx ILoop_statementContext) {
	localctx = NewLoop_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 262, SV2017ParserRULE_loop_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2134)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_FOR, SV2017ParserKW_FOREVER, SV2017ParserKW_REPEAT, SV2017ParserKW_WHILE:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(2114)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SV2017ParserKW_FOREVER:
			{
				p.SetState(2094)
				p.Match(SV2017ParserKW_FOREVER)
			}

		case SV2017ParserKW_FOR, SV2017ParserKW_REPEAT, SV2017ParserKW_WHILE:
			p.SetState(2111)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case SV2017ParserKW_REPEAT, SV2017ParserKW_WHILE:
				{
					p.SetState(2095)
					_la = p.GetTokenStream().LA(1)

					if !(_la == SV2017ParserKW_REPEAT || _la == SV2017ParserKW_WHILE) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(2096)
					p.Match(SV2017ParserLPAREN)
				}
				{
					p.SetState(2097)
					p.expression(0)
				}

			case SV2017ParserKW_FOR:
				{
					p.SetState(2098)
					p.Match(SV2017ParserKW_FOR)
				}
				{
					p.SetState(2099)
					p.Match(SV2017ParserLPAREN)
				}
				p.SetState(2101)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == SV2017ParserKW_DOLAR_ROOT || (((_la-35)&-(0x1f+1)) == 0 && ((1<<uint((_la-35)))&((1<<(SV2017ParserKW_DOLAR_UNIT-35))|(1<<(SV2017ParserKW_BIT-35))|(1<<(SV2017ParserKW_BYTE-35))|(1<<(SV2017ParserKW_CHANDLE-35)))) != 0) || _la == SV2017ParserKW_ENUM || _la == SV2017ParserKW_EVENT || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-174)&-(0x1f+1)) == 0 && ((1<<uint((_la-174)))&((1<<(SV2017ParserKW_OPTION-174))|(1<<(SV2017ParserKW_RANDOMIZE-174))|(1<<(SV2017ParserKW_REAL-174))|(1<<(SV2017ParserKW_REALTIME-174))|(1<<(SV2017ParserKW_REG-174)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_STRUCT-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNION-260))|(1<<(SV2017ParserKW_VAR-260))|(1<<(SV2017ParserKW_VIRTUAL-260)))) != 0) || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299))|(1<<(SV2017ParserLBRACE-299))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-299)))) != 0) {
					{
						p.SetState(2100)
						p.For_initialization()
					}

				}
				{
					p.SetState(2103)
					p.Match(SV2017ParserSEMI)
				}
				p.SetState(2105)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TAGGED-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserTIME_LITERAL-260)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(SV2017ParserANY_BASED_NUMBER-292))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-292))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-292))|(1<<(SV2017ParserFIXED_POINT_NUMBER-292))|(1<<(SV2017ParserUNSIGNED_NUMBER-292))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-292))|(1<<(SV2017ParserSTRING_LITERAL-292))|(1<<(SV2017ParserC_IDENTIFIER-292))|(1<<(SV2017ParserTICK_IDENTIFIER-292))|(1<<(SV2017ParserESCAPED_IDENTIFIER-292))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-292))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-292))|(1<<(SV2017ParserLPAREN-292))|(1<<(SV2017ParserLBRACE-292))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-292))|(1<<(SV2017ParserDOLAR-292))|(1<<(SV2017ParserNOT-292))|(1<<(SV2017ParserNEG-292))|(1<<(SV2017ParserNAND-292))|(1<<(SV2017ParserNOR-292)))) != 0) || (((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324))|(1<<(SV2017ParserPLUS-324)))) != 0) || (((_la-356)&-(0x1f+1)) == 0 && ((1<<uint((_la-356)))&((1<<(SV2017ParserMINUS-356))|(1<<(SV2017ParserAMPERSAND-356))|(1<<(SV2017ParserBAR-356))|(1<<(SV2017ParserINCR-356))|(1<<(SV2017ParserDECR-356)))) != 0) {
					{
						p.SetState(2104)
						p.expression(0)
					}

				}
				{
					p.SetState(2107)
					p.Match(SV2017ParserSEMI)
				}
				p.SetState(2109)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TAGGED-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserTIME_LITERAL-260)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(SV2017ParserANY_BASED_NUMBER-292))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-292))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-292))|(1<<(SV2017ParserFIXED_POINT_NUMBER-292))|(1<<(SV2017ParserUNSIGNED_NUMBER-292))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-292))|(1<<(SV2017ParserSTRING_LITERAL-292))|(1<<(SV2017ParserC_IDENTIFIER-292))|(1<<(SV2017ParserTICK_IDENTIFIER-292))|(1<<(SV2017ParserESCAPED_IDENTIFIER-292))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-292))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-292))|(1<<(SV2017ParserLPAREN-292))|(1<<(SV2017ParserLBRACE-292))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-292))|(1<<(SV2017ParserDOLAR-292))|(1<<(SV2017ParserNOT-292))|(1<<(SV2017ParserNEG-292))|(1<<(SV2017ParserNAND-292))|(1<<(SV2017ParserNOR-292)))) != 0) || (((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324))|(1<<(SV2017ParserPLUS-324)))) != 0) || (((_la-356)&-(0x1f+1)) == 0 && ((1<<uint((_la-356)))&((1<<(SV2017ParserMINUS-356))|(1<<(SV2017ParserAMPERSAND-356))|(1<<(SV2017ParserBAR-356))|(1<<(SV2017ParserINCR-356))|(1<<(SV2017ParserDECR-356)))) != 0) {
					{
						p.SetState(2108)
						p.For_step()
					}

				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}
			{
				p.SetState(2113)
				p.Match(SV2017ParserRPAREN)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(2116)
			p.Statement_or_null()
		}

	case SV2017ParserKW_DO:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2117)
			p.Match(SV2017ParserKW_DO)
		}
		{
			p.SetState(2118)
			p.Statement_or_null()
		}
		{
			p.SetState(2119)
			p.Match(SV2017ParserKW_WHILE)
		}
		{
			p.SetState(2120)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(2121)
			p.expression(0)
		}
		{
			p.SetState(2122)
			p.Match(SV2017ParserRPAREN)
		}
		{
			p.SetState(2123)
			p.Match(SV2017ParserSEMI)
		}

	case SV2017ParserKW_FOREACH:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2125)
			p.Match(SV2017ParserKW_FOREACH)
		}
		{
			p.SetState(2126)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(2127)
			p.Package_or_class_scoped_hier_id_with_select()
		}
		{
			p.SetState(2128)
			p.Match(SV2017ParserLSQUARE_BR)
		}
		{
			p.SetState(2129)
			p.Loop_variables()
		}
		{
			p.SetState(2130)
			p.Match(SV2017ParserRSQUARE_BR)
		}
		{
			p.SetState(2131)
			p.Match(SV2017ParserRPAREN)
		}
		{
			p.SetState(2132)
			p.Statement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IList_of_variable_assignmentsContext is an interface to support dynamic dispatch.
type IList_of_variable_assignmentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsList_of_variable_assignmentsContext differentiates from other interfaces.
	IsList_of_variable_assignmentsContext()
}

type List_of_variable_assignmentsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyList_of_variable_assignmentsContext() *List_of_variable_assignmentsContext {
	var p = new(List_of_variable_assignmentsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_list_of_variable_assignments
	return p
}

func (*List_of_variable_assignmentsContext) IsList_of_variable_assignmentsContext() {}

func NewList_of_variable_assignmentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *List_of_variable_assignmentsContext {
	var p = new(List_of_variable_assignmentsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_list_of_variable_assignments

	return p
}

func (s *List_of_variable_assignmentsContext) GetParser() antlr.Parser { return s.parser }

func (s *List_of_variable_assignmentsContext) AllVariable_assignment() []IVariable_assignmentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariable_assignmentContext)(nil)).Elem())
	var tst = make([]IVariable_assignmentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariable_assignmentContext)
		}
	}

	return tst
}

func (s *List_of_variable_assignmentsContext) Variable_assignment(i int) IVariable_assignmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_assignmentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariable_assignmentContext)
}

func (s *List_of_variable_assignmentsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *List_of_variable_assignmentsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *List_of_variable_assignmentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *List_of_variable_assignmentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *List_of_variable_assignmentsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterList_of_variable_assignments(s)
	}
}

func (s *List_of_variable_assignmentsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitList_of_variable_assignments(s)
	}
}

func (p *SV2017Parser) List_of_variable_assignments() (localctx IList_of_variable_assignmentsContext) {
	localctx = NewList_of_variable_assignmentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 264, SV2017ParserRULE_list_of_variable_assignments)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2136)
		p.Variable_assignment()
	}
	p.SetState(2141)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserCOMMA {
		{
			p.SetState(2137)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(2138)
			p.Variable_assignment()
		}

		p.SetState(2143)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IFor_initializationContext is an interface to support dynamic dispatch.
type IFor_initializationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFor_initializationContext differentiates from other interfaces.
	IsFor_initializationContext()
}

type For_initializationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFor_initializationContext() *For_initializationContext {
	var p = new(For_initializationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_for_initialization
	return p
}

func (*For_initializationContext) IsFor_initializationContext() {}

func NewFor_initializationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *For_initializationContext {
	var p = new(For_initializationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_for_initialization

	return p
}

func (s *For_initializationContext) GetParser() antlr.Parser { return s.parser }

func (s *For_initializationContext) List_of_variable_assignments() IList_of_variable_assignmentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_variable_assignmentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_variable_assignmentsContext)
}

func (s *For_initializationContext) AllFor_variable_declaration() []IFor_variable_declarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFor_variable_declarationContext)(nil)).Elem())
	var tst = make([]IFor_variable_declarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFor_variable_declarationContext)
		}
	}

	return tst
}

func (s *For_initializationContext) For_variable_declaration(i int) IFor_variable_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFor_variable_declarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFor_variable_declarationContext)
}

func (s *For_initializationContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *For_initializationContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *For_initializationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *For_initializationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *For_initializationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterFor_initialization(s)
	}
}

func (s *For_initializationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitFor_initialization(s)
	}
}

func (p *SV2017Parser) For_initialization() (localctx IFor_initializationContext) {
	localctx = NewFor_initializationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 266, SV2017ParserRULE_for_initialization)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2153)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 143, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2144)
			p.List_of_variable_assignments()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2145)
			p.For_variable_declaration()
		}
		p.SetState(2150)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserCOMMA {
			{
				p.SetState(2146)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(2147)
				p.For_variable_declaration()
			}

			p.SetState(2152)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// IFor_variable_declaration_var_assignContext is an interface to support dynamic dispatch.
type IFor_variable_declaration_var_assignContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFor_variable_declaration_var_assignContext differentiates from other interfaces.
	IsFor_variable_declaration_var_assignContext()
}

type For_variable_declaration_var_assignContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFor_variable_declaration_var_assignContext() *For_variable_declaration_var_assignContext {
	var p = new(For_variable_declaration_var_assignContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_for_variable_declaration_var_assign
	return p
}

func (*For_variable_declaration_var_assignContext) IsFor_variable_declaration_var_assignContext() {}

func NewFor_variable_declaration_var_assignContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *For_variable_declaration_var_assignContext {
	var p = new(For_variable_declaration_var_assignContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_for_variable_declaration_var_assign

	return p
}

func (s *For_variable_declaration_var_assignContext) GetParser() antlr.Parser { return s.parser }

func (s *For_variable_declaration_var_assignContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *For_variable_declaration_var_assignContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserASSIGN, 0)
}

func (s *For_variable_declaration_var_assignContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *For_variable_declaration_var_assignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *For_variable_declaration_var_assignContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *For_variable_declaration_var_assignContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterFor_variable_declaration_var_assign(s)
	}
}

func (s *For_variable_declaration_var_assignContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitFor_variable_declaration_var_assign(s)
	}
}

func (p *SV2017Parser) For_variable_declaration_var_assign() (localctx IFor_variable_declaration_var_assignContext) {
	localctx = NewFor_variable_declaration_var_assignContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 268, SV2017ParserRULE_for_variable_declaration_var_assign)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2155)
		p.Identifier()
	}
	{
		p.SetState(2156)
		p.Match(SV2017ParserASSIGN)
	}
	{
		p.SetState(2157)
		p.expression(0)
	}

	return localctx
}

// IFor_variable_declarationContext is an interface to support dynamic dispatch.
type IFor_variable_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFor_variable_declarationContext differentiates from other interfaces.
	IsFor_variable_declarationContext()
}

type For_variable_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFor_variable_declarationContext() *For_variable_declarationContext {
	var p = new(For_variable_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_for_variable_declaration
	return p
}

func (*For_variable_declarationContext) IsFor_variable_declarationContext() {}

func NewFor_variable_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *For_variable_declarationContext {
	var p = new(For_variable_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_for_variable_declaration

	return p
}

func (s *For_variable_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *For_variable_declarationContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *For_variable_declarationContext) AllFor_variable_declaration_var_assign() []IFor_variable_declaration_var_assignContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFor_variable_declaration_var_assignContext)(nil)).Elem())
	var tst = make([]IFor_variable_declaration_var_assignContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFor_variable_declaration_var_assignContext)
		}
	}

	return tst
}

func (s *For_variable_declarationContext) For_variable_declaration_var_assign(i int) IFor_variable_declaration_var_assignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFor_variable_declaration_var_assignContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFor_variable_declaration_var_assignContext)
}

func (s *For_variable_declarationContext) KW_VAR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_VAR, 0)
}

func (s *For_variable_declarationContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *For_variable_declarationContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *For_variable_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *For_variable_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *For_variable_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterFor_variable_declaration(s)
	}
}

func (s *For_variable_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitFor_variable_declaration(s)
	}
}

func (p *SV2017Parser) For_variable_declaration() (localctx IFor_variable_declarationContext) {
	localctx = NewFor_variable_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 270, SV2017ParserRULE_for_variable_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2160)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_VAR {
		{
			p.SetState(2159)
			p.Match(SV2017ParserKW_VAR)
		}

	}
	{
		p.SetState(2162)
		p.Data_type()
	}
	{
		p.SetState(2163)
		p.For_variable_declaration_var_assign()
	}
	p.SetState(2168)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 145, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2164)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(2165)
				p.For_variable_declaration_var_assign()
			}

		}
		p.SetState(2170)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 145, p.GetParserRuleContext())
	}

	return localctx
}

// IFor_stepContext is an interface to support dynamic dispatch.
type IFor_stepContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFor_stepContext differentiates from other interfaces.
	IsFor_stepContext()
}

type For_stepContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFor_stepContext() *For_stepContext {
	var p = new(For_stepContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_for_step
	return p
}

func (*For_stepContext) IsFor_stepContext() {}

func NewFor_stepContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *For_stepContext {
	var p = new(For_stepContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_for_step

	return p
}

func (s *For_stepContext) GetParser() antlr.Parser { return s.parser }

func (s *For_stepContext) AllSequence_match_item() []ISequence_match_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISequence_match_itemContext)(nil)).Elem())
	var tst = make([]ISequence_match_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISequence_match_itemContext)
		}
	}

	return tst
}

func (s *For_stepContext) Sequence_match_item(i int) ISequence_match_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISequence_match_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISequence_match_itemContext)
}

func (s *For_stepContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *For_stepContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *For_stepContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *For_stepContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *For_stepContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterFor_step(s)
	}
}

func (s *For_stepContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitFor_step(s)
	}
}

func (p *SV2017Parser) For_step() (localctx IFor_stepContext) {
	localctx = NewFor_stepContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 272, SV2017ParserRULE_for_step)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2171)
		p.Sequence_match_item()
	}
	p.SetState(2176)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserCOMMA {
		{
			p.SetState(2172)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(2173)
			p.Sequence_match_item()
		}

		p.SetState(2178)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ILoop_variablesContext is an interface to support dynamic dispatch.
type ILoop_variablesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoop_variablesContext differentiates from other interfaces.
	IsLoop_variablesContext()
}

type Loop_variablesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoop_variablesContext() *Loop_variablesContext {
	var p = new(Loop_variablesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_loop_variables
	return p
}

func (*Loop_variablesContext) IsLoop_variablesContext() {}

func NewLoop_variablesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Loop_variablesContext {
	var p = new(Loop_variablesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_loop_variables

	return p
}

func (s *Loop_variablesContext) GetParser() antlr.Parser { return s.parser }

func (s *Loop_variablesContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Loop_variablesContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Loop_variablesContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Loop_variablesContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Loop_variablesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Loop_variablesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Loop_variablesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterLoop_variables(s)
	}
}

func (s *Loop_variablesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitLoop_variables(s)
	}
}

func (p *SV2017Parser) Loop_variables() (localctx ILoop_variablesContext) {
	localctx = NewLoop_variablesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 274, SV2017ParserRULE_loop_variables)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2180)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
		{
			p.SetState(2179)
			p.Identifier()
		}

	}
	p.SetState(2188)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserCOMMA {
		{
			p.SetState(2182)
			p.Match(SV2017ParserCOMMA)
		}
		p.SetState(2184)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
			{
				p.SetState(2183)
				p.Identifier()
			}

		}

		p.SetState(2190)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IJump_statementContext is an interface to support dynamic dispatch.
type IJump_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJump_statementContext differentiates from other interfaces.
	IsJump_statementContext()
}

type Jump_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJump_statementContext() *Jump_statementContext {
	var p = new(Jump_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_jump_statement
	return p
}

func (*Jump_statementContext) IsJump_statementContext() {}

func NewJump_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Jump_statementContext {
	var p = new(Jump_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_jump_statement

	return p
}

func (s *Jump_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Jump_statementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Jump_statementContext) KW_RETURN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_RETURN, 0)
}

func (s *Jump_statementContext) KW_BREAK() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_BREAK, 0)
}

func (s *Jump_statementContext) KW_CONTINUE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_CONTINUE, 0)
}

func (s *Jump_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Jump_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Jump_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Jump_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterJump_statement(s)
	}
}

func (s *Jump_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitJump_statement(s)
	}
}

func (p *SV2017Parser) Jump_statement() (localctx IJump_statementContext) {
	localctx = NewJump_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 276, SV2017ParserRULE_jump_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2197)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_RETURN:
		{
			p.SetState(2191)
			p.Match(SV2017ParserKW_RETURN)
		}
		p.SetState(2193)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TAGGED-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserTIME_LITERAL-260)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(SV2017ParserANY_BASED_NUMBER-292))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-292))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-292))|(1<<(SV2017ParserFIXED_POINT_NUMBER-292))|(1<<(SV2017ParserUNSIGNED_NUMBER-292))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-292))|(1<<(SV2017ParserSTRING_LITERAL-292))|(1<<(SV2017ParserC_IDENTIFIER-292))|(1<<(SV2017ParserTICK_IDENTIFIER-292))|(1<<(SV2017ParserESCAPED_IDENTIFIER-292))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-292))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-292))|(1<<(SV2017ParserLPAREN-292))|(1<<(SV2017ParserLBRACE-292))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-292))|(1<<(SV2017ParserDOLAR-292))|(1<<(SV2017ParserNOT-292))|(1<<(SV2017ParserNEG-292))|(1<<(SV2017ParserNAND-292))|(1<<(SV2017ParserNOR-292)))) != 0) || (((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324))|(1<<(SV2017ParserPLUS-324)))) != 0) || (((_la-356)&-(0x1f+1)) == 0 && ((1<<uint((_la-356)))&((1<<(SV2017ParserMINUS-356))|(1<<(SV2017ParserAMPERSAND-356))|(1<<(SV2017ParserBAR-356))|(1<<(SV2017ParserINCR-356))|(1<<(SV2017ParserDECR-356)))) != 0) {
			{
				p.SetState(2192)
				p.expression(0)
			}

		}

	case SV2017ParserKW_BREAK:
		{
			p.SetState(2195)
			p.Match(SV2017ParserKW_BREAK)
		}

	case SV2017ParserKW_CONTINUE:
		{
			p.SetState(2196)
			p.Match(SV2017ParserKW_CONTINUE)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(2199)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IWait_statementContext is an interface to support dynamic dispatch.
type IWait_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWait_statementContext differentiates from other interfaces.
	IsWait_statementContext()
}

type Wait_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWait_statementContext() *Wait_statementContext {
	var p = new(Wait_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_wait_statement
	return p
}

func (*Wait_statementContext) IsWait_statementContext() {}

func NewWait_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Wait_statementContext {
	var p = new(Wait_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_wait_statement

	return p
}

func (s *Wait_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Wait_statementContext) KW_WAIT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_WAIT, 0)
}

func (s *Wait_statementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Wait_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Wait_statementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Wait_statementContext) Statement_or_null() IStatement_or_nullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_or_nullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_or_nullContext)
}

func (s *Wait_statementContext) KW_FORK() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_FORK, 0)
}

func (s *Wait_statementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Wait_statementContext) KW_WAIT_ORDER() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_WAIT_ORDER, 0)
}

func (s *Wait_statementContext) AllHierarchical_identifier() []IHierarchical_identifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IHierarchical_identifierContext)(nil)).Elem())
	var tst = make([]IHierarchical_identifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IHierarchical_identifierContext)
		}
	}

	return tst
}

func (s *Wait_statementContext) Hierarchical_identifier(i int) IHierarchical_identifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHierarchical_identifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IHierarchical_identifierContext)
}

func (s *Wait_statementContext) Action_block() IAction_blockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAction_blockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAction_blockContext)
}

func (s *Wait_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Wait_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Wait_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Wait_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Wait_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterWait_statement(s)
	}
}

func (s *Wait_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitWait_statement(s)
	}
}

func (p *SV2017Parser) Wait_statement() (localctx IWait_statementContext) {
	localctx = NewWait_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 278, SV2017ParserRULE_wait_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2224)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_WAIT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2201)
			p.Match(SV2017ParserKW_WAIT)
		}
		p.SetState(2209)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SV2017ParserLPAREN:
			{
				p.SetState(2202)
				p.Match(SV2017ParserLPAREN)
			}
			{
				p.SetState(2203)
				p.expression(0)
			}
			{
				p.SetState(2204)
				p.Match(SV2017ParserRPAREN)
			}
			{
				p.SetState(2205)
				p.Statement_or_null()
			}

		case SV2017ParserKW_FORK:
			{
				p.SetState(2207)
				p.Match(SV2017ParserKW_FORK)
			}
			{
				p.SetState(2208)
				p.Match(SV2017ParserSEMI)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case SV2017ParserKW_WAIT_ORDER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2211)
			p.Match(SV2017ParserKW_WAIT_ORDER)
		}
		{
			p.SetState(2212)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(2213)
			p.Hierarchical_identifier()
		}
		p.SetState(2218)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserCOMMA {
			{
				p.SetState(2214)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(2215)
				p.Hierarchical_identifier()
			}

			p.SetState(2220)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2221)
			p.Match(SV2017ParserRPAREN)
		}
		{
			p.SetState(2222)
			p.Action_block()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IName_of_instanceContext is an interface to support dynamic dispatch.
type IName_of_instanceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsName_of_instanceContext differentiates from other interfaces.
	IsName_of_instanceContext()
}

type Name_of_instanceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyName_of_instanceContext() *Name_of_instanceContext {
	var p = new(Name_of_instanceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_name_of_instance
	return p
}

func (*Name_of_instanceContext) IsName_of_instanceContext() {}

func NewName_of_instanceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Name_of_instanceContext {
	var p = new(Name_of_instanceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_name_of_instance

	return p
}

func (s *Name_of_instanceContext) GetParser() antlr.Parser { return s.parser }

func (s *Name_of_instanceContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Name_of_instanceContext) AllUnpacked_dimension() []IUnpacked_dimensionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUnpacked_dimensionContext)(nil)).Elem())
	var tst = make([]IUnpacked_dimensionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUnpacked_dimensionContext)
		}
	}

	return tst
}

func (s *Name_of_instanceContext) Unpacked_dimension(i int) IUnpacked_dimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnpacked_dimensionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUnpacked_dimensionContext)
}

func (s *Name_of_instanceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Name_of_instanceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Name_of_instanceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterName_of_instance(s)
	}
}

func (s *Name_of_instanceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitName_of_instance(s)
	}
}

func (p *SV2017Parser) Name_of_instance() (localctx IName_of_instanceContext) {
	localctx = NewName_of_instanceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 280, SV2017ParserRULE_name_of_instance)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2226)
		p.Identifier()
	}
	p.SetState(2230)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserLSQUARE_BR {
		{
			p.SetState(2227)
			p.Unpacked_dimension()
		}

		p.SetState(2232)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IChecker_instantiationContext is an interface to support dynamic dispatch.
type IChecker_instantiationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChecker_instantiationContext differentiates from other interfaces.
	IsChecker_instantiationContext()
}

type Checker_instantiationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChecker_instantiationContext() *Checker_instantiationContext {
	var p = new(Checker_instantiationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_checker_instantiation
	return p
}

func (*Checker_instantiationContext) IsChecker_instantiationContext() {}

func NewChecker_instantiationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Checker_instantiationContext {
	var p = new(Checker_instantiationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_checker_instantiation

	return p
}

func (s *Checker_instantiationContext) GetParser() antlr.Parser { return s.parser }

func (s *Checker_instantiationContext) Ps_identifier() IPs_identifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPs_identifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPs_identifierContext)
}

func (s *Checker_instantiationContext) Name_of_instance() IName_of_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_of_instanceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_of_instanceContext)
}

func (s *Checker_instantiationContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Checker_instantiationContext) List_of_checker_port_connections() IList_of_checker_port_connectionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_checker_port_connectionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_checker_port_connectionsContext)
}

func (s *Checker_instantiationContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Checker_instantiationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Checker_instantiationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Checker_instantiationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Checker_instantiationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterChecker_instantiation(s)
	}
}

func (s *Checker_instantiationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitChecker_instantiation(s)
	}
}

func (p *SV2017Parser) Checker_instantiation() (localctx IChecker_instantiationContext) {
	localctx = NewChecker_instantiationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 282, SV2017ParserRULE_checker_instantiation)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2233)
		p.Ps_identifier()
	}
	{
		p.SetState(2234)
		p.Name_of_instance()
	}
	{
		p.SetState(2235)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(2236)
		p.List_of_checker_port_connections()
	}
	{
		p.SetState(2237)
		p.Match(SV2017ParserRPAREN)
	}
	{
		p.SetState(2238)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IList_of_checker_port_connectionsContext is an interface to support dynamic dispatch.
type IList_of_checker_port_connectionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsList_of_checker_port_connectionsContext differentiates from other interfaces.
	IsList_of_checker_port_connectionsContext()
}

type List_of_checker_port_connectionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyList_of_checker_port_connectionsContext() *List_of_checker_port_connectionsContext {
	var p = new(List_of_checker_port_connectionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_list_of_checker_port_connections
	return p
}

func (*List_of_checker_port_connectionsContext) IsList_of_checker_port_connectionsContext() {}

func NewList_of_checker_port_connectionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *List_of_checker_port_connectionsContext {
	var p = new(List_of_checker_port_connectionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_list_of_checker_port_connections

	return p
}

func (s *List_of_checker_port_connectionsContext) GetParser() antlr.Parser { return s.parser }

func (s *List_of_checker_port_connectionsContext) AllOrdered_checker_port_connection() []IOrdered_checker_port_connectionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOrdered_checker_port_connectionContext)(nil)).Elem())
	var tst = make([]IOrdered_checker_port_connectionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOrdered_checker_port_connectionContext)
		}
	}

	return tst
}

func (s *List_of_checker_port_connectionsContext) Ordered_checker_port_connection(i int) IOrdered_checker_port_connectionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrdered_checker_port_connectionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOrdered_checker_port_connectionContext)
}

func (s *List_of_checker_port_connectionsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *List_of_checker_port_connectionsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *List_of_checker_port_connectionsContext) AllNamed_checker_port_connection() []INamed_checker_port_connectionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INamed_checker_port_connectionContext)(nil)).Elem())
	var tst = make([]INamed_checker_port_connectionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INamed_checker_port_connectionContext)
		}
	}

	return tst
}

func (s *List_of_checker_port_connectionsContext) Named_checker_port_connection(i int) INamed_checker_port_connectionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamed_checker_port_connectionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INamed_checker_port_connectionContext)
}

func (s *List_of_checker_port_connectionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *List_of_checker_port_connectionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *List_of_checker_port_connectionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterList_of_checker_port_connections(s)
	}
}

func (s *List_of_checker_port_connectionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitList_of_checker_port_connections(s)
	}
}

func (p *SV2017Parser) List_of_checker_port_connections() (localctx IList_of_checker_port_connectionsContext) {
	localctx = NewList_of_checker_port_connectionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 284, SV2017ParserRULE_list_of_checker_port_connections)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2256)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 158, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2240)
			p.Ordered_checker_port_connection()
		}
		p.SetState(2245)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserCOMMA {
			{
				p.SetState(2241)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(2242)
				p.Ordered_checker_port_connection()
			}

			p.SetState(2247)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2248)
			p.Named_checker_port_connection()
		}
		p.SetState(2253)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserCOMMA {
			{
				p.SetState(2249)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(2250)
				p.Named_checker_port_connection()
			}

			p.SetState(2255)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// IOrdered_checker_port_connectionContext is an interface to support dynamic dispatch.
type IOrdered_checker_port_connectionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOrdered_checker_port_connectionContext differentiates from other interfaces.
	IsOrdered_checker_port_connectionContext()
}

type Ordered_checker_port_connectionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrdered_checker_port_connectionContext() *Ordered_checker_port_connectionContext {
	var p = new(Ordered_checker_port_connectionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_ordered_checker_port_connection
	return p
}

func (*Ordered_checker_port_connectionContext) IsOrdered_checker_port_connectionContext() {}

func NewOrdered_checker_port_connectionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ordered_checker_port_connectionContext {
	var p = new(Ordered_checker_port_connectionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_ordered_checker_port_connection

	return p
}

func (s *Ordered_checker_port_connectionContext) GetParser() antlr.Parser { return s.parser }

func (s *Ordered_checker_port_connectionContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Ordered_checker_port_connectionContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Ordered_checker_port_connectionContext) Property_actual_arg() IProperty_actual_argContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProperty_actual_argContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProperty_actual_argContext)
}

func (s *Ordered_checker_port_connectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ordered_checker_port_connectionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Ordered_checker_port_connectionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterOrdered_checker_port_connection(s)
	}
}

func (s *Ordered_checker_port_connectionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitOrdered_checker_port_connection(s)
	}
}

func (p *SV2017Parser) Ordered_checker_port_connection() (localctx IOrdered_checker_port_connectionContext) {
	localctx = NewOrdered_checker_port_connectionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 286, SV2017ParserRULE_ordered_checker_port_connection)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2261)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 159, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2258)
				p.Attribute_instance()
			}

		}
		p.SetState(2263)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 159, p.GetParserRuleContext())
	}
	p.SetState(2265)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20))|(1<<(SV2017ParserKW_ACCEPT_ON-20))|(1<<(SV2017ParserKW_ALWAYS-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CASE-56))|(1<<(SV2017ParserKW_CONST-56))|(1<<(SV2017ParserKW_EDGE-56)))) != 0) || (((_la-109)&-(0x1f+1)) == 0 && ((1<<uint((_la-109)))&((1<<(SV2017ParserKW_EVENTUALLY-109))|(1<<(SV2017ParserKW_FIRST_MATCH-109))|(1<<(SV2017ParserKW_IF-109)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141))|(1<<(SV2017ParserKW_NEGEDGE-141))|(1<<(SV2017ParserKW_NEXTTIME-141))|(1<<(SV2017ParserKW_NOT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_POSEDGE-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173))|(1<<(SV2017ParserKW_REJECT_ON-173)))) != 0) || (((_la-214)&-(0x1f+1)) == 0 && ((1<<uint((_la-214)))&((1<<(SV2017ParserKW_S_ALWAYS-214))|(1<<(SV2017ParserKW_S_EVENTUALLY-214))|(1<<(SV2017ParserKW_S_NEXTTIME-214))|(1<<(SV2017ParserKW_SAMPLE-214))|(1<<(SV2017ParserKW_SHORTINT-214))|(1<<(SV2017ParserKW_SHORTREAL-214))|(1<<(SV2017ParserKW_SIGNED-214))|(1<<(SV2017ParserKW_STD-214))|(1<<(SV2017ParserKW_STRING-214))|(1<<(SV2017ParserKW_STRONG-214))|(1<<(SV2017ParserKW_SUPER-214))|(1<<(SV2017ParserKW_SYNC_ACCEPT_ON-214))|(1<<(SV2017ParserKW_SYNC_REJECT_ON-214))|(1<<(SV2017ParserKW_TAGGED-214)))) != 0) || (((_la-246)&-(0x1f+1)) == 0 && ((1<<uint((_la-246)))&((1<<(SV2017ParserKW_THIS-246))|(1<<(SV2017ParserKW_TIME-246))|(1<<(SV2017ParserKW_TYPE-246))|(1<<(SV2017ParserKW_TYPE_OPTION-246))|(1<<(SV2017ParserKW_UNSIGNED-246)))) != 0) || (((_la-279)&-(0x1f+1)) == 0 && ((1<<uint((_la-279)))&((1<<(SV2017ParserKW_WEAK-279))|(1<<(SV2017ParserTIME_LITERAL-279))|(1<<(SV2017ParserANY_BASED_NUMBER-279))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-279))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-279))|(1<<(SV2017ParserFIXED_POINT_NUMBER-279))|(1<<(SV2017ParserUNSIGNED_NUMBER-279))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-279))|(1<<(SV2017ParserSTRING_LITERAL-279))|(1<<(SV2017ParserC_IDENTIFIER-279))|(1<<(SV2017ParserTICK_IDENTIFIER-279))|(1<<(SV2017ParserESCAPED_IDENTIFIER-279))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-279))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-279))|(1<<(SV2017ParserLPAREN-279))|(1<<(SV2017ParserLBRACE-279)))) != 0) || (((_la-313)&-(0x1f+1)) == 0 && ((1<<uint((_la-313)))&((1<<(SV2017ParserAPOSTROPHE_LBRACE-313))|(1<<(SV2017ParserDOLAR-313))|(1<<(SV2017ParserNOT-313))|(1<<(SV2017ParserNEG-313))|(1<<(SV2017ParserNAND-313))|(1<<(SV2017ParserNOR-313))|(1<<(SV2017ParserXOR-313))|(1<<(SV2017ParserNXOR-313))|(1<<(SV2017ParserXORN-313)))) != 0) || (((_la-355)&-(0x1f+1)) == 0 && ((1<<uint((_la-355)))&((1<<(SV2017ParserPLUS-355))|(1<<(SV2017ParserMINUS-355))|(1<<(SV2017ParserAMPERSAND-355))|(1<<(SV2017ParserBAR-355))|(1<<(SV2017ParserINCR-355))|(1<<(SV2017ParserDECR-355))|(1<<(SV2017ParserAT-355))|(1<<(SV2017ParserDOUBLE_HASH-355)))) != 0) {
		{
			p.SetState(2264)
			p.Property_actual_arg()
		}

	}

	return localctx
}

// INamed_checker_port_connectionContext is an interface to support dynamic dispatch.
type INamed_checker_port_connectionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNamed_checker_port_connectionContext differentiates from other interfaces.
	IsNamed_checker_port_connectionContext()
}

type Named_checker_port_connectionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamed_checker_port_connectionContext() *Named_checker_port_connectionContext {
	var p = new(Named_checker_port_connectionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_named_checker_port_connection
	return p
}

func (*Named_checker_port_connectionContext) IsNamed_checker_port_connectionContext() {}

func NewNamed_checker_port_connectionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Named_checker_port_connectionContext {
	var p = new(Named_checker_port_connectionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_named_checker_port_connection

	return p
}

func (s *Named_checker_port_connectionContext) GetParser() antlr.Parser { return s.parser }

func (s *Named_checker_port_connectionContext) DOT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOT, 0)
}

func (s *Named_checker_port_connectionContext) MUL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserMUL, 0)
}

func (s *Named_checker_port_connectionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Named_checker_port_connectionContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Named_checker_port_connectionContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Named_checker_port_connectionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Named_checker_port_connectionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Named_checker_port_connectionContext) Property_actual_arg() IProperty_actual_argContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProperty_actual_argContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProperty_actual_argContext)
}

func (s *Named_checker_port_connectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Named_checker_port_connectionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Named_checker_port_connectionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterNamed_checker_port_connection(s)
	}
}

func (s *Named_checker_port_connectionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitNamed_checker_port_connection(s)
	}
}

func (p *SV2017Parser) Named_checker_port_connection() (localctx INamed_checker_port_connectionContext) {
	localctx = NewNamed_checker_port_connectionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 288, SV2017ParserRULE_named_checker_port_connection)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2270)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserTICK_IDENTIFIER || _la == SV2017ParserLPAREN {
		{
			p.SetState(2267)
			p.Attribute_instance()
		}

		p.SetState(2272)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2273)
		p.Match(SV2017ParserDOT)
	}
	p.SetState(2283)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserMUL:
		{
			p.SetState(2274)
			p.Match(SV2017ParserMUL)
		}

	case SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_SAMPLE, SV2017ParserKW_STD, SV2017ParserKW_TYPE_OPTION, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
		{
			p.SetState(2275)
			p.Identifier()
		}
		p.SetState(2281)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserLPAREN {
			{
				p.SetState(2276)
				p.Match(SV2017ParserLPAREN)
			}
			p.SetState(2278)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20))|(1<<(SV2017ParserKW_ACCEPT_ON-20))|(1<<(SV2017ParserKW_ALWAYS-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CASE-56))|(1<<(SV2017ParserKW_CONST-56))|(1<<(SV2017ParserKW_EDGE-56)))) != 0) || (((_la-109)&-(0x1f+1)) == 0 && ((1<<uint((_la-109)))&((1<<(SV2017ParserKW_EVENTUALLY-109))|(1<<(SV2017ParserKW_FIRST_MATCH-109))|(1<<(SV2017ParserKW_IF-109)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141))|(1<<(SV2017ParserKW_NEGEDGE-141))|(1<<(SV2017ParserKW_NEXTTIME-141))|(1<<(SV2017ParserKW_NOT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_POSEDGE-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173))|(1<<(SV2017ParserKW_REJECT_ON-173)))) != 0) || (((_la-214)&-(0x1f+1)) == 0 && ((1<<uint((_la-214)))&((1<<(SV2017ParserKW_S_ALWAYS-214))|(1<<(SV2017ParserKW_S_EVENTUALLY-214))|(1<<(SV2017ParserKW_S_NEXTTIME-214))|(1<<(SV2017ParserKW_SAMPLE-214))|(1<<(SV2017ParserKW_SHORTINT-214))|(1<<(SV2017ParserKW_SHORTREAL-214))|(1<<(SV2017ParserKW_SIGNED-214))|(1<<(SV2017ParserKW_STD-214))|(1<<(SV2017ParserKW_STRING-214))|(1<<(SV2017ParserKW_STRONG-214))|(1<<(SV2017ParserKW_SUPER-214))|(1<<(SV2017ParserKW_SYNC_ACCEPT_ON-214))|(1<<(SV2017ParserKW_SYNC_REJECT_ON-214))|(1<<(SV2017ParserKW_TAGGED-214)))) != 0) || (((_la-246)&-(0x1f+1)) == 0 && ((1<<uint((_la-246)))&((1<<(SV2017ParserKW_THIS-246))|(1<<(SV2017ParserKW_TIME-246))|(1<<(SV2017ParserKW_TYPE-246))|(1<<(SV2017ParserKW_TYPE_OPTION-246))|(1<<(SV2017ParserKW_UNSIGNED-246)))) != 0) || (((_la-279)&-(0x1f+1)) == 0 && ((1<<uint((_la-279)))&((1<<(SV2017ParserKW_WEAK-279))|(1<<(SV2017ParserTIME_LITERAL-279))|(1<<(SV2017ParserANY_BASED_NUMBER-279))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-279))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-279))|(1<<(SV2017ParserFIXED_POINT_NUMBER-279))|(1<<(SV2017ParserUNSIGNED_NUMBER-279))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-279))|(1<<(SV2017ParserSTRING_LITERAL-279))|(1<<(SV2017ParserC_IDENTIFIER-279))|(1<<(SV2017ParserTICK_IDENTIFIER-279))|(1<<(SV2017ParserESCAPED_IDENTIFIER-279))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-279))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-279))|(1<<(SV2017ParserLPAREN-279))|(1<<(SV2017ParserLBRACE-279)))) != 0) || (((_la-313)&-(0x1f+1)) == 0 && ((1<<uint((_la-313)))&((1<<(SV2017ParserAPOSTROPHE_LBRACE-313))|(1<<(SV2017ParserDOLAR-313))|(1<<(SV2017ParserNOT-313))|(1<<(SV2017ParserNEG-313))|(1<<(SV2017ParserNAND-313))|(1<<(SV2017ParserNOR-313))|(1<<(SV2017ParserXOR-313))|(1<<(SV2017ParserNXOR-313))|(1<<(SV2017ParserXORN-313)))) != 0) || (((_la-355)&-(0x1f+1)) == 0 && ((1<<uint((_la-355)))&((1<<(SV2017ParserPLUS-355))|(1<<(SV2017ParserMINUS-355))|(1<<(SV2017ParserAMPERSAND-355))|(1<<(SV2017ParserBAR-355))|(1<<(SV2017ParserINCR-355))|(1<<(SV2017ParserDECR-355))|(1<<(SV2017ParserAT-355))|(1<<(SV2017ParserDOUBLE_HASH-355)))) != 0) {
				{
					p.SetState(2277)
					p.Property_actual_arg()
				}

			}
			{
				p.SetState(2280)
				p.Match(SV2017ParserRPAREN)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IProcedural_assertion_statementContext is an interface to support dynamic dispatch.
type IProcedural_assertion_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProcedural_assertion_statementContext differentiates from other interfaces.
	IsProcedural_assertion_statementContext()
}

type Procedural_assertion_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProcedural_assertion_statementContext() *Procedural_assertion_statementContext {
	var p = new(Procedural_assertion_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_procedural_assertion_statement
	return p
}

func (*Procedural_assertion_statementContext) IsProcedural_assertion_statementContext() {}

func NewProcedural_assertion_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Procedural_assertion_statementContext {
	var p = new(Procedural_assertion_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_procedural_assertion_statement

	return p
}

func (s *Procedural_assertion_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Procedural_assertion_statementContext) Concurrent_assertion_statement() IConcurrent_assertion_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConcurrent_assertion_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConcurrent_assertion_statementContext)
}

func (s *Procedural_assertion_statementContext) Immediate_assertion_statement() IImmediate_assertion_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImmediate_assertion_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImmediate_assertion_statementContext)
}

func (s *Procedural_assertion_statementContext) Checker_instantiation() IChecker_instantiationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChecker_instantiationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChecker_instantiationContext)
}

func (s *Procedural_assertion_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Procedural_assertion_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Procedural_assertion_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterProcedural_assertion_statement(s)
	}
}

func (s *Procedural_assertion_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitProcedural_assertion_statement(s)
	}
}

func (p *SV2017Parser) Procedural_assertion_statement() (localctx IProcedural_assertion_statementContext) {
	localctx = NewProcedural_assertion_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 290, SV2017ParserRULE_procedural_assertion_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2288)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 165, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2285)
			p.Concurrent_assertion_statement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2286)
			p.Immediate_assertion_statement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2287)
			p.Checker_instantiation()
		}

	}

	return localctx
}

// IConcurrent_assertion_statementContext is an interface to support dynamic dispatch.
type IConcurrent_assertion_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConcurrent_assertion_statementContext differentiates from other interfaces.
	IsConcurrent_assertion_statementContext()
}

type Concurrent_assertion_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConcurrent_assertion_statementContext() *Concurrent_assertion_statementContext {
	var p = new(Concurrent_assertion_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_concurrent_assertion_statement
	return p
}

func (*Concurrent_assertion_statementContext) IsConcurrent_assertion_statementContext() {}

func NewConcurrent_assertion_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Concurrent_assertion_statementContext {
	var p = new(Concurrent_assertion_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_concurrent_assertion_statement

	return p
}

func (s *Concurrent_assertion_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Concurrent_assertion_statementContext) KW_PROPERTY() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_PROPERTY, 0)
}

func (s *Concurrent_assertion_statementContext) AllLPAREN() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserLPAREN)
}

func (s *Concurrent_assertion_statementContext) LPAREN(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, i)
}

func (s *Concurrent_assertion_statementContext) Property_spec() IProperty_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProperty_specContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProperty_specContext)
}

func (s *Concurrent_assertion_statementContext) AllRPAREN() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserRPAREN)
}

func (s *Concurrent_assertion_statementContext) RPAREN(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, i)
}

func (s *Concurrent_assertion_statementContext) Action_block() IAction_blockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAction_blockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAction_blockContext)
}

func (s *Concurrent_assertion_statementContext) KW_ASSERT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ASSERT, 0)
}

func (s *Concurrent_assertion_statementContext) KW_ASSUME() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ASSUME, 0)
}

func (s *Concurrent_assertion_statementContext) KW_COVER() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_COVER, 0)
}

func (s *Concurrent_assertion_statementContext) Statement_or_null() IStatement_or_nullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_or_nullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_or_nullContext)
}

func (s *Concurrent_assertion_statementContext) KW_SEQUENCE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_SEQUENCE, 0)
}

func (s *Concurrent_assertion_statementContext) Sequence_expr() ISequence_exprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISequence_exprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISequence_exprContext)
}

func (s *Concurrent_assertion_statementContext) Clocking_event() IClocking_eventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClocking_eventContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClocking_eventContext)
}

func (s *Concurrent_assertion_statementContext) KW_DISABLE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DISABLE, 0)
}

func (s *Concurrent_assertion_statementContext) KW_IFF() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_IFF, 0)
}

func (s *Concurrent_assertion_statementContext) Expression_or_dist() IExpression_or_distContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_or_distContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_or_distContext)
}

func (s *Concurrent_assertion_statementContext) KW_RESTRICT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_RESTRICT, 0)
}

func (s *Concurrent_assertion_statementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Concurrent_assertion_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Concurrent_assertion_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Concurrent_assertion_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterConcurrent_assertion_statement(s)
	}
}

func (s *Concurrent_assertion_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitConcurrent_assertion_statement(s)
	}
}

func (p *SV2017Parser) Concurrent_assertion_statement() (localctx IConcurrent_assertion_statementContext) {
	localctx = NewConcurrent_assertion_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 292, SV2017ParserRULE_concurrent_assertion_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2327)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_ASSERT, SV2017ParserKW_ASSUME:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2290)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SV2017ParserKW_ASSERT || _la == SV2017ParserKW_ASSUME) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(2291)
			p.Match(SV2017ParserKW_PROPERTY)
		}
		{
			p.SetState(2292)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(2293)
			p.Property_spec()
		}
		{
			p.SetState(2294)
			p.Match(SV2017ParserRPAREN)
		}
		{
			p.SetState(2295)
			p.Action_block()
		}

	case SV2017ParserKW_COVER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2297)
			p.Match(SV2017ParserKW_COVER)
		}
		p.SetState(2315)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SV2017ParserKW_PROPERTY:
			{
				p.SetState(2298)
				p.Match(SV2017ParserKW_PROPERTY)
			}
			{
				p.SetState(2299)
				p.Match(SV2017ParserLPAREN)
			}
			{
				p.SetState(2300)
				p.Property_spec()
			}

		case SV2017ParserKW_SEQUENCE:
			{
				p.SetState(2301)
				p.Match(SV2017ParserKW_SEQUENCE)
			}
			{
				p.SetState(2302)
				p.Match(SV2017ParserLPAREN)
			}
			p.SetState(2304)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 166, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(2303)
					p.Clocking_event()
				}

			}
			p.SetState(2312)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SV2017ParserKW_DISABLE {
				{
					p.SetState(2306)
					p.Match(SV2017ParserKW_DISABLE)
				}
				{
					p.SetState(2307)
					p.Match(SV2017ParserKW_IFF)
				}
				{
					p.SetState(2308)
					p.Match(SV2017ParserLPAREN)
				}
				{
					p.SetState(2309)
					p.Expression_or_dist()
				}
				{
					p.SetState(2310)
					p.Match(SV2017ParserRPAREN)
				}

			}
			{
				p.SetState(2314)
				p.sequence_expr(0)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(2317)
			p.Match(SV2017ParserRPAREN)
		}
		{
			p.SetState(2318)
			p.Statement_or_null()
		}

	case SV2017ParserKW_RESTRICT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2320)
			p.Match(SV2017ParserKW_RESTRICT)
		}
		{
			p.SetState(2321)
			p.Match(SV2017ParserKW_PROPERTY)
		}
		{
			p.SetState(2322)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(2323)
			p.Property_spec()
		}
		{
			p.SetState(2324)
			p.Match(SV2017ParserRPAREN)
		}
		{
			p.SetState(2325)
			p.Match(SV2017ParserSEMI)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAssertion_itemContext is an interface to support dynamic dispatch.
type IAssertion_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssertion_itemContext differentiates from other interfaces.
	IsAssertion_itemContext()
}

type Assertion_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssertion_itemContext() *Assertion_itemContext {
	var p = new(Assertion_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_assertion_item
	return p
}

func (*Assertion_itemContext) IsAssertion_itemContext() {}

func NewAssertion_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Assertion_itemContext {
	var p = new(Assertion_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_assertion_item

	return p
}

func (s *Assertion_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Assertion_itemContext) Concurrent_assertion_item() IConcurrent_assertion_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConcurrent_assertion_itemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConcurrent_assertion_itemContext)
}

func (s *Assertion_itemContext) Deferred_immediate_assertion_statement() IDeferred_immediate_assertion_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeferred_immediate_assertion_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeferred_immediate_assertion_statementContext)
}

func (s *Assertion_itemContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Assertion_itemContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Assertion_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Assertion_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Assertion_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterAssertion_item(s)
	}
}

func (s *Assertion_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitAssertion_item(s)
	}
}

func (p *SV2017Parser) Assertion_item() (localctx IAssertion_itemContext) {
	localctx = NewAssertion_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 294, SV2017ParserRULE_assertion_item)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2336)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 171, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2329)
			p.Concurrent_assertion_item()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(2333)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
			{
				p.SetState(2330)
				p.Identifier()
			}
			{
				p.SetState(2331)
				p.Match(SV2017ParserCOLON)
			}

		}
		{
			p.SetState(2335)
			p.Deferred_immediate_assertion_statement()
		}

	}

	return localctx
}

// IConcurrent_assertion_itemContext is an interface to support dynamic dispatch.
type IConcurrent_assertion_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConcurrent_assertion_itemContext differentiates from other interfaces.
	IsConcurrent_assertion_itemContext()
}

type Concurrent_assertion_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConcurrent_assertion_itemContext() *Concurrent_assertion_itemContext {
	var p = new(Concurrent_assertion_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_concurrent_assertion_item
	return p
}

func (*Concurrent_assertion_itemContext) IsConcurrent_assertion_itemContext() {}

func NewConcurrent_assertion_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Concurrent_assertion_itemContext {
	var p = new(Concurrent_assertion_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_concurrent_assertion_item

	return p
}

func (s *Concurrent_assertion_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Concurrent_assertion_itemContext) Concurrent_assertion_statement() IConcurrent_assertion_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConcurrent_assertion_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConcurrent_assertion_statementContext)
}

func (s *Concurrent_assertion_itemContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Concurrent_assertion_itemContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Concurrent_assertion_itemContext) Checker_instantiation() IChecker_instantiationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChecker_instantiationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChecker_instantiationContext)
}

func (s *Concurrent_assertion_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Concurrent_assertion_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Concurrent_assertion_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterConcurrent_assertion_item(s)
	}
}

func (s *Concurrent_assertion_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitConcurrent_assertion_item(s)
	}
}

func (p *SV2017Parser) Concurrent_assertion_item() (localctx IConcurrent_assertion_itemContext) {
	localctx = NewConcurrent_assertion_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 296, SV2017ParserRULE_concurrent_assertion_item)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2345)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 173, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(2341)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
			{
				p.SetState(2338)
				p.Identifier()
			}
			{
				p.SetState(2339)
				p.Match(SV2017ParserCOLON)
			}

		}
		{
			p.SetState(2343)
			p.Concurrent_assertion_statement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2344)
			p.Checker_instantiation()
		}

	}

	return localctx
}

// IImmediate_assertion_statementContext is an interface to support dynamic dispatch.
type IImmediate_assertion_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImmediate_assertion_statementContext differentiates from other interfaces.
	IsImmediate_assertion_statementContext()
}

type Immediate_assertion_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImmediate_assertion_statementContext() *Immediate_assertion_statementContext {
	var p = new(Immediate_assertion_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_immediate_assertion_statement
	return p
}

func (*Immediate_assertion_statementContext) IsImmediate_assertion_statementContext() {}

func NewImmediate_assertion_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Immediate_assertion_statementContext {
	var p = new(Immediate_assertion_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_immediate_assertion_statement

	return p
}

func (s *Immediate_assertion_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Immediate_assertion_statementContext) Simple_immediate_assertion_statement() ISimple_immediate_assertion_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimple_immediate_assertion_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimple_immediate_assertion_statementContext)
}

func (s *Immediate_assertion_statementContext) Deferred_immediate_assertion_statement() IDeferred_immediate_assertion_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeferred_immediate_assertion_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeferred_immediate_assertion_statementContext)
}

func (s *Immediate_assertion_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Immediate_assertion_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Immediate_assertion_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterImmediate_assertion_statement(s)
	}
}

func (s *Immediate_assertion_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitImmediate_assertion_statement(s)
	}
}

func (p *SV2017Parser) Immediate_assertion_statement() (localctx IImmediate_assertion_statementContext) {
	localctx = NewImmediate_assertion_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 298, SV2017ParserRULE_immediate_assertion_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2349)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 174, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2347)
			p.Simple_immediate_assertion_statement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2348)
			p.Deferred_immediate_assertion_statement()
		}

	}

	return localctx
}

// ISimple_immediate_assertion_statementContext is an interface to support dynamic dispatch.
type ISimple_immediate_assertion_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSimple_immediate_assertion_statementContext differentiates from other interfaces.
	IsSimple_immediate_assertion_statementContext()
}

type Simple_immediate_assertion_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimple_immediate_assertion_statementContext() *Simple_immediate_assertion_statementContext {
	var p = new(Simple_immediate_assertion_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_simple_immediate_assertion_statement
	return p
}

func (*Simple_immediate_assertion_statementContext) IsSimple_immediate_assertion_statementContext() {}

func NewSimple_immediate_assertion_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Simple_immediate_assertion_statementContext {
	var p = new(Simple_immediate_assertion_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_simple_immediate_assertion_statement

	return p
}

func (s *Simple_immediate_assertion_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Simple_immediate_assertion_statementContext) Simple_immediate_assert_statement() ISimple_immediate_assert_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimple_immediate_assert_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimple_immediate_assert_statementContext)
}

func (s *Simple_immediate_assertion_statementContext) Simple_immediate_assume_statement() ISimple_immediate_assume_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimple_immediate_assume_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimple_immediate_assume_statementContext)
}

func (s *Simple_immediate_assertion_statementContext) Simple_immediate_cover_statement() ISimple_immediate_cover_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimple_immediate_cover_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimple_immediate_cover_statementContext)
}

func (s *Simple_immediate_assertion_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Simple_immediate_assertion_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Simple_immediate_assertion_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterSimple_immediate_assertion_statement(s)
	}
}

func (s *Simple_immediate_assertion_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitSimple_immediate_assertion_statement(s)
	}
}

func (p *SV2017Parser) Simple_immediate_assertion_statement() (localctx ISimple_immediate_assertion_statementContext) {
	localctx = NewSimple_immediate_assertion_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 300, SV2017ParserRULE_simple_immediate_assertion_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2354)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_ASSERT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2351)
			p.Simple_immediate_assert_statement()
		}

	case SV2017ParserKW_ASSUME:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2352)
			p.Simple_immediate_assume_statement()
		}

	case SV2017ParserKW_COVER:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2353)
			p.Simple_immediate_cover_statement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISimple_immediate_assert_statementContext is an interface to support dynamic dispatch.
type ISimple_immediate_assert_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSimple_immediate_assert_statementContext differentiates from other interfaces.
	IsSimple_immediate_assert_statementContext()
}

type Simple_immediate_assert_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimple_immediate_assert_statementContext() *Simple_immediate_assert_statementContext {
	var p = new(Simple_immediate_assert_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_simple_immediate_assert_statement
	return p
}

func (*Simple_immediate_assert_statementContext) IsSimple_immediate_assert_statementContext() {}

func NewSimple_immediate_assert_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Simple_immediate_assert_statementContext {
	var p = new(Simple_immediate_assert_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_simple_immediate_assert_statement

	return p
}

func (s *Simple_immediate_assert_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Simple_immediate_assert_statementContext) KW_ASSERT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ASSERT, 0)
}

func (s *Simple_immediate_assert_statementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Simple_immediate_assert_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Simple_immediate_assert_statementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Simple_immediate_assert_statementContext) Action_block() IAction_blockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAction_blockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAction_blockContext)
}

func (s *Simple_immediate_assert_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Simple_immediate_assert_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Simple_immediate_assert_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterSimple_immediate_assert_statement(s)
	}
}

func (s *Simple_immediate_assert_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitSimple_immediate_assert_statement(s)
	}
}

func (p *SV2017Parser) Simple_immediate_assert_statement() (localctx ISimple_immediate_assert_statementContext) {
	localctx = NewSimple_immediate_assert_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 302, SV2017ParserRULE_simple_immediate_assert_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2356)
		p.Match(SV2017ParserKW_ASSERT)
	}
	{
		p.SetState(2357)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(2358)
		p.expression(0)
	}
	{
		p.SetState(2359)
		p.Match(SV2017ParserRPAREN)
	}
	{
		p.SetState(2360)
		p.Action_block()
	}

	return localctx
}

// ISimple_immediate_assume_statementContext is an interface to support dynamic dispatch.
type ISimple_immediate_assume_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSimple_immediate_assume_statementContext differentiates from other interfaces.
	IsSimple_immediate_assume_statementContext()
}

type Simple_immediate_assume_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimple_immediate_assume_statementContext() *Simple_immediate_assume_statementContext {
	var p = new(Simple_immediate_assume_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_simple_immediate_assume_statement
	return p
}

func (*Simple_immediate_assume_statementContext) IsSimple_immediate_assume_statementContext() {}

func NewSimple_immediate_assume_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Simple_immediate_assume_statementContext {
	var p = new(Simple_immediate_assume_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_simple_immediate_assume_statement

	return p
}

func (s *Simple_immediate_assume_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Simple_immediate_assume_statementContext) KW_ASSUME() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ASSUME, 0)
}

func (s *Simple_immediate_assume_statementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Simple_immediate_assume_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Simple_immediate_assume_statementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Simple_immediate_assume_statementContext) Action_block() IAction_blockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAction_blockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAction_blockContext)
}

func (s *Simple_immediate_assume_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Simple_immediate_assume_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Simple_immediate_assume_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterSimple_immediate_assume_statement(s)
	}
}

func (s *Simple_immediate_assume_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitSimple_immediate_assume_statement(s)
	}
}

func (p *SV2017Parser) Simple_immediate_assume_statement() (localctx ISimple_immediate_assume_statementContext) {
	localctx = NewSimple_immediate_assume_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 304, SV2017ParserRULE_simple_immediate_assume_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2362)
		p.Match(SV2017ParserKW_ASSUME)
	}
	{
		p.SetState(2363)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(2364)
		p.expression(0)
	}
	{
		p.SetState(2365)
		p.Match(SV2017ParserRPAREN)
	}
	{
		p.SetState(2366)
		p.Action_block()
	}

	return localctx
}

// ISimple_immediate_cover_statementContext is an interface to support dynamic dispatch.
type ISimple_immediate_cover_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSimple_immediate_cover_statementContext differentiates from other interfaces.
	IsSimple_immediate_cover_statementContext()
}

type Simple_immediate_cover_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimple_immediate_cover_statementContext() *Simple_immediate_cover_statementContext {
	var p = new(Simple_immediate_cover_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_simple_immediate_cover_statement
	return p
}

func (*Simple_immediate_cover_statementContext) IsSimple_immediate_cover_statementContext() {}

func NewSimple_immediate_cover_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Simple_immediate_cover_statementContext {
	var p = new(Simple_immediate_cover_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_simple_immediate_cover_statement

	return p
}

func (s *Simple_immediate_cover_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Simple_immediate_cover_statementContext) KW_COVER() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_COVER, 0)
}

func (s *Simple_immediate_cover_statementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Simple_immediate_cover_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Simple_immediate_cover_statementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Simple_immediate_cover_statementContext) Statement_or_null() IStatement_or_nullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_or_nullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_or_nullContext)
}

func (s *Simple_immediate_cover_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Simple_immediate_cover_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Simple_immediate_cover_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterSimple_immediate_cover_statement(s)
	}
}

func (s *Simple_immediate_cover_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitSimple_immediate_cover_statement(s)
	}
}

func (p *SV2017Parser) Simple_immediate_cover_statement() (localctx ISimple_immediate_cover_statementContext) {
	localctx = NewSimple_immediate_cover_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 306, SV2017ParserRULE_simple_immediate_cover_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2368)
		p.Match(SV2017ParserKW_COVER)
	}
	{
		p.SetState(2369)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(2370)
		p.expression(0)
	}
	{
		p.SetState(2371)
		p.Match(SV2017ParserRPAREN)
	}
	{
		p.SetState(2372)
		p.Statement_or_null()
	}

	return localctx
}

// IDeferred_immediate_assertion_statementContext is an interface to support dynamic dispatch.
type IDeferred_immediate_assertion_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeferred_immediate_assertion_statementContext differentiates from other interfaces.
	IsDeferred_immediate_assertion_statementContext()
}

type Deferred_immediate_assertion_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeferred_immediate_assertion_statementContext() *Deferred_immediate_assertion_statementContext {
	var p = new(Deferred_immediate_assertion_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_deferred_immediate_assertion_statement
	return p
}

func (*Deferred_immediate_assertion_statementContext) IsDeferred_immediate_assertion_statementContext() {
}

func NewDeferred_immediate_assertion_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Deferred_immediate_assertion_statementContext {
	var p = new(Deferred_immediate_assertion_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_deferred_immediate_assertion_statement

	return p
}

func (s *Deferred_immediate_assertion_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Deferred_immediate_assertion_statementContext) Deferred_immediate_assert_statement() IDeferred_immediate_assert_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeferred_immediate_assert_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeferred_immediate_assert_statementContext)
}

func (s *Deferred_immediate_assertion_statementContext) Deferred_immediate_assume_statement() IDeferred_immediate_assume_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeferred_immediate_assume_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeferred_immediate_assume_statementContext)
}

func (s *Deferred_immediate_assertion_statementContext) Deferred_immediate_cover_statement() IDeferred_immediate_cover_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeferred_immediate_cover_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeferred_immediate_cover_statementContext)
}

func (s *Deferred_immediate_assertion_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Deferred_immediate_assertion_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Deferred_immediate_assertion_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterDeferred_immediate_assertion_statement(s)
	}
}

func (s *Deferred_immediate_assertion_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitDeferred_immediate_assertion_statement(s)
	}
}

func (p *SV2017Parser) Deferred_immediate_assertion_statement() (localctx IDeferred_immediate_assertion_statementContext) {
	localctx = NewDeferred_immediate_assertion_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 308, SV2017ParserRULE_deferred_immediate_assertion_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2377)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_ASSERT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2374)
			p.Deferred_immediate_assert_statement()
		}

	case SV2017ParserKW_ASSUME:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2375)
			p.Deferred_immediate_assume_statement()
		}

	case SV2017ParserKW_COVER:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2376)
			p.Deferred_immediate_cover_statement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPrimitive_delayContext is an interface to support dynamic dispatch.
type IPrimitive_delayContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrimitive_delayContext differentiates from other interfaces.
	IsPrimitive_delayContext()
}

type Primitive_delayContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimitive_delayContext() *Primitive_delayContext {
	var p = new(Primitive_delayContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_primitive_delay
	return p
}

func (*Primitive_delayContext) IsPrimitive_delayContext() {}

func NewPrimitive_delayContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Primitive_delayContext {
	var p = new(Primitive_delayContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_primitive_delay

	return p
}

func (s *Primitive_delayContext) GetParser() antlr.Parser { return s.parser }

func (s *Primitive_delayContext) HASH() antlr.TerminalNode {
	return s.GetToken(SV2017ParserHASH, 0)
}

func (s *Primitive_delayContext) UNSIGNED_NUMBER() antlr.TerminalNode {
	return s.GetToken(SV2017ParserUNSIGNED_NUMBER, 0)
}

func (s *Primitive_delayContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Primitive_delayContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Primitive_delayContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPrimitive_delay(s)
	}
}

func (s *Primitive_delayContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPrimitive_delay(s)
	}
}

func (p *SV2017Parser) Primitive_delay() (localctx IPrimitive_delayContext) {
	localctx = NewPrimitive_delayContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 310, SV2017ParserRULE_primitive_delay)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2379)
		p.Match(SV2017ParserHASH)
	}
	{
		p.SetState(2380)
		p.Match(SV2017ParserUNSIGNED_NUMBER)
	}

	return localctx
}

// IDeferred_immediate_assert_statementContext is an interface to support dynamic dispatch.
type IDeferred_immediate_assert_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeferred_immediate_assert_statementContext differentiates from other interfaces.
	IsDeferred_immediate_assert_statementContext()
}

type Deferred_immediate_assert_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeferred_immediate_assert_statementContext() *Deferred_immediate_assert_statementContext {
	var p = new(Deferred_immediate_assert_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_deferred_immediate_assert_statement
	return p
}

func (*Deferred_immediate_assert_statementContext) IsDeferred_immediate_assert_statementContext() {}

func NewDeferred_immediate_assert_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Deferred_immediate_assert_statementContext {
	var p = new(Deferred_immediate_assert_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_deferred_immediate_assert_statement

	return p
}

func (s *Deferred_immediate_assert_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Deferred_immediate_assert_statementContext) KW_ASSERT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ASSERT, 0)
}

func (s *Deferred_immediate_assert_statementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Deferred_immediate_assert_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Deferred_immediate_assert_statementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Deferred_immediate_assert_statementContext) Action_block() IAction_blockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAction_blockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAction_blockContext)
}

func (s *Deferred_immediate_assert_statementContext) KW_FINAL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_FINAL, 0)
}

func (s *Deferred_immediate_assert_statementContext) Primitive_delay() IPrimitive_delayContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimitive_delayContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimitive_delayContext)
}

func (s *Deferred_immediate_assert_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Deferred_immediate_assert_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Deferred_immediate_assert_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterDeferred_immediate_assert_statement(s)
	}
}

func (s *Deferred_immediate_assert_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitDeferred_immediate_assert_statement(s)
	}
}

func (p *SV2017Parser) Deferred_immediate_assert_statement() (localctx IDeferred_immediate_assert_statementContext) {
	localctx = NewDeferred_immediate_assert_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 312, SV2017ParserRULE_deferred_immediate_assert_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2382)
		p.Match(SV2017ParserKW_ASSERT)
	}
	p.SetState(2385)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_FINAL:
		{
			p.SetState(2383)
			p.Match(SV2017ParserKW_FINAL)
		}

	case SV2017ParserHASH:
		{
			p.SetState(2384)
			p.Primitive_delay()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(2387)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(2388)
		p.expression(0)
	}
	{
		p.SetState(2389)
		p.Match(SV2017ParserRPAREN)
	}
	{
		p.SetState(2390)
		p.Action_block()
	}

	return localctx
}

// IDeferred_immediate_assume_statementContext is an interface to support dynamic dispatch.
type IDeferred_immediate_assume_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeferred_immediate_assume_statementContext differentiates from other interfaces.
	IsDeferred_immediate_assume_statementContext()
}

type Deferred_immediate_assume_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeferred_immediate_assume_statementContext() *Deferred_immediate_assume_statementContext {
	var p = new(Deferred_immediate_assume_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_deferred_immediate_assume_statement
	return p
}

func (*Deferred_immediate_assume_statementContext) IsDeferred_immediate_assume_statementContext() {}

func NewDeferred_immediate_assume_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Deferred_immediate_assume_statementContext {
	var p = new(Deferred_immediate_assume_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_deferred_immediate_assume_statement

	return p
}

func (s *Deferred_immediate_assume_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Deferred_immediate_assume_statementContext) KW_ASSUME() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ASSUME, 0)
}

func (s *Deferred_immediate_assume_statementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Deferred_immediate_assume_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Deferred_immediate_assume_statementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Deferred_immediate_assume_statementContext) Action_block() IAction_blockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAction_blockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAction_blockContext)
}

func (s *Deferred_immediate_assume_statementContext) KW_FINAL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_FINAL, 0)
}

func (s *Deferred_immediate_assume_statementContext) Primitive_delay() IPrimitive_delayContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimitive_delayContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimitive_delayContext)
}

func (s *Deferred_immediate_assume_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Deferred_immediate_assume_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Deferred_immediate_assume_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterDeferred_immediate_assume_statement(s)
	}
}

func (s *Deferred_immediate_assume_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitDeferred_immediate_assume_statement(s)
	}
}

func (p *SV2017Parser) Deferred_immediate_assume_statement() (localctx IDeferred_immediate_assume_statementContext) {
	localctx = NewDeferred_immediate_assume_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 314, SV2017ParserRULE_deferred_immediate_assume_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2392)
		p.Match(SV2017ParserKW_ASSUME)
	}
	p.SetState(2395)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_FINAL:
		{
			p.SetState(2393)
			p.Match(SV2017ParserKW_FINAL)
		}

	case SV2017ParserHASH:
		{
			p.SetState(2394)
			p.Primitive_delay()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(2397)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(2398)
		p.expression(0)
	}
	{
		p.SetState(2399)
		p.Match(SV2017ParserRPAREN)
	}
	{
		p.SetState(2400)
		p.Action_block()
	}

	return localctx
}

// IDeferred_immediate_cover_statementContext is an interface to support dynamic dispatch.
type IDeferred_immediate_cover_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeferred_immediate_cover_statementContext differentiates from other interfaces.
	IsDeferred_immediate_cover_statementContext()
}

type Deferred_immediate_cover_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeferred_immediate_cover_statementContext() *Deferred_immediate_cover_statementContext {
	var p = new(Deferred_immediate_cover_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_deferred_immediate_cover_statement
	return p
}

func (*Deferred_immediate_cover_statementContext) IsDeferred_immediate_cover_statementContext() {}

func NewDeferred_immediate_cover_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Deferred_immediate_cover_statementContext {
	var p = new(Deferred_immediate_cover_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_deferred_immediate_cover_statement

	return p
}

func (s *Deferred_immediate_cover_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Deferred_immediate_cover_statementContext) KW_COVER() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_COVER, 0)
}

func (s *Deferred_immediate_cover_statementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Deferred_immediate_cover_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Deferred_immediate_cover_statementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Deferred_immediate_cover_statementContext) Statement_or_null() IStatement_or_nullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_or_nullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_or_nullContext)
}

func (s *Deferred_immediate_cover_statementContext) KW_FINAL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_FINAL, 0)
}

func (s *Deferred_immediate_cover_statementContext) Primitive_delay() IPrimitive_delayContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimitive_delayContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimitive_delayContext)
}

func (s *Deferred_immediate_cover_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Deferred_immediate_cover_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Deferred_immediate_cover_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterDeferred_immediate_cover_statement(s)
	}
}

func (s *Deferred_immediate_cover_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitDeferred_immediate_cover_statement(s)
	}
}

func (p *SV2017Parser) Deferred_immediate_cover_statement() (localctx IDeferred_immediate_cover_statementContext) {
	localctx = NewDeferred_immediate_cover_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 316, SV2017ParserRULE_deferred_immediate_cover_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2402)
		p.Match(SV2017ParserKW_COVER)
	}
	p.SetState(2405)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_FINAL:
		{
			p.SetState(2403)
			p.Match(SV2017ParserKW_FINAL)
		}

	case SV2017ParserHASH:
		{
			p.SetState(2404)
			p.Primitive_delay()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(2407)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(2408)
		p.expression(0)
	}
	{
		p.SetState(2409)
		p.Match(SV2017ParserRPAREN)
	}
	{
		p.SetState(2410)
		p.Statement_or_null()
	}

	return localctx
}

// IWeight_specificationContext is an interface to support dynamic dispatch.
type IWeight_specificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWeight_specificationContext differentiates from other interfaces.
	IsWeight_specificationContext()
}

type Weight_specificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWeight_specificationContext() *Weight_specificationContext {
	var p = new(Weight_specificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_weight_specification
	return p
}

func (*Weight_specificationContext) IsWeight_specificationContext() {}

func NewWeight_specificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Weight_specificationContext {
	var p = new(Weight_specificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_weight_specification

	return p
}

func (s *Weight_specificationContext) GetParser() antlr.Parser { return s.parser }

func (s *Weight_specificationContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Weight_specificationContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Weight_specificationContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Weight_specificationContext) Integral_number() IIntegral_numberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntegral_numberContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntegral_numberContext)
}

func (s *Weight_specificationContext) Ps_identifier() IPs_identifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPs_identifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPs_identifierContext)
}

func (s *Weight_specificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Weight_specificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Weight_specificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterWeight_specification(s)
	}
}

func (s *Weight_specificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitWeight_specification(s)
	}
}

func (p *SV2017Parser) Weight_specification() (localctx IWeight_specificationContext) {
	localctx = NewWeight_specificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 318, SV2017ParserRULE_weight_specification)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2418)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserLPAREN:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2412)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(2413)
			p.expression(0)
		}
		{
			p.SetState(2414)
			p.Match(SV2017ParserRPAREN)
		}

	case SV2017ParserANY_BASED_NUMBER, SV2017ParserBASED_NUMBER_WITH_SIZE, SV2017ParserUNSIGNED_NUMBER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2416)
			p.Integral_number()
		}

	case SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_SAMPLE, SV2017ParserKW_STD, SV2017ParserKW_TYPE_OPTION, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2417)
			p.Ps_identifier()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IProduction_itemContext is an interface to support dynamic dispatch.
type IProduction_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProduction_itemContext differentiates from other interfaces.
	IsProduction_itemContext()
}

type Production_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProduction_itemContext() *Production_itemContext {
	var p = new(Production_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_production_item
	return p
}

func (*Production_itemContext) IsProduction_itemContext() {}

func NewProduction_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Production_itemContext {
	var p = new(Production_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_production_item

	return p
}

func (s *Production_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Production_itemContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Production_itemContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Production_itemContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Production_itemContext) List_of_arguments() IList_of_argumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_argumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_argumentsContext)
}

func (s *Production_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Production_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Production_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterProduction_item(s)
	}
}

func (s *Production_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitProduction_item(s)
	}
}

func (p *SV2017Parser) Production_item() (localctx IProduction_itemContext) {
	localctx = NewProduction_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 320, SV2017ParserRULE_production_item)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2420)
		p.Identifier()
	}
	p.SetState(2426)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserLPAREN {
		{
			p.SetState(2421)
			p.Match(SV2017ParserLPAREN)
		}
		p.SetState(2423)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TAGGED-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserTIME_LITERAL-260)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(SV2017ParserANY_BASED_NUMBER-292))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-292))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-292))|(1<<(SV2017ParserFIXED_POINT_NUMBER-292))|(1<<(SV2017ParserUNSIGNED_NUMBER-292))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-292))|(1<<(SV2017ParserSTRING_LITERAL-292))|(1<<(SV2017ParserC_IDENTIFIER-292))|(1<<(SV2017ParserTICK_IDENTIFIER-292))|(1<<(SV2017ParserESCAPED_IDENTIFIER-292))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-292))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-292))|(1<<(SV2017ParserLPAREN-292))|(1<<(SV2017ParserLBRACE-292))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-292))|(1<<(SV2017ParserDOLAR-292))|(1<<(SV2017ParserNOT-292))|(1<<(SV2017ParserNEG-292))|(1<<(SV2017ParserNAND-292))|(1<<(SV2017ParserNOR-292)))) != 0) || (((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324))|(1<<(SV2017ParserCOMMA-324))|(1<<(SV2017ParserDOT-324))|(1<<(SV2017ParserPLUS-324)))) != 0) || (((_la-356)&-(0x1f+1)) == 0 && ((1<<uint((_la-356)))&((1<<(SV2017ParserMINUS-356))|(1<<(SV2017ParserAMPERSAND-356))|(1<<(SV2017ParserBAR-356))|(1<<(SV2017ParserINCR-356))|(1<<(SV2017ParserDECR-356)))) != 0) {
			{
				p.SetState(2422)
				p.List_of_arguments()
			}

		}
		{
			p.SetState(2425)
			p.Match(SV2017ParserRPAREN)
		}

	}

	return localctx
}

// IRs_code_blockContext is an interface to support dynamic dispatch.
type IRs_code_blockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRs_code_blockContext differentiates from other interfaces.
	IsRs_code_blockContext()
}

type Rs_code_blockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRs_code_blockContext() *Rs_code_blockContext {
	var p = new(Rs_code_blockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_rs_code_block
	return p
}

func (*Rs_code_blockContext) IsRs_code_blockContext() {}

func NewRs_code_blockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Rs_code_blockContext {
	var p = new(Rs_code_blockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_rs_code_block

	return p
}

func (s *Rs_code_blockContext) GetParser() antlr.Parser { return s.parser }

func (s *Rs_code_blockContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLBRACE, 0)
}

func (s *Rs_code_blockContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRBRACE, 0)
}

func (s *Rs_code_blockContext) AllData_declaration() []IData_declarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IData_declarationContext)(nil)).Elem())
	var tst = make([]IData_declarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IData_declarationContext)
		}
	}

	return tst
}

func (s *Rs_code_blockContext) Data_declaration(i int) IData_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_declarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IData_declarationContext)
}

func (s *Rs_code_blockContext) AllStatement_or_null() []IStatement_or_nullContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatement_or_nullContext)(nil)).Elem())
	var tst = make([]IStatement_or_nullContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatement_or_nullContext)
		}
	}

	return tst
}

func (s *Rs_code_blockContext) Statement_or_null(i int) IStatement_or_nullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_or_nullContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatement_or_nullContext)
}

func (s *Rs_code_blockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rs_code_blockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Rs_code_blockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterRs_code_block(s)
	}
}

func (s *Rs_code_blockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitRs_code_block(s)
	}
}

func (p *SV2017Parser) Rs_code_block() (localctx IRs_code_blockContext) {
	localctx = NewRs_code_blockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 322, SV2017ParserRULE_rs_code_block)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2428)
		p.Match(SV2017ParserLBRACE)
	}
	p.SetState(2432)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 183, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2429)
				p.Data_declaration()
			}

		}
		p.SetState(2434)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 183, p.GetParserRuleContext())
	}
	p.SetState(2438)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20))|(1<<(SV2017ParserKW_ASSERT-20))|(1<<(SV2017ParserKW_ASSIGN-20))|(1<<(SV2017ParserKW_ASSUME-20)))) != 0) || (((_la-52)&-(0x1f+1)) == 0 && ((1<<uint((_la-52)))&((1<<(SV2017ParserKW_BEGIN-52))|(1<<(SV2017ParserKW_BIT-52))|(1<<(SV2017ParserKW_BREAK-52))|(1<<(SV2017ParserKW_BYTE-52))|(1<<(SV2017ParserKW_CASE-52))|(1<<(SV2017ParserKW_CASEX-52))|(1<<(SV2017ParserKW_CASEZ-52))|(1<<(SV2017ParserKW_CONST-52))|(1<<(SV2017ParserKW_CONTINUE-52))|(1<<(SV2017ParserKW_COVER-52))|(1<<(SV2017ParserKW_DEASSIGN-52)))) != 0) || (((_la-84)&-(0x1f+1)) == 0 && ((1<<uint((_la-84)))&((1<<(SV2017ParserKW_DISABLE-84))|(1<<(SV2017ParserKW_DO-84))|(1<<(SV2017ParserKW_EXPECT-84)))) != 0) || (((_la-116)&-(0x1f+1)) == 0 && ((1<<uint((_la-116)))&((1<<(SV2017ParserKW_FOR-116))|(1<<(SV2017ParserKW_FORCE-116))|(1<<(SV2017ParserKW_FOREACH-116))|(1<<(SV2017ParserKW_FOREVER-116))|(1<<(SV2017ParserKW_FORK-116))|(1<<(SV2017ParserKW_IF-116))|(1<<(SV2017ParserKW_INT-116))|(1<<(SV2017ParserKW_INTEGER-116)))) != 0) || (((_la-152)&-(0x1f+1)) == 0 && ((1<<uint((_la-152)))&((1<<(SV2017ParserKW_LOCAL-152))|(1<<(SV2017ParserKW_LOGIC-152))|(1<<(SV2017ParserKW_LONGINT-152))|(1<<(SV2017ParserKW_NULL-152))|(1<<(SV2017ParserKW_OPTION-152))|(1<<(SV2017ParserKW_PRIORITY-152)))) != 0) || (((_la-196)&-(0x1f+1)) == 0 && ((1<<uint((_la-196)))&((1<<(SV2017ParserKW_RANDCASE-196))|(1<<(SV2017ParserKW_RANDOMIZE-196))|(1<<(SV2017ParserKW_RANDSEQUENCE-196))|(1<<(SV2017ParserKW_REAL-196))|(1<<(SV2017ParserKW_REALTIME-196))|(1<<(SV2017ParserKW_REG-196))|(1<<(SV2017ParserKW_RELEASE-196))|(1<<(SV2017ParserKW_REPEAT-196))|(1<<(SV2017ParserKW_RESTRICT-196))|(1<<(SV2017ParserKW_RETURN-196))|(1<<(SV2017ParserKW_SAMPLE-196))|(1<<(SV2017ParserKW_SHORTINT-196))|(1<<(SV2017ParserKW_SHORTREAL-196))|(1<<(SV2017ParserKW_SIGNED-196)))) != 0) || (((_la-232)&-(0x1f+1)) == 0 && ((1<<uint((_la-232)))&((1<<(SV2017ParserKW_STD-232))|(1<<(SV2017ParserKW_STRING-232))|(1<<(SV2017ParserKW_SUPER-232))|(1<<(SV2017ParserKW_THIS-232))|(1<<(SV2017ParserKW_TIME-232))|(1<<(SV2017ParserKW_TYPE-232))|(1<<(SV2017ParserKW_TYPE_OPTION-232)))) != 0) || (((_la-264)&-(0x1f+1)) == 0 && ((1<<uint((_la-264)))&((1<<(SV2017ParserKW_UNIQUE-264))|(1<<(SV2017ParserKW_UNIQUE0-264))|(1<<(SV2017ParserKW_UNSIGNED-264))|(1<<(SV2017ParserKW_VOID-264))|(1<<(SV2017ParserKW_WAIT-264))|(1<<(SV2017ParserKW_WAIT_ORDER-264))|(1<<(SV2017ParserKW_WHILE-264))|(1<<(SV2017ParserTIME_LITERAL-264))|(1<<(SV2017ParserANY_BASED_NUMBER-264))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-264))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-264))|(1<<(SV2017ParserFIXED_POINT_NUMBER-264)))) != 0) || (((_la-296)&-(0x1f+1)) == 0 && ((1<<uint((_la-296)))&((1<<(SV2017ParserUNSIGNED_NUMBER-296))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-296))|(1<<(SV2017ParserSTRING_LITERAL-296))|(1<<(SV2017ParserC_IDENTIFIER-296))|(1<<(SV2017ParserTICK_IDENTIFIER-296))|(1<<(SV2017ParserESCAPED_IDENTIFIER-296))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-296))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-296))|(1<<(SV2017ParserSEMI-296))|(1<<(SV2017ParserLPAREN-296))|(1<<(SV2017ParserLBRACE-296))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-296))|(1<<(SV2017ParserDOLAR-296)))) != 0) || (((_la-366)&-(0x1f+1)) == 0 && ((1<<uint((_la-366)))&((1<<(SV2017ParserARROW-366))|(1<<(SV2017ParserDOUBLE_RIGHT_ARROW-366))|(1<<(SV2017ParserINCR-366))|(1<<(SV2017ParserDECR-366))|(1<<(SV2017ParserAT-366))|(1<<(SV2017ParserHASH-366))|(1<<(SV2017ParserDOUBLE_HASH-366)))) != 0) {
		{
			p.SetState(2435)
			p.Statement_or_null()
		}

		p.SetState(2440)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2441)
		p.Match(SV2017ParserRBRACE)
	}

	return localctx
}

// IRandsequence_statementContext is an interface to support dynamic dispatch.
type IRandsequence_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRandsequence_statementContext differentiates from other interfaces.
	IsRandsequence_statementContext()
}

type Randsequence_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRandsequence_statementContext() *Randsequence_statementContext {
	var p = new(Randsequence_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_randsequence_statement
	return p
}

func (*Randsequence_statementContext) IsRandsequence_statementContext() {}

func NewRandsequence_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Randsequence_statementContext {
	var p = new(Randsequence_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_randsequence_statement

	return p
}

func (s *Randsequence_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Randsequence_statementContext) KW_RANDSEQUENCE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_RANDSEQUENCE, 0)
}

func (s *Randsequence_statementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Randsequence_statementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Randsequence_statementContext) KW_ENDSEQUENCE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ENDSEQUENCE, 0)
}

func (s *Randsequence_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Randsequence_statementContext) AllProduction() []IProductionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProductionContext)(nil)).Elem())
	var tst = make([]IProductionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProductionContext)
		}
	}

	return tst
}

func (s *Randsequence_statementContext) Production(i int) IProductionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProductionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProductionContext)
}

func (s *Randsequence_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Randsequence_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Randsequence_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterRandsequence_statement(s)
	}
}

func (s *Randsequence_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitRandsequence_statement(s)
	}
}

func (p *SV2017Parser) Randsequence_statement() (localctx IRandsequence_statementContext) {
	localctx = NewRandsequence_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 324, SV2017ParserRULE_randsequence_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2443)
		p.Match(SV2017ParserKW_RANDSEQUENCE)
	}
	{
		p.SetState(2444)
		p.Match(SV2017ParserLPAREN)
	}
	p.SetState(2446)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
		{
			p.SetState(2445)
			p.Identifier()
		}

	}
	{
		p.SetState(2448)
		p.Match(SV2017ParserRPAREN)
	}
	p.SetState(2450)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == SV2017ParserKW_DOLAR_ROOT || (((_la-35)&-(0x1f+1)) == 0 && ((1<<uint((_la-35)))&((1<<(SV2017ParserKW_DOLAR_UNIT-35))|(1<<(SV2017ParserKW_BIT-35))|(1<<(SV2017ParserKW_BYTE-35))|(1<<(SV2017ParserKW_CHANDLE-35)))) != 0) || _la == SV2017ParserKW_ENUM || _la == SV2017ParserKW_EVENT || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-174)&-(0x1f+1)) == 0 && ((1<<uint((_la-174)))&((1<<(SV2017ParserKW_OPTION-174))|(1<<(SV2017ParserKW_RANDOMIZE-174))|(1<<(SV2017ParserKW_REAL-174))|(1<<(SV2017ParserKW_REALTIME-174))|(1<<(SV2017ParserKW_REG-174)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_STRUCT-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNION-260))|(1<<(SV2017ParserKW_VIRTUAL-260))|(1<<(SV2017ParserKW_VOID-260)))) != 0) || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
		{
			p.SetState(2449)
			p.Production()
		}

		p.SetState(2452)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2454)
		p.Match(SV2017ParserKW_ENDSEQUENCE)
	}

	return localctx
}

// IRs_prodContext is an interface to support dynamic dispatch.
type IRs_prodContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRs_prodContext differentiates from other interfaces.
	IsRs_prodContext()
}

type Rs_prodContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRs_prodContext() *Rs_prodContext {
	var p = new(Rs_prodContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_rs_prod
	return p
}

func (*Rs_prodContext) IsRs_prodContext() {}

func NewRs_prodContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Rs_prodContext {
	var p = new(Rs_prodContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_rs_prod

	return p
}

func (s *Rs_prodContext) GetParser() antlr.Parser { return s.parser }

func (s *Rs_prodContext) Production_item() IProduction_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProduction_itemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProduction_itemContext)
}

func (s *Rs_prodContext) Rs_code_block() IRs_code_blockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRs_code_blockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRs_code_blockContext)
}

func (s *Rs_prodContext) Rs_if_else() IRs_if_elseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRs_if_elseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRs_if_elseContext)
}

func (s *Rs_prodContext) Rs_repeat() IRs_repeatContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRs_repeatContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRs_repeatContext)
}

func (s *Rs_prodContext) Rs_case() IRs_caseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRs_caseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRs_caseContext)
}

func (s *Rs_prodContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rs_prodContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Rs_prodContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterRs_prod(s)
	}
}

func (s *Rs_prodContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitRs_prod(s)
	}
}

func (p *SV2017Parser) Rs_prod() (localctx IRs_prodContext) {
	localctx = NewRs_prodContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 326, SV2017ParserRULE_rs_prod)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2461)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_SAMPLE, SV2017ParserKW_STD, SV2017ParserKW_TYPE_OPTION, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2456)
			p.Production_item()
		}

	case SV2017ParserLBRACE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2457)
			p.Rs_code_block()
		}

	case SV2017ParserKW_IF:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2458)
			p.Rs_if_else()
		}

	case SV2017ParserKW_REPEAT:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2459)
			p.Rs_repeat()
		}

	case SV2017ParserKW_CASE:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2460)
			p.Rs_case()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IRs_if_elseContext is an interface to support dynamic dispatch.
type IRs_if_elseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRs_if_elseContext differentiates from other interfaces.
	IsRs_if_elseContext()
}

type Rs_if_elseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRs_if_elseContext() *Rs_if_elseContext {
	var p = new(Rs_if_elseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_rs_if_else
	return p
}

func (*Rs_if_elseContext) IsRs_if_elseContext() {}

func NewRs_if_elseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Rs_if_elseContext {
	var p = new(Rs_if_elseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_rs_if_else

	return p
}

func (s *Rs_if_elseContext) GetParser() antlr.Parser { return s.parser }

func (s *Rs_if_elseContext) KW_IF() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_IF, 0)
}

func (s *Rs_if_elseContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Rs_if_elseContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Rs_if_elseContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Rs_if_elseContext) AllProduction_item() []IProduction_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProduction_itemContext)(nil)).Elem())
	var tst = make([]IProduction_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProduction_itemContext)
		}
	}

	return tst
}

func (s *Rs_if_elseContext) Production_item(i int) IProduction_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProduction_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProduction_itemContext)
}

func (s *Rs_if_elseContext) KW_ELSE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ELSE, 0)
}

func (s *Rs_if_elseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rs_if_elseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Rs_if_elseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterRs_if_else(s)
	}
}

func (s *Rs_if_elseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitRs_if_else(s)
	}
}

func (p *SV2017Parser) Rs_if_else() (localctx IRs_if_elseContext) {
	localctx = NewRs_if_elseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 328, SV2017ParserRULE_rs_if_else)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2463)
		p.Match(SV2017ParserKW_IF)
	}
	{
		p.SetState(2464)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(2465)
		p.expression(0)
	}
	{
		p.SetState(2466)
		p.Match(SV2017ParserRPAREN)
	}
	{
		p.SetState(2467)
		p.Production_item()
	}
	p.SetState(2471)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_ELSE:
		{
			p.SetState(2468)
			p.Match(SV2017ParserKW_ELSE)
		}
		{
			p.SetState(2469)
			p.Production_item()
		}

	case SV2017ParserKW_CASE, SV2017ParserKW_IF, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_REPEAT, SV2017ParserKW_SAMPLE, SV2017ParserKW_STD, SV2017ParserKW_TYPE_OPTION, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSEMI, SV2017ParserLBRACE, SV2017ParserBAR, SV2017ParserDIST_WEIGHT_ASSIGN:

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IRs_repeatContext is an interface to support dynamic dispatch.
type IRs_repeatContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRs_repeatContext differentiates from other interfaces.
	IsRs_repeatContext()
}

type Rs_repeatContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRs_repeatContext() *Rs_repeatContext {
	var p = new(Rs_repeatContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_rs_repeat
	return p
}

func (*Rs_repeatContext) IsRs_repeatContext() {}

func NewRs_repeatContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Rs_repeatContext {
	var p = new(Rs_repeatContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_rs_repeat

	return p
}

func (s *Rs_repeatContext) GetParser() antlr.Parser { return s.parser }

func (s *Rs_repeatContext) KW_REPEAT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_REPEAT, 0)
}

func (s *Rs_repeatContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Rs_repeatContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Rs_repeatContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Rs_repeatContext) Production_item() IProduction_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProduction_itemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProduction_itemContext)
}

func (s *Rs_repeatContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rs_repeatContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Rs_repeatContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterRs_repeat(s)
	}
}

func (s *Rs_repeatContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitRs_repeat(s)
	}
}

func (p *SV2017Parser) Rs_repeat() (localctx IRs_repeatContext) {
	localctx = NewRs_repeatContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 330, SV2017ParserRULE_rs_repeat)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2473)
		p.Match(SV2017ParserKW_REPEAT)
	}
	{
		p.SetState(2474)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(2475)
		p.expression(0)
	}
	{
		p.SetState(2476)
		p.Match(SV2017ParserRPAREN)
	}
	{
		p.SetState(2477)
		p.Production_item()
	}

	return localctx
}

// IRs_caseContext is an interface to support dynamic dispatch.
type IRs_caseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRs_caseContext differentiates from other interfaces.
	IsRs_caseContext()
}

type Rs_caseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRs_caseContext() *Rs_caseContext {
	var p = new(Rs_caseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_rs_case
	return p
}

func (*Rs_caseContext) IsRs_caseContext() {}

func NewRs_caseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Rs_caseContext {
	var p = new(Rs_caseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_rs_case

	return p
}

func (s *Rs_caseContext) GetParser() antlr.Parser { return s.parser }

func (s *Rs_caseContext) KW_CASE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_CASE, 0)
}

func (s *Rs_caseContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Rs_caseContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Rs_caseContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Rs_caseContext) KW_ENDCASE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ENDCASE, 0)
}

func (s *Rs_caseContext) AllRs_case_item() []IRs_case_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRs_case_itemContext)(nil)).Elem())
	var tst = make([]IRs_case_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRs_case_itemContext)
		}
	}

	return tst
}

func (s *Rs_caseContext) Rs_case_item(i int) IRs_case_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRs_case_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRs_case_itemContext)
}

func (s *Rs_caseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rs_caseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Rs_caseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterRs_case(s)
	}
}

func (s *Rs_caseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitRs_case(s)
	}
}

func (p *SV2017Parser) Rs_case() (localctx IRs_caseContext) {
	localctx = NewRs_caseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 332, SV2017ParserRULE_rs_case)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2479)
		p.Match(SV2017ParserKW_CASE)
	}
	{
		p.SetState(2480)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(2481)
		p.expression(0)
	}
	{
		p.SetState(2482)
		p.Match(SV2017ParserRPAREN)
	}
	p.SetState(2484)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56))|(1<<(SV2017ParserKW_DEFAULT-56)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TAGGED-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserTIME_LITERAL-260)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(SV2017ParserANY_BASED_NUMBER-292))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-292))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-292))|(1<<(SV2017ParserFIXED_POINT_NUMBER-292))|(1<<(SV2017ParserUNSIGNED_NUMBER-292))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-292))|(1<<(SV2017ParserSTRING_LITERAL-292))|(1<<(SV2017ParserC_IDENTIFIER-292))|(1<<(SV2017ParserTICK_IDENTIFIER-292))|(1<<(SV2017ParserESCAPED_IDENTIFIER-292))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-292))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-292))|(1<<(SV2017ParserLPAREN-292))|(1<<(SV2017ParserLBRACE-292))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-292))|(1<<(SV2017ParserDOLAR-292))|(1<<(SV2017ParserNOT-292))|(1<<(SV2017ParserNEG-292))|(1<<(SV2017ParserNAND-292))|(1<<(SV2017ParserNOR-292)))) != 0) || (((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324))|(1<<(SV2017ParserPLUS-324)))) != 0) || (((_la-356)&-(0x1f+1)) == 0 && ((1<<uint((_la-356)))&((1<<(SV2017ParserMINUS-356))|(1<<(SV2017ParserAMPERSAND-356))|(1<<(SV2017ParserBAR-356))|(1<<(SV2017ParserINCR-356))|(1<<(SV2017ParserDECR-356)))) != 0) {
		{
			p.SetState(2483)
			p.Rs_case_item()
		}

		p.SetState(2486)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2488)
		p.Match(SV2017ParserKW_ENDCASE)
	}

	return localctx
}

// IRs_case_itemContext is an interface to support dynamic dispatch.
type IRs_case_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRs_case_itemContext differentiates from other interfaces.
	IsRs_case_itemContext()
}

type Rs_case_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRs_case_itemContext() *Rs_case_itemContext {
	var p = new(Rs_case_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_rs_case_item
	return p
}

func (*Rs_case_itemContext) IsRs_case_itemContext() {}

func NewRs_case_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Rs_case_itemContext {
	var p = new(Rs_case_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_rs_case_item

	return p
}

func (s *Rs_case_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Rs_case_itemContext) Production_item() IProduction_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProduction_itemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProduction_itemContext)
}

func (s *Rs_case_itemContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Rs_case_itemContext) KW_DEFAULT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DEFAULT, 0)
}

func (s *Rs_case_itemContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Rs_case_itemContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Rs_case_itemContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Rs_case_itemContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Rs_case_itemContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Rs_case_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rs_case_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Rs_case_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterRs_case_item(s)
	}
}

func (s *Rs_case_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitRs_case_item(s)
	}
}

func (p *SV2017Parser) Rs_case_item() (localctx IRs_case_itemContext) {
	localctx = NewRs_case_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 334, SV2017ParserRULE_rs_case_item)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2504)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_DEFAULT:
		{
			p.SetState(2490)
			p.Match(SV2017ParserKW_DEFAULT)
		}
		p.SetState(2492)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserCOLON {
			{
				p.SetState(2491)
				p.Match(SV2017ParserCOLON)
			}

		}

	case SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_FATAL, SV2017ParserKW_DOLAR_FULLSKEW, SV2017ParserKW_DOLAR_HOLD, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_NOCHANGE, SV2017ParserKW_DOLAR_PERIOD, SV2017ParserKW_DOLAR_RECOVERY, SV2017ParserKW_DOLAR_RECREM, SV2017ParserKW_DOLAR_REMOVAL, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_SETUP, SV2017ParserKW_DOLAR_SETUPHOLD, SV2017ParserKW_DOLAR_SKEW, SV2017ParserKW_DOLAR_TIMESKEW, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_DOLAR_WARNING, SV2017ParserKW_DOLAR_WIDTH, SV2017ParserKW_BIT, SV2017ParserKW_BYTE, SV2017ParserKW_CONST, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LOCAL, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_NULL, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_SAMPLE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_SUPER, SV2017ParserKW_TAGGED, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_UNSIGNED, SV2017ParserTIME_LITERAL, SV2017ParserANY_BASED_NUMBER, SV2017ParserBASED_NUMBER_WITH_SIZE, SV2017ParserREAL_NUMBER_WITH_EXP, SV2017ParserFIXED_POINT_NUMBER, SV2017ParserUNSIGNED_NUMBER, SV2017ParserUNBASED_UNSIZED_LITERAL, SV2017ParserSTRING_LITERAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSYSTEM_TF_IDENTIFIER, SV2017ParserLPAREN, SV2017ParserLBRACE, SV2017ParserAPOSTROPHE_LBRACE, SV2017ParserDOLAR, SV2017ParserNOT, SV2017ParserNEG, SV2017ParserNAND, SV2017ParserNOR, SV2017ParserXOR, SV2017ParserNXOR, SV2017ParserXORN, SV2017ParserPLUS, SV2017ParserMINUS, SV2017ParserAMPERSAND, SV2017ParserBAR, SV2017ParserINCR, SV2017ParserDECR:
		{
			p.SetState(2494)
			p.expression(0)
		}
		p.SetState(2499)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserCOMMA {
			{
				p.SetState(2495)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(2496)
				p.expression(0)
			}

			p.SetState(2501)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2502)
			p.Match(SV2017ParserCOLON)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(2506)
		p.Production_item()
	}
	{
		p.SetState(2507)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IRs_ruleContext is an interface to support dynamic dispatch.
type IRs_ruleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRs_ruleContext differentiates from other interfaces.
	IsRs_ruleContext()
}

type Rs_ruleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRs_ruleContext() *Rs_ruleContext {
	var p = new(Rs_ruleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_rs_rule
	return p
}

func (*Rs_ruleContext) IsRs_ruleContext() {}

func NewRs_ruleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Rs_ruleContext {
	var p = new(Rs_ruleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_rs_rule

	return p
}

func (s *Rs_ruleContext) GetParser() antlr.Parser { return s.parser }

func (s *Rs_ruleContext) Rs_production_list() IRs_production_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRs_production_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRs_production_listContext)
}

func (s *Rs_ruleContext) DIST_WEIGHT_ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDIST_WEIGHT_ASSIGN, 0)
}

func (s *Rs_ruleContext) Weight_specification() IWeight_specificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWeight_specificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWeight_specificationContext)
}

func (s *Rs_ruleContext) Rs_code_block() IRs_code_blockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRs_code_blockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRs_code_blockContext)
}

func (s *Rs_ruleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rs_ruleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Rs_ruleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterRs_rule(s)
	}
}

func (s *Rs_ruleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitRs_rule(s)
	}
}

func (p *SV2017Parser) Rs_rule() (localctx IRs_ruleContext) {
	localctx = NewRs_ruleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 336, SV2017ParserRULE_rs_rule)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2509)
		p.Rs_production_list()
	}
	p.SetState(2515)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserDIST_WEIGHT_ASSIGN {
		{
			p.SetState(2510)
			p.Match(SV2017ParserDIST_WEIGHT_ASSIGN)
		}
		{
			p.SetState(2511)
			p.Weight_specification()
		}
		p.SetState(2513)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserLBRACE {
			{
				p.SetState(2512)
				p.Rs_code_block()
			}

		}

	}

	return localctx
}

// IRs_production_listContext is an interface to support dynamic dispatch.
type IRs_production_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRs_production_listContext differentiates from other interfaces.
	IsRs_production_listContext()
}

type Rs_production_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRs_production_listContext() *Rs_production_listContext {
	var p = new(Rs_production_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_rs_production_list
	return p
}

func (*Rs_production_listContext) IsRs_production_listContext() {}

func NewRs_production_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Rs_production_listContext {
	var p = new(Rs_production_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_rs_production_list

	return p
}

func (s *Rs_production_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Rs_production_listContext) KW_RAND() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_RAND, 0)
}

func (s *Rs_production_listContext) KW_JOIN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_JOIN, 0)
}

func (s *Rs_production_listContext) AllProduction_item() []IProduction_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProduction_itemContext)(nil)).Elem())
	var tst = make([]IProduction_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProduction_itemContext)
		}
	}

	return tst
}

func (s *Rs_production_listContext) Production_item(i int) IProduction_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProduction_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProduction_itemContext)
}

func (s *Rs_production_listContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Rs_production_listContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Rs_production_listContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Rs_production_listContext) AllRs_prod() []IRs_prodContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRs_prodContext)(nil)).Elem())
	var tst = make([]IRs_prodContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRs_prodContext)
		}
	}

	return tst
}

func (s *Rs_production_listContext) Rs_prod(i int) IRs_prodContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRs_prodContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRs_prodContext)
}

func (s *Rs_production_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rs_production_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Rs_production_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterRs_production_list(s)
	}
}

func (s *Rs_production_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitRs_production_list(s)
	}
}

func (p *SV2017Parser) Rs_production_list() (localctx IRs_production_listContext) {
	localctx = NewRs_production_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 338, SV2017ParserRULE_rs_production_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2536)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_RAND:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2517)
			p.Match(SV2017ParserKW_RAND)
		}
		{
			p.SetState(2518)
			p.Match(SV2017ParserKW_JOIN)
		}
		p.SetState(2523)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserLPAREN {
			{
				p.SetState(2519)
				p.Match(SV2017ParserLPAREN)
			}
			{
				p.SetState(2520)
				p.expression(0)
			}
			{
				p.SetState(2521)
				p.Match(SV2017ParserRPAREN)
			}

		}
		{
			p.SetState(2525)
			p.Production_item()
		}
		p.SetState(2527)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
			{
				p.SetState(2526)
				p.Production_item()
			}

			p.SetState(2529)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case SV2017ParserKW_CASE, SV2017ParserKW_IF, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_REPEAT, SV2017ParserKW_SAMPLE, SV2017ParserKW_STD, SV2017ParserKW_TYPE_OPTION, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserLBRACE:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(2532)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == SV2017ParserKW_CASE || _la == SV2017ParserKW_IF || _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || (((_la-206)&-(0x1f+1)) == 0 && ((1<<uint((_la-206)))&((1<<(SV2017ParserKW_REPEAT-206))|(1<<(SV2017ParserKW_SAMPLE-206))|(1<<(SV2017ParserKW_STD-206)))) != 0) || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299))|(1<<(SV2017ParserLBRACE-299)))) != 0) {
			{
				p.SetState(2531)
				p.Rs_prod()
			}

			p.SetState(2534)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IProductionContext is an interface to support dynamic dispatch.
type IProductionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProductionContext differentiates from other interfaces.
	IsProductionContext()
}

type ProductionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProductionContext() *ProductionContext {
	var p = new(ProductionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_production
	return p
}

func (*ProductionContext) IsProductionContext() {}

func NewProductionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProductionContext {
	var p = new(ProductionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_production

	return p
}

func (s *ProductionContext) GetParser() antlr.Parser { return s.parser }

func (s *ProductionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ProductionContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *ProductionContext) AllRs_rule() []IRs_ruleContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRs_ruleContext)(nil)).Elem())
	var tst = make([]IRs_ruleContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRs_ruleContext)
		}
	}

	return tst
}

func (s *ProductionContext) Rs_rule(i int) IRs_ruleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRs_ruleContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRs_ruleContext)
}

func (s *ProductionContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *ProductionContext) Data_type_or_void() IData_type_or_voidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_or_voidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_or_voidContext)
}

func (s *ProductionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *ProductionContext) Tf_port_list() ITf_port_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITf_port_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITf_port_listContext)
}

func (s *ProductionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *ProductionContext) AllBAR() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserBAR)
}

func (s *ProductionContext) BAR(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserBAR, i)
}

func (s *ProductionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProductionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProductionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterProduction(s)
	}
}

func (s *ProductionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitProduction(s)
	}
}

func (p *SV2017Parser) Production() (localctx IProductionContext) {
	localctx = NewProductionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 340, SV2017ParserRULE_production)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2539)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 199, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2538)
			p.Data_type_or_void()
		}

	}
	{
		p.SetState(2541)
		p.Identifier()
	}
	p.SetState(2546)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserLPAREN {
		{
			p.SetState(2542)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(2543)
			p.Tf_port_list()
		}
		{
			p.SetState(2544)
			p.Match(SV2017ParserRPAREN)
		}

	}
	{
		p.SetState(2548)
		p.Match(SV2017ParserCOLON)
	}
	{
		p.SetState(2549)
		p.Rs_rule()
	}
	p.SetState(2554)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserBAR {
		{
			p.SetState(2550)
			p.Match(SV2017ParserBAR)
		}
		{
			p.SetState(2551)
			p.Rs_rule()
		}

		p.SetState(2556)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2557)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// ITf_item_declarationContext is an interface to support dynamic dispatch.
type ITf_item_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTf_item_declarationContext differentiates from other interfaces.
	IsTf_item_declarationContext()
}

type Tf_item_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTf_item_declarationContext() *Tf_item_declarationContext {
	var p = new(Tf_item_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_tf_item_declaration
	return p
}

func (*Tf_item_declarationContext) IsTf_item_declarationContext() {}

func NewTf_item_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tf_item_declarationContext {
	var p = new(Tf_item_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_tf_item_declaration

	return p
}

func (s *Tf_item_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Tf_item_declarationContext) Block_item_declaration() IBlock_item_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlock_item_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlock_item_declarationContext)
}

func (s *Tf_item_declarationContext) Tf_port_declaration() ITf_port_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITf_port_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITf_port_declarationContext)
}

func (s *Tf_item_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tf_item_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tf_item_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterTf_item_declaration(s)
	}
}

func (s *Tf_item_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitTf_item_declaration(s)
	}
}

func (p *SV2017Parser) Tf_item_declaration() (localctx ITf_item_declarationContext) {
	localctx = NewTf_item_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 342, SV2017ParserRULE_tf_item_declaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2561)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 202, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2559)
			p.Block_item_declaration()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2560)
			p.Tf_port_declaration()
		}

	}

	return localctx
}

// ITf_port_listContext is an interface to support dynamic dispatch.
type ITf_port_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTf_port_listContext differentiates from other interfaces.
	IsTf_port_listContext()
}

type Tf_port_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTf_port_listContext() *Tf_port_listContext {
	var p = new(Tf_port_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_tf_port_list
	return p
}

func (*Tf_port_listContext) IsTf_port_listContext() {}

func NewTf_port_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tf_port_listContext {
	var p = new(Tf_port_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_tf_port_list

	return p
}

func (s *Tf_port_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Tf_port_listContext) AllTf_port_item() []ITf_port_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITf_port_itemContext)(nil)).Elem())
	var tst = make([]ITf_port_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITf_port_itemContext)
		}
	}

	return tst
}

func (s *Tf_port_listContext) Tf_port_item(i int) ITf_port_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITf_port_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITf_port_itemContext)
}

func (s *Tf_port_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Tf_port_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Tf_port_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tf_port_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tf_port_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterTf_port_list(s)
	}
}

func (s *Tf_port_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitTf_port_list(s)
	}
}

func (p *SV2017Parser) Tf_port_list() (localctx ITf_port_listContext) {
	localctx = NewTf_port_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 344, SV2017ParserRULE_tf_port_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2563)
		p.Tf_port_item()
	}
	p.SetState(2568)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserCOMMA {
		{
			p.SetState(2564)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(2565)
			p.Tf_port_item()
		}

		p.SetState(2570)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITf_port_itemContext is an interface to support dynamic dispatch.
type ITf_port_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTf_port_itemContext differentiates from other interfaces.
	IsTf_port_itemContext()
}

type Tf_port_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTf_port_itemContext() *Tf_port_itemContext {
	var p = new(Tf_port_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_tf_port_item
	return p
}

func (*Tf_port_itemContext) IsTf_port_itemContext() {}

func NewTf_port_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tf_port_itemContext {
	var p = new(Tf_port_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_tf_port_item

	return p
}

func (s *Tf_port_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Tf_port_itemContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Tf_port_itemContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Tf_port_itemContext) Tf_port_direction() ITf_port_directionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITf_port_directionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITf_port_directionContext)
}

func (s *Tf_port_itemContext) KW_VAR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_VAR, 0)
}

func (s *Tf_port_itemContext) Data_type_or_implicit() IData_type_or_implicitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_or_implicitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_or_implicitContext)
}

func (s *Tf_port_itemContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Tf_port_itemContext) AllVariable_dimension() []IVariable_dimensionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariable_dimensionContext)(nil)).Elem())
	var tst = make([]IVariable_dimensionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariable_dimensionContext)
		}
	}

	return tst
}

func (s *Tf_port_itemContext) Variable_dimension(i int) IVariable_dimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_dimensionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariable_dimensionContext)
}

func (s *Tf_port_itemContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserASSIGN, 0)
}

func (s *Tf_port_itemContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Tf_port_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tf_port_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tf_port_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterTf_port_item(s)
	}
}

func (s *Tf_port_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitTf_port_item(s)
	}
}

func (p *SV2017Parser) Tf_port_item() (localctx ITf_port_itemContext) {
	localctx = NewTf_port_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 346, SV2017ParserRULE_tf_port_item)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2574)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 204, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2571)
				p.Attribute_instance()
			}

		}
		p.SetState(2576)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 204, p.GetParserRuleContext())
	}
	p.SetState(2578)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_CONST || _la == SV2017ParserKW_INOUT || _la == SV2017ParserKW_INPUT || _la == SV2017ParserKW_OUTPUT || _la == SV2017ParserKW_REF {
		{
			p.SetState(2577)
			p.Tf_port_direction()
		}

	}
	p.SetState(2581)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_VAR {
		{
			p.SetState(2580)
			p.Match(SV2017ParserKW_VAR)
		}

	}
	p.SetState(2584)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 207, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2583)
			p.Data_type_or_implicit()
		}

	}
	p.SetState(2597)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
		{
			p.SetState(2586)
			p.Identifier()
		}
		p.SetState(2590)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserLSQUARE_BR {
			{
				p.SetState(2587)
				p.Variable_dimension()
			}

			p.SetState(2592)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(2595)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserASSIGN {
			{
				p.SetState(2593)
				p.Match(SV2017ParserASSIGN)
			}
			{
				p.SetState(2594)
				p.expression(0)
			}

		}

	}

	return localctx
}

// ITf_port_directionContext is an interface to support dynamic dispatch.
type ITf_port_directionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTf_port_directionContext differentiates from other interfaces.
	IsTf_port_directionContext()
}

type Tf_port_directionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTf_port_directionContext() *Tf_port_directionContext {
	var p = new(Tf_port_directionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_tf_port_direction
	return p
}

func (*Tf_port_directionContext) IsTf_port_directionContext() {}

func NewTf_port_directionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tf_port_directionContext {
	var p = new(Tf_port_directionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_tf_port_direction

	return p
}

func (s *Tf_port_directionContext) GetParser() antlr.Parser { return s.parser }

func (s *Tf_port_directionContext) KW_CONST() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_CONST, 0)
}

func (s *Tf_port_directionContext) KW_REF() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_REF, 0)
}

func (s *Tf_port_directionContext) Port_direction() IPort_directionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPort_directionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPort_directionContext)
}

func (s *Tf_port_directionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tf_port_directionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tf_port_directionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterTf_port_direction(s)
	}
}

func (s *Tf_port_directionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitTf_port_direction(s)
	}
}

func (p *SV2017Parser) Tf_port_direction() (localctx ITf_port_directionContext) {
	localctx = NewTf_port_directionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 348, SV2017ParserRULE_tf_port_direction)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2602)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_CONST:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2599)
			p.Match(SV2017ParserKW_CONST)
		}
		{
			p.SetState(2600)
			p.Match(SV2017ParserKW_REF)
		}

	case SV2017ParserKW_INOUT, SV2017ParserKW_INPUT, SV2017ParserKW_OUTPUT, SV2017ParserKW_REF:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2601)
			p.Port_direction()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITf_port_declarationContext is an interface to support dynamic dispatch.
type ITf_port_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTf_port_declarationContext differentiates from other interfaces.
	IsTf_port_declarationContext()
}

type Tf_port_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTf_port_declarationContext() *Tf_port_declarationContext {
	var p = new(Tf_port_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_tf_port_declaration
	return p
}

func (*Tf_port_declarationContext) IsTf_port_declarationContext() {}

func NewTf_port_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tf_port_declarationContext {
	var p = new(Tf_port_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_tf_port_declaration

	return p
}

func (s *Tf_port_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Tf_port_declarationContext) Tf_port_direction() ITf_port_directionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITf_port_directionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITf_port_directionContext)
}

func (s *Tf_port_declarationContext) List_of_tf_variable_identifiers() IList_of_tf_variable_identifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_tf_variable_identifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_tf_variable_identifiersContext)
}

func (s *Tf_port_declarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Tf_port_declarationContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Tf_port_declarationContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Tf_port_declarationContext) KW_VAR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_VAR, 0)
}

func (s *Tf_port_declarationContext) Data_type_or_implicit() IData_type_or_implicitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_or_implicitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_or_implicitContext)
}

func (s *Tf_port_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tf_port_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tf_port_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterTf_port_declaration(s)
	}
}

func (s *Tf_port_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitTf_port_declaration(s)
	}
}

func (p *SV2017Parser) Tf_port_declaration() (localctx ITf_port_declarationContext) {
	localctx = NewTf_port_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 350, SV2017ParserRULE_tf_port_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2607)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserTICK_IDENTIFIER || _la == SV2017ParserLPAREN {
		{
			p.SetState(2604)
			p.Attribute_instance()
		}

		p.SetState(2609)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2610)
		p.Tf_port_direction()
	}
	p.SetState(2612)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_VAR {
		{
			p.SetState(2611)
			p.Match(SV2017ParserKW_VAR)
		}

	}
	p.SetState(2615)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 214, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2614)
			p.Data_type_or_implicit()
		}

	}
	{
		p.SetState(2617)
		p.List_of_tf_variable_identifiers()
	}
	{
		p.SetState(2618)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IList_of_tf_variable_identifiers_itemContext is an interface to support dynamic dispatch.
type IList_of_tf_variable_identifiers_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsList_of_tf_variable_identifiers_itemContext differentiates from other interfaces.
	IsList_of_tf_variable_identifiers_itemContext()
}

type List_of_tf_variable_identifiers_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyList_of_tf_variable_identifiers_itemContext() *List_of_tf_variable_identifiers_itemContext {
	var p = new(List_of_tf_variable_identifiers_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_list_of_tf_variable_identifiers_item
	return p
}

func (*List_of_tf_variable_identifiers_itemContext) IsList_of_tf_variable_identifiers_itemContext() {}

func NewList_of_tf_variable_identifiers_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *List_of_tf_variable_identifiers_itemContext {
	var p = new(List_of_tf_variable_identifiers_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_list_of_tf_variable_identifiers_item

	return p
}

func (s *List_of_tf_variable_identifiers_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *List_of_tf_variable_identifiers_itemContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *List_of_tf_variable_identifiers_itemContext) AllVariable_dimension() []IVariable_dimensionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariable_dimensionContext)(nil)).Elem())
	var tst = make([]IVariable_dimensionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariable_dimensionContext)
		}
	}

	return tst
}

func (s *List_of_tf_variable_identifiers_itemContext) Variable_dimension(i int) IVariable_dimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_dimensionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariable_dimensionContext)
}

func (s *List_of_tf_variable_identifiers_itemContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserASSIGN, 0)
}

func (s *List_of_tf_variable_identifiers_itemContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *List_of_tf_variable_identifiers_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *List_of_tf_variable_identifiers_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *List_of_tf_variable_identifiers_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterList_of_tf_variable_identifiers_item(s)
	}
}

func (s *List_of_tf_variable_identifiers_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitList_of_tf_variable_identifiers_item(s)
	}
}

func (p *SV2017Parser) List_of_tf_variable_identifiers_item() (localctx IList_of_tf_variable_identifiers_itemContext) {
	localctx = NewList_of_tf_variable_identifiers_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 352, SV2017ParserRULE_list_of_tf_variable_identifiers_item)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2620)
		p.Identifier()
	}
	p.SetState(2624)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserLSQUARE_BR {
		{
			p.SetState(2621)
			p.Variable_dimension()
		}

		p.SetState(2626)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(2629)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserASSIGN {
		{
			p.SetState(2627)
			p.Match(SV2017ParserASSIGN)
		}
		{
			p.SetState(2628)
			p.expression(0)
		}

	}

	return localctx
}

// IList_of_tf_variable_identifiersContext is an interface to support dynamic dispatch.
type IList_of_tf_variable_identifiersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsList_of_tf_variable_identifiersContext differentiates from other interfaces.
	IsList_of_tf_variable_identifiersContext()
}

type List_of_tf_variable_identifiersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyList_of_tf_variable_identifiersContext() *List_of_tf_variable_identifiersContext {
	var p = new(List_of_tf_variable_identifiersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_list_of_tf_variable_identifiers
	return p
}

func (*List_of_tf_variable_identifiersContext) IsList_of_tf_variable_identifiersContext() {}

func NewList_of_tf_variable_identifiersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *List_of_tf_variable_identifiersContext {
	var p = new(List_of_tf_variable_identifiersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_list_of_tf_variable_identifiers

	return p
}

func (s *List_of_tf_variable_identifiersContext) GetParser() antlr.Parser { return s.parser }

func (s *List_of_tf_variable_identifiersContext) AllList_of_tf_variable_identifiers_item() []IList_of_tf_variable_identifiers_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IList_of_tf_variable_identifiers_itemContext)(nil)).Elem())
	var tst = make([]IList_of_tf_variable_identifiers_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IList_of_tf_variable_identifiers_itemContext)
		}
	}

	return tst
}

func (s *List_of_tf_variable_identifiersContext) List_of_tf_variable_identifiers_item(i int) IList_of_tf_variable_identifiers_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_tf_variable_identifiers_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IList_of_tf_variable_identifiers_itemContext)
}

func (s *List_of_tf_variable_identifiersContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *List_of_tf_variable_identifiersContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *List_of_tf_variable_identifiersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *List_of_tf_variable_identifiersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *List_of_tf_variable_identifiersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterList_of_tf_variable_identifiers(s)
	}
}

func (s *List_of_tf_variable_identifiersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitList_of_tf_variable_identifiers(s)
	}
}

func (p *SV2017Parser) List_of_tf_variable_identifiers() (localctx IList_of_tf_variable_identifiersContext) {
	localctx = NewList_of_tf_variable_identifiersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 354, SV2017ParserRULE_list_of_tf_variable_identifiers)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2631)
		p.List_of_tf_variable_identifiers_item()
	}
	p.SetState(2636)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserCOMMA {
		{
			p.SetState(2632)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(2633)
			p.List_of_tf_variable_identifiers_item()
		}

		p.SetState(2638)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IExpect_property_statementContext is an interface to support dynamic dispatch.
type IExpect_property_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpect_property_statementContext differentiates from other interfaces.
	IsExpect_property_statementContext()
}

type Expect_property_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpect_property_statementContext() *Expect_property_statementContext {
	var p = new(Expect_property_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_expect_property_statement
	return p
}

func (*Expect_property_statementContext) IsExpect_property_statementContext() {}

func NewExpect_property_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expect_property_statementContext {
	var p = new(Expect_property_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_expect_property_statement

	return p
}

func (s *Expect_property_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Expect_property_statementContext) KW_EXPECT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_EXPECT, 0)
}

func (s *Expect_property_statementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Expect_property_statementContext) Property_spec() IProperty_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProperty_specContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProperty_specContext)
}

func (s *Expect_property_statementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Expect_property_statementContext) Action_block() IAction_blockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAction_blockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAction_blockContext)
}

func (s *Expect_property_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expect_property_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expect_property_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterExpect_property_statement(s)
	}
}

func (s *Expect_property_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitExpect_property_statement(s)
	}
}

func (p *SV2017Parser) Expect_property_statement() (localctx IExpect_property_statementContext) {
	localctx = NewExpect_property_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 356, SV2017ParserRULE_expect_property_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2639)
		p.Match(SV2017ParserKW_EXPECT)
	}
	{
		p.SetState(2640)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(2641)
		p.Property_spec()
	}
	{
		p.SetState(2642)
		p.Match(SV2017ParserRPAREN)
	}
	{
		p.SetState(2643)
		p.Action_block()
	}

	return localctx
}

// IBlock_item_declarationContext is an interface to support dynamic dispatch.
type IBlock_item_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlock_item_declarationContext differentiates from other interfaces.
	IsBlock_item_declarationContext()
}

type Block_item_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlock_item_declarationContext() *Block_item_declarationContext {
	var p = new(Block_item_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_block_item_declaration
	return p
}

func (*Block_item_declarationContext) IsBlock_item_declarationContext() {}

func NewBlock_item_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Block_item_declarationContext {
	var p = new(Block_item_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_block_item_declaration

	return p
}

func (s *Block_item_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Block_item_declarationContext) Data_declaration() IData_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_declarationContext)
}

func (s *Block_item_declarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Block_item_declarationContext) Let_declaration() ILet_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILet_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILet_declarationContext)
}

func (s *Block_item_declarationContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Block_item_declarationContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Block_item_declarationContext) Local_parameter_declaration() ILocal_parameter_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILocal_parameter_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILocal_parameter_declarationContext)
}

func (s *Block_item_declarationContext) Parameter_declaration() IParameter_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameter_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameter_declarationContext)
}

func (s *Block_item_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Block_item_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Block_item_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterBlock_item_declaration(s)
	}
}

func (s *Block_item_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitBlock_item_declaration(s)
	}
}

func (p *SV2017Parser) Block_item_declaration() (localctx IBlock_item_declarationContext) {
	localctx = NewBlock_item_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 358, SV2017ParserRULE_block_item_declaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2648)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 218, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2645)
				p.Attribute_instance()
			}

		}
		p.SetState(2650)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 218, p.GetParserRuleContext())
	}
	p.SetState(2659)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_AUTOMATIC, SV2017ParserKW_BIT, SV2017ParserKW_BYTE, SV2017ParserKW_CHANDLE, SV2017ParserKW_CONST, SV2017ParserKW_ENUM, SV2017ParserKW_EVENT, SV2017ParserKW_IMPORT, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LOCAL, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_NETTYPE, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_SAMPLE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_STATIC, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_TYPEDEF, SV2017ParserKW_UNION, SV2017ParserKW_UNSIGNED, SV2017ParserKW_VAR, SV2017ParserKW_VIRTUAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserLSQUARE_BR:
		{
			p.SetState(2651)
			p.Data_declaration()
		}

	case SV2017ParserKW_LOCALPARAM, SV2017ParserKW_PARAMETER:
		p.SetState(2654)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SV2017ParserKW_LOCALPARAM:
			{
				p.SetState(2652)
				p.Local_parameter_declaration()
			}

		case SV2017ParserKW_PARAMETER:
			{
				p.SetState(2653)
				p.Parameter_declaration()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(2656)
			p.Match(SV2017ParserSEMI)
		}

	case SV2017ParserKW_LET:
		{
			p.SetState(2658)
			p.Let_declaration()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IParam_assignmentContext is an interface to support dynamic dispatch.
type IParam_assignmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParam_assignmentContext differentiates from other interfaces.
	IsParam_assignmentContext()
}

type Param_assignmentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParam_assignmentContext() *Param_assignmentContext {
	var p = new(Param_assignmentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_param_assignment
	return p
}

func (*Param_assignmentContext) IsParam_assignmentContext() {}

func NewParam_assignmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Param_assignmentContext {
	var p = new(Param_assignmentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_param_assignment

	return p
}

func (s *Param_assignmentContext) GetParser() antlr.Parser { return s.parser }

func (s *Param_assignmentContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Param_assignmentContext) AllUnpacked_dimension() []IUnpacked_dimensionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUnpacked_dimensionContext)(nil)).Elem())
	var tst = make([]IUnpacked_dimensionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUnpacked_dimensionContext)
		}
	}

	return tst
}

func (s *Param_assignmentContext) Unpacked_dimension(i int) IUnpacked_dimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnpacked_dimensionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUnpacked_dimensionContext)
}

func (s *Param_assignmentContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserASSIGN, 0)
}

func (s *Param_assignmentContext) Constant_param_expression() IConstant_param_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_param_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_param_expressionContext)
}

func (s *Param_assignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Param_assignmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Param_assignmentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterParam_assignment(s)
	}
}

func (s *Param_assignmentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitParam_assignment(s)
	}
}

func (p *SV2017Parser) Param_assignment() (localctx IParam_assignmentContext) {
	localctx = NewParam_assignmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 360, SV2017ParserRULE_param_assignment)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2661)
		p.Identifier()
	}
	p.SetState(2665)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserLSQUARE_BR {
		{
			p.SetState(2662)
			p.Unpacked_dimension()
		}

		p.SetState(2667)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(2670)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserASSIGN {
		{
			p.SetState(2668)
			p.Match(SV2017ParserASSIGN)
		}
		{
			p.SetState(2669)
			p.Constant_param_expression()
		}

	}

	return localctx
}

// IType_assignmentContext is an interface to support dynamic dispatch.
type IType_assignmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsType_assignmentContext differentiates from other interfaces.
	IsType_assignmentContext()
}

type Type_assignmentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_assignmentContext() *Type_assignmentContext {
	var p = new(Type_assignmentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_type_assignment
	return p
}

func (*Type_assignmentContext) IsType_assignmentContext() {}

func NewType_assignmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_assignmentContext {
	var p = new(Type_assignmentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_type_assignment

	return p
}

func (s *Type_assignmentContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_assignmentContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Type_assignmentContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserASSIGN, 0)
}

func (s *Type_assignmentContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Type_assignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_assignmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_assignmentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterType_assignment(s)
	}
}

func (s *Type_assignmentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitType_assignment(s)
	}
}

func (p *SV2017Parser) Type_assignment() (localctx IType_assignmentContext) {
	localctx = NewType_assignmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 362, SV2017ParserRULE_type_assignment)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2672)
		p.Identifier()
	}
	p.SetState(2675)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserASSIGN {
		{
			p.SetState(2673)
			p.Match(SV2017ParserASSIGN)
		}
		{
			p.SetState(2674)
			p.Data_type()
		}

	}

	return localctx
}

// IList_of_type_assignmentsContext is an interface to support dynamic dispatch.
type IList_of_type_assignmentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsList_of_type_assignmentsContext differentiates from other interfaces.
	IsList_of_type_assignmentsContext()
}

type List_of_type_assignmentsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyList_of_type_assignmentsContext() *List_of_type_assignmentsContext {
	var p = new(List_of_type_assignmentsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_list_of_type_assignments
	return p
}

func (*List_of_type_assignmentsContext) IsList_of_type_assignmentsContext() {}

func NewList_of_type_assignmentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *List_of_type_assignmentsContext {
	var p = new(List_of_type_assignmentsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_list_of_type_assignments

	return p
}

func (s *List_of_type_assignmentsContext) GetParser() antlr.Parser { return s.parser }

func (s *List_of_type_assignmentsContext) AllType_assignment() []IType_assignmentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IType_assignmentContext)(nil)).Elem())
	var tst = make([]IType_assignmentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IType_assignmentContext)
		}
	}

	return tst
}

func (s *List_of_type_assignmentsContext) Type_assignment(i int) IType_assignmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_assignmentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IType_assignmentContext)
}

func (s *List_of_type_assignmentsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *List_of_type_assignmentsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *List_of_type_assignmentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *List_of_type_assignmentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *List_of_type_assignmentsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterList_of_type_assignments(s)
	}
}

func (s *List_of_type_assignmentsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitList_of_type_assignments(s)
	}
}

func (p *SV2017Parser) List_of_type_assignments() (localctx IList_of_type_assignmentsContext) {
	localctx = NewList_of_type_assignmentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 364, SV2017ParserRULE_list_of_type_assignments)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2677)
		p.Type_assignment()
	}
	p.SetState(2682)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 224, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2678)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(2679)
				p.Type_assignment()
			}

		}
		p.SetState(2684)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 224, p.GetParserRuleContext())
	}

	return localctx
}

// IList_of_param_assignmentsContext is an interface to support dynamic dispatch.
type IList_of_param_assignmentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsList_of_param_assignmentsContext differentiates from other interfaces.
	IsList_of_param_assignmentsContext()
}

type List_of_param_assignmentsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyList_of_param_assignmentsContext() *List_of_param_assignmentsContext {
	var p = new(List_of_param_assignmentsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_list_of_param_assignments
	return p
}

func (*List_of_param_assignmentsContext) IsList_of_param_assignmentsContext() {}

func NewList_of_param_assignmentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *List_of_param_assignmentsContext {
	var p = new(List_of_param_assignmentsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_list_of_param_assignments

	return p
}

func (s *List_of_param_assignmentsContext) GetParser() antlr.Parser { return s.parser }

func (s *List_of_param_assignmentsContext) AllParam_assignment() []IParam_assignmentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParam_assignmentContext)(nil)).Elem())
	var tst = make([]IParam_assignmentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParam_assignmentContext)
		}
	}

	return tst
}

func (s *List_of_param_assignmentsContext) Param_assignment(i int) IParam_assignmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParam_assignmentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParam_assignmentContext)
}

func (s *List_of_param_assignmentsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *List_of_param_assignmentsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *List_of_param_assignmentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *List_of_param_assignmentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *List_of_param_assignmentsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterList_of_param_assignments(s)
	}
}

func (s *List_of_param_assignmentsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitList_of_param_assignments(s)
	}
}

func (p *SV2017Parser) List_of_param_assignments() (localctx IList_of_param_assignmentsContext) {
	localctx = NewList_of_param_assignmentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 366, SV2017ParserRULE_list_of_param_assignments)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2685)
		p.Param_assignment()
	}
	p.SetState(2690)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 225, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2686)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(2687)
				p.Param_assignment()
			}

		}
		p.SetState(2692)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 225, p.GetParserRuleContext())
	}

	return localctx
}

// IParameter_declaration_primitiveContext is an interface to support dynamic dispatch.
type IParameter_declaration_primitiveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameter_declaration_primitiveContext differentiates from other interfaces.
	IsParameter_declaration_primitiveContext()
}

type Parameter_declaration_primitiveContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameter_declaration_primitiveContext() *Parameter_declaration_primitiveContext {
	var p = new(Parameter_declaration_primitiveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_parameter_declaration_primitive
	return p
}

func (*Parameter_declaration_primitiveContext) IsParameter_declaration_primitiveContext() {}

func NewParameter_declaration_primitiveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Parameter_declaration_primitiveContext {
	var p = new(Parameter_declaration_primitiveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_parameter_declaration_primitive

	return p
}

func (s *Parameter_declaration_primitiveContext) GetParser() antlr.Parser { return s.parser }

func (s *Parameter_declaration_primitiveContext) KW_TYPE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_TYPE, 0)
}

func (s *Parameter_declaration_primitiveContext) List_of_type_assignments() IList_of_type_assignmentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_type_assignmentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_type_assignmentsContext)
}

func (s *Parameter_declaration_primitiveContext) List_of_param_assignments() IList_of_param_assignmentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_param_assignmentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_param_assignmentsContext)
}

func (s *Parameter_declaration_primitiveContext) Data_type_or_implicit() IData_type_or_implicitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_or_implicitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_or_implicitContext)
}

func (s *Parameter_declaration_primitiveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Parameter_declaration_primitiveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Parameter_declaration_primitiveContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterParameter_declaration_primitive(s)
	}
}

func (s *Parameter_declaration_primitiveContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitParameter_declaration_primitive(s)
	}
}

func (p *SV2017Parser) Parameter_declaration_primitive() (localctx IParameter_declaration_primitiveContext) {
	localctx = NewParameter_declaration_primitiveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 368, SV2017ParserRULE_parameter_declaration_primitive)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2699)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 227, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(2693)
			p.Match(SV2017ParserKW_TYPE)
		}
		{
			p.SetState(2694)
			p.List_of_type_assignments()
		}

	case 2:
		p.SetState(2696)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 226, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2695)
				p.Data_type_or_implicit()
			}

		}
		{
			p.SetState(2698)
			p.List_of_param_assignments()
		}

	}

	return localctx
}

// ILocal_parameter_declarationContext is an interface to support dynamic dispatch.
type ILocal_parameter_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLocal_parameter_declarationContext differentiates from other interfaces.
	IsLocal_parameter_declarationContext()
}

type Local_parameter_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLocal_parameter_declarationContext() *Local_parameter_declarationContext {
	var p = new(Local_parameter_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_local_parameter_declaration
	return p
}

func (*Local_parameter_declarationContext) IsLocal_parameter_declarationContext() {}

func NewLocal_parameter_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Local_parameter_declarationContext {
	var p = new(Local_parameter_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_local_parameter_declaration

	return p
}

func (s *Local_parameter_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Local_parameter_declarationContext) KW_LOCALPARAM() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_LOCALPARAM, 0)
}

func (s *Local_parameter_declarationContext) Parameter_declaration_primitive() IParameter_declaration_primitiveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameter_declaration_primitiveContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameter_declaration_primitiveContext)
}

func (s *Local_parameter_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Local_parameter_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Local_parameter_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterLocal_parameter_declaration(s)
	}
}

func (s *Local_parameter_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitLocal_parameter_declaration(s)
	}
}

func (p *SV2017Parser) Local_parameter_declaration() (localctx ILocal_parameter_declarationContext) {
	localctx = NewLocal_parameter_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 370, SV2017ParserRULE_local_parameter_declaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2701)
		p.Match(SV2017ParserKW_LOCALPARAM)
	}
	{
		p.SetState(2702)
		p.Parameter_declaration_primitive()
	}

	return localctx
}

// IParameter_declarationContext is an interface to support dynamic dispatch.
type IParameter_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameter_declarationContext differentiates from other interfaces.
	IsParameter_declarationContext()
}

type Parameter_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameter_declarationContext() *Parameter_declarationContext {
	var p = new(Parameter_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_parameter_declaration
	return p
}

func (*Parameter_declarationContext) IsParameter_declarationContext() {}

func NewParameter_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Parameter_declarationContext {
	var p = new(Parameter_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_parameter_declaration

	return p
}

func (s *Parameter_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Parameter_declarationContext) KW_PARAMETER() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_PARAMETER, 0)
}

func (s *Parameter_declarationContext) Parameter_declaration_primitive() IParameter_declaration_primitiveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameter_declaration_primitiveContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameter_declaration_primitiveContext)
}

func (s *Parameter_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Parameter_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Parameter_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterParameter_declaration(s)
	}
}

func (s *Parameter_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitParameter_declaration(s)
	}
}

func (p *SV2017Parser) Parameter_declaration() (localctx IParameter_declarationContext) {
	localctx = NewParameter_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 372, SV2017ParserRULE_parameter_declaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2704)
		p.Match(SV2017ParserKW_PARAMETER)
	}
	{
		p.SetState(2705)
		p.Parameter_declaration_primitive()
	}

	return localctx
}

// IType_declarationContext is an interface to support dynamic dispatch.
type IType_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsType_declarationContext differentiates from other interfaces.
	IsType_declarationContext()
}

type Type_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_declarationContext() *Type_declarationContext {
	var p = new(Type_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_type_declaration
	return p
}

func (*Type_declarationContext) IsType_declarationContext() {}

func NewType_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_declarationContext {
	var p = new(Type_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_type_declaration

	return p
}

func (s *Type_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_declarationContext) KW_TYPEDEF() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_TYPEDEF, 0)
}

func (s *Type_declarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Type_declarationContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Type_declarationContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Type_declarationContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Type_declarationContext) AllVariable_dimension() []IVariable_dimensionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariable_dimensionContext)(nil)).Elem())
	var tst = make([]IVariable_dimensionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariable_dimensionContext)
		}
	}

	return tst
}

func (s *Type_declarationContext) Variable_dimension(i int) IVariable_dimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_dimensionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariable_dimensionContext)
}

func (s *Type_declarationContext) KW_ENUM() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ENUM, 0)
}

func (s *Type_declarationContext) KW_STRUCT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_STRUCT, 0)
}

func (s *Type_declarationContext) KW_UNION() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_UNION, 0)
}

func (s *Type_declarationContext) Identifier_with_bit_select() IIdentifier_with_bit_selectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_with_bit_selectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_with_bit_selectContext)
}

func (s *Type_declarationContext) DOT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOT, 0)
}

func (s *Type_declarationContext) KW_CLASS() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_CLASS, 0)
}

func (s *Type_declarationContext) KW_INTERFACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_INTERFACE, 0)
}

func (s *Type_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterType_declaration(s)
	}
}

func (s *Type_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitType_declaration(s)
	}
}

func (p *SV2017Parser) Type_declaration() (localctx IType_declarationContext) {
	localctx = NewType_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 374, SV2017ParserRULE_type_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2707)
		p.Match(SV2017ParserKW_TYPEDEF)
	}
	p.SetState(2730)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 231, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(2708)
			p.Data_type()
		}
		{
			p.SetState(2709)
			p.Identifier()
		}
		p.SetState(2713)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserLSQUARE_BR {
			{
				p.SetState(2710)
				p.Variable_dimension()
			}

			p.SetState(2715)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		p.SetState(2727)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 230, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2716)
				p.Match(SV2017ParserKW_ENUM)
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 230, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(2717)
				p.Match(SV2017ParserKW_STRUCT)
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 230, p.GetParserRuleContext()) == 3 {
			{
				p.SetState(2718)
				p.Match(SV2017ParserKW_UNION)
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 230, p.GetParserRuleContext()) == 4 {
			{
				p.SetState(2719)
				p.Identifier_with_bit_select()
			}
			{
				p.SetState(2720)
				p.Match(SV2017ParserDOT)
			}
			{
				p.SetState(2721)
				p.Identifier()
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 230, p.GetParserRuleContext()) == 5 {
			p.SetState(2724)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SV2017ParserKW_INTERFACE {
				{
					p.SetState(2723)
					p.Match(SV2017ParserKW_INTERFACE)
				}

			}
			{
				p.SetState(2726)
				p.Match(SV2017ParserKW_CLASS)
			}

		}
		{
			p.SetState(2729)
			p.Identifier()
		}

	}
	{
		p.SetState(2732)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// INet_type_declarationContext is an interface to support dynamic dispatch.
type INet_type_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNet_type_declarationContext differentiates from other interfaces.
	IsNet_type_declarationContext()
}

type Net_type_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNet_type_declarationContext() *Net_type_declarationContext {
	var p = new(Net_type_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_net_type_declaration
	return p
}

func (*Net_type_declarationContext) IsNet_type_declarationContext() {}

func NewNet_type_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Net_type_declarationContext {
	var p = new(Net_type_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_net_type_declaration

	return p
}

func (s *Net_type_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Net_type_declarationContext) KW_NETTYPE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_NETTYPE, 0)
}

func (s *Net_type_declarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Net_type_declarationContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Net_type_declarationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Net_type_declarationContext) KW_WITH() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_WITH, 0)
}

func (s *Net_type_declarationContext) Package_or_class_scoped_id() IPackage_or_class_scoped_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackage_or_class_scoped_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackage_or_class_scoped_idContext)
}

func (s *Net_type_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Net_type_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Net_type_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterNet_type_declaration(s)
	}
}

func (s *Net_type_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitNet_type_declaration(s)
	}
}

func (p *SV2017Parser) Net_type_declaration() (localctx INet_type_declarationContext) {
	localctx = NewNet_type_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 376, SV2017ParserRULE_net_type_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2734)
		p.Match(SV2017ParserKW_NETTYPE)
	}

	{
		p.SetState(2735)
		p.Data_type()
	}
	{
		p.SetState(2736)
		p.Identifier()
	}
	p.SetState(2739)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_WITH {
		{
			p.SetState(2737)
			p.Match(SV2017ParserKW_WITH)
		}
		{
			p.SetState(2738)
			p.Package_or_class_scoped_id()
		}

	}

	{
		p.SetState(2741)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// ILet_declarationContext is an interface to support dynamic dispatch.
type ILet_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLet_declarationContext differentiates from other interfaces.
	IsLet_declarationContext()
}

type Let_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLet_declarationContext() *Let_declarationContext {
	var p = new(Let_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_let_declaration
	return p
}

func (*Let_declarationContext) IsLet_declarationContext() {}

func NewLet_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Let_declarationContext {
	var p = new(Let_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_let_declaration

	return p
}

func (s *Let_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Let_declarationContext) KW_LET() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_LET, 0)
}

func (s *Let_declarationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Let_declarationContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserASSIGN, 0)
}

func (s *Let_declarationContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Let_declarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Let_declarationContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Let_declarationContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Let_declarationContext) Let_port_list() ILet_port_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILet_port_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILet_port_listContext)
}

func (s *Let_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Let_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Let_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterLet_declaration(s)
	}
}

func (s *Let_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitLet_declaration(s)
	}
}

func (p *SV2017Parser) Let_declaration() (localctx ILet_declarationContext) {
	localctx = NewLet_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 378, SV2017ParserRULE_let_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2743)
		p.Match(SV2017ParserKW_LET)
	}
	{
		p.SetState(2744)
		p.Identifier()
	}
	p.SetState(2750)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserLPAREN {
		{
			p.SetState(2745)
			p.Match(SV2017ParserLPAREN)
		}
		p.SetState(2747)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_DOLAR_ROOT || (((_la-35)&-(0x1f+1)) == 0 && ((1<<uint((_la-35)))&((1<<(SV2017ParserKW_DOLAR_UNIT-35))|(1<<(SV2017ParserKW_BIT-35))|(1<<(SV2017ParserKW_BYTE-35))|(1<<(SV2017ParserKW_CHANDLE-35)))) != 0) || _la == SV2017ParserKW_ENUM || _la == SV2017ParserKW_EVENT || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-174)&-(0x1f+1)) == 0 && ((1<<uint((_la-174)))&((1<<(SV2017ParserKW_OPTION-174))|(1<<(SV2017ParserKW_RANDOMIZE-174))|(1<<(SV2017ParserKW_REAL-174))|(1<<(SV2017ParserKW_REALTIME-174))|(1<<(SV2017ParserKW_REG-174)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_STRUCT-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserKW_UNTYPED-260))|(1<<(SV2017ParserKW_VIRTUAL-260)))) != 0) || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299))|(1<<(SV2017ParserLPAREN-299))|(1<<(SV2017ParserLSQUARE_BR-299)))) != 0) {
			{
				p.SetState(2746)
				p.Let_port_list()
			}

		}
		{
			p.SetState(2749)
			p.Match(SV2017ParserRPAREN)
		}

	}
	{
		p.SetState(2752)
		p.Match(SV2017ParserASSIGN)
	}
	{
		p.SetState(2753)
		p.expression(0)
	}
	{
		p.SetState(2754)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// ILet_port_listContext is an interface to support dynamic dispatch.
type ILet_port_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLet_port_listContext differentiates from other interfaces.
	IsLet_port_listContext()
}

type Let_port_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLet_port_listContext() *Let_port_listContext {
	var p = new(Let_port_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_let_port_list
	return p
}

func (*Let_port_listContext) IsLet_port_listContext() {}

func NewLet_port_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Let_port_listContext {
	var p = new(Let_port_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_let_port_list

	return p
}

func (s *Let_port_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Let_port_listContext) AllLet_port_item() []ILet_port_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILet_port_itemContext)(nil)).Elem())
	var tst = make([]ILet_port_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILet_port_itemContext)
		}
	}

	return tst
}

func (s *Let_port_listContext) Let_port_item(i int) ILet_port_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILet_port_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILet_port_itemContext)
}

func (s *Let_port_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Let_port_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Let_port_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Let_port_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Let_port_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterLet_port_list(s)
	}
}

func (s *Let_port_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitLet_port_list(s)
	}
}

func (p *SV2017Parser) Let_port_list() (localctx ILet_port_listContext) {
	localctx = NewLet_port_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 380, SV2017ParserRULE_let_port_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2756)
		p.Let_port_item()
	}
	p.SetState(2761)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserCOMMA {
		{
			p.SetState(2757)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(2758)
			p.Let_port_item()
		}

		p.SetState(2763)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ILet_port_itemContext is an interface to support dynamic dispatch.
type ILet_port_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLet_port_itemContext differentiates from other interfaces.
	IsLet_port_itemContext()
}

type Let_port_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLet_port_itemContext() *Let_port_itemContext {
	var p = new(Let_port_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_let_port_item
	return p
}

func (*Let_port_itemContext) IsLet_port_itemContext() {}

func NewLet_port_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Let_port_itemContext {
	var p = new(Let_port_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_let_port_item

	return p
}

func (s *Let_port_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Let_port_itemContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Let_port_itemContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Let_port_itemContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Let_port_itemContext) Let_formal_type() ILet_formal_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILet_formal_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILet_formal_typeContext)
}

func (s *Let_port_itemContext) AllVariable_dimension() []IVariable_dimensionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariable_dimensionContext)(nil)).Elem())
	var tst = make([]IVariable_dimensionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariable_dimensionContext)
		}
	}

	return tst
}

func (s *Let_port_itemContext) Variable_dimension(i int) IVariable_dimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_dimensionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariable_dimensionContext)
}

func (s *Let_port_itemContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserASSIGN, 0)
}

func (s *Let_port_itemContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Let_port_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Let_port_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Let_port_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterLet_port_item(s)
	}
}

func (s *Let_port_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitLet_port_item(s)
	}
}

func (p *SV2017Parser) Let_port_item() (localctx ILet_port_itemContext) {
	localctx = NewLet_port_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 382, SV2017ParserRULE_let_port_item)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2767)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 236, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2764)
				p.Attribute_instance()
			}

		}
		p.SetState(2769)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 236, p.GetParserRuleContext())
	}
	p.SetState(2771)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 237, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2770)
			p.Let_formal_type()
		}

	}
	{
		p.SetState(2773)
		p.Identifier()
	}
	p.SetState(2777)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserLSQUARE_BR {
		{
			p.SetState(2774)
			p.Variable_dimension()
		}

		p.SetState(2779)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(2782)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserASSIGN {
		{
			p.SetState(2780)
			p.Match(SV2017ParserASSIGN)
		}
		{
			p.SetState(2781)
			p.expression(0)
		}

	}

	return localctx
}

// ILet_formal_typeContext is an interface to support dynamic dispatch.
type ILet_formal_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLet_formal_typeContext differentiates from other interfaces.
	IsLet_formal_typeContext()
}

type Let_formal_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLet_formal_typeContext() *Let_formal_typeContext {
	var p = new(Let_formal_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_let_formal_type
	return p
}

func (*Let_formal_typeContext) IsLet_formal_typeContext() {}

func NewLet_formal_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Let_formal_typeContext {
	var p = new(Let_formal_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_let_formal_type

	return p
}

func (s *Let_formal_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Let_formal_typeContext) KW_UNTYPED() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_UNTYPED, 0)
}

func (s *Let_formal_typeContext) Data_type_or_implicit() IData_type_or_implicitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_or_implicitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_or_implicitContext)
}

func (s *Let_formal_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Let_formal_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Let_formal_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterLet_formal_type(s)
	}
}

func (s *Let_formal_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitLet_formal_type(s)
	}
}

func (p *SV2017Parser) Let_formal_type() (localctx ILet_formal_typeContext) {
	localctx = NewLet_formal_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 384, SV2017ParserRULE_let_formal_type)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2786)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_UNTYPED:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2784)
			p.Match(SV2017ParserKW_UNTYPED)
		}

	case SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_BIT, SV2017ParserKW_BYTE, SV2017ParserKW_CHANDLE, SV2017ParserKW_ENUM, SV2017ParserKW_EVENT, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LOCAL, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_SAMPLE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_UNION, SV2017ParserKW_UNSIGNED, SV2017ParserKW_VIRTUAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserLSQUARE_BR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2785)
			p.Data_type_or_implicit()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPackage_import_declarationContext is an interface to support dynamic dispatch.
type IPackage_import_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackage_import_declarationContext differentiates from other interfaces.
	IsPackage_import_declarationContext()
}

type Package_import_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackage_import_declarationContext() *Package_import_declarationContext {
	var p = new(Package_import_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_package_import_declaration
	return p
}

func (*Package_import_declarationContext) IsPackage_import_declarationContext() {}

func NewPackage_import_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Package_import_declarationContext {
	var p = new(Package_import_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_package_import_declaration

	return p
}

func (s *Package_import_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Package_import_declarationContext) KW_IMPORT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_IMPORT, 0)
}

func (s *Package_import_declarationContext) AllPackage_import_item() []IPackage_import_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPackage_import_itemContext)(nil)).Elem())
	var tst = make([]IPackage_import_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPackage_import_itemContext)
		}
	}

	return tst
}

func (s *Package_import_declarationContext) Package_import_item(i int) IPackage_import_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackage_import_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPackage_import_itemContext)
}

func (s *Package_import_declarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Package_import_declarationContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Package_import_declarationContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Package_import_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Package_import_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Package_import_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPackage_import_declaration(s)
	}
}

func (s *Package_import_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPackage_import_declaration(s)
	}
}

func (p *SV2017Parser) Package_import_declaration() (localctx IPackage_import_declarationContext) {
	localctx = NewPackage_import_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 386, SV2017ParserRULE_package_import_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2788)
		p.Match(SV2017ParserKW_IMPORT)
	}
	{
		p.SetState(2789)
		p.Package_import_item()
	}
	p.SetState(2794)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserCOMMA {
		{
			p.SetState(2790)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(2791)
			p.Package_import_item()
		}

		p.SetState(2796)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2797)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IPackage_import_itemContext is an interface to support dynamic dispatch.
type IPackage_import_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackage_import_itemContext differentiates from other interfaces.
	IsPackage_import_itemContext()
}

type Package_import_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackage_import_itemContext() *Package_import_itemContext {
	var p = new(Package_import_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_package_import_item
	return p
}

func (*Package_import_itemContext) IsPackage_import_itemContext() {}

func NewPackage_import_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Package_import_itemContext {
	var p = new(Package_import_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_package_import_item

	return p
}

func (s *Package_import_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Package_import_itemContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Package_import_itemContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Package_import_itemContext) DOUBLE_COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOUBLE_COLON, 0)
}

func (s *Package_import_itemContext) MUL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserMUL, 0)
}

func (s *Package_import_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Package_import_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Package_import_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPackage_import_item(s)
	}
}

func (s *Package_import_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPackage_import_item(s)
	}
}

func (p *SV2017Parser) Package_import_item() (localctx IPackage_import_itemContext) {
	localctx = NewPackage_import_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 388, SV2017ParserRULE_package_import_item)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2799)
		p.Identifier()
	}
	{
		p.SetState(2800)
		p.Match(SV2017ParserDOUBLE_COLON)
	}
	p.SetState(2803)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserMUL:
		{
			p.SetState(2801)
			p.Match(SV2017ParserMUL)
		}

	case SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_SAMPLE, SV2017ParserKW_STD, SV2017ParserKW_TYPE_OPTION, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
		{
			p.SetState(2802)
			p.Identifier()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IProperty_list_of_argumentsContext is an interface to support dynamic dispatch.
type IProperty_list_of_argumentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProperty_list_of_argumentsContext differentiates from other interfaces.
	IsProperty_list_of_argumentsContext()
}

type Property_list_of_argumentsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProperty_list_of_argumentsContext() *Property_list_of_argumentsContext {
	var p = new(Property_list_of_argumentsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_property_list_of_arguments
	return p
}

func (*Property_list_of_argumentsContext) IsProperty_list_of_argumentsContext() {}

func NewProperty_list_of_argumentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Property_list_of_argumentsContext {
	var p = new(Property_list_of_argumentsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_property_list_of_arguments

	return p
}

func (s *Property_list_of_argumentsContext) GetParser() antlr.Parser { return s.parser }

func (s *Property_list_of_argumentsContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserDOT)
}

func (s *Property_list_of_argumentsContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOT, i)
}

func (s *Property_list_of_argumentsContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Property_list_of_argumentsContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Property_list_of_argumentsContext) AllLPAREN() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserLPAREN)
}

func (s *Property_list_of_argumentsContext) LPAREN(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, i)
}

func (s *Property_list_of_argumentsContext) AllRPAREN() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserRPAREN)
}

func (s *Property_list_of_argumentsContext) RPAREN(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, i)
}

func (s *Property_list_of_argumentsContext) AllProperty_actual_arg() []IProperty_actual_argContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProperty_actual_argContext)(nil)).Elem())
	var tst = make([]IProperty_actual_argContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProperty_actual_argContext)
		}
	}

	return tst
}

func (s *Property_list_of_argumentsContext) Property_actual_arg(i int) IProperty_actual_argContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProperty_actual_argContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProperty_actual_argContext)
}

func (s *Property_list_of_argumentsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Property_list_of_argumentsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Property_list_of_argumentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Property_list_of_argumentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Property_list_of_argumentsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterProperty_list_of_arguments(s)
	}
}

func (s *Property_list_of_argumentsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitProperty_list_of_arguments(s)
	}
}

func (p *SV2017Parser) Property_list_of_arguments() (localctx IProperty_list_of_argumentsContext) {
	localctx = NewProperty_list_of_argumentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 390, SV2017ParserRULE_property_list_of_arguments)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2831)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 248, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2805)
			p.Match(SV2017ParserDOT)
		}
		{
			p.SetState(2806)
			p.Identifier()
		}
		{
			p.SetState(2807)
			p.Match(SV2017ParserLPAREN)
		}
		p.SetState(2809)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20))|(1<<(SV2017ParserKW_ACCEPT_ON-20))|(1<<(SV2017ParserKW_ALWAYS-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CASE-56))|(1<<(SV2017ParserKW_CONST-56))|(1<<(SV2017ParserKW_EDGE-56)))) != 0) || (((_la-109)&-(0x1f+1)) == 0 && ((1<<uint((_la-109)))&((1<<(SV2017ParserKW_EVENTUALLY-109))|(1<<(SV2017ParserKW_FIRST_MATCH-109))|(1<<(SV2017ParserKW_IF-109)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141))|(1<<(SV2017ParserKW_NEGEDGE-141))|(1<<(SV2017ParserKW_NEXTTIME-141))|(1<<(SV2017ParserKW_NOT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_POSEDGE-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173))|(1<<(SV2017ParserKW_REJECT_ON-173)))) != 0) || (((_la-214)&-(0x1f+1)) == 0 && ((1<<uint((_la-214)))&((1<<(SV2017ParserKW_S_ALWAYS-214))|(1<<(SV2017ParserKW_S_EVENTUALLY-214))|(1<<(SV2017ParserKW_S_NEXTTIME-214))|(1<<(SV2017ParserKW_SAMPLE-214))|(1<<(SV2017ParserKW_SHORTINT-214))|(1<<(SV2017ParserKW_SHORTREAL-214))|(1<<(SV2017ParserKW_SIGNED-214))|(1<<(SV2017ParserKW_STD-214))|(1<<(SV2017ParserKW_STRING-214))|(1<<(SV2017ParserKW_STRONG-214))|(1<<(SV2017ParserKW_SUPER-214))|(1<<(SV2017ParserKW_SYNC_ACCEPT_ON-214))|(1<<(SV2017ParserKW_SYNC_REJECT_ON-214))|(1<<(SV2017ParserKW_TAGGED-214)))) != 0) || (((_la-246)&-(0x1f+1)) == 0 && ((1<<uint((_la-246)))&((1<<(SV2017ParserKW_THIS-246))|(1<<(SV2017ParserKW_TIME-246))|(1<<(SV2017ParserKW_TYPE-246))|(1<<(SV2017ParserKW_TYPE_OPTION-246))|(1<<(SV2017ParserKW_UNSIGNED-246)))) != 0) || (((_la-279)&-(0x1f+1)) == 0 && ((1<<uint((_la-279)))&((1<<(SV2017ParserKW_WEAK-279))|(1<<(SV2017ParserTIME_LITERAL-279))|(1<<(SV2017ParserANY_BASED_NUMBER-279))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-279))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-279))|(1<<(SV2017ParserFIXED_POINT_NUMBER-279))|(1<<(SV2017ParserUNSIGNED_NUMBER-279))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-279))|(1<<(SV2017ParserSTRING_LITERAL-279))|(1<<(SV2017ParserC_IDENTIFIER-279))|(1<<(SV2017ParserTICK_IDENTIFIER-279))|(1<<(SV2017ParserESCAPED_IDENTIFIER-279))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-279))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-279))|(1<<(SV2017ParserLPAREN-279))|(1<<(SV2017ParserLBRACE-279)))) != 0) || (((_la-313)&-(0x1f+1)) == 0 && ((1<<uint((_la-313)))&((1<<(SV2017ParserAPOSTROPHE_LBRACE-313))|(1<<(SV2017ParserDOLAR-313))|(1<<(SV2017ParserNOT-313))|(1<<(SV2017ParserNEG-313))|(1<<(SV2017ParserNAND-313))|(1<<(SV2017ParserNOR-313))|(1<<(SV2017ParserXOR-313))|(1<<(SV2017ParserNXOR-313))|(1<<(SV2017ParserXORN-313)))) != 0) || (((_la-355)&-(0x1f+1)) == 0 && ((1<<uint((_la-355)))&((1<<(SV2017ParserPLUS-355))|(1<<(SV2017ParserMINUS-355))|(1<<(SV2017ParserAMPERSAND-355))|(1<<(SV2017ParserBAR-355))|(1<<(SV2017ParserINCR-355))|(1<<(SV2017ParserDECR-355))|(1<<(SV2017ParserAT-355))|(1<<(SV2017ParserDOUBLE_HASH-355)))) != 0) {
			{
				p.SetState(2808)
				p.Property_actual_arg()
			}

		}
		{
			p.SetState(2811)
			p.Match(SV2017ParserRPAREN)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 248, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(2813)
			p.Property_actual_arg()
		}
		p.SetState(2820)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 245, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(2814)
					p.Match(SV2017ParserCOMMA)
				}
				p.SetState(2816)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20))|(1<<(SV2017ParserKW_ACCEPT_ON-20))|(1<<(SV2017ParserKW_ALWAYS-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CASE-56))|(1<<(SV2017ParserKW_CONST-56))|(1<<(SV2017ParserKW_EDGE-56)))) != 0) || (((_la-109)&-(0x1f+1)) == 0 && ((1<<uint((_la-109)))&((1<<(SV2017ParserKW_EVENTUALLY-109))|(1<<(SV2017ParserKW_FIRST_MATCH-109))|(1<<(SV2017ParserKW_IF-109)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141))|(1<<(SV2017ParserKW_NEGEDGE-141))|(1<<(SV2017ParserKW_NEXTTIME-141))|(1<<(SV2017ParserKW_NOT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_POSEDGE-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173))|(1<<(SV2017ParserKW_REJECT_ON-173)))) != 0) || (((_la-214)&-(0x1f+1)) == 0 && ((1<<uint((_la-214)))&((1<<(SV2017ParserKW_S_ALWAYS-214))|(1<<(SV2017ParserKW_S_EVENTUALLY-214))|(1<<(SV2017ParserKW_S_NEXTTIME-214))|(1<<(SV2017ParserKW_SAMPLE-214))|(1<<(SV2017ParserKW_SHORTINT-214))|(1<<(SV2017ParserKW_SHORTREAL-214))|(1<<(SV2017ParserKW_SIGNED-214))|(1<<(SV2017ParserKW_STD-214))|(1<<(SV2017ParserKW_STRING-214))|(1<<(SV2017ParserKW_STRONG-214))|(1<<(SV2017ParserKW_SUPER-214))|(1<<(SV2017ParserKW_SYNC_ACCEPT_ON-214))|(1<<(SV2017ParserKW_SYNC_REJECT_ON-214))|(1<<(SV2017ParserKW_TAGGED-214)))) != 0) || (((_la-246)&-(0x1f+1)) == 0 && ((1<<uint((_la-246)))&((1<<(SV2017ParserKW_THIS-246))|(1<<(SV2017ParserKW_TIME-246))|(1<<(SV2017ParserKW_TYPE-246))|(1<<(SV2017ParserKW_TYPE_OPTION-246))|(1<<(SV2017ParserKW_UNSIGNED-246)))) != 0) || (((_la-279)&-(0x1f+1)) == 0 && ((1<<uint((_la-279)))&((1<<(SV2017ParserKW_WEAK-279))|(1<<(SV2017ParserTIME_LITERAL-279))|(1<<(SV2017ParserANY_BASED_NUMBER-279))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-279))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-279))|(1<<(SV2017ParserFIXED_POINT_NUMBER-279))|(1<<(SV2017ParserUNSIGNED_NUMBER-279))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-279))|(1<<(SV2017ParserSTRING_LITERAL-279))|(1<<(SV2017ParserC_IDENTIFIER-279))|(1<<(SV2017ParserTICK_IDENTIFIER-279))|(1<<(SV2017ParserESCAPED_IDENTIFIER-279))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-279))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-279))|(1<<(SV2017ParserLPAREN-279))|(1<<(SV2017ParserLBRACE-279)))) != 0) || (((_la-313)&-(0x1f+1)) == 0 && ((1<<uint((_la-313)))&((1<<(SV2017ParserAPOSTROPHE_LBRACE-313))|(1<<(SV2017ParserDOLAR-313))|(1<<(SV2017ParserNOT-313))|(1<<(SV2017ParserNEG-313))|(1<<(SV2017ParserNAND-313))|(1<<(SV2017ParserNOR-313))|(1<<(SV2017ParserXOR-313))|(1<<(SV2017ParserNXOR-313))|(1<<(SV2017ParserXORN-313)))) != 0) || (((_la-355)&-(0x1f+1)) == 0 && ((1<<uint((_la-355)))&((1<<(SV2017ParserPLUS-355))|(1<<(SV2017ParserMINUS-355))|(1<<(SV2017ParserAMPERSAND-355))|(1<<(SV2017ParserBAR-355))|(1<<(SV2017ParserINCR-355))|(1<<(SV2017ParserDECR-355))|(1<<(SV2017ParserAT-355))|(1<<(SV2017ParserDOUBLE_HASH-355)))) != 0) {
					{
						p.SetState(2815)
						p.Property_actual_arg()
					}

				}

			}
			p.SetState(2822)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 245, p.GetParserRuleContext())
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 248, p.GetParserRuleContext()) == 3 {
		p.SetState(2827)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(2823)
					p.Match(SV2017ParserCOMMA)
				}
				p.SetState(2825)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20))|(1<<(SV2017ParserKW_ACCEPT_ON-20))|(1<<(SV2017ParserKW_ALWAYS-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CASE-56))|(1<<(SV2017ParserKW_CONST-56))|(1<<(SV2017ParserKW_EDGE-56)))) != 0) || (((_la-109)&-(0x1f+1)) == 0 && ((1<<uint((_la-109)))&((1<<(SV2017ParserKW_EVENTUALLY-109))|(1<<(SV2017ParserKW_FIRST_MATCH-109))|(1<<(SV2017ParserKW_IF-109)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141))|(1<<(SV2017ParserKW_NEGEDGE-141))|(1<<(SV2017ParserKW_NEXTTIME-141))|(1<<(SV2017ParserKW_NOT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_POSEDGE-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173))|(1<<(SV2017ParserKW_REJECT_ON-173)))) != 0) || (((_la-214)&-(0x1f+1)) == 0 && ((1<<uint((_la-214)))&((1<<(SV2017ParserKW_S_ALWAYS-214))|(1<<(SV2017ParserKW_S_EVENTUALLY-214))|(1<<(SV2017ParserKW_S_NEXTTIME-214))|(1<<(SV2017ParserKW_SAMPLE-214))|(1<<(SV2017ParserKW_SHORTINT-214))|(1<<(SV2017ParserKW_SHORTREAL-214))|(1<<(SV2017ParserKW_SIGNED-214))|(1<<(SV2017ParserKW_STD-214))|(1<<(SV2017ParserKW_STRING-214))|(1<<(SV2017ParserKW_STRONG-214))|(1<<(SV2017ParserKW_SUPER-214))|(1<<(SV2017ParserKW_SYNC_ACCEPT_ON-214))|(1<<(SV2017ParserKW_SYNC_REJECT_ON-214))|(1<<(SV2017ParserKW_TAGGED-214)))) != 0) || (((_la-246)&-(0x1f+1)) == 0 && ((1<<uint((_la-246)))&((1<<(SV2017ParserKW_THIS-246))|(1<<(SV2017ParserKW_TIME-246))|(1<<(SV2017ParserKW_TYPE-246))|(1<<(SV2017ParserKW_TYPE_OPTION-246))|(1<<(SV2017ParserKW_UNSIGNED-246)))) != 0) || (((_la-279)&-(0x1f+1)) == 0 && ((1<<uint((_la-279)))&((1<<(SV2017ParserKW_WEAK-279))|(1<<(SV2017ParserTIME_LITERAL-279))|(1<<(SV2017ParserANY_BASED_NUMBER-279))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-279))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-279))|(1<<(SV2017ParserFIXED_POINT_NUMBER-279))|(1<<(SV2017ParserUNSIGNED_NUMBER-279))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-279))|(1<<(SV2017ParserSTRING_LITERAL-279))|(1<<(SV2017ParserC_IDENTIFIER-279))|(1<<(SV2017ParserTICK_IDENTIFIER-279))|(1<<(SV2017ParserESCAPED_IDENTIFIER-279))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-279))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-279))|(1<<(SV2017ParserLPAREN-279))|(1<<(SV2017ParserLBRACE-279)))) != 0) || (((_la-313)&-(0x1f+1)) == 0 && ((1<<uint((_la-313)))&((1<<(SV2017ParserAPOSTROPHE_LBRACE-313))|(1<<(SV2017ParserDOLAR-313))|(1<<(SV2017ParserNOT-313))|(1<<(SV2017ParserNEG-313))|(1<<(SV2017ParserNAND-313))|(1<<(SV2017ParserNOR-313))|(1<<(SV2017ParserXOR-313))|(1<<(SV2017ParserNXOR-313))|(1<<(SV2017ParserXORN-313)))) != 0) || (((_la-355)&-(0x1f+1)) == 0 && ((1<<uint((_la-355)))&((1<<(SV2017ParserPLUS-355))|(1<<(SV2017ParserMINUS-355))|(1<<(SV2017ParserAMPERSAND-355))|(1<<(SV2017ParserBAR-355))|(1<<(SV2017ParserINCR-355))|(1<<(SV2017ParserDECR-355))|(1<<(SV2017ParserAT-355))|(1<<(SV2017ParserDOUBLE_HASH-355)))) != 0) {
					{
						p.SetState(2824)
						p.Property_actual_arg()
					}

				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(2829)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 247, p.GetParserRuleContext())
		}

	}
	p.SetState(2844)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserCOMMA {
		{
			p.SetState(2833)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(2834)
			p.Match(SV2017ParserDOT)
		}
		{
			p.SetState(2835)
			p.Identifier()
		}
		{
			p.SetState(2836)
			p.Match(SV2017ParserLPAREN)
		}
		p.SetState(2838)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20))|(1<<(SV2017ParserKW_ACCEPT_ON-20))|(1<<(SV2017ParserKW_ALWAYS-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CASE-56))|(1<<(SV2017ParserKW_CONST-56))|(1<<(SV2017ParserKW_EDGE-56)))) != 0) || (((_la-109)&-(0x1f+1)) == 0 && ((1<<uint((_la-109)))&((1<<(SV2017ParserKW_EVENTUALLY-109))|(1<<(SV2017ParserKW_FIRST_MATCH-109))|(1<<(SV2017ParserKW_IF-109)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141))|(1<<(SV2017ParserKW_NEGEDGE-141))|(1<<(SV2017ParserKW_NEXTTIME-141))|(1<<(SV2017ParserKW_NOT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_POSEDGE-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173))|(1<<(SV2017ParserKW_REJECT_ON-173)))) != 0) || (((_la-214)&-(0x1f+1)) == 0 && ((1<<uint((_la-214)))&((1<<(SV2017ParserKW_S_ALWAYS-214))|(1<<(SV2017ParserKW_S_EVENTUALLY-214))|(1<<(SV2017ParserKW_S_NEXTTIME-214))|(1<<(SV2017ParserKW_SAMPLE-214))|(1<<(SV2017ParserKW_SHORTINT-214))|(1<<(SV2017ParserKW_SHORTREAL-214))|(1<<(SV2017ParserKW_SIGNED-214))|(1<<(SV2017ParserKW_STD-214))|(1<<(SV2017ParserKW_STRING-214))|(1<<(SV2017ParserKW_STRONG-214))|(1<<(SV2017ParserKW_SUPER-214))|(1<<(SV2017ParserKW_SYNC_ACCEPT_ON-214))|(1<<(SV2017ParserKW_SYNC_REJECT_ON-214))|(1<<(SV2017ParserKW_TAGGED-214)))) != 0) || (((_la-246)&-(0x1f+1)) == 0 && ((1<<uint((_la-246)))&((1<<(SV2017ParserKW_THIS-246))|(1<<(SV2017ParserKW_TIME-246))|(1<<(SV2017ParserKW_TYPE-246))|(1<<(SV2017ParserKW_TYPE_OPTION-246))|(1<<(SV2017ParserKW_UNSIGNED-246)))) != 0) || (((_la-279)&-(0x1f+1)) == 0 && ((1<<uint((_la-279)))&((1<<(SV2017ParserKW_WEAK-279))|(1<<(SV2017ParserTIME_LITERAL-279))|(1<<(SV2017ParserANY_BASED_NUMBER-279))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-279))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-279))|(1<<(SV2017ParserFIXED_POINT_NUMBER-279))|(1<<(SV2017ParserUNSIGNED_NUMBER-279))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-279))|(1<<(SV2017ParserSTRING_LITERAL-279))|(1<<(SV2017ParserC_IDENTIFIER-279))|(1<<(SV2017ParserTICK_IDENTIFIER-279))|(1<<(SV2017ParserESCAPED_IDENTIFIER-279))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-279))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-279))|(1<<(SV2017ParserLPAREN-279))|(1<<(SV2017ParserLBRACE-279)))) != 0) || (((_la-313)&-(0x1f+1)) == 0 && ((1<<uint((_la-313)))&((1<<(SV2017ParserAPOSTROPHE_LBRACE-313))|(1<<(SV2017ParserDOLAR-313))|(1<<(SV2017ParserNOT-313))|(1<<(SV2017ParserNEG-313))|(1<<(SV2017ParserNAND-313))|(1<<(SV2017ParserNOR-313))|(1<<(SV2017ParserXOR-313))|(1<<(SV2017ParserNXOR-313))|(1<<(SV2017ParserXORN-313)))) != 0) || (((_la-355)&-(0x1f+1)) == 0 && ((1<<uint((_la-355)))&((1<<(SV2017ParserPLUS-355))|(1<<(SV2017ParserMINUS-355))|(1<<(SV2017ParserAMPERSAND-355))|(1<<(SV2017ParserBAR-355))|(1<<(SV2017ParserINCR-355))|(1<<(SV2017ParserDECR-355))|(1<<(SV2017ParserAT-355))|(1<<(SV2017ParserDOUBLE_HASH-355)))) != 0) {
			{
				p.SetState(2837)
				p.Property_actual_arg()
			}

		}
		{
			p.SetState(2840)
			p.Match(SV2017ParserRPAREN)
		}

		p.SetState(2846)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IProperty_actual_argContext is an interface to support dynamic dispatch.
type IProperty_actual_argContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProperty_actual_argContext differentiates from other interfaces.
	IsProperty_actual_argContext()
}

type Property_actual_argContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProperty_actual_argContext() *Property_actual_argContext {
	var p = new(Property_actual_argContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_property_actual_arg
	return p
}

func (*Property_actual_argContext) IsProperty_actual_argContext() {}

func NewProperty_actual_argContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Property_actual_argContext {
	var p = new(Property_actual_argContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_property_actual_arg

	return p
}

func (s *Property_actual_argContext) GetParser() antlr.Parser { return s.parser }

func (s *Property_actual_argContext) Property_expr() IProperty_exprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProperty_exprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProperty_exprContext)
}

func (s *Property_actual_argContext) Sequence_actual_arg() ISequence_actual_argContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISequence_actual_argContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISequence_actual_argContext)
}

func (s *Property_actual_argContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Property_actual_argContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Property_actual_argContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterProperty_actual_arg(s)
	}
}

func (s *Property_actual_argContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitProperty_actual_arg(s)
	}
}

func (p *SV2017Parser) Property_actual_arg() (localctx IProperty_actual_argContext) {
	localctx = NewProperty_actual_argContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 392, SV2017ParserRULE_property_actual_arg)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2849)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 251, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2847)
			p.property_expr(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2848)
			p.Sequence_actual_arg()
		}

	}

	return localctx
}

// IProperty_formal_typeContext is an interface to support dynamic dispatch.
type IProperty_formal_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProperty_formal_typeContext differentiates from other interfaces.
	IsProperty_formal_typeContext()
}

type Property_formal_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProperty_formal_typeContext() *Property_formal_typeContext {
	var p = new(Property_formal_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_property_formal_type
	return p
}

func (*Property_formal_typeContext) IsProperty_formal_typeContext() {}

func NewProperty_formal_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Property_formal_typeContext {
	var p = new(Property_formal_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_property_formal_type

	return p
}

func (s *Property_formal_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Property_formal_typeContext) KW_PROPERTY() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_PROPERTY, 0)
}

func (s *Property_formal_typeContext) Sequence_formal_type() ISequence_formal_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISequence_formal_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISequence_formal_typeContext)
}

func (s *Property_formal_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Property_formal_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Property_formal_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterProperty_formal_type(s)
	}
}

func (s *Property_formal_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitProperty_formal_type(s)
	}
}

func (p *SV2017Parser) Property_formal_type() (localctx IProperty_formal_typeContext) {
	localctx = NewProperty_formal_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 394, SV2017ParserRULE_property_formal_type)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2853)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_PROPERTY:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2851)
			p.Match(SV2017ParserKW_PROPERTY)
		}

	case SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_BIT, SV2017ParserKW_BYTE, SV2017ParserKW_CHANDLE, SV2017ParserKW_ENUM, SV2017ParserKW_EVENT, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LOCAL, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_SAMPLE, SV2017ParserKW_SEQUENCE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_UNION, SV2017ParserKW_UNSIGNED, SV2017ParserKW_UNTYPED, SV2017ParserKW_VIRTUAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserLSQUARE_BR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2852)
			p.Sequence_formal_type()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISequence_formal_typeContext is an interface to support dynamic dispatch.
type ISequence_formal_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSequence_formal_typeContext differentiates from other interfaces.
	IsSequence_formal_typeContext()
}

type Sequence_formal_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySequence_formal_typeContext() *Sequence_formal_typeContext {
	var p = new(Sequence_formal_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_sequence_formal_type
	return p
}

func (*Sequence_formal_typeContext) IsSequence_formal_typeContext() {}

func NewSequence_formal_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sequence_formal_typeContext {
	var p = new(Sequence_formal_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_sequence_formal_type

	return p
}

func (s *Sequence_formal_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Sequence_formal_typeContext) KW_SEQUENCE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_SEQUENCE, 0)
}

func (s *Sequence_formal_typeContext) KW_UNTYPED() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_UNTYPED, 0)
}

func (s *Sequence_formal_typeContext) Data_type_or_implicit() IData_type_or_implicitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_or_implicitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_or_implicitContext)
}

func (s *Sequence_formal_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sequence_formal_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sequence_formal_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterSequence_formal_type(s)
	}
}

func (s *Sequence_formal_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitSequence_formal_type(s)
	}
}

func (p *SV2017Parser) Sequence_formal_type() (localctx ISequence_formal_typeContext) {
	localctx = NewSequence_formal_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 396, SV2017ParserRULE_sequence_formal_type)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2858)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_SEQUENCE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2855)
			p.Match(SV2017ParserKW_SEQUENCE)
		}

	case SV2017ParserKW_UNTYPED:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2856)
			p.Match(SV2017ParserKW_UNTYPED)
		}

	case SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_BIT, SV2017ParserKW_BYTE, SV2017ParserKW_CHANDLE, SV2017ParserKW_ENUM, SV2017ParserKW_EVENT, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LOCAL, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_SAMPLE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_UNION, SV2017ParserKW_UNSIGNED, SV2017ParserKW_VIRTUAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserLSQUARE_BR:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2857)
			p.Data_type_or_implicit()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IProperty_instanceContext is an interface to support dynamic dispatch.
type IProperty_instanceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProperty_instanceContext differentiates from other interfaces.
	IsProperty_instanceContext()
}

type Property_instanceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProperty_instanceContext() *Property_instanceContext {
	var p = new(Property_instanceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_property_instance
	return p
}

func (*Property_instanceContext) IsProperty_instanceContext() {}

func NewProperty_instanceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Property_instanceContext {
	var p = new(Property_instanceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_property_instance

	return p
}

func (s *Property_instanceContext) GetParser() antlr.Parser { return s.parser }

func (s *Property_instanceContext) Package_or_class_scoped_id() IPackage_or_class_scoped_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackage_or_class_scoped_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackage_or_class_scoped_idContext)
}

func (s *Property_instanceContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Property_instanceContext) Property_list_of_arguments() IProperty_list_of_argumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProperty_list_of_argumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProperty_list_of_argumentsContext)
}

func (s *Property_instanceContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Property_instanceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Property_instanceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Property_instanceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterProperty_instance(s)
	}
}

func (s *Property_instanceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitProperty_instance(s)
	}
}

func (p *SV2017Parser) Property_instance() (localctx IProperty_instanceContext) {
	localctx = NewProperty_instanceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 398, SV2017ParserRULE_property_instance)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2860)
		p.Package_or_class_scoped_id()
	}
	p.SetState(2865)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 254, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2861)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(2862)
			p.Property_list_of_arguments()
		}
		{
			p.SetState(2863)
			p.Match(SV2017ParserRPAREN)
		}

	}

	return localctx
}

// IProperty_specContext is an interface to support dynamic dispatch.
type IProperty_specContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProperty_specContext differentiates from other interfaces.
	IsProperty_specContext()
}

type Property_specContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProperty_specContext() *Property_specContext {
	var p = new(Property_specContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_property_spec
	return p
}

func (*Property_specContext) IsProperty_specContext() {}

func NewProperty_specContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Property_specContext {
	var p = new(Property_specContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_property_spec

	return p
}

func (s *Property_specContext) GetParser() antlr.Parser { return s.parser }

func (s *Property_specContext) Property_expr() IProperty_exprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProperty_exprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProperty_exprContext)
}

func (s *Property_specContext) Clocking_event() IClocking_eventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClocking_eventContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClocking_eventContext)
}

func (s *Property_specContext) KW_DISABLE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DISABLE, 0)
}

func (s *Property_specContext) KW_IFF() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_IFF, 0)
}

func (s *Property_specContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Property_specContext) Expression_or_dist() IExpression_or_distContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_or_distContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_or_distContext)
}

func (s *Property_specContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Property_specContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Property_specContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Property_specContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterProperty_spec(s)
	}
}

func (s *Property_specContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitProperty_spec(s)
	}
}

func (p *SV2017Parser) Property_spec() (localctx IProperty_specContext) {
	localctx = NewProperty_specContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 400, SV2017ParserRULE_property_spec)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2868)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 255, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2867)
			p.Clocking_event()
		}

	}
	p.SetState(2876)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_DISABLE {
		{
			p.SetState(2870)
			p.Match(SV2017ParserKW_DISABLE)
		}
		{
			p.SetState(2871)
			p.Match(SV2017ParserKW_IFF)
		}
		{
			p.SetState(2872)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(2873)
			p.Expression_or_dist()
		}
		{
			p.SetState(2874)
			p.Match(SV2017ParserRPAREN)
		}

	}
	{
		p.SetState(2878)
		p.property_expr(0)
	}

	return localctx
}

// IProperty_exprContext is an interface to support dynamic dispatch.
type IProperty_exprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProperty_exprContext differentiates from other interfaces.
	IsProperty_exprContext()
}

type Property_exprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProperty_exprContext() *Property_exprContext {
	var p = new(Property_exprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_property_expr
	return p
}

func (*Property_exprContext) IsProperty_exprContext() {}

func NewProperty_exprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Property_exprContext {
	var p = new(Property_exprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_property_expr

	return p
}

func (s *Property_exprContext) GetParser() antlr.Parser { return s.parser }

func (s *Property_exprContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Property_exprContext) AllProperty_expr() []IProperty_exprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProperty_exprContext)(nil)).Elem())
	var tst = make([]IProperty_exprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProperty_exprContext)
		}
	}

	return tst
}

func (s *Property_exprContext) Property_expr(i int) IProperty_exprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProperty_exprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProperty_exprContext)
}

func (s *Property_exprContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Property_exprContext) KW_STRONG() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_STRONG, 0)
}

func (s *Property_exprContext) KW_WEAK() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_WEAK, 0)
}

func (s *Property_exprContext) KW_IF() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_IF, 0)
}

func (s *Property_exprContext) Expression_or_dist() IExpression_or_distContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_or_distContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_or_distContext)
}

func (s *Property_exprContext) KW_ELSE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ELSE, 0)
}

func (s *Property_exprContext) KW_CASE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_CASE, 0)
}

func (s *Property_exprContext) KW_ENDCASE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ENDCASE, 0)
}

func (s *Property_exprContext) AllProperty_case_item() []IProperty_case_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProperty_case_itemContext)(nil)).Elem())
	var tst = make([]IProperty_case_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProperty_case_itemContext)
		}
	}

	return tst
}

func (s *Property_exprContext) Property_case_item(i int) IProperty_case_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProperty_case_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProperty_case_itemContext)
}

func (s *Property_exprContext) Sequence_expr() ISequence_exprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISequence_exprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISequence_exprContext)
}

func (s *Property_exprContext) OVERLAPPING_IMPL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserOVERLAPPING_IMPL, 0)
}

func (s *Property_exprContext) NONOVERLAPPING_IMPL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserNONOVERLAPPING_IMPL, 0)
}

func (s *Property_exprContext) HASH_MINUS_HASH() antlr.TerminalNode {
	return s.GetToken(SV2017ParserHASH_MINUS_HASH, 0)
}

func (s *Property_exprContext) HASH_EQ_HASH() antlr.TerminalNode {
	return s.GetToken(SV2017ParserHASH_EQ_HASH, 0)
}

func (s *Property_exprContext) KW_NOT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_NOT, 0)
}

func (s *Property_exprContext) LSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLSQUARE_BR, 0)
}

func (s *Property_exprContext) Range_expression() IRange_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRange_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRange_expressionContext)
}

func (s *Property_exprContext) RSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRSQUARE_BR, 0)
}

func (s *Property_exprContext) Clocking_event() IClocking_eventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClocking_eventContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClocking_eventContext)
}

func (s *Property_exprContext) KW_S_ALWAYS() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_S_ALWAYS, 0)
}

func (s *Property_exprContext) KW_EVENTUALLY() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_EVENTUALLY, 0)
}

func (s *Property_exprContext) KW_ACCEPT_ON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ACCEPT_ON, 0)
}

func (s *Property_exprContext) KW_REJECT_ON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_REJECT_ON, 0)
}

func (s *Property_exprContext) KW_SYNC_ACCEPT_ON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_SYNC_ACCEPT_ON, 0)
}

func (s *Property_exprContext) KW_SYNC_REJECT_ON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_SYNC_REJECT_ON, 0)
}

func (s *Property_exprContext) KW_NEXTTIME() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_NEXTTIME, 0)
}

func (s *Property_exprContext) KW_S_NEXTTIME() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_S_NEXTTIME, 0)
}

func (s *Property_exprContext) KW_ALWAYS() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ALWAYS, 0)
}

func (s *Property_exprContext) KW_S_EVENTUALLY() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_S_EVENTUALLY, 0)
}

func (s *Property_exprContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Property_exprContext) Cycle_delay_const_range_expression() ICycle_delay_const_range_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICycle_delay_const_range_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICycle_delay_const_range_expressionContext)
}

func (s *Property_exprContext) Property_instance() IProperty_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProperty_instanceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProperty_instanceContext)
}

func (s *Property_exprContext) KW_OR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_OR, 0)
}

func (s *Property_exprContext) KW_AND() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_AND, 0)
}

func (s *Property_exprContext) KW_UNTIL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_UNTIL, 0)
}

func (s *Property_exprContext) KW_S_UNTIL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_S_UNTIL, 0)
}

func (s *Property_exprContext) KW_UNTIL_WITH() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_UNTIL_WITH, 0)
}

func (s *Property_exprContext) KW_S_UNTIL_WITH() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_S_UNTIL_WITH, 0)
}

func (s *Property_exprContext) KW_IMPLIES() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_IMPLIES, 0)
}

func (s *Property_exprContext) KW_IFF() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_IFF, 0)
}

func (s *Property_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Property_exprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Property_exprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterProperty_expr(s)
	}
}

func (s *Property_exprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitProperty_expr(s)
	}
}

func (p *SV2017Parser) Property_expr() (localctx IProperty_exprContext) {
	return p.property_expr(0)
}

func (p *SV2017Parser) property_expr(_p int) (localctx IProperty_exprContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewProperty_exprContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IProperty_exprContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 402
	p.EnterRecursionRule(localctx, 402, SV2017ParserRULE_property_expr, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2944)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 264, p.GetParserRuleContext()) {
	case 1:
		p.SetState(2882)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_STRONG || _la == SV2017ParserKW_WEAK {
			{
				p.SetState(2881)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SV2017ParserKW_STRONG || _la == SV2017ParserKW_WEAK) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(2884)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(2885)
			p.property_expr(0)
		}
		{
			p.SetState(2886)
			p.Match(SV2017ParserRPAREN)
		}

	case 2:
		{
			p.SetState(2888)
			p.Match(SV2017ParserKW_IF)
		}
		{
			p.SetState(2889)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(2890)
			p.Expression_or_dist()
		}
		{
			p.SetState(2891)
			p.Match(SV2017ParserRPAREN)
		}
		{
			p.SetState(2892)
			p.property_expr(0)
		}
		p.SetState(2896)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 258, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(2893)
				p.Match(SV2017ParserKW_ELSE)
			}
			{
				p.SetState(2894)
				p.property_expr(0)
			}

		case 2:

		}

	case 3:
		{
			p.SetState(2898)
			p.Match(SV2017ParserKW_CASE)
		}
		{
			p.SetState(2899)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(2900)
			p.Expression_or_dist()
		}
		{
			p.SetState(2901)
			p.Match(SV2017ParserRPAREN)
		}
		p.SetState(2903)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56))|(1<<(SV2017ParserKW_DEFAULT-56)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TAGGED-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserTIME_LITERAL-260)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(SV2017ParserANY_BASED_NUMBER-292))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-292))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-292))|(1<<(SV2017ParserFIXED_POINT_NUMBER-292))|(1<<(SV2017ParserUNSIGNED_NUMBER-292))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-292))|(1<<(SV2017ParserSTRING_LITERAL-292))|(1<<(SV2017ParserC_IDENTIFIER-292))|(1<<(SV2017ParserTICK_IDENTIFIER-292))|(1<<(SV2017ParserESCAPED_IDENTIFIER-292))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-292))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-292))|(1<<(SV2017ParserLPAREN-292))|(1<<(SV2017ParserLBRACE-292))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-292))|(1<<(SV2017ParserDOLAR-292))|(1<<(SV2017ParserNOT-292))|(1<<(SV2017ParserNEG-292))|(1<<(SV2017ParserNAND-292))|(1<<(SV2017ParserNOR-292)))) != 0) || (((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324))|(1<<(SV2017ParserPLUS-324)))) != 0) || (((_la-356)&-(0x1f+1)) == 0 && ((1<<uint((_la-356)))&((1<<(SV2017ParserMINUS-356))|(1<<(SV2017ParserAMPERSAND-356))|(1<<(SV2017ParserBAR-356))|(1<<(SV2017ParserINCR-356))|(1<<(SV2017ParserDECR-356)))) != 0) {
			{
				p.SetState(2902)
				p.Property_case_item()
			}

			p.SetState(2905)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2907)
			p.Match(SV2017ParserKW_ENDCASE)
		}

	case 4:
		{
			p.SetState(2909)
			p.sequence_expr(0)
		}
		p.SetState(2912)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 260, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2910)
				_la = p.GetTokenStream().LA(1)

				if !(((_la-371)&-(0x1f+1)) == 0 && ((1<<uint((_la-371)))&((1<<(SV2017ParserOVERLAPPING_IMPL-371))|(1<<(SV2017ParserNONOVERLAPPING_IMPL-371))|(1<<(SV2017ParserHASH_MINUS_HASH-371))|(1<<(SV2017ParserHASH_EQ_HASH-371)))) != 0) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(2911)
				p.property_expr(0)
			}

		}

	case 5:
		p.SetState(2940)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SV2017ParserKW_NOT:
			{
				p.SetState(2914)
				p.Match(SV2017ParserKW_NOT)
			}

		case SV2017ParserKW_EVENTUALLY, SV2017ParserKW_S_ALWAYS:
			{
				p.SetState(2915)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SV2017ParserKW_EVENTUALLY || _la == SV2017ParserKW_S_ALWAYS) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(2916)
				p.Match(SV2017ParserLSQUARE_BR)
			}
			{
				p.SetState(2917)
				p.Range_expression()
			}
			{
				p.SetState(2918)
				p.Match(SV2017ParserRSQUARE_BR)
			}

		case SV2017ParserKW_ACCEPT_ON, SV2017ParserKW_REJECT_ON, SV2017ParserKW_SYNC_ACCEPT_ON, SV2017ParserKW_SYNC_REJECT_ON:
			{
				p.SetState(2920)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SV2017ParserKW_ACCEPT_ON || _la == SV2017ParserKW_REJECT_ON || _la == SV2017ParserKW_SYNC_ACCEPT_ON || _la == SV2017ParserKW_SYNC_REJECT_ON) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(2921)
				p.Match(SV2017ParserLPAREN)
			}
			{
				p.SetState(2922)
				p.Expression_or_dist()
			}
			{
				p.SetState(2923)
				p.Match(SV2017ParserRPAREN)
			}

		case SV2017ParserKW_NEXTTIME, SV2017ParserKW_S_NEXTTIME:
			{
				p.SetState(2925)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SV2017ParserKW_NEXTTIME || _la == SV2017ParserKW_S_NEXTTIME) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			p.SetState(2930)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SV2017ParserLSQUARE_BR {
				{
					p.SetState(2926)
					p.Match(SV2017ParserLSQUARE_BR)
				}
				{
					p.SetState(2927)
					p.expression(0)
				}
				{
					p.SetState(2928)
					p.Match(SV2017ParserRSQUARE_BR)
				}

			}

		case SV2017ParserKW_ALWAYS, SV2017ParserKW_S_EVENTUALLY:
			{
				p.SetState(2932)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SV2017ParserKW_ALWAYS || _la == SV2017ParserKW_S_EVENTUALLY) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			p.SetState(2937)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SV2017ParserLSQUARE_BR {
				{
					p.SetState(2933)
					p.Match(SV2017ParserLSQUARE_BR)
				}
				{
					p.SetState(2934)
					p.Cycle_delay_const_range_expression()
				}
				{
					p.SetState(2935)
					p.Match(SV2017ParserRSQUARE_BR)
				}

			}

		case SV2017ParserAT:
			{
				p.SetState(2939)
				p.Clocking_event()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(2942)
			p.property_expr(3)
		}

	case 6:
		{
			p.SetState(2943)
			p.Property_instance()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2951)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 265, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewProperty_exprContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, SV2017ParserRULE_property_expr)
			p.SetState(2946)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(2947)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SV2017ParserKW_AND || _la == SV2017ParserKW_IFF || _la == SV2017ParserKW_IMPLIES || _la == SV2017ParserKW_OR || _la == SV2017ParserKW_S_UNTIL || _la == SV2017ParserKW_S_UNTIL_WITH || _la == SV2017ParserKW_UNTIL || _la == SV2017ParserKW_UNTIL_WITH) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(2948)
				p.property_expr(3)
			}

		}
		p.SetState(2953)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 265, p.GetParserRuleContext())
	}

	return localctx
}

// IProperty_case_itemContext is an interface to support dynamic dispatch.
type IProperty_case_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProperty_case_itemContext differentiates from other interfaces.
	IsProperty_case_itemContext()
}

type Property_case_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProperty_case_itemContext() *Property_case_itemContext {
	var p = new(Property_case_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_property_case_item
	return p
}

func (*Property_case_itemContext) IsProperty_case_itemContext() {}

func NewProperty_case_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Property_case_itemContext {
	var p = new(Property_case_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_property_case_item

	return p
}

func (s *Property_case_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Property_case_itemContext) Property_expr() IProperty_exprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProperty_exprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProperty_exprContext)
}

func (s *Property_case_itemContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Property_case_itemContext) KW_DEFAULT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DEFAULT, 0)
}

func (s *Property_case_itemContext) AllExpression_or_dist() []IExpression_or_distContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpression_or_distContext)(nil)).Elem())
	var tst = make([]IExpression_or_distContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpression_or_distContext)
		}
	}

	return tst
}

func (s *Property_case_itemContext) Expression_or_dist(i int) IExpression_or_distContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_or_distContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpression_or_distContext)
}

func (s *Property_case_itemContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Property_case_itemContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Property_case_itemContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Property_case_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Property_case_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Property_case_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterProperty_case_item(s)
	}
}

func (s *Property_case_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitProperty_case_item(s)
	}
}

func (p *SV2017Parser) Property_case_item() (localctx IProperty_case_itemContext) {
	localctx = NewProperty_case_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 404, SV2017ParserRULE_property_case_item)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2968)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_DEFAULT:
		{
			p.SetState(2954)
			p.Match(SV2017ParserKW_DEFAULT)
		}
		p.SetState(2956)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserCOLON {
			{
				p.SetState(2955)
				p.Match(SV2017ParserCOLON)
			}

		}

	case SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_FATAL, SV2017ParserKW_DOLAR_FULLSKEW, SV2017ParserKW_DOLAR_HOLD, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_NOCHANGE, SV2017ParserKW_DOLAR_PERIOD, SV2017ParserKW_DOLAR_RECOVERY, SV2017ParserKW_DOLAR_RECREM, SV2017ParserKW_DOLAR_REMOVAL, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_SETUP, SV2017ParserKW_DOLAR_SETUPHOLD, SV2017ParserKW_DOLAR_SKEW, SV2017ParserKW_DOLAR_TIMESKEW, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_DOLAR_WARNING, SV2017ParserKW_DOLAR_WIDTH, SV2017ParserKW_BIT, SV2017ParserKW_BYTE, SV2017ParserKW_CONST, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LOCAL, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_NULL, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_SAMPLE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_SUPER, SV2017ParserKW_TAGGED, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_UNSIGNED, SV2017ParserTIME_LITERAL, SV2017ParserANY_BASED_NUMBER, SV2017ParserBASED_NUMBER_WITH_SIZE, SV2017ParserREAL_NUMBER_WITH_EXP, SV2017ParserFIXED_POINT_NUMBER, SV2017ParserUNSIGNED_NUMBER, SV2017ParserUNBASED_UNSIZED_LITERAL, SV2017ParserSTRING_LITERAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSYSTEM_TF_IDENTIFIER, SV2017ParserLPAREN, SV2017ParserLBRACE, SV2017ParserAPOSTROPHE_LBRACE, SV2017ParserDOLAR, SV2017ParserNOT, SV2017ParserNEG, SV2017ParserNAND, SV2017ParserNOR, SV2017ParserXOR, SV2017ParserNXOR, SV2017ParserXORN, SV2017ParserPLUS, SV2017ParserMINUS, SV2017ParserAMPERSAND, SV2017ParserBAR, SV2017ParserINCR, SV2017ParserDECR:
		{
			p.SetState(2958)
			p.Expression_or_dist()
		}
		p.SetState(2963)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserCOMMA {
			{
				p.SetState(2959)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(2960)
				p.Expression_or_dist()
			}

			p.SetState(2965)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2966)
			p.Match(SV2017ParserCOLON)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(2970)
		p.property_expr(0)
	}
	{
		p.SetState(2971)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IBit_selectContext is an interface to support dynamic dispatch.
type IBit_selectContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBit_selectContext differentiates from other interfaces.
	IsBit_selectContext()
}

type Bit_selectContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBit_selectContext() *Bit_selectContext {
	var p = new(Bit_selectContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_bit_select
	return p
}

func (*Bit_selectContext) IsBit_selectContext() {}

func NewBit_selectContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bit_selectContext {
	var p = new(Bit_selectContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_bit_select

	return p
}

func (s *Bit_selectContext) GetParser() antlr.Parser { return s.parser }

func (s *Bit_selectContext) LSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLSQUARE_BR, 0)
}

func (s *Bit_selectContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Bit_selectContext) RSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRSQUARE_BR, 0)
}

func (s *Bit_selectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bit_selectContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bit_selectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterBit_select(s)
	}
}

func (s *Bit_selectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitBit_select(s)
	}
}

func (p *SV2017Parser) Bit_select() (localctx IBit_selectContext) {
	localctx = NewBit_selectContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 406, SV2017ParserRULE_bit_select)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2973)
		p.Match(SV2017ParserLSQUARE_BR)
	}
	{
		p.SetState(2974)
		p.expression(0)
	}
	{
		p.SetState(2975)
		p.Match(SV2017ParserRSQUARE_BR)
	}

	return localctx
}

// IIdentifier_with_bit_selectContext is an interface to support dynamic dispatch.
type IIdentifier_with_bit_selectContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifier_with_bit_selectContext differentiates from other interfaces.
	IsIdentifier_with_bit_selectContext()
}

type Identifier_with_bit_selectContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifier_with_bit_selectContext() *Identifier_with_bit_selectContext {
	var p = new(Identifier_with_bit_selectContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_identifier_with_bit_select
	return p
}

func (*Identifier_with_bit_selectContext) IsIdentifier_with_bit_selectContext() {}

func NewIdentifier_with_bit_selectContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Identifier_with_bit_selectContext {
	var p = new(Identifier_with_bit_selectContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_identifier_with_bit_select

	return p
}

func (s *Identifier_with_bit_selectContext) GetParser() antlr.Parser { return s.parser }

func (s *Identifier_with_bit_selectContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Identifier_with_bit_selectContext) AllBit_select() []IBit_selectContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBit_selectContext)(nil)).Elem())
	var tst = make([]IBit_selectContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBit_selectContext)
		}
	}

	return tst
}

func (s *Identifier_with_bit_selectContext) Bit_select(i int) IBit_selectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBit_selectContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBit_selectContext)
}

func (s *Identifier_with_bit_selectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Identifier_with_bit_selectContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Identifier_with_bit_selectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterIdentifier_with_bit_select(s)
	}
}

func (s *Identifier_with_bit_selectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitIdentifier_with_bit_select(s)
	}
}

func (p *SV2017Parser) Identifier_with_bit_select() (localctx IIdentifier_with_bit_selectContext) {
	localctx = NewIdentifier_with_bit_selectContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 408, SV2017ParserRULE_identifier_with_bit_select)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2977)
		p.Identifier()
	}
	p.SetState(2981)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 269, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2978)
				p.Bit_select()
			}

		}
		p.SetState(2983)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 269, p.GetParserRuleContext())
	}

	return localctx
}

// IPackage_or_class_scoped_hier_id_with_selectContext is an interface to support dynamic dispatch.
type IPackage_or_class_scoped_hier_id_with_selectContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackage_or_class_scoped_hier_id_with_selectContext differentiates from other interfaces.
	IsPackage_or_class_scoped_hier_id_with_selectContext()
}

type Package_or_class_scoped_hier_id_with_selectContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackage_or_class_scoped_hier_id_with_selectContext() *Package_or_class_scoped_hier_id_with_selectContext {
	var p = new(Package_or_class_scoped_hier_id_with_selectContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_package_or_class_scoped_hier_id_with_select
	return p
}

func (*Package_or_class_scoped_hier_id_with_selectContext) IsPackage_or_class_scoped_hier_id_with_selectContext() {
}

func NewPackage_or_class_scoped_hier_id_with_selectContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Package_or_class_scoped_hier_id_with_selectContext {
	var p = new(Package_or_class_scoped_hier_id_with_selectContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_package_or_class_scoped_hier_id_with_select

	return p
}

func (s *Package_or_class_scoped_hier_id_with_selectContext) GetParser() antlr.Parser {
	return s.parser
}

func (s *Package_or_class_scoped_hier_id_with_selectContext) Package_or_class_scoped_path() IPackage_or_class_scoped_pathContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackage_or_class_scoped_pathContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackage_or_class_scoped_pathContext)
}

func (s *Package_or_class_scoped_hier_id_with_selectContext) AllBit_select() []IBit_selectContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBit_selectContext)(nil)).Elem())
	var tst = make([]IBit_selectContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBit_selectContext)
		}
	}

	return tst
}

func (s *Package_or_class_scoped_hier_id_with_selectContext) Bit_select(i int) IBit_selectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBit_selectContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBit_selectContext)
}

func (s *Package_or_class_scoped_hier_id_with_selectContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserDOT)
}

func (s *Package_or_class_scoped_hier_id_with_selectContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOT, i)
}

func (s *Package_or_class_scoped_hier_id_with_selectContext) AllIdentifier_with_bit_select() []IIdentifier_with_bit_selectContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifier_with_bit_selectContext)(nil)).Elem())
	var tst = make([]IIdentifier_with_bit_selectContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifier_with_bit_selectContext)
		}
	}

	return tst
}

func (s *Package_or_class_scoped_hier_id_with_selectContext) Identifier_with_bit_select(i int) IIdentifier_with_bit_selectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_with_bit_selectContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_with_bit_selectContext)
}

func (s *Package_or_class_scoped_hier_id_with_selectContext) LSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLSQUARE_BR, 0)
}

func (s *Package_or_class_scoped_hier_id_with_selectContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Package_or_class_scoped_hier_id_with_selectContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Package_or_class_scoped_hier_id_with_selectContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Package_or_class_scoped_hier_id_with_selectContext) RSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRSQUARE_BR, 0)
}

func (s *Package_or_class_scoped_hier_id_with_selectContext) Operator_plus_minus() IOperator_plus_minusContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperator_plus_minusContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperator_plus_minusContext)
}

func (s *Package_or_class_scoped_hier_id_with_selectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Package_or_class_scoped_hier_id_with_selectContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Package_or_class_scoped_hier_id_with_selectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPackage_or_class_scoped_hier_id_with_select(s)
	}
}

func (s *Package_or_class_scoped_hier_id_with_selectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPackage_or_class_scoped_hier_id_with_select(s)
	}
}

func (p *SV2017Parser) Package_or_class_scoped_hier_id_with_select() (localctx IPackage_or_class_scoped_hier_id_with_selectContext) {
	localctx = NewPackage_or_class_scoped_hier_id_with_selectContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 410, SV2017ParserRULE_package_or_class_scoped_hier_id_with_select)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2984)
		p.Package_or_class_scoped_path()
	}
	p.SetState(2988)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 270, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2985)
				p.Bit_select()
			}

		}
		p.SetState(2990)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 270, p.GetParserRuleContext())
	}
	p.SetState(2995)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 271, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2991)
				p.Match(SV2017ParserDOT)
			}
			{
				p.SetState(2992)
				p.Identifier_with_bit_select()
			}

		}
		p.SetState(2997)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 271, p.GetParserRuleContext())
	}
	p.SetState(3007)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 273, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2998)
			p.Match(SV2017ParserLSQUARE_BR)
		}
		{
			p.SetState(2999)
			p.expression(0)
		}
		p.SetState(3001)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserPLUS || _la == SV2017ParserMINUS {
			{
				p.SetState(3000)
				p.Operator_plus_minus()
			}

		}
		{
			p.SetState(3003)
			p.Match(SV2017ParserCOLON)
		}
		{
			p.SetState(3004)
			p.expression(0)
		}
		{
			p.SetState(3005)
			p.Match(SV2017ParserRSQUARE_BR)
		}

	}

	return localctx
}

// IPackage_or_class_scoped_path_itemContext is an interface to support dynamic dispatch.
type IPackage_or_class_scoped_path_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackage_or_class_scoped_path_itemContext differentiates from other interfaces.
	IsPackage_or_class_scoped_path_itemContext()
}

type Package_or_class_scoped_path_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackage_or_class_scoped_path_itemContext() *Package_or_class_scoped_path_itemContext {
	var p = new(Package_or_class_scoped_path_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_package_or_class_scoped_path_item
	return p
}

func (*Package_or_class_scoped_path_itemContext) IsPackage_or_class_scoped_path_itemContext() {}

func NewPackage_or_class_scoped_path_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Package_or_class_scoped_path_itemContext {
	var p = new(Package_or_class_scoped_path_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_package_or_class_scoped_path_item

	return p
}

func (s *Package_or_class_scoped_path_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Package_or_class_scoped_path_itemContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Package_or_class_scoped_path_itemContext) Parameter_value_assignment() IParameter_value_assignmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameter_value_assignmentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameter_value_assignmentContext)
}

func (s *Package_or_class_scoped_path_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Package_or_class_scoped_path_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Package_or_class_scoped_path_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPackage_or_class_scoped_path_item(s)
	}
}

func (s *Package_or_class_scoped_path_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPackage_or_class_scoped_path_item(s)
	}
}

func (p *SV2017Parser) Package_or_class_scoped_path_item() (localctx IPackage_or_class_scoped_path_itemContext) {
	localctx = NewPackage_or_class_scoped_path_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 412, SV2017ParserRULE_package_or_class_scoped_path_item)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3009)
		p.Identifier()
	}
	p.SetState(3011)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 274, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3010)
			p.Parameter_value_assignment()
		}

	}

	return localctx
}

// IPackage_or_class_scoped_pathContext is an interface to support dynamic dispatch.
type IPackage_or_class_scoped_pathContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackage_or_class_scoped_pathContext differentiates from other interfaces.
	IsPackage_or_class_scoped_pathContext()
}

type Package_or_class_scoped_pathContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackage_or_class_scoped_pathContext() *Package_or_class_scoped_pathContext {
	var p = new(Package_or_class_scoped_pathContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_package_or_class_scoped_path
	return p
}

func (*Package_or_class_scoped_pathContext) IsPackage_or_class_scoped_pathContext() {}

func NewPackage_or_class_scoped_pathContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Package_or_class_scoped_pathContext {
	var p = new(Package_or_class_scoped_pathContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_package_or_class_scoped_path

	return p
}

func (s *Package_or_class_scoped_pathContext) GetParser() antlr.Parser { return s.parser }

func (s *Package_or_class_scoped_pathContext) KW_DOLAR_ROOT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DOLAR_ROOT, 0)
}

func (s *Package_or_class_scoped_pathContext) Implicit_class_handle() IImplicit_class_handleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImplicit_class_handleContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImplicit_class_handleContext)
}

func (s *Package_or_class_scoped_pathContext) KW_DOLAR_UNIT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DOLAR_UNIT, 0)
}

func (s *Package_or_class_scoped_pathContext) AllPackage_or_class_scoped_path_item() []IPackage_or_class_scoped_path_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPackage_or_class_scoped_path_itemContext)(nil)).Elem())
	var tst = make([]IPackage_or_class_scoped_path_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPackage_or_class_scoped_path_itemContext)
		}
	}

	return tst
}

func (s *Package_or_class_scoped_pathContext) Package_or_class_scoped_path_item(i int) IPackage_or_class_scoped_path_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackage_or_class_scoped_path_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPackage_or_class_scoped_path_itemContext)
}

func (s *Package_or_class_scoped_pathContext) KW_LOCAL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_LOCAL, 0)
}

func (s *Package_or_class_scoped_pathContext) AllDOUBLE_COLON() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserDOUBLE_COLON)
}

func (s *Package_or_class_scoped_pathContext) DOUBLE_COLON(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOUBLE_COLON, i)
}

func (s *Package_or_class_scoped_pathContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Package_or_class_scoped_pathContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Package_or_class_scoped_pathContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPackage_or_class_scoped_path(s)
	}
}

func (s *Package_or_class_scoped_pathContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPackage_or_class_scoped_path(s)
	}
}

func (p *SV2017Parser) Package_or_class_scoped_path() (localctx IPackage_or_class_scoped_pathContext) {
	localctx = NewPackage_or_class_scoped_pathContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 414, SV2017ParserRULE_package_or_class_scoped_path)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3015)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_LOCAL {
		{
			p.SetState(3013)
			p.Match(SV2017ParserKW_LOCAL)
		}
		{
			p.SetState(3014)
			p.Match(SV2017ParserDOUBLE_COLON)
		}

	}
	p.SetState(3021)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_DOLAR_ROOT:
		{
			p.SetState(3017)
			p.Match(SV2017ParserKW_DOLAR_ROOT)
		}

	case SV2017ParserKW_SUPER, SV2017ParserKW_THIS:
		{
			p.SetState(3018)
			p.Implicit_class_handle()
		}

	case SV2017ParserKW_DOLAR_UNIT:
		{
			p.SetState(3019)
			p.Match(SV2017ParserKW_DOLAR_UNIT)
		}

	case SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_SAMPLE, SV2017ParserKW_STD, SV2017ParserKW_TYPE_OPTION, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
		{
			p.SetState(3020)
			p.Package_or_class_scoped_path_item()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(3027)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 277, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(3023)
				p.Match(SV2017ParserDOUBLE_COLON)
			}
			{
				p.SetState(3024)
				p.Package_or_class_scoped_path_item()
			}

		}
		p.SetState(3029)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 277, p.GetParserRuleContext())
	}

	return localctx
}

// IHierarchical_identifierContext is an interface to support dynamic dispatch.
type IHierarchical_identifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHierarchical_identifierContext differentiates from other interfaces.
	IsHierarchical_identifierContext()
}

type Hierarchical_identifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHierarchical_identifierContext() *Hierarchical_identifierContext {
	var p = new(Hierarchical_identifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_hierarchical_identifier
	return p
}

func (*Hierarchical_identifierContext) IsHierarchical_identifierContext() {}

func NewHierarchical_identifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Hierarchical_identifierContext {
	var p = new(Hierarchical_identifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_hierarchical_identifier

	return p
}

func (s *Hierarchical_identifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Hierarchical_identifierContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Hierarchical_identifierContext) KW_DOLAR_ROOT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DOLAR_ROOT, 0)
}

func (s *Hierarchical_identifierContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserDOT)
}

func (s *Hierarchical_identifierContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOT, i)
}

func (s *Hierarchical_identifierContext) AllIdentifier_with_bit_select() []IIdentifier_with_bit_selectContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifier_with_bit_selectContext)(nil)).Elem())
	var tst = make([]IIdentifier_with_bit_selectContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifier_with_bit_selectContext)
		}
	}

	return tst
}

func (s *Hierarchical_identifierContext) Identifier_with_bit_select(i int) IIdentifier_with_bit_selectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_with_bit_selectContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_with_bit_selectContext)
}

func (s *Hierarchical_identifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Hierarchical_identifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Hierarchical_identifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterHierarchical_identifier(s)
	}
}

func (s *Hierarchical_identifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitHierarchical_identifier(s)
	}
}

func (p *SV2017Parser) Hierarchical_identifier() (localctx IHierarchical_identifierContext) {
	localctx = NewHierarchical_identifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 416, SV2017ParserRULE_hierarchical_identifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3032)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_DOLAR_ROOT {
		{
			p.SetState(3030)
			p.Match(SV2017ParserKW_DOLAR_ROOT)
		}
		{
			p.SetState(3031)
			p.Match(SV2017ParserDOT)
		}

	}
	p.SetState(3039)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 279, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(3034)
				p.Identifier_with_bit_select()
			}
			{
				p.SetState(3035)
				p.Match(SV2017ParserDOT)
			}

		}
		p.SetState(3041)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 279, p.GetParserRuleContext())
	}
	{
		p.SetState(3042)
		p.Identifier()
	}

	return localctx
}

// IPackage_or_class_scoped_idContext is an interface to support dynamic dispatch.
type IPackage_or_class_scoped_idContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackage_or_class_scoped_idContext differentiates from other interfaces.
	IsPackage_or_class_scoped_idContext()
}

type Package_or_class_scoped_idContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackage_or_class_scoped_idContext() *Package_or_class_scoped_idContext {
	var p = new(Package_or_class_scoped_idContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_package_or_class_scoped_id
	return p
}

func (*Package_or_class_scoped_idContext) IsPackage_or_class_scoped_idContext() {}

func NewPackage_or_class_scoped_idContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Package_or_class_scoped_idContext {
	var p = new(Package_or_class_scoped_idContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_package_or_class_scoped_id

	return p
}

func (s *Package_or_class_scoped_idContext) GetParser() antlr.Parser { return s.parser }

func (s *Package_or_class_scoped_idContext) KW_DOLAR_UNIT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DOLAR_UNIT, 0)
}

func (s *Package_or_class_scoped_idContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Package_or_class_scoped_idContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Package_or_class_scoped_idContext) AllDOUBLE_COLON() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserDOUBLE_COLON)
}

func (s *Package_or_class_scoped_idContext) DOUBLE_COLON(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOUBLE_COLON, i)
}

func (s *Package_or_class_scoped_idContext) AllParameter_value_assignment() []IParameter_value_assignmentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParameter_value_assignmentContext)(nil)).Elem())
	var tst = make([]IParameter_value_assignmentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParameter_value_assignmentContext)
		}
	}

	return tst
}

func (s *Package_or_class_scoped_idContext) Parameter_value_assignment(i int) IParameter_value_assignmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameter_value_assignmentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParameter_value_assignmentContext)
}

func (s *Package_or_class_scoped_idContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Package_or_class_scoped_idContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Package_or_class_scoped_idContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPackage_or_class_scoped_id(s)
	}
}

func (s *Package_or_class_scoped_idContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPackage_or_class_scoped_id(s)
	}
}

func (p *SV2017Parser) Package_or_class_scoped_id() (localctx IPackage_or_class_scoped_idContext) {
	localctx = NewPackage_or_class_scoped_idContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 418, SV2017ParserRULE_package_or_class_scoped_id)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3049)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_DOLAR_UNIT:
		{
			p.SetState(3044)
			p.Match(SV2017ParserKW_DOLAR_UNIT)
		}

	case SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_SAMPLE, SV2017ParserKW_STD, SV2017ParserKW_TYPE_OPTION, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
		{
			p.SetState(3045)
			p.Identifier()
		}
		p.SetState(3047)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 280, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3046)
				p.Parameter_value_assignment()
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(3058)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 283, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(3051)
				p.Match(SV2017ParserDOUBLE_COLON)
			}
			{
				p.SetState(3052)
				p.Identifier()
			}
			p.SetState(3054)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 282, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(3053)
					p.Parameter_value_assignment()
				}

			}

		}
		p.SetState(3060)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 283, p.GetParserRuleContext())
	}

	return localctx
}

// ISelect_Context is an interface to support dynamic dispatch.
type ISelect_Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_Context differentiates from other interfaces.
	IsSelect_Context()
}

type Select_Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_Context() *Select_Context {
	var p = new(Select_Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_select_
	return p
}

func (*Select_Context) IsSelect_Context() {}

func NewSelect_Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_Context {
	var p = new(Select_Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_select_

	return p
}

func (s *Select_Context) GetParser() antlr.Parser { return s.parser }

func (s *Select_Context) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserDOT)
}

func (s *Select_Context) DOT(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOT, i)
}

func (s *Select_Context) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Select_Context) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Select_Context) AllBit_select() []IBit_selectContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBit_selectContext)(nil)).Elem())
	var tst = make([]IBit_selectContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBit_selectContext)
		}
	}

	return tst
}

func (s *Select_Context) Bit_select(i int) IBit_selectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBit_selectContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBit_selectContext)
}

func (s *Select_Context) LSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLSQUARE_BR, 0)
}

func (s *Select_Context) Array_range_expression() IArray_range_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArray_range_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArray_range_expressionContext)
}

func (s *Select_Context) RSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRSQUARE_BR, 0)
}

func (s *Select_Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterSelect_(s)
	}
}

func (s *Select_Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitSelect_(s)
	}
}

func (p *SV2017Parser) Select_() (localctx ISelect_Context) {
	localctx = NewSelect_Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 420, SV2017ParserRULE_select_)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3066)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 285, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(3064)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case SV2017ParserDOT:
				{
					p.SetState(3061)
					p.Match(SV2017ParserDOT)
				}
				{
					p.SetState(3062)
					p.Identifier()
				}

			case SV2017ParserLSQUARE_BR:
				{
					p.SetState(3063)
					p.Bit_select()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(3068)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 285, p.GetParserRuleContext())
	}
	p.SetState(3073)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserLSQUARE_BR {
		{
			p.SetState(3069)
			p.Match(SV2017ParserLSQUARE_BR)
		}
		{
			p.SetState(3070)
			p.Array_range_expression()
		}
		{
			p.SetState(3071)
			p.Match(SV2017ParserRSQUARE_BR)
		}

	}

	return localctx
}

// IEvent_expression_itemContext is an interface to support dynamic dispatch.
type IEvent_expression_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEvent_expression_itemContext differentiates from other interfaces.
	IsEvent_expression_itemContext()
}

type Event_expression_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEvent_expression_itemContext() *Event_expression_itemContext {
	var p = new(Event_expression_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_event_expression_item
	return p
}

func (*Event_expression_itemContext) IsEvent_expression_itemContext() {}

func NewEvent_expression_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Event_expression_itemContext {
	var p = new(Event_expression_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_event_expression_item

	return p
}

func (s *Event_expression_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Event_expression_itemContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Event_expression_itemContext) Event_expression() IEvent_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEvent_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEvent_expressionContext)
}

func (s *Event_expression_itemContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Event_expression_itemContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Event_expression_itemContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Event_expression_itemContext) Edge_identifier() IEdge_identifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEdge_identifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEdge_identifierContext)
}

func (s *Event_expression_itemContext) KW_IFF() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_IFF, 0)
}

func (s *Event_expression_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Event_expression_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Event_expression_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterEvent_expression_item(s)
	}
}

func (s *Event_expression_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitEvent_expression_item(s)
	}
}

func (p *SV2017Parser) Event_expression_item() (localctx IEvent_expression_itemContext) {
	localctx = NewEvent_expression_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 422, SV2017ParserRULE_event_expression_item)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3087)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 289, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3075)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(3076)
			p.Event_expression()
		}
		{
			p.SetState(3077)
			p.Match(SV2017ParserRPAREN)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(3080)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_EDGE || _la == SV2017ParserKW_NEGEDGE || _la == SV2017ParserKW_POSEDGE {
			{
				p.SetState(3079)
				p.Edge_identifier()
			}

		}
		{
			p.SetState(3082)
			p.expression(0)
		}
		p.SetState(3085)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_IFF {
			{
				p.SetState(3083)
				p.Match(SV2017ParserKW_IFF)
			}
			{
				p.SetState(3084)
				p.expression(0)
			}

		}

	}

	return localctx
}

// IEvent_expressionContext is an interface to support dynamic dispatch.
type IEvent_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEvent_expressionContext differentiates from other interfaces.
	IsEvent_expressionContext()
}

type Event_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEvent_expressionContext() *Event_expressionContext {
	var p = new(Event_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_event_expression
	return p
}

func (*Event_expressionContext) IsEvent_expressionContext() {}

func NewEvent_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Event_expressionContext {
	var p = new(Event_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_event_expression

	return p
}

func (s *Event_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Event_expressionContext) AllEvent_expression_item() []IEvent_expression_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEvent_expression_itemContext)(nil)).Elem())
	var tst = make([]IEvent_expression_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEvent_expression_itemContext)
		}
	}

	return tst
}

func (s *Event_expressionContext) Event_expression_item(i int) IEvent_expression_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEvent_expression_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEvent_expression_itemContext)
}

func (s *Event_expressionContext) AllKW_OR() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserKW_OR)
}

func (s *Event_expressionContext) KW_OR(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_OR, i)
}

func (s *Event_expressionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Event_expressionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Event_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Event_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Event_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterEvent_expression(s)
	}
}

func (s *Event_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitEvent_expression(s)
	}
}

func (p *SV2017Parser) Event_expression() (localctx IEvent_expressionContext) {
	localctx = NewEvent_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 424, SV2017ParserRULE_event_expression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3089)
		p.Event_expression_item()
	}
	p.SetState(3094)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 290, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(3090)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SV2017ParserKW_OR || _la == SV2017ParserCOMMA) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(3091)
				p.Event_expression_item()
			}

		}
		p.SetState(3096)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 290, p.GetParserRuleContext())
	}

	return localctx
}

// IBoolean_abbrevContext is an interface to support dynamic dispatch.
type IBoolean_abbrevContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBoolean_abbrevContext differentiates from other interfaces.
	IsBoolean_abbrevContext()
}

type Boolean_abbrevContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBoolean_abbrevContext() *Boolean_abbrevContext {
	var p = new(Boolean_abbrevContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_boolean_abbrev
	return p
}

func (*Boolean_abbrevContext) IsBoolean_abbrevContext() {}

func NewBoolean_abbrevContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Boolean_abbrevContext {
	var p = new(Boolean_abbrevContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_boolean_abbrev

	return p
}

func (s *Boolean_abbrevContext) GetParser() antlr.Parser { return s.parser }

func (s *Boolean_abbrevContext) Consecutive_repetition() IConsecutive_repetitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConsecutive_repetitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConsecutive_repetitionContext)
}

func (s *Boolean_abbrevContext) Non_consecutive_repetition() INon_consecutive_repetitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INon_consecutive_repetitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INon_consecutive_repetitionContext)
}

func (s *Boolean_abbrevContext) Goto_repetition() IGoto_repetitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGoto_repetitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGoto_repetitionContext)
}

func (s *Boolean_abbrevContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Boolean_abbrevContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Boolean_abbrevContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterBoolean_abbrev(s)
	}
}

func (s *Boolean_abbrevContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitBoolean_abbrev(s)
	}
}

func (p *SV2017Parser) Boolean_abbrev() (localctx IBoolean_abbrevContext) {
	localctx = NewBoolean_abbrevContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 426, SV2017ParserRULE_boolean_abbrev)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3100)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 291, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3097)
			p.Consecutive_repetition()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3098)
			p.Non_consecutive_repetition()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3099)
			p.Goto_repetition()
		}

	}

	return localctx
}

// ISequence_abbrevContext is an interface to support dynamic dispatch.
type ISequence_abbrevContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSequence_abbrevContext differentiates from other interfaces.
	IsSequence_abbrevContext()
}

type Sequence_abbrevContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySequence_abbrevContext() *Sequence_abbrevContext {
	var p = new(Sequence_abbrevContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_sequence_abbrev
	return p
}

func (*Sequence_abbrevContext) IsSequence_abbrevContext() {}

func NewSequence_abbrevContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sequence_abbrevContext {
	var p = new(Sequence_abbrevContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_sequence_abbrev

	return p
}

func (s *Sequence_abbrevContext) GetParser() antlr.Parser { return s.parser }

func (s *Sequence_abbrevContext) Consecutive_repetition() IConsecutive_repetitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConsecutive_repetitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConsecutive_repetitionContext)
}

func (s *Sequence_abbrevContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sequence_abbrevContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sequence_abbrevContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterSequence_abbrev(s)
	}
}

func (s *Sequence_abbrevContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitSequence_abbrev(s)
	}
}

func (p *SV2017Parser) Sequence_abbrev() (localctx ISequence_abbrevContext) {
	localctx = NewSequence_abbrevContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 428, SV2017ParserRULE_sequence_abbrev)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3102)
		p.Consecutive_repetition()
	}

	return localctx
}

// IConsecutive_repetitionContext is an interface to support dynamic dispatch.
type IConsecutive_repetitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConsecutive_repetitionContext differentiates from other interfaces.
	IsConsecutive_repetitionContext()
}

type Consecutive_repetitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConsecutive_repetitionContext() *Consecutive_repetitionContext {
	var p = new(Consecutive_repetitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_consecutive_repetition
	return p
}

func (*Consecutive_repetitionContext) IsConsecutive_repetitionContext() {}

func NewConsecutive_repetitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Consecutive_repetitionContext {
	var p = new(Consecutive_repetitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_consecutive_repetition

	return p
}

func (s *Consecutive_repetitionContext) GetParser() antlr.Parser { return s.parser }

func (s *Consecutive_repetitionContext) LSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLSQUARE_BR, 0)
}

func (s *Consecutive_repetitionContext) RSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRSQUARE_BR, 0)
}

func (s *Consecutive_repetitionContext) MUL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserMUL, 0)
}

func (s *Consecutive_repetitionContext) PLUS() antlr.TerminalNode {
	return s.GetToken(SV2017ParserPLUS, 0)
}

func (s *Consecutive_repetitionContext) Const_or_range_expression() IConst_or_range_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConst_or_range_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConst_or_range_expressionContext)
}

func (s *Consecutive_repetitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Consecutive_repetitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Consecutive_repetitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterConsecutive_repetition(s)
	}
}

func (s *Consecutive_repetitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitConsecutive_repetition(s)
	}
}

func (p *SV2017Parser) Consecutive_repetition() (localctx IConsecutive_repetitionContext) {
	localctx = NewConsecutive_repetitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 430, SV2017ParserRULE_consecutive_repetition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3104)
		p.Match(SV2017ParserLSQUARE_BR)
	}
	p.SetState(3110)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserMUL:
		{
			p.SetState(3105)
			p.Match(SV2017ParserMUL)
		}
		p.SetState(3107)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TAGGED-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserTIME_LITERAL-260)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(SV2017ParserANY_BASED_NUMBER-292))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-292))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-292))|(1<<(SV2017ParserFIXED_POINT_NUMBER-292))|(1<<(SV2017ParserUNSIGNED_NUMBER-292))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-292))|(1<<(SV2017ParserSTRING_LITERAL-292))|(1<<(SV2017ParserC_IDENTIFIER-292))|(1<<(SV2017ParserTICK_IDENTIFIER-292))|(1<<(SV2017ParserESCAPED_IDENTIFIER-292))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-292))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-292))|(1<<(SV2017ParserLPAREN-292))|(1<<(SV2017ParserLBRACE-292))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-292))|(1<<(SV2017ParserDOLAR-292))|(1<<(SV2017ParserNOT-292))|(1<<(SV2017ParserNEG-292))|(1<<(SV2017ParserNAND-292))|(1<<(SV2017ParserNOR-292)))) != 0) || (((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324))|(1<<(SV2017ParserPLUS-324)))) != 0) || (((_la-356)&-(0x1f+1)) == 0 && ((1<<uint((_la-356)))&((1<<(SV2017ParserMINUS-356))|(1<<(SV2017ParserAMPERSAND-356))|(1<<(SV2017ParserBAR-356))|(1<<(SV2017ParserINCR-356))|(1<<(SV2017ParserDECR-356)))) != 0) {
			{
				p.SetState(3106)
				p.Const_or_range_expression()
			}

		}

	case SV2017ParserPLUS:
		{
			p.SetState(3109)
			p.Match(SV2017ParserPLUS)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(3112)
		p.Match(SV2017ParserRSQUARE_BR)
	}

	return localctx
}

// INon_consecutive_repetitionContext is an interface to support dynamic dispatch.
type INon_consecutive_repetitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNon_consecutive_repetitionContext differentiates from other interfaces.
	IsNon_consecutive_repetitionContext()
}

type Non_consecutive_repetitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNon_consecutive_repetitionContext() *Non_consecutive_repetitionContext {
	var p = new(Non_consecutive_repetitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_non_consecutive_repetition
	return p
}

func (*Non_consecutive_repetitionContext) IsNon_consecutive_repetitionContext() {}

func NewNon_consecutive_repetitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Non_consecutive_repetitionContext {
	var p = new(Non_consecutive_repetitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_non_consecutive_repetition

	return p
}

func (s *Non_consecutive_repetitionContext) GetParser() antlr.Parser { return s.parser }

func (s *Non_consecutive_repetitionContext) LSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLSQUARE_BR, 0)
}

func (s *Non_consecutive_repetitionContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserASSIGN, 0)
}

func (s *Non_consecutive_repetitionContext) Const_or_range_expression() IConst_or_range_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConst_or_range_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConst_or_range_expressionContext)
}

func (s *Non_consecutive_repetitionContext) RSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRSQUARE_BR, 0)
}

func (s *Non_consecutive_repetitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Non_consecutive_repetitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Non_consecutive_repetitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterNon_consecutive_repetition(s)
	}
}

func (s *Non_consecutive_repetitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitNon_consecutive_repetition(s)
	}
}

func (p *SV2017Parser) Non_consecutive_repetition() (localctx INon_consecutive_repetitionContext) {
	localctx = NewNon_consecutive_repetitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 432, SV2017ParserRULE_non_consecutive_repetition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3114)
		p.Match(SV2017ParserLSQUARE_BR)
	}
	{
		p.SetState(3115)
		p.Match(SV2017ParserASSIGN)
	}
	{
		p.SetState(3116)
		p.Const_or_range_expression()
	}
	{
		p.SetState(3117)
		p.Match(SV2017ParserRSQUARE_BR)
	}

	return localctx
}

// IGoto_repetitionContext is an interface to support dynamic dispatch.
type IGoto_repetitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGoto_repetitionContext differentiates from other interfaces.
	IsGoto_repetitionContext()
}

type Goto_repetitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGoto_repetitionContext() *Goto_repetitionContext {
	var p = new(Goto_repetitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_goto_repetition
	return p
}

func (*Goto_repetitionContext) IsGoto_repetitionContext() {}

func NewGoto_repetitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Goto_repetitionContext {
	var p = new(Goto_repetitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_goto_repetition

	return p
}

func (s *Goto_repetitionContext) GetParser() antlr.Parser { return s.parser }

func (s *Goto_repetitionContext) LSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLSQUARE_BR, 0)
}

func (s *Goto_repetitionContext) ARROW() antlr.TerminalNode {
	return s.GetToken(SV2017ParserARROW, 0)
}

func (s *Goto_repetitionContext) Const_or_range_expression() IConst_or_range_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConst_or_range_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConst_or_range_expressionContext)
}

func (s *Goto_repetitionContext) RSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRSQUARE_BR, 0)
}

func (s *Goto_repetitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Goto_repetitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Goto_repetitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterGoto_repetition(s)
	}
}

func (s *Goto_repetitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitGoto_repetition(s)
	}
}

func (p *SV2017Parser) Goto_repetition() (localctx IGoto_repetitionContext) {
	localctx = NewGoto_repetitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 434, SV2017ParserRULE_goto_repetition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3119)
		p.Match(SV2017ParserLSQUARE_BR)
	}
	{
		p.SetState(3120)
		p.Match(SV2017ParserARROW)
	}
	{
		p.SetState(3121)
		p.Const_or_range_expression()
	}
	{
		p.SetState(3122)
		p.Match(SV2017ParserRSQUARE_BR)
	}

	return localctx
}

// ICycle_delay_const_range_expressionContext is an interface to support dynamic dispatch.
type ICycle_delay_const_range_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCycle_delay_const_range_expressionContext differentiates from other interfaces.
	IsCycle_delay_const_range_expressionContext()
}

type Cycle_delay_const_range_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCycle_delay_const_range_expressionContext() *Cycle_delay_const_range_expressionContext {
	var p = new(Cycle_delay_const_range_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_cycle_delay_const_range_expression
	return p
}

func (*Cycle_delay_const_range_expressionContext) IsCycle_delay_const_range_expressionContext() {}

func NewCycle_delay_const_range_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cycle_delay_const_range_expressionContext {
	var p = new(Cycle_delay_const_range_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_cycle_delay_const_range_expression

	return p
}

func (s *Cycle_delay_const_range_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Cycle_delay_const_range_expressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Cycle_delay_const_range_expressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Cycle_delay_const_range_expressionContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Cycle_delay_const_range_expressionContext) DOLAR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOLAR, 0)
}

func (s *Cycle_delay_const_range_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cycle_delay_const_range_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Cycle_delay_const_range_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCycle_delay_const_range_expression(s)
	}
}

func (s *Cycle_delay_const_range_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCycle_delay_const_range_expression(s)
	}
}

func (p *SV2017Parser) Cycle_delay_const_range_expression() (localctx ICycle_delay_const_range_expressionContext) {
	localctx = NewCycle_delay_const_range_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 436, SV2017ParserRULE_cycle_delay_const_range_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3124)
		p.expression(0)
	}
	{
		p.SetState(3125)
		p.Match(SV2017ParserCOLON)
	}
	p.SetState(3128)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 294, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(3126)
			p.Match(SV2017ParserDOLAR)
		}

	case 2:
		{
			p.SetState(3127)
			p.expression(0)
		}

	}

	return localctx
}

// ISequence_instanceContext is an interface to support dynamic dispatch.
type ISequence_instanceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSequence_instanceContext differentiates from other interfaces.
	IsSequence_instanceContext()
}

type Sequence_instanceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySequence_instanceContext() *Sequence_instanceContext {
	var p = new(Sequence_instanceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_sequence_instance
	return p
}

func (*Sequence_instanceContext) IsSequence_instanceContext() {}

func NewSequence_instanceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sequence_instanceContext {
	var p = new(Sequence_instanceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_sequence_instance

	return p
}

func (s *Sequence_instanceContext) GetParser() antlr.Parser { return s.parser }

func (s *Sequence_instanceContext) Package_or_class_scoped_path() IPackage_or_class_scoped_pathContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackage_or_class_scoped_pathContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackage_or_class_scoped_pathContext)
}

func (s *Sequence_instanceContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Sequence_instanceContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Sequence_instanceContext) Sequence_list_of_arguments() ISequence_list_of_argumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISequence_list_of_argumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISequence_list_of_argumentsContext)
}

func (s *Sequence_instanceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sequence_instanceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sequence_instanceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterSequence_instance(s)
	}
}

func (s *Sequence_instanceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitSequence_instance(s)
	}
}

func (p *SV2017Parser) Sequence_instance() (localctx ISequence_instanceContext) {
	localctx = NewSequence_instanceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 438, SV2017ParserRULE_sequence_instance)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3130)
		p.Package_or_class_scoped_path()
	}
	p.SetState(3136)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 296, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3131)
			p.Match(SV2017ParserLPAREN)
		}
		p.SetState(3133)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56))|(1<<(SV2017ParserKW_EDGE-56)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(SV2017ParserKW_FIRST_MATCH-115))|(1<<(SV2017ParserKW_INT-115))|(1<<(SV2017ParserKW_INTEGER-115)))) != 0) || (((_la-152)&-(0x1f+1)) == 0 && ((1<<uint((_la-152)))&((1<<(SV2017ParserKW_LOCAL-152))|(1<<(SV2017ParserKW_LOGIC-152))|(1<<(SV2017ParserKW_LONGINT-152))|(1<<(SV2017ParserKW_NEGEDGE-152))|(1<<(SV2017ParserKW_NULL-152))|(1<<(SV2017ParserKW_OPTION-152))|(1<<(SV2017ParserKW_POSEDGE-152)))) != 0) || (((_la-197)&-(0x1f+1)) == 0 && ((1<<uint((_la-197)))&((1<<(SV2017ParserKW_RANDOMIZE-197))|(1<<(SV2017ParserKW_REAL-197))|(1<<(SV2017ParserKW_REALTIME-197))|(1<<(SV2017ParserKW_REG-197))|(1<<(SV2017ParserKW_SAMPLE-197))|(1<<(SV2017ParserKW_SHORTINT-197))|(1<<(SV2017ParserKW_SHORTREAL-197))|(1<<(SV2017ParserKW_SIGNED-197)))) != 0) || (((_la-232)&-(0x1f+1)) == 0 && ((1<<uint((_la-232)))&((1<<(SV2017ParserKW_STD-232))|(1<<(SV2017ParserKW_STRING-232))|(1<<(SV2017ParserKW_SUPER-232))|(1<<(SV2017ParserKW_TAGGED-232))|(1<<(SV2017ParserKW_THIS-232))|(1<<(SV2017ParserKW_TIME-232))|(1<<(SV2017ParserKW_TYPE-232))|(1<<(SV2017ParserKW_TYPE_OPTION-232)))) != 0) || (((_la-266)&-(0x1f+1)) == 0 && ((1<<uint((_la-266)))&((1<<(SV2017ParserKW_UNSIGNED-266))|(1<<(SV2017ParserTIME_LITERAL-266))|(1<<(SV2017ParserANY_BASED_NUMBER-266))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-266))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-266))|(1<<(SV2017ParserFIXED_POINT_NUMBER-266))|(1<<(SV2017ParserUNSIGNED_NUMBER-266))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-266)))) != 0) || (((_la-298)&-(0x1f+1)) == 0 && ((1<<uint((_la-298)))&((1<<(SV2017ParserSTRING_LITERAL-298))|(1<<(SV2017ParserC_IDENTIFIER-298))|(1<<(SV2017ParserTICK_IDENTIFIER-298))|(1<<(SV2017ParserESCAPED_IDENTIFIER-298))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-298))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-298))|(1<<(SV2017ParserLPAREN-298))|(1<<(SV2017ParserLBRACE-298))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-298))|(1<<(SV2017ParserDOLAR-298))|(1<<(SV2017ParserNOT-298))|(1<<(SV2017ParserNEG-298))|(1<<(SV2017ParserNAND-298))|(1<<(SV2017ParserNOR-298))|(1<<(SV2017ParserXOR-298))|(1<<(SV2017ParserNXOR-298))|(1<<(SV2017ParserXORN-298))|(1<<(SV2017ParserCOMMA-298))|(1<<(SV2017ParserDOT-298)))) != 0) || (((_la-355)&-(0x1f+1)) == 0 && ((1<<uint((_la-355)))&((1<<(SV2017ParserPLUS-355))|(1<<(SV2017ParserMINUS-355))|(1<<(SV2017ParserAMPERSAND-355))|(1<<(SV2017ParserBAR-355))|(1<<(SV2017ParserINCR-355))|(1<<(SV2017ParserDECR-355))|(1<<(SV2017ParserAT-355))|(1<<(SV2017ParserDOUBLE_HASH-355)))) != 0) {
			{
				p.SetState(3132)
				p.Sequence_list_of_arguments()
			}

		}
		{
			p.SetState(3135)
			p.Match(SV2017ParserRPAREN)
		}

	}

	return localctx
}

// ISequence_exprContext is an interface to support dynamic dispatch.
type ISequence_exprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSequence_exprContext differentiates from other interfaces.
	IsSequence_exprContext()
}

type Sequence_exprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySequence_exprContext() *Sequence_exprContext {
	var p = new(Sequence_exprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_sequence_expr
	return p
}

func (*Sequence_exprContext) IsSequence_exprContext() {}

func NewSequence_exprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sequence_exprContext {
	var p = new(Sequence_exprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_sequence_expr

	return p
}

func (s *Sequence_exprContext) GetParser() antlr.Parser { return s.parser }

func (s *Sequence_exprContext) KW_FIRST_MATCH() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_FIRST_MATCH, 0)
}

func (s *Sequence_exprContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Sequence_exprContext) AllSequence_expr() []ISequence_exprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISequence_exprContext)(nil)).Elem())
	var tst = make([]ISequence_exprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISequence_exprContext)
		}
	}

	return tst
}

func (s *Sequence_exprContext) Sequence_expr(i int) ISequence_exprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISequence_exprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISequence_exprContext)
}

func (s *Sequence_exprContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Sequence_exprContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Sequence_exprContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Sequence_exprContext) AllSequence_match_item() []ISequence_match_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISequence_match_itemContext)(nil)).Elem())
	var tst = make([]ISequence_match_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISequence_match_itemContext)
		}
	}

	return tst
}

func (s *Sequence_exprContext) Sequence_match_item(i int) ISequence_match_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISequence_match_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISequence_match_itemContext)
}

func (s *Sequence_exprContext) AllCycle_delay_range() []ICycle_delay_rangeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICycle_delay_rangeContext)(nil)).Elem())
	var tst = make([]ICycle_delay_rangeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICycle_delay_rangeContext)
		}
	}

	return tst
}

func (s *Sequence_exprContext) Cycle_delay_range(i int) ICycle_delay_rangeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICycle_delay_rangeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICycle_delay_rangeContext)
}

func (s *Sequence_exprContext) Expression_or_dist() IExpression_or_distContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_or_distContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_or_distContext)
}

func (s *Sequence_exprContext) KW_THROUGHOUT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_THROUGHOUT, 0)
}

func (s *Sequence_exprContext) Boolean_abbrev() IBoolean_abbrevContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBoolean_abbrevContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBoolean_abbrevContext)
}

func (s *Sequence_exprContext) Sequence_instance() ISequence_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISequence_instanceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISequence_instanceContext)
}

func (s *Sequence_exprContext) Sequence_abbrev() ISequence_abbrevContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISequence_abbrevContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISequence_abbrevContext)
}

func (s *Sequence_exprContext) Clocking_event() IClocking_eventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClocking_eventContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClocking_eventContext)
}

func (s *Sequence_exprContext) KW_AND() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_AND, 0)
}

func (s *Sequence_exprContext) KW_INTERSECT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_INTERSECT, 0)
}

func (s *Sequence_exprContext) KW_OR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_OR, 0)
}

func (s *Sequence_exprContext) KW_WITHIN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_WITHIN, 0)
}

func (s *Sequence_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sequence_exprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sequence_exprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterSequence_expr(s)
	}
}

func (s *Sequence_exprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitSequence_expr(s)
	}
}

func (p *SV2017Parser) Sequence_expr() (localctx ISequence_exprContext) {
	return p.sequence_expr(0)
}

func (p *SV2017Parser) sequence_expr(_p int) (localctx ISequence_exprContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewSequence_exprContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ISequence_exprContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 440
	p.EnterRecursionRule(localctx, 440, SV2017ParserRULE_sequence_expr, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3184)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 303, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(3139)
			p.Match(SV2017ParserKW_FIRST_MATCH)
		}
		{
			p.SetState(3140)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(3141)
			p.sequence_expr(0)
		}
		p.SetState(3146)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserCOMMA {
			{
				p.SetState(3142)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(3143)
				p.Sequence_match_item()
			}

			p.SetState(3148)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(3149)
			p.Match(SV2017ParserRPAREN)
		}

	case 2:
		p.SetState(3154)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(3151)
					p.Cycle_delay_range()
				}
				{
					p.SetState(3152)
					p.sequence_expr(0)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(3156)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 298, p.GetParserRuleContext())
		}

	case 3:
		{
			p.SetState(3158)
			p.Expression_or_dist()
		}
		p.SetState(3162)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 299, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3159)
				p.Match(SV2017ParserKW_THROUGHOUT)
			}
			{
				p.SetState(3160)
				p.sequence_expr(0)
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 299, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(3161)
				p.Boolean_abbrev()
			}

		}

	case 4:
		p.SetState(3176)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SV2017ParserLPAREN:
			{
				p.SetState(3164)
				p.Match(SV2017ParserLPAREN)
			}
			{
				p.SetState(3165)
				p.sequence_expr(0)
			}
			p.SetState(3170)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SV2017ParserCOMMA {
				{
					p.SetState(3166)
					p.Match(SV2017ParserCOMMA)
				}
				{
					p.SetState(3167)
					p.Sequence_match_item()
				}

				p.SetState(3172)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(3173)
				p.Match(SV2017ParserRPAREN)
			}

		case SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_LOCAL, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_SAMPLE, SV2017ParserKW_STD, SV2017ParserKW_SUPER, SV2017ParserKW_THIS, SV2017ParserKW_TYPE_OPTION, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
			{
				p.SetState(3175)
				p.Sequence_instance()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(3179)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 302, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3178)
				p.Sequence_abbrev()
			}

		}

	case 5:
		{
			p.SetState(3181)
			p.Clocking_event()
		}
		{
			p.SetState(3182)
			p.sequence_expr(1)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3200)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 306, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewSequence_exprContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, SV2017ParserRULE_sequence_expr)
			p.SetState(3186)

			if !(p.Precpred(p.GetParserRuleContext(), 3)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
			}
			p.SetState(3196)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case SV2017ParserKW_AND, SV2017ParserKW_INTERSECT, SV2017ParserKW_OR, SV2017ParserKW_WITHIN:
				{
					p.SetState(3187)
					_la = p.GetTokenStream().LA(1)

					if !(_la == SV2017ParserKW_AND || _la == SV2017ParserKW_INTERSECT || _la == SV2017ParserKW_OR || _la == SV2017ParserKW_WITHIN) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(3188)
					p.sequence_expr(0)
				}

			case SV2017ParserDOUBLE_HASH:
				p.SetState(3192)
				p.GetErrorHandler().Sync(p)
				_alt = 1
				for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
					switch _alt {
					case 1:
						{
							p.SetState(3189)
							p.Cycle_delay_range()
						}
						{
							p.SetState(3190)
							p.sequence_expr(0)
						}

					default:
						panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
					}

					p.SetState(3194)
					p.GetErrorHandler().Sync(p)
					_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 304, p.GetParserRuleContext())
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(3202)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 306, p.GetParserRuleContext())
	}

	return localctx
}

// ISequence_match_itemContext is an interface to support dynamic dispatch.
type ISequence_match_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSequence_match_itemContext differentiates from other interfaces.
	IsSequence_match_itemContext()
}

type Sequence_match_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySequence_match_itemContext() *Sequence_match_itemContext {
	var p = new(Sequence_match_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_sequence_match_item
	return p
}

func (*Sequence_match_itemContext) IsSequence_match_itemContext() {}

func NewSequence_match_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sequence_match_itemContext {
	var p = new(Sequence_match_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_sequence_match_item

	return p
}

func (s *Sequence_match_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Sequence_match_itemContext) Operator_assignment() IOperator_assignmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperator_assignmentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperator_assignmentContext)
}

func (s *Sequence_match_itemContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Sequence_match_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sequence_match_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sequence_match_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterSequence_match_item(s)
	}
}

func (s *Sequence_match_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitSequence_match_item(s)
	}
}

func (p *SV2017Parser) Sequence_match_item() (localctx ISequence_match_itemContext) {
	localctx = NewSequence_match_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 442, SV2017ParserRULE_sequence_match_item)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3205)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 307, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3203)
			p.Operator_assignment()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3204)
			p.expression(0)
		}

	}

	return localctx
}

// IOperator_assignmentContext is an interface to support dynamic dispatch.
type IOperator_assignmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOperator_assignmentContext differentiates from other interfaces.
	IsOperator_assignmentContext()
}

type Operator_assignmentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOperator_assignmentContext() *Operator_assignmentContext {
	var p = new(Operator_assignmentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_operator_assignment
	return p
}

func (*Operator_assignmentContext) IsOperator_assignmentContext() {}

func NewOperator_assignmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Operator_assignmentContext {
	var p = new(Operator_assignmentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_operator_assignment

	return p
}

func (s *Operator_assignmentContext) GetParser() antlr.Parser { return s.parser }

func (s *Operator_assignmentContext) Variable_lvalue() IVariable_lvalueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_lvalueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_lvalueContext)
}

func (s *Operator_assignmentContext) Assignment_operator() IAssignment_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignment_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignment_operatorContext)
}

func (s *Operator_assignmentContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Operator_assignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Operator_assignmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Operator_assignmentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterOperator_assignment(s)
	}
}

func (s *Operator_assignmentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitOperator_assignment(s)
	}
}

func (p *SV2017Parser) Operator_assignment() (localctx IOperator_assignmentContext) {
	localctx = NewOperator_assignmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 444, SV2017ParserRULE_operator_assignment)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3207)
		p.Variable_lvalue()
	}
	{
		p.SetState(3208)
		p.Assignment_operator()
	}
	{
		p.SetState(3209)
		p.expression(0)
	}

	return localctx
}

// ISequence_actual_argContext is an interface to support dynamic dispatch.
type ISequence_actual_argContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSequence_actual_argContext differentiates from other interfaces.
	IsSequence_actual_argContext()
}

type Sequence_actual_argContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySequence_actual_argContext() *Sequence_actual_argContext {
	var p = new(Sequence_actual_argContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_sequence_actual_arg
	return p
}

func (*Sequence_actual_argContext) IsSequence_actual_argContext() {}

func NewSequence_actual_argContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sequence_actual_argContext {
	var p = new(Sequence_actual_argContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_sequence_actual_arg

	return p
}

func (s *Sequence_actual_argContext) GetParser() antlr.Parser { return s.parser }

func (s *Sequence_actual_argContext) Event_expression() IEvent_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEvent_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEvent_expressionContext)
}

func (s *Sequence_actual_argContext) Sequence_expr() ISequence_exprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISequence_exprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISequence_exprContext)
}

func (s *Sequence_actual_argContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sequence_actual_argContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sequence_actual_argContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterSequence_actual_arg(s)
	}
}

func (s *Sequence_actual_argContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitSequence_actual_arg(s)
	}
}

func (p *SV2017Parser) Sequence_actual_arg() (localctx ISequence_actual_argContext) {
	localctx = NewSequence_actual_argContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 446, SV2017ParserRULE_sequence_actual_arg)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3213)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 308, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3211)
			p.Event_expression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3212)
			p.sequence_expr(0)
		}

	}

	return localctx
}

// IDist_weightContext is an interface to support dynamic dispatch.
type IDist_weightContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDist_weightContext differentiates from other interfaces.
	IsDist_weightContext()
}

type Dist_weightContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDist_weightContext() *Dist_weightContext {
	var p = new(Dist_weightContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_dist_weight
	return p
}

func (*Dist_weightContext) IsDist_weightContext() {}

func NewDist_weightContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dist_weightContext {
	var p = new(Dist_weightContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_dist_weight

	return p
}

func (s *Dist_weightContext) GetParser() antlr.Parser { return s.parser }

func (s *Dist_weightContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Dist_weightContext) DIST_WEIGHT_ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDIST_WEIGHT_ASSIGN, 0)
}

func (s *Dist_weightContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Dist_weightContext) DIV() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDIV, 0)
}

func (s *Dist_weightContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dist_weightContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dist_weightContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterDist_weight(s)
	}
}

func (s *Dist_weightContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitDist_weight(s)
	}
}

func (p *SV2017Parser) Dist_weight() (localctx IDist_weightContext) {
	localctx = NewDist_weightContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 448, SV2017ParserRULE_dist_weight)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3218)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserDIST_WEIGHT_ASSIGN:
		{
			p.SetState(3215)
			p.Match(SV2017ParserDIST_WEIGHT_ASSIGN)
		}

	case SV2017ParserCOLON:
		{
			p.SetState(3216)
			p.Match(SV2017ParserCOLON)
		}
		{
			p.SetState(3217)
			p.Match(SV2017ParserDIV)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(3220)
		p.expression(0)
	}

	return localctx
}

// IClocking_declarationContext is an interface to support dynamic dispatch.
type IClocking_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClocking_declarationContext differentiates from other interfaces.
	IsClocking_declarationContext()
}

type Clocking_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClocking_declarationContext() *Clocking_declarationContext {
	var p = new(Clocking_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_clocking_declaration
	return p
}

func (*Clocking_declarationContext) IsClocking_declarationContext() {}

func NewClocking_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Clocking_declarationContext {
	var p = new(Clocking_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_clocking_declaration

	return p
}

func (s *Clocking_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Clocking_declarationContext) KW_ENDCLOCKING() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ENDCLOCKING, 0)
}

func (s *Clocking_declarationContext) KW_GLOBAL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_GLOBAL, 0)
}

func (s *Clocking_declarationContext) KW_CLOCKING() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_CLOCKING, 0)
}

func (s *Clocking_declarationContext) Clocking_event() IClocking_eventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClocking_eventContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClocking_eventContext)
}

func (s *Clocking_declarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Clocking_declarationContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Clocking_declarationContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Clocking_declarationContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Clocking_declarationContext) KW_DEFAULT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DEFAULT, 0)
}

func (s *Clocking_declarationContext) AllClocking_item() []IClocking_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IClocking_itemContext)(nil)).Elem())
	var tst = make([]IClocking_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IClocking_itemContext)
		}
	}

	return tst
}

func (s *Clocking_declarationContext) Clocking_item(i int) IClocking_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClocking_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IClocking_itemContext)
}

func (s *Clocking_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Clocking_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Clocking_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterClocking_declaration(s)
	}
}

func (s *Clocking_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitClocking_declaration(s)
	}
}

func (p *SV2017Parser) Clocking_declaration() (localctx IClocking_declarationContext) {
	localctx = NewClocking_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 450, SV2017ParserRULE_clocking_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3245)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_GLOBAL:
		{
			p.SetState(3222)
			p.Match(SV2017ParserKW_GLOBAL)
		}
		{
			p.SetState(3223)
			p.Match(SV2017ParserKW_CLOCKING)
		}
		p.SetState(3225)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
			{
				p.SetState(3224)
				p.Identifier()
			}

		}
		{
			p.SetState(3227)
			p.Clocking_event()
		}
		{
			p.SetState(3228)
			p.Match(SV2017ParserSEMI)
		}

	case SV2017ParserKW_CLOCKING, SV2017ParserKW_DEFAULT:
		p.SetState(3231)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_DEFAULT {
			{
				p.SetState(3230)
				p.Match(SV2017ParserKW_DEFAULT)
			}

		}
		{
			p.SetState(3233)
			p.Match(SV2017ParserKW_CLOCKING)
		}
		p.SetState(3235)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
			{
				p.SetState(3234)
				p.Identifier()
			}

		}
		{
			p.SetState(3237)
			p.Clocking_event()
		}
		{
			p.SetState(3238)
			p.Match(SV2017ParserSEMI)
		}
		p.SetState(3242)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserKW_DEFAULT || (((_la-137)&-(0x1f+1)) == 0 && ((1<<uint((_la-137)))&((1<<(SV2017ParserKW_INOUT-137))|(1<<(SV2017ParserKW_INPUT-137))|(1<<(SV2017ParserKW_LET-137)))) != 0) || _la == SV2017ParserKW_OUTPUT || _la == SV2017ParserKW_PROPERTY || _la == SV2017ParserKW_SEQUENCE || _la == SV2017ParserTICK_IDENTIFIER || _la == SV2017ParserLPAREN {
			{
				p.SetState(3239)
				p.Clocking_item()
			}

			p.SetState(3244)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(3247)
		p.Match(SV2017ParserKW_ENDCLOCKING)
	}
	p.SetState(3251)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserCOLON:
		{
			p.SetState(3248)
			p.Match(SV2017ParserCOLON)
		}
		{
			p.SetState(3249)
			p.Identifier()
		}

	case SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_FATAL, SV2017ParserKW_DOLAR_FULLSKEW, SV2017ParserKW_DOLAR_HOLD, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_NOCHANGE, SV2017ParserKW_DOLAR_PERIOD, SV2017ParserKW_DOLAR_RECOVERY, SV2017ParserKW_DOLAR_RECREM, SV2017ParserKW_DOLAR_REMOVAL, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_SETUP, SV2017ParserKW_DOLAR_SETUPHOLD, SV2017ParserKW_DOLAR_SKEW, SV2017ParserKW_DOLAR_TIMESKEW, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_DOLAR_WARNING, SV2017ParserKW_DOLAR_WIDTH, SV2017ParserKW_ALIAS, SV2017ParserKW_ALWAYS, SV2017ParserKW_ALWAYS_COMB, SV2017ParserKW_ALWAYS_FF, SV2017ParserKW_ALWAYS_LATCH, SV2017ParserKW_AND, SV2017ParserKW_ASSERT, SV2017ParserKW_ASSIGN, SV2017ParserKW_ASSUME, SV2017ParserKW_AUTOMATIC, SV2017ParserKW_BEGIN, SV2017ParserKW_BIND, SV2017ParserKW_BIT, SV2017ParserKW_BUF, SV2017ParserKW_BUFIF0, SV2017ParserKW_BUFIF1, SV2017ParserKW_BYTE, SV2017ParserKW_CASE, SV2017ParserKW_CHANDLE, SV2017ParserKW_CHECKER, SV2017ParserKW_CLASS, SV2017ParserKW_CLOCKING, SV2017ParserKW_CMOS, SV2017ParserKW_CONST, SV2017ParserKW_CONSTRAINT, SV2017ParserKW_COVER, SV2017ParserKW_COVERGROUP, SV2017ParserKW_DEFAULT, SV2017ParserKW_DEFPARAM, SV2017ParserKW_ELSE, SV2017ParserKW_END, SV2017ParserKW_ENDCASE, SV2017ParserKW_ENDCHECKER, SV2017ParserKW_ENDGENERATE, SV2017ParserKW_ENDINTERFACE, SV2017ParserKW_ENDMODULE, SV2017ParserKW_ENDPROGRAM, SV2017ParserKW_ENUM, SV2017ParserKW_EVENT, SV2017ParserKW_EXPORT, SV2017ParserKW_EXTERN, SV2017ParserKW_FINAL, SV2017ParserKW_FOR, SV2017ParserKW_FUNCTION, SV2017ParserKW_GENERATE, SV2017ParserKW_GENVAR, SV2017ParserKW_GLOBAL, SV2017ParserKW_IF, SV2017ParserKW_IMPORT, SV2017ParserKW_INITIAL, SV2017ParserKW_INOUT, SV2017ParserKW_INPUT, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_INTERCONNECT, SV2017ParserKW_INTERFACE, SV2017ParserKW_LET, SV2017ParserKW_LOCAL, SV2017ParserKW_LOCALPARAM, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_MACROMODULE, SV2017ParserKW_MODPORT, SV2017ParserKW_MODULE, SV2017ParserKW_NAND, SV2017ParserKW_NETTYPE, SV2017ParserKW_NMOS, SV2017ParserKW_NOR, SV2017ParserKW_NONE, SV2017ParserKW_NOT, SV2017ParserKW_NOTIF0, SV2017ParserKW_NOTIF1, SV2017ParserKW_NULL, SV2017ParserKW_OPTION, SV2017ParserKW_OR, SV2017ParserKW_OUTPUT, SV2017ParserKW_PARAMETER, SV2017ParserKW_PMOS, SV2017ParserKW_PROGRAM, SV2017ParserKW_PROPERTY, SV2017ParserKW_PULLDOWN, SV2017ParserKW_PULLUP, SV2017ParserKW_RAND, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_RCMOS, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REF, SV2017ParserKW_REG, SV2017ParserKW_RESTRICT, SV2017ParserKW_RNMOS, SV2017ParserKW_RPMOS, SV2017ParserKW_RTRAN, SV2017ParserKW_RTRANIF0, SV2017ParserKW_RTRANIF1, SV2017ParserKW_SAMPLE, SV2017ParserKW_SEQUENCE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_SPECIFY, SV2017ParserKW_SPECPARAM, SV2017ParserKW_STATIC, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_SUPPLY0, SV2017ParserKW_SUPPLY1, SV2017ParserKW_TAGGED, SV2017ParserKW_TASK, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TIMEPRECISION, SV2017ParserKW_TIMEUNIT, SV2017ParserKW_TRAN, SV2017ParserKW_TRANIF0, SV2017ParserKW_TRANIF1, SV2017ParserKW_TRI, SV2017ParserKW_TRI0, SV2017ParserKW_TRI1, SV2017ParserKW_TRIAND, SV2017ParserKW_TRIOR, SV2017ParserKW_TRIREG, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_TYPEDEF, SV2017ParserKW_UNION, SV2017ParserKW_UNSIGNED, SV2017ParserKW_UWIRE, SV2017ParserKW_VAR, SV2017ParserKW_VIRTUAL, SV2017ParserKW_WAND, SV2017ParserKW_WIRE, SV2017ParserKW_WOR, SV2017ParserKW_XNOR, SV2017ParserKW_XOR, SV2017ParserTIME_LITERAL, SV2017ParserANY_BASED_NUMBER, SV2017ParserBASED_NUMBER_WITH_SIZE, SV2017ParserREAL_NUMBER_WITH_EXP, SV2017ParserFIXED_POINT_NUMBER, SV2017ParserUNSIGNED_NUMBER, SV2017ParserUNBASED_UNSIZED_LITERAL, SV2017ParserSTRING_LITERAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSYSTEM_TF_IDENTIFIER, SV2017ParserSEMI, SV2017ParserLPAREN, SV2017ParserLSQUARE_BR, SV2017ParserLBRACE, SV2017ParserAPOSTROPHE_LBRACE, SV2017ParserDOLAR, SV2017ParserNOT, SV2017ParserNEG, SV2017ParserNAND, SV2017ParserNOR, SV2017ParserXOR, SV2017ParserNXOR, SV2017ParserXORN, SV2017ParserDOT, SV2017ParserPLUS, SV2017ParserMINUS, SV2017ParserAMPERSAND, SV2017ParserBAR, SV2017ParserINCR, SV2017ParserDECR:

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IClocking_itemContext is an interface to support dynamic dispatch.
type IClocking_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClocking_itemContext differentiates from other interfaces.
	IsClocking_itemContext()
}

type Clocking_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClocking_itemContext() *Clocking_itemContext {
	var p = new(Clocking_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_clocking_item
	return p
}

func (*Clocking_itemContext) IsClocking_itemContext() {}

func NewClocking_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Clocking_itemContext {
	var p = new(Clocking_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_clocking_item

	return p
}

func (s *Clocking_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Clocking_itemContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Clocking_itemContext) KW_DEFAULT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DEFAULT, 0)
}

func (s *Clocking_itemContext) Default_skew() IDefault_skewContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefault_skewContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefault_skewContext)
}

func (s *Clocking_itemContext) Clocking_direction() IClocking_directionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClocking_directionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClocking_directionContext)
}

func (s *Clocking_itemContext) List_of_clocking_decl_assign() IList_of_clocking_decl_assignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_clocking_decl_assignContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_clocking_decl_assignContext)
}

func (s *Clocking_itemContext) Property_declaration() IProperty_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProperty_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProperty_declarationContext)
}

func (s *Clocking_itemContext) Sequence_declaration() ISequence_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISequence_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISequence_declarationContext)
}

func (s *Clocking_itemContext) Let_declaration() ILet_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILet_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILet_declarationContext)
}

func (s *Clocking_itemContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Clocking_itemContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Clocking_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Clocking_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Clocking_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterClocking_item(s)
	}
}

func (s *Clocking_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitClocking_item(s)
	}
}

func (p *SV2017Parser) Clocking_item() (localctx IClocking_itemContext) {
	localctx = NewClocking_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 452, SV2017ParserRULE_clocking_item)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3273)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_DEFAULT, SV2017ParserKW_INOUT, SV2017ParserKW_INPUT, SV2017ParserKW_OUTPUT:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(3258)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SV2017ParserKW_DEFAULT:
			{
				p.SetState(3253)
				p.Match(SV2017ParserKW_DEFAULT)
			}
			{
				p.SetState(3254)
				p.Default_skew()
			}

		case SV2017ParserKW_INOUT, SV2017ParserKW_INPUT, SV2017ParserKW_OUTPUT:
			{
				p.SetState(3255)
				p.Clocking_direction()
			}
			{
				p.SetState(3256)
				p.List_of_clocking_decl_assign()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(3260)
			p.Match(SV2017ParserSEMI)
		}

	case SV2017ParserKW_LET, SV2017ParserKW_PROPERTY, SV2017ParserKW_SEQUENCE, SV2017ParserTICK_IDENTIFIER, SV2017ParserLPAREN:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(3265)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserTICK_IDENTIFIER || _la == SV2017ParserLPAREN {
			{
				p.SetState(3262)
				p.Attribute_instance()
			}

			p.SetState(3267)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(3271)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SV2017ParserKW_PROPERTY:
			{
				p.SetState(3268)
				p.Property_declaration()
			}

		case SV2017ParserKW_SEQUENCE:
			{
				p.SetState(3269)
				p.Sequence_declaration()
			}

		case SV2017ParserKW_LET:
			{
				p.SetState(3270)
				p.Let_declaration()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IList_of_clocking_decl_assignContext is an interface to support dynamic dispatch.
type IList_of_clocking_decl_assignContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsList_of_clocking_decl_assignContext differentiates from other interfaces.
	IsList_of_clocking_decl_assignContext()
}

type List_of_clocking_decl_assignContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyList_of_clocking_decl_assignContext() *List_of_clocking_decl_assignContext {
	var p = new(List_of_clocking_decl_assignContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_list_of_clocking_decl_assign
	return p
}

func (*List_of_clocking_decl_assignContext) IsList_of_clocking_decl_assignContext() {}

func NewList_of_clocking_decl_assignContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *List_of_clocking_decl_assignContext {
	var p = new(List_of_clocking_decl_assignContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_list_of_clocking_decl_assign

	return p
}

func (s *List_of_clocking_decl_assignContext) GetParser() antlr.Parser { return s.parser }

func (s *List_of_clocking_decl_assignContext) AllClocking_decl_assign() []IClocking_decl_assignContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IClocking_decl_assignContext)(nil)).Elem())
	var tst = make([]IClocking_decl_assignContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IClocking_decl_assignContext)
		}
	}

	return tst
}

func (s *List_of_clocking_decl_assignContext) Clocking_decl_assign(i int) IClocking_decl_assignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClocking_decl_assignContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IClocking_decl_assignContext)
}

func (s *List_of_clocking_decl_assignContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *List_of_clocking_decl_assignContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *List_of_clocking_decl_assignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *List_of_clocking_decl_assignContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *List_of_clocking_decl_assignContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterList_of_clocking_decl_assign(s)
	}
}

func (s *List_of_clocking_decl_assignContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitList_of_clocking_decl_assign(s)
	}
}

func (p *SV2017Parser) List_of_clocking_decl_assign() (localctx IList_of_clocking_decl_assignContext) {
	localctx = NewList_of_clocking_decl_assignContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 454, SV2017ParserRULE_list_of_clocking_decl_assign)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3275)
		p.Clocking_decl_assign()
	}
	p.SetState(3280)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserCOMMA {
		{
			p.SetState(3276)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(3277)
			p.Clocking_decl_assign()
		}

		p.SetState(3282)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IClocking_decl_assignContext is an interface to support dynamic dispatch.
type IClocking_decl_assignContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClocking_decl_assignContext differentiates from other interfaces.
	IsClocking_decl_assignContext()
}

type Clocking_decl_assignContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClocking_decl_assignContext() *Clocking_decl_assignContext {
	var p = new(Clocking_decl_assignContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_clocking_decl_assign
	return p
}

func (*Clocking_decl_assignContext) IsClocking_decl_assignContext() {}

func NewClocking_decl_assignContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Clocking_decl_assignContext {
	var p = new(Clocking_decl_assignContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_clocking_decl_assign

	return p
}

func (s *Clocking_decl_assignContext) GetParser() antlr.Parser { return s.parser }

func (s *Clocking_decl_assignContext) Attr_spec() IAttr_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttr_specContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttr_specContext)
}

func (s *Clocking_decl_assignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Clocking_decl_assignContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Clocking_decl_assignContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterClocking_decl_assign(s)
	}
}

func (s *Clocking_decl_assignContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitClocking_decl_assign(s)
	}
}

func (p *SV2017Parser) Clocking_decl_assign() (localctx IClocking_decl_assignContext) {
	localctx = NewClocking_decl_assignContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 456, SV2017ParserRULE_clocking_decl_assign)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3283)
		p.Attr_spec()
	}

	return localctx
}

// IDefault_skewContext is an interface to support dynamic dispatch.
type IDefault_skewContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDefault_skewContext differentiates from other interfaces.
	IsDefault_skewContext()
}

type Default_skewContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefault_skewContext() *Default_skewContext {
	var p = new(Default_skewContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_default_skew
	return p
}

func (*Default_skewContext) IsDefault_skewContext() {}

func NewDefault_skewContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Default_skewContext {
	var p = new(Default_skewContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_default_skew

	return p
}

func (s *Default_skewContext) GetParser() antlr.Parser { return s.parser }

func (s *Default_skewContext) KW_INPUT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_INPUT, 0)
}

func (s *Default_skewContext) AllClocking_skew() []IClocking_skewContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IClocking_skewContext)(nil)).Elem())
	var tst = make([]IClocking_skewContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IClocking_skewContext)
		}
	}

	return tst
}

func (s *Default_skewContext) Clocking_skew(i int) IClocking_skewContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClocking_skewContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IClocking_skewContext)
}

func (s *Default_skewContext) KW_OUTPUT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_OUTPUT, 0)
}

func (s *Default_skewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Default_skewContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Default_skewContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterDefault_skew(s)
	}
}

func (s *Default_skewContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitDefault_skew(s)
	}
}

func (p *SV2017Parser) Default_skew() (localctx IDefault_skewContext) {
	localctx = NewDefault_skewContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 458, SV2017ParserRULE_default_skew)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3293)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_INPUT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3285)
			p.Match(SV2017ParserKW_INPUT)
		}
		{
			p.SetState(3286)
			p.Clocking_skew()
		}
		p.SetState(3289)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_OUTPUT {
			{
				p.SetState(3287)
				p.Match(SV2017ParserKW_OUTPUT)
			}
			{
				p.SetState(3288)
				p.Clocking_skew()
			}

		}

	case SV2017ParserKW_OUTPUT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3291)
			p.Match(SV2017ParserKW_OUTPUT)
		}
		{
			p.SetState(3292)
			p.Clocking_skew()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IClocking_directionContext is an interface to support dynamic dispatch.
type IClocking_directionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClocking_directionContext differentiates from other interfaces.
	IsClocking_directionContext()
}

type Clocking_directionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClocking_directionContext() *Clocking_directionContext {
	var p = new(Clocking_directionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_clocking_direction
	return p
}

func (*Clocking_directionContext) IsClocking_directionContext() {}

func NewClocking_directionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Clocking_directionContext {
	var p = new(Clocking_directionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_clocking_direction

	return p
}

func (s *Clocking_directionContext) GetParser() antlr.Parser { return s.parser }

func (s *Clocking_directionContext) KW_INPUT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_INPUT, 0)
}

func (s *Clocking_directionContext) AllClocking_skew() []IClocking_skewContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IClocking_skewContext)(nil)).Elem())
	var tst = make([]IClocking_skewContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IClocking_skewContext)
		}
	}

	return tst
}

func (s *Clocking_directionContext) Clocking_skew(i int) IClocking_skewContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClocking_skewContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IClocking_skewContext)
}

func (s *Clocking_directionContext) KW_OUTPUT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_OUTPUT, 0)
}

func (s *Clocking_directionContext) KW_INOUT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_INOUT, 0)
}

func (s *Clocking_directionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Clocking_directionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Clocking_directionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterClocking_direction(s)
	}
}

func (s *Clocking_directionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitClocking_direction(s)
	}
}

func (p *SV2017Parser) Clocking_direction() (localctx IClocking_directionContext) {
	localctx = NewClocking_directionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 460, SV2017ParserRULE_clocking_direction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3310)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_INPUT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3295)
			p.Match(SV2017ParserKW_INPUT)
		}
		p.SetState(3297)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_EDGE || _la == SV2017ParserKW_NEGEDGE || _la == SV2017ParserKW_POSEDGE || _la == SV2017ParserHASH {
			{
				p.SetState(3296)
				p.Clocking_skew()
			}

		}
		p.SetState(3303)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_OUTPUT {
			{
				p.SetState(3299)
				p.Match(SV2017ParserKW_OUTPUT)
			}
			p.SetState(3301)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SV2017ParserKW_EDGE || _la == SV2017ParserKW_NEGEDGE || _la == SV2017ParserKW_POSEDGE || _la == SV2017ParserHASH {
				{
					p.SetState(3300)
					p.Clocking_skew()
				}

			}

		}

	case SV2017ParserKW_OUTPUT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3305)
			p.Match(SV2017ParserKW_OUTPUT)
		}
		p.SetState(3307)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_EDGE || _la == SV2017ParserKW_NEGEDGE || _la == SV2017ParserKW_POSEDGE || _la == SV2017ParserHASH {
			{
				p.SetState(3306)
				p.Clocking_skew()
			}

		}

	case SV2017ParserKW_INOUT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3309)
			p.Match(SV2017ParserKW_INOUT)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IClocking_skewContext is an interface to support dynamic dispatch.
type IClocking_skewContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClocking_skewContext differentiates from other interfaces.
	IsClocking_skewContext()
}

type Clocking_skewContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClocking_skewContext() *Clocking_skewContext {
	var p = new(Clocking_skewContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_clocking_skew
	return p
}

func (*Clocking_skewContext) IsClocking_skewContext() {}

func NewClocking_skewContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Clocking_skewContext {
	var p = new(Clocking_skewContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_clocking_skew

	return p
}

func (s *Clocking_skewContext) GetParser() antlr.Parser { return s.parser }

func (s *Clocking_skewContext) Edge_identifier() IEdge_identifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEdge_identifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEdge_identifierContext)
}

func (s *Clocking_skewContext) Delay_control() IDelay_controlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelay_controlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelay_controlContext)
}

func (s *Clocking_skewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Clocking_skewContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Clocking_skewContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterClocking_skew(s)
	}
}

func (s *Clocking_skewContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitClocking_skew(s)
	}
}

func (p *SV2017Parser) Clocking_skew() (localctx IClocking_skewContext) {
	localctx = NewClocking_skewContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 462, SV2017ParserRULE_clocking_skew)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3317)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_EDGE, SV2017ParserKW_NEGEDGE, SV2017ParserKW_POSEDGE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3312)
			p.Edge_identifier()
		}
		p.SetState(3314)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserHASH {
			{
				p.SetState(3313)
				p.Delay_control()
			}

		}

	case SV2017ParserHASH:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3316)
			p.Delay_control()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IClocking_eventContext is an interface to support dynamic dispatch.
type IClocking_eventContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClocking_eventContext differentiates from other interfaces.
	IsClocking_eventContext()
}

type Clocking_eventContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClocking_eventContext() *Clocking_eventContext {
	var p = new(Clocking_eventContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_clocking_event
	return p
}

func (*Clocking_eventContext) IsClocking_eventContext() {}

func NewClocking_eventContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Clocking_eventContext {
	var p = new(Clocking_eventContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_clocking_event

	return p
}

func (s *Clocking_eventContext) GetParser() antlr.Parser { return s.parser }

func (s *Clocking_eventContext) AT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserAT, 0)
}

func (s *Clocking_eventContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Clocking_eventContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Clocking_eventContext) Event_expression() IEvent_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEvent_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEvent_expressionContext)
}

func (s *Clocking_eventContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Clocking_eventContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Clocking_eventContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Clocking_eventContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterClocking_event(s)
	}
}

func (s *Clocking_eventContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitClocking_event(s)
	}
}

func (p *SV2017Parser) Clocking_event() (localctx IClocking_eventContext) {
	localctx = NewClocking_eventContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 464, SV2017ParserRULE_clocking_event)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3319)
		p.Match(SV2017ParserAT)
	}
	p.SetState(3325)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_SAMPLE, SV2017ParserKW_STD, SV2017ParserKW_TYPE_OPTION, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
		{
			p.SetState(3320)
			p.Identifier()
		}

	case SV2017ParserLPAREN:
		{
			p.SetState(3321)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(3322)
			p.Event_expression()
		}
		{
			p.SetState(3323)
			p.Match(SV2017ParserRPAREN)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICycle_delay_rangeContext is an interface to support dynamic dispatch.
type ICycle_delay_rangeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCycle_delay_rangeContext differentiates from other interfaces.
	IsCycle_delay_rangeContext()
}

type Cycle_delay_rangeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCycle_delay_rangeContext() *Cycle_delay_rangeContext {
	var p = new(Cycle_delay_rangeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_cycle_delay_range
	return p
}

func (*Cycle_delay_rangeContext) IsCycle_delay_rangeContext() {}

func NewCycle_delay_rangeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cycle_delay_rangeContext {
	var p = new(Cycle_delay_rangeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_cycle_delay_range

	return p
}

func (s *Cycle_delay_rangeContext) GetParser() antlr.Parser { return s.parser }

func (s *Cycle_delay_rangeContext) DOUBLE_HASH() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOUBLE_HASH, 0)
}

func (s *Cycle_delay_rangeContext) LSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLSQUARE_BR, 0)
}

func (s *Cycle_delay_rangeContext) RSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRSQUARE_BR, 0)
}

func (s *Cycle_delay_rangeContext) Primary() IPrimaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryContext)
}

func (s *Cycle_delay_rangeContext) MUL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserMUL, 0)
}

func (s *Cycle_delay_rangeContext) PLUS() antlr.TerminalNode {
	return s.GetToken(SV2017ParserPLUS, 0)
}

func (s *Cycle_delay_rangeContext) Cycle_delay_const_range_expression() ICycle_delay_const_range_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICycle_delay_const_range_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICycle_delay_const_range_expressionContext)
}

func (s *Cycle_delay_rangeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cycle_delay_rangeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Cycle_delay_rangeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCycle_delay_range(s)
	}
}

func (s *Cycle_delay_rangeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCycle_delay_range(s)
	}
}

func (p *SV2017Parser) Cycle_delay_range() (localctx ICycle_delay_rangeContext) {
	localctx = NewCycle_delay_rangeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 466, SV2017ParserRULE_cycle_delay_range)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3327)
		p.Match(SV2017ParserDOUBLE_HASH)
	}
	p.SetState(3336)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserLSQUARE_BR:
		{
			p.SetState(3328)
			p.Match(SV2017ParserLSQUARE_BR)
		}
		p.SetState(3332)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 331, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(3329)
				p.Match(SV2017ParserMUL)
			}

		case 2:
			{
				p.SetState(3330)
				p.Match(SV2017ParserPLUS)
			}

		case 3:
			{
				p.SetState(3331)
				p.Cycle_delay_const_range_expression()
			}

		}
		{
			p.SetState(3334)
			p.Match(SV2017ParserRSQUARE_BR)
		}

	case SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_FATAL, SV2017ParserKW_DOLAR_FULLSKEW, SV2017ParserKW_DOLAR_HOLD, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_NOCHANGE, SV2017ParserKW_DOLAR_PERIOD, SV2017ParserKW_DOLAR_RECOVERY, SV2017ParserKW_DOLAR_RECREM, SV2017ParserKW_DOLAR_REMOVAL, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_SETUP, SV2017ParserKW_DOLAR_SETUPHOLD, SV2017ParserKW_DOLAR_SKEW, SV2017ParserKW_DOLAR_TIMESKEW, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_DOLAR_WARNING, SV2017ParserKW_DOLAR_WIDTH, SV2017ParserKW_BIT, SV2017ParserKW_BYTE, SV2017ParserKW_CONST, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LOCAL, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_NULL, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_SAMPLE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_SUPER, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_UNSIGNED, SV2017ParserTIME_LITERAL, SV2017ParserANY_BASED_NUMBER, SV2017ParserBASED_NUMBER_WITH_SIZE, SV2017ParserREAL_NUMBER_WITH_EXP, SV2017ParserFIXED_POINT_NUMBER, SV2017ParserUNSIGNED_NUMBER, SV2017ParserUNBASED_UNSIZED_LITERAL, SV2017ParserSTRING_LITERAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSYSTEM_TF_IDENTIFIER, SV2017ParserLPAREN, SV2017ParserLBRACE, SV2017ParserAPOSTROPHE_LBRACE, SV2017ParserDOLAR:
		{
			p.SetState(3335)
			p.primary(0)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IExpression_or_distContext is an interface to support dynamic dispatch.
type IExpression_or_distContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpression_or_distContext differentiates from other interfaces.
	IsExpression_or_distContext()
}

type Expression_or_distContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpression_or_distContext() *Expression_or_distContext {
	var p = new(Expression_or_distContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_expression_or_dist
	return p
}

func (*Expression_or_distContext) IsExpression_or_distContext() {}

func NewExpression_or_distContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expression_or_distContext {
	var p = new(Expression_or_distContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_expression_or_dist

	return p
}

func (s *Expression_or_distContext) GetParser() antlr.Parser { return s.parser }

func (s *Expression_or_distContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Expression_or_distContext) KW_DIST() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DIST, 0)
}

func (s *Expression_or_distContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLBRACE, 0)
}

func (s *Expression_or_distContext) AllDist_item() []IDist_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDist_itemContext)(nil)).Elem())
	var tst = make([]IDist_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDist_itemContext)
		}
	}

	return tst
}

func (s *Expression_or_distContext) Dist_item(i int) IDist_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDist_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDist_itemContext)
}

func (s *Expression_or_distContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRBRACE, 0)
}

func (s *Expression_or_distContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Expression_or_distContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Expression_or_distContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expression_or_distContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expression_or_distContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterExpression_or_dist(s)
	}
}

func (s *Expression_or_distContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitExpression_or_dist(s)
	}
}

func (p *SV2017Parser) Expression_or_dist() (localctx IExpression_or_distContext) {
	localctx = NewExpression_or_distContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 468, SV2017ParserRULE_expression_or_dist)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3338)
		p.expression(0)
	}
	p.SetState(3351)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 334, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3339)
			p.Match(SV2017ParserKW_DIST)
		}
		{
			p.SetState(3340)
			p.Match(SV2017ParserLBRACE)
		}
		{
			p.SetState(3341)
			p.Dist_item()
		}
		p.SetState(3346)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserCOMMA {
			{
				p.SetState(3342)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(3343)
				p.Dist_item()
			}

			p.SetState(3348)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(3349)
			p.Match(SV2017ParserRBRACE)
		}

	}

	return localctx
}

// ICovergroup_declarationContext is an interface to support dynamic dispatch.
type ICovergroup_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCovergroup_declarationContext differentiates from other interfaces.
	IsCovergroup_declarationContext()
}

type Covergroup_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCovergroup_declarationContext() *Covergroup_declarationContext {
	var p = new(Covergroup_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_covergroup_declaration
	return p
}

func (*Covergroup_declarationContext) IsCovergroup_declarationContext() {}

func NewCovergroup_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Covergroup_declarationContext {
	var p = new(Covergroup_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_covergroup_declaration

	return p
}

func (s *Covergroup_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Covergroup_declarationContext) KW_COVERGROUP() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_COVERGROUP, 0)
}

func (s *Covergroup_declarationContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Covergroup_declarationContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Covergroup_declarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Covergroup_declarationContext) KW_ENDGROUP() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ENDGROUP, 0)
}

func (s *Covergroup_declarationContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Covergroup_declarationContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Covergroup_declarationContext) Tf_port_list() ITf_port_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITf_port_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITf_port_listContext)
}

func (s *Covergroup_declarationContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Covergroup_declarationContext) Coverage_event() ICoverage_eventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICoverage_eventContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICoverage_eventContext)
}

func (s *Covergroup_declarationContext) AllCoverage_spec_or_option() []ICoverage_spec_or_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICoverage_spec_or_optionContext)(nil)).Elem())
	var tst = make([]ICoverage_spec_or_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICoverage_spec_or_optionContext)
		}
	}

	return tst
}

func (s *Covergroup_declarationContext) Coverage_spec_or_option(i int) ICoverage_spec_or_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICoverage_spec_or_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICoverage_spec_or_optionContext)
}

func (s *Covergroup_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Covergroup_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Covergroup_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCovergroup_declaration(s)
	}
}

func (s *Covergroup_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCovergroup_declaration(s)
	}
}

func (p *SV2017Parser) Covergroup_declaration() (localctx ICovergroup_declarationContext) {
	localctx = NewCovergroup_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 470, SV2017ParserRULE_covergroup_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3353)
		p.Match(SV2017ParserKW_COVERGROUP)
	}
	{
		p.SetState(3354)
		p.Identifier()
	}
	p.SetState(3359)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserLPAREN {
		{
			p.SetState(3355)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(3356)
			p.Tf_port_list()
		}
		{
			p.SetState(3357)
			p.Match(SV2017ParserRPAREN)
		}

	}
	p.SetState(3362)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_WITH || _la == SV2017ParserAT || _la == SV2017ParserDOUBLE_AT {
		{
			p.SetState(3361)
			p.Coverage_event()
		}

	}
	{
		p.SetState(3364)
		p.Match(SV2017ParserSEMI)
	}
	p.SetState(3368)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserKW_DOLAR_ROOT || (((_la-35)&-(0x1f+1)) == 0 && ((1<<uint((_la-35)))&((1<<(SV2017ParserKW_DOLAR_UNIT-35))|(1<<(SV2017ParserKW_BIT-35))|(1<<(SV2017ParserKW_BYTE-35))|(1<<(SV2017ParserKW_CHANDLE-35)))) != 0) || (((_la-78)&-(0x1f+1)) == 0 && ((1<<uint((_la-78)))&((1<<(SV2017ParserKW_COVERPOINT-78))|(1<<(SV2017ParserKW_CROSS-78))|(1<<(SV2017ParserKW_ENUM-78))|(1<<(SV2017ParserKW_EVENT-78)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-174)&-(0x1f+1)) == 0 && ((1<<uint((_la-174)))&((1<<(SV2017ParserKW_OPTION-174))|(1<<(SV2017ParserKW_RANDOMIZE-174))|(1<<(SV2017ParserKW_REAL-174))|(1<<(SV2017ParserKW_REALTIME-174))|(1<<(SV2017ParserKW_REG-174)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_STRUCT-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserKW_VIRTUAL-260)))) != 0) || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299))|(1<<(SV2017ParserLPAREN-299))|(1<<(SV2017ParserLSQUARE_BR-299)))) != 0) {
		{
			p.SetState(3365)
			p.Coverage_spec_or_option()
		}

		p.SetState(3370)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(3371)
		p.Match(SV2017ParserKW_ENDGROUP)
	}
	p.SetState(3375)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserCOLON:
		{
			p.SetState(3372)
			p.Match(SV2017ParserCOLON)
		}
		{
			p.SetState(3373)
			p.Identifier()
		}

	case SV2017ParserEOF, SV2017ParserTICK_TIMESCALE, SV2017ParserTICK_DEFAULT_NETTYPE, SV2017ParserTICK_INCLUDE, SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_FATAL, SV2017ParserKW_DOLAR_FULLSKEW, SV2017ParserKW_DOLAR_HOLD, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_NOCHANGE, SV2017ParserKW_DOLAR_PERIOD, SV2017ParserKW_DOLAR_RECOVERY, SV2017ParserKW_DOLAR_RECREM, SV2017ParserKW_DOLAR_REMOVAL, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_SETUP, SV2017ParserKW_DOLAR_SETUPHOLD, SV2017ParserKW_DOLAR_SKEW, SV2017ParserKW_DOLAR_TIMESKEW, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_DOLAR_WARNING, SV2017ParserKW_DOLAR_WIDTH, SV2017ParserKW_ALIAS, SV2017ParserKW_ALWAYS, SV2017ParserKW_ALWAYS_COMB, SV2017ParserKW_ALWAYS_FF, SV2017ParserKW_ALWAYS_LATCH, SV2017ParserKW_AND, SV2017ParserKW_ASSERT, SV2017ParserKW_ASSIGN, SV2017ParserKW_ASSUME, SV2017ParserKW_AUTOMATIC, SV2017ParserKW_BEGIN, SV2017ParserKW_BIND, SV2017ParserKW_BIT, SV2017ParserKW_BUF, SV2017ParserKW_BUFIF0, SV2017ParserKW_BUFIF1, SV2017ParserKW_BYTE, SV2017ParserKW_CASE, SV2017ParserKW_CHANDLE, SV2017ParserKW_CHECKER, SV2017ParserKW_CLASS, SV2017ParserKW_CLOCKING, SV2017ParserKW_CMOS, SV2017ParserKW_CONFIG, SV2017ParserKW_CONST, SV2017ParserKW_CONSTRAINT, SV2017ParserKW_COVER, SV2017ParserKW_COVERGROUP, SV2017ParserKW_DEFAULT, SV2017ParserKW_DEFPARAM, SV2017ParserKW_ELSE, SV2017ParserKW_END, SV2017ParserKW_ENDCASE, SV2017ParserKW_ENDCHECKER, SV2017ParserKW_ENDCLASS, SV2017ParserKW_ENDGENERATE, SV2017ParserKW_ENDINTERFACE, SV2017ParserKW_ENDMODULE, SV2017ParserKW_ENDPACKAGE, SV2017ParserKW_ENDPROGRAM, SV2017ParserKW_ENUM, SV2017ParserKW_EVENT, SV2017ParserKW_EXPORT, SV2017ParserKW_EXTERN, SV2017ParserKW_FINAL, SV2017ParserKW_FOR, SV2017ParserKW_FUNCTION, SV2017ParserKW_GENERATE, SV2017ParserKW_GENVAR, SV2017ParserKW_GLOBAL, SV2017ParserKW_IF, SV2017ParserKW_IMPORT, SV2017ParserKW_INITIAL, SV2017ParserKW_INOUT, SV2017ParserKW_INPUT, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_INTERCONNECT, SV2017ParserKW_INTERFACE, SV2017ParserKW_LET, SV2017ParserKW_LOCAL, SV2017ParserKW_LOCALPARAM, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_MACROMODULE, SV2017ParserKW_MODPORT, SV2017ParserKW_MODULE, SV2017ParserKW_NAND, SV2017ParserKW_NETTYPE, SV2017ParserKW_NMOS, SV2017ParserKW_NOR, SV2017ParserKW_NONE, SV2017ParserKW_NOT, SV2017ParserKW_NOTIF0, SV2017ParserKW_NOTIF1, SV2017ParserKW_NULL, SV2017ParserKW_OPTION, SV2017ParserKW_OR, SV2017ParserKW_OUTPUT, SV2017ParserKW_PACKAGE, SV2017ParserKW_PARAMETER, SV2017ParserKW_PMOS, SV2017ParserKW_PRIMITIVE, SV2017ParserKW_PROGRAM, SV2017ParserKW_PROPERTY, SV2017ParserKW_PROTECTED, SV2017ParserKW_PULLDOWN, SV2017ParserKW_PULLUP, SV2017ParserKW_PURE, SV2017ParserKW_RAND, SV2017ParserKW_RANDC, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_RCMOS, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REF, SV2017ParserKW_REG, SV2017ParserKW_RESTRICT, SV2017ParserKW_RNMOS, SV2017ParserKW_RPMOS, SV2017ParserKW_RTRAN, SV2017ParserKW_RTRANIF0, SV2017ParserKW_RTRANIF1, SV2017ParserKW_SAMPLE, SV2017ParserKW_SEQUENCE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_SPECIFY, SV2017ParserKW_SPECPARAM, SV2017ParserKW_STATIC, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_SUPPLY0, SV2017ParserKW_SUPPLY1, SV2017ParserKW_TAGGED, SV2017ParserKW_TASK, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TIMEPRECISION, SV2017ParserKW_TIMEUNIT, SV2017ParserKW_TRAN, SV2017ParserKW_TRANIF0, SV2017ParserKW_TRANIF1, SV2017ParserKW_TRI, SV2017ParserKW_TRI0, SV2017ParserKW_TRI1, SV2017ParserKW_TRIAND, SV2017ParserKW_TRIOR, SV2017ParserKW_TRIREG, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_TYPEDEF, SV2017ParserKW_UNION, SV2017ParserKW_UNSIGNED, SV2017ParserKW_UWIRE, SV2017ParserKW_VAR, SV2017ParserKW_VIRTUAL, SV2017ParserKW_WAND, SV2017ParserKW_WIRE, SV2017ParserKW_WOR, SV2017ParserKW_XNOR, SV2017ParserKW_XOR, SV2017ParserTIME_LITERAL, SV2017ParserANY_BASED_NUMBER, SV2017ParserBASED_NUMBER_WITH_SIZE, SV2017ParserREAL_NUMBER_WITH_EXP, SV2017ParserFIXED_POINT_NUMBER, SV2017ParserUNSIGNED_NUMBER, SV2017ParserUNBASED_UNSIZED_LITERAL, SV2017ParserSTRING_LITERAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSYSTEM_TF_IDENTIFIER, SV2017ParserSEMI, SV2017ParserLPAREN, SV2017ParserLSQUARE_BR, SV2017ParserLBRACE, SV2017ParserAPOSTROPHE_LBRACE, SV2017ParserDOLAR, SV2017ParserNOT, SV2017ParserNEG, SV2017ParserNAND, SV2017ParserNOR, SV2017ParserXOR, SV2017ParserNXOR, SV2017ParserXORN, SV2017ParserDOT, SV2017ParserPLUS, SV2017ParserMINUS, SV2017ParserAMPERSAND, SV2017ParserBAR, SV2017ParserINCR, SV2017ParserDECR:

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICover_crossContext is an interface to support dynamic dispatch.
type ICover_crossContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCover_crossContext differentiates from other interfaces.
	IsCover_crossContext()
}

type Cover_crossContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCover_crossContext() *Cover_crossContext {
	var p = new(Cover_crossContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_cover_cross
	return p
}

func (*Cover_crossContext) IsCover_crossContext() {}

func NewCover_crossContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cover_crossContext {
	var p = new(Cover_crossContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_cover_cross

	return p
}

func (s *Cover_crossContext) GetParser() antlr.Parser { return s.parser }

func (s *Cover_crossContext) KW_CROSS() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_CROSS, 0)
}

func (s *Cover_crossContext) Identifier_list_2plus() IIdentifier_list_2plusContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_list_2plusContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_list_2plusContext)
}

func (s *Cover_crossContext) Cross_body() ICross_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICross_bodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICross_bodyContext)
}

func (s *Cover_crossContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Cover_crossContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Cover_crossContext) KW_IFF() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_IFF, 0)
}

func (s *Cover_crossContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Cover_crossContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Cover_crossContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Cover_crossContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cover_crossContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Cover_crossContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCover_cross(s)
	}
}

func (s *Cover_crossContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCover_cross(s)
	}
}

func (p *SV2017Parser) Cover_cross() (localctx ICover_crossContext) {
	localctx = NewCover_crossContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 472, SV2017ParserRULE_cover_cross)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3380)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
		{
			p.SetState(3377)
			p.Identifier()
		}
		{
			p.SetState(3378)
			p.Match(SV2017ParserCOLON)
		}

	}
	{
		p.SetState(3382)
		p.Match(SV2017ParserKW_CROSS)
	}
	{
		p.SetState(3383)
		p.Identifier_list_2plus()
	}
	p.SetState(3389)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_IFF {
		{
			p.SetState(3384)
			p.Match(SV2017ParserKW_IFF)
		}
		{
			p.SetState(3385)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(3386)
			p.expression(0)
		}
		{
			p.SetState(3387)
			p.Match(SV2017ParserRPAREN)
		}

	}
	{
		p.SetState(3391)
		p.Cross_body()
	}

	return localctx
}

// IIdentifier_list_2plusContext is an interface to support dynamic dispatch.
type IIdentifier_list_2plusContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifier_list_2plusContext differentiates from other interfaces.
	IsIdentifier_list_2plusContext()
}

type Identifier_list_2plusContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifier_list_2plusContext() *Identifier_list_2plusContext {
	var p = new(Identifier_list_2plusContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_identifier_list_2plus
	return p
}

func (*Identifier_list_2plusContext) IsIdentifier_list_2plusContext() {}

func NewIdentifier_list_2plusContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Identifier_list_2plusContext {
	var p = new(Identifier_list_2plusContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_identifier_list_2plus

	return p
}

func (s *Identifier_list_2plusContext) GetParser() antlr.Parser { return s.parser }

func (s *Identifier_list_2plusContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Identifier_list_2plusContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Identifier_list_2plusContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Identifier_list_2plusContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Identifier_list_2plusContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Identifier_list_2plusContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Identifier_list_2plusContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterIdentifier_list_2plus(s)
	}
}

func (s *Identifier_list_2plusContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitIdentifier_list_2plus(s)
	}
}

func (p *SV2017Parser) Identifier_list_2plus() (localctx IIdentifier_list_2plusContext) {
	localctx = NewIdentifier_list_2plusContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 474, SV2017ParserRULE_identifier_list_2plus)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3393)
		p.Identifier()
	}
	p.SetState(3396)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == SV2017ParserCOMMA {
		{
			p.SetState(3394)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(3395)
			p.Identifier()
		}

		p.SetState(3398)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ICross_bodyContext is an interface to support dynamic dispatch.
type ICross_bodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCross_bodyContext differentiates from other interfaces.
	IsCross_bodyContext()
}

type Cross_bodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCross_bodyContext() *Cross_bodyContext {
	var p = new(Cross_bodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_cross_body
	return p
}

func (*Cross_bodyContext) IsCross_bodyContext() {}

func NewCross_bodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cross_bodyContext {
	var p = new(Cross_bodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_cross_body

	return p
}

func (s *Cross_bodyContext) GetParser() antlr.Parser { return s.parser }

func (s *Cross_bodyContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLBRACE, 0)
}

func (s *Cross_bodyContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRBRACE, 0)
}

func (s *Cross_bodyContext) AllCross_body_item() []ICross_body_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICross_body_itemContext)(nil)).Elem())
	var tst = make([]ICross_body_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICross_body_itemContext)
		}
	}

	return tst
}

func (s *Cross_bodyContext) Cross_body_item(i int) ICross_body_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICross_body_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICross_body_itemContext)
}

func (s *Cross_bodyContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Cross_bodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cross_bodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Cross_bodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCross_body(s)
	}
}

func (s *Cross_bodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCross_body(s)
	}
}

func (p *SV2017Parser) Cross_body() (localctx ICross_bodyContext) {
	localctx = NewCross_bodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 476, SV2017ParserRULE_cross_body)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3409)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserLBRACE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3400)
			p.Match(SV2017ParserLBRACE)
		}
		p.SetState(3404)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserKW_BINS || (((_la-122)&-(0x1f+1)) == 0 && ((1<<uint((_la-122)))&((1<<(SV2017ParserKW_FUNCTION-122))|(1<<(SV2017ParserKW_IGNORE_BINS-122))|(1<<(SV2017ParserKW_ILLEGAL_BINS-122)))) != 0) || _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_TYPE_OPTION || _la == SV2017ParserTICK_IDENTIFIER || _la == SV2017ParserLPAREN {
			{
				p.SetState(3401)
				p.Cross_body_item()
			}

			p.SetState(3406)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(3407)
			p.Match(SV2017ParserRBRACE)
		}

	case SV2017ParserSEMI:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3408)
			p.Match(SV2017ParserSEMI)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICross_body_itemContext is an interface to support dynamic dispatch.
type ICross_body_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCross_body_itemContext differentiates from other interfaces.
	IsCross_body_itemContext()
}

type Cross_body_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCross_body_itemContext() *Cross_body_itemContext {
	var p = new(Cross_body_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_cross_body_item
	return p
}

func (*Cross_body_itemContext) IsCross_body_itemContext() {}

func NewCross_body_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cross_body_itemContext {
	var p = new(Cross_body_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_cross_body_item

	return p
}

func (s *Cross_body_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Cross_body_itemContext) Function_declaration() IFunction_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_declarationContext)
}

func (s *Cross_body_itemContext) Bins_selection_or_option() IBins_selection_or_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBins_selection_or_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBins_selection_or_optionContext)
}

func (s *Cross_body_itemContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Cross_body_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cross_body_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Cross_body_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCross_body_item(s)
	}
}

func (s *Cross_body_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCross_body_item(s)
	}
}

func (p *SV2017Parser) Cross_body_item() (localctx ICross_body_itemContext) {
	localctx = NewCross_body_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 478, SV2017ParserRULE_cross_body_item)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3415)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_FUNCTION:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3411)
			p.Function_declaration()
		}

	case SV2017ParserKW_BINS, SV2017ParserKW_IGNORE_BINS, SV2017ParserKW_ILLEGAL_BINS, SV2017ParserKW_OPTION, SV2017ParserKW_TYPE_OPTION, SV2017ParserTICK_IDENTIFIER, SV2017ParserLPAREN:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3412)
			p.Bins_selection_or_option()
		}
		{
			p.SetState(3413)
			p.Match(SV2017ParserSEMI)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBins_selection_or_optionContext is an interface to support dynamic dispatch.
type IBins_selection_or_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBins_selection_or_optionContext differentiates from other interfaces.
	IsBins_selection_or_optionContext()
}

type Bins_selection_or_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBins_selection_or_optionContext() *Bins_selection_or_optionContext {
	var p = new(Bins_selection_or_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_bins_selection_or_option
	return p
}

func (*Bins_selection_or_optionContext) IsBins_selection_or_optionContext() {}

func NewBins_selection_or_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bins_selection_or_optionContext {
	var p = new(Bins_selection_or_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_bins_selection_or_option

	return p
}

func (s *Bins_selection_or_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Bins_selection_or_optionContext) Coverage_option() ICoverage_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICoverage_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICoverage_optionContext)
}

func (s *Bins_selection_or_optionContext) Bins_selection() IBins_selectionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBins_selectionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBins_selectionContext)
}

func (s *Bins_selection_or_optionContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Bins_selection_or_optionContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Bins_selection_or_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bins_selection_or_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bins_selection_or_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterBins_selection_or_option(s)
	}
}

func (s *Bins_selection_or_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitBins_selection_or_option(s)
	}
}

func (p *SV2017Parser) Bins_selection_or_option() (localctx IBins_selection_or_optionContext) {
	localctx = NewBins_selection_or_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 480, SV2017ParserRULE_bins_selection_or_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3420)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserTICK_IDENTIFIER || _la == SV2017ParserLPAREN {
		{
			p.SetState(3417)
			p.Attribute_instance()
		}

		p.SetState(3422)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(3425)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_OPTION, SV2017ParserKW_TYPE_OPTION:
		{
			p.SetState(3423)
			p.Coverage_option()
		}

	case SV2017ParserKW_BINS, SV2017ParserKW_IGNORE_BINS, SV2017ParserKW_ILLEGAL_BINS:
		{
			p.SetState(3424)
			p.Bins_selection()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBins_selectionContext is an interface to support dynamic dispatch.
type IBins_selectionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBins_selectionContext differentiates from other interfaces.
	IsBins_selectionContext()
}

type Bins_selectionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBins_selectionContext() *Bins_selectionContext {
	var p = new(Bins_selectionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_bins_selection
	return p
}

func (*Bins_selectionContext) IsBins_selectionContext() {}

func NewBins_selectionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bins_selectionContext {
	var p = new(Bins_selectionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_bins_selection

	return p
}

func (s *Bins_selectionContext) GetParser() antlr.Parser { return s.parser }

func (s *Bins_selectionContext) Bins_keyword() IBins_keywordContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBins_keywordContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBins_keywordContext)
}

func (s *Bins_selectionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Bins_selectionContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserASSIGN, 0)
}

func (s *Bins_selectionContext) Select_expression() ISelect_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_expressionContext)
}

func (s *Bins_selectionContext) KW_IFF() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_IFF, 0)
}

func (s *Bins_selectionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Bins_selectionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Bins_selectionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Bins_selectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bins_selectionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bins_selectionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterBins_selection(s)
	}
}

func (s *Bins_selectionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitBins_selection(s)
	}
}

func (p *SV2017Parser) Bins_selection() (localctx IBins_selectionContext) {
	localctx = NewBins_selectionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 482, SV2017ParserRULE_bins_selection)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3427)
		p.Bins_keyword()
	}
	{
		p.SetState(3428)
		p.Identifier()
	}
	{
		p.SetState(3429)
		p.Match(SV2017ParserASSIGN)
	}
	{
		p.SetState(3430)
		p.select_expression(0)
	}
	p.SetState(3436)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_IFF {
		{
			p.SetState(3431)
			p.Match(SV2017ParserKW_IFF)
		}
		{
			p.SetState(3432)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(3433)
			p.expression(0)
		}
		{
			p.SetState(3434)
			p.Match(SV2017ParserRPAREN)
		}

	}

	return localctx
}

// ISelect_expressionContext is an interface to support dynamic dispatch.
type ISelect_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_expressionContext differentiates from other interfaces.
	IsSelect_expressionContext()
}

type Select_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_expressionContext() *Select_expressionContext {
	var p = new(Select_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_select_expression
	return p
}

func (*Select_expressionContext) IsSelect_expressionContext() {}

func NewSelect_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_expressionContext {
	var p = new(Select_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_select_expression

	return p
}

func (s *Select_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_expressionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Select_expressionContext) AllSelect_expression() []ISelect_expressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelect_expressionContext)(nil)).Elem())
	var tst = make([]ISelect_expressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelect_expressionContext)
		}
	}

	return tst
}

func (s *Select_expressionContext) Select_expression(i int) ISelect_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_expressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelect_expressionContext)
}

func (s *Select_expressionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Select_expressionContext) Select_condition() ISelect_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_conditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_conditionContext)
}

func (s *Select_expressionContext) NOT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserNOT, 0)
}

func (s *Select_expressionContext) AllCovergroup_expression() []ICovergroup_expressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICovergroup_expressionContext)(nil)).Elem())
	var tst = make([]ICovergroup_expressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICovergroup_expressionContext)
		}
	}

	return tst
}

func (s *Select_expressionContext) Covergroup_expression(i int) ICovergroup_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICovergroup_expressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICovergroup_expressionContext)
}

func (s *Select_expressionContext) KW_MATCHES() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_MATCHES, 0)
}

func (s *Select_expressionContext) LOG_AND() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLOG_AND, 0)
}

func (s *Select_expressionContext) LOG_OR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLOG_OR, 0)
}

func (s *Select_expressionContext) KW_WITH() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_WITH, 0)
}

func (s *Select_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterSelect_expression(s)
	}
}

func (s *Select_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitSelect_expression(s)
	}
}

func (p *SV2017Parser) Select_expression() (localctx ISelect_expressionContext) {
	return p.select_expression(0)
}

func (p *SV2017Parser) select_expression(_p int) (localctx ISelect_expressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewSelect_expressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ISelect_expressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 484
	p.EnterRecursionRule(localctx, 484, SV2017ParserRULE_select_expression, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3452)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 350, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(3439)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(3440)
			p.select_expression(0)
		}
		{
			p.SetState(3441)
			p.Match(SV2017ParserRPAREN)
		}

	case 2:
		p.SetState(3444)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserNOT {
			{
				p.SetState(3443)
				p.Match(SV2017ParserNOT)
			}

		}
		{
			p.SetState(3446)
			p.Select_condition()
		}

	case 3:
		{
			p.SetState(3447)
			p.Covergroup_expression()
		}
		p.SetState(3450)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 349, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3448)
				p.Match(SV2017ParserKW_MATCHES)
			}
			{
				p.SetState(3449)
				p.Covergroup_expression()
			}

		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3468)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 353, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(3466)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 352, p.GetParserRuleContext()) {
			case 1:
				localctx = NewSelect_expressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SV2017ParserRULE_select_expression)
				p.SetState(3454)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(3455)
					_la = p.GetTokenStream().LA(1)

					if !(_la == SV2017ParserLOG_AND || _la == SV2017ParserLOG_OR) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(3456)
					p.select_expression(4)
				}

			case 2:
				localctx = NewSelect_expressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SV2017ParserRULE_select_expression)
				p.SetState(3457)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(3458)
					p.Match(SV2017ParserKW_WITH)
				}
				{
					p.SetState(3459)
					p.Match(SV2017ParserLPAREN)
				}
				{
					p.SetState(3460)
					p.Covergroup_expression()
				}
				{
					p.SetState(3461)
					p.Match(SV2017ParserRPAREN)
				}
				p.SetState(3464)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 351, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(3462)
						p.Match(SV2017ParserKW_MATCHES)
					}
					{
						p.SetState(3463)
						p.Covergroup_expression()
					}

				}

			}

		}
		p.SetState(3470)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 353, p.GetParserRuleContext())
	}

	return localctx
}

// ISelect_conditionContext is an interface to support dynamic dispatch.
type ISelect_conditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_conditionContext differentiates from other interfaces.
	IsSelect_conditionContext()
}

type Select_conditionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_conditionContext() *Select_conditionContext {
	var p = new(Select_conditionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_select_condition
	return p
}

func (*Select_conditionContext) IsSelect_conditionContext() {}

func NewSelect_conditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_conditionContext {
	var p = new(Select_conditionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_select_condition

	return p
}

func (s *Select_conditionContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_conditionContext) KW_BINSOF() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_BINSOF, 0)
}

func (s *Select_conditionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Select_conditionContext) Bins_expression() IBins_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBins_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBins_expressionContext)
}

func (s *Select_conditionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Select_conditionContext) KW_INTERSECT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_INTERSECT, 0)
}

func (s *Select_conditionContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLBRACE, 0)
}

func (s *Select_conditionContext) Covergroup_range_list() ICovergroup_range_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICovergroup_range_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICovergroup_range_listContext)
}

func (s *Select_conditionContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRBRACE, 0)
}

func (s *Select_conditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_conditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_conditionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterSelect_condition(s)
	}
}

func (s *Select_conditionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitSelect_condition(s)
	}
}

func (p *SV2017Parser) Select_condition() (localctx ISelect_conditionContext) {
	localctx = NewSelect_conditionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 486, SV2017ParserRULE_select_condition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3471)
		p.Match(SV2017ParserKW_BINSOF)
	}
	{
		p.SetState(3472)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(3473)
		p.Bins_expression()
	}
	{
		p.SetState(3474)
		p.Match(SV2017ParserRPAREN)
	}
	p.SetState(3480)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 354, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3475)
			p.Match(SV2017ParserKW_INTERSECT)
		}
		{
			p.SetState(3476)
			p.Match(SV2017ParserLBRACE)
		}
		{
			p.SetState(3477)
			p.Covergroup_range_list()
		}
		{
			p.SetState(3478)
			p.Match(SV2017ParserRBRACE)
		}

	}

	return localctx
}

// IBins_expressionContext is an interface to support dynamic dispatch.
type IBins_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBins_expressionContext differentiates from other interfaces.
	IsBins_expressionContext()
}

type Bins_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBins_expressionContext() *Bins_expressionContext {
	var p = new(Bins_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_bins_expression
	return p
}

func (*Bins_expressionContext) IsBins_expressionContext() {}

func NewBins_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bins_expressionContext {
	var p = new(Bins_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_bins_expression

	return p
}

func (s *Bins_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Bins_expressionContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Bins_expressionContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Bins_expressionContext) DOT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOT, 0)
}

func (s *Bins_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bins_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bins_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterBins_expression(s)
	}
}

func (s *Bins_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitBins_expression(s)
	}
}

func (p *SV2017Parser) Bins_expression() (localctx IBins_expressionContext) {
	localctx = NewBins_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 488, SV2017ParserRULE_bins_expression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3482)
		p.Identifier()
	}
	p.SetState(3485)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserDOT {
		{
			p.SetState(3483)
			p.Match(SV2017ParserDOT)
		}
		{
			p.SetState(3484)
			p.Identifier()
		}

	}

	return localctx
}

// ICovergroup_range_listContext is an interface to support dynamic dispatch.
type ICovergroup_range_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCovergroup_range_listContext differentiates from other interfaces.
	IsCovergroup_range_listContext()
}

type Covergroup_range_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCovergroup_range_listContext() *Covergroup_range_listContext {
	var p = new(Covergroup_range_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_covergroup_range_list
	return p
}

func (*Covergroup_range_listContext) IsCovergroup_range_listContext() {}

func NewCovergroup_range_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Covergroup_range_listContext {
	var p = new(Covergroup_range_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_covergroup_range_list

	return p
}

func (s *Covergroup_range_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Covergroup_range_listContext) AllCovergroup_value_range() []ICovergroup_value_rangeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICovergroup_value_rangeContext)(nil)).Elem())
	var tst = make([]ICovergroup_value_rangeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICovergroup_value_rangeContext)
		}
	}

	return tst
}

func (s *Covergroup_range_listContext) Covergroup_value_range(i int) ICovergroup_value_rangeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICovergroup_value_rangeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICovergroup_value_rangeContext)
}

func (s *Covergroup_range_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Covergroup_range_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Covergroup_range_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Covergroup_range_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Covergroup_range_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCovergroup_range_list(s)
	}
}

func (s *Covergroup_range_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCovergroup_range_list(s)
	}
}

func (p *SV2017Parser) Covergroup_range_list() (localctx ICovergroup_range_listContext) {
	localctx = NewCovergroup_range_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 490, SV2017ParserRULE_covergroup_range_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3487)
		p.Covergroup_value_range()
	}
	p.SetState(3492)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserCOMMA {
		{
			p.SetState(3488)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(3489)
			p.Covergroup_value_range()
		}

		p.SetState(3494)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ICovergroup_value_rangeContext is an interface to support dynamic dispatch.
type ICovergroup_value_rangeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCovergroup_value_rangeContext differentiates from other interfaces.
	IsCovergroup_value_rangeContext()
}

type Covergroup_value_rangeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCovergroup_value_rangeContext() *Covergroup_value_rangeContext {
	var p = new(Covergroup_value_rangeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_covergroup_value_range
	return p
}

func (*Covergroup_value_rangeContext) IsCovergroup_value_rangeContext() {}

func NewCovergroup_value_rangeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Covergroup_value_rangeContext {
	var p = new(Covergroup_value_rangeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_covergroup_value_range

	return p
}

func (s *Covergroup_value_rangeContext) GetParser() antlr.Parser { return s.parser }

func (s *Covergroup_value_rangeContext) LSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLSQUARE_BR, 0)
}

func (s *Covergroup_value_rangeContext) AllCovergroup_expression() []ICovergroup_expressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICovergroup_expressionContext)(nil)).Elem())
	var tst = make([]ICovergroup_expressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICovergroup_expressionContext)
		}
	}

	return tst
}

func (s *Covergroup_value_rangeContext) Covergroup_expression(i int) ICovergroup_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICovergroup_expressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICovergroup_expressionContext)
}

func (s *Covergroup_value_rangeContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Covergroup_value_rangeContext) RSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRSQUARE_BR, 0)
}

func (s *Covergroup_value_rangeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Covergroup_value_rangeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Covergroup_value_rangeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCovergroup_value_range(s)
	}
}

func (s *Covergroup_value_rangeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCovergroup_value_range(s)
	}
}

func (p *SV2017Parser) Covergroup_value_range() (localctx ICovergroup_value_rangeContext) {
	localctx = NewCovergroup_value_rangeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 492, SV2017ParserRULE_covergroup_value_range)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3502)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserLSQUARE_BR:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3495)
			p.Match(SV2017ParserLSQUARE_BR)
		}
		{
			p.SetState(3496)
			p.Covergroup_expression()
		}
		{
			p.SetState(3497)
			p.Match(SV2017ParserCOLON)
		}
		{
			p.SetState(3498)
			p.Covergroup_expression()
		}
		{
			p.SetState(3499)
			p.Match(SV2017ParserRSQUARE_BR)
		}

	case SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_FATAL, SV2017ParserKW_DOLAR_FULLSKEW, SV2017ParserKW_DOLAR_HOLD, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_NOCHANGE, SV2017ParserKW_DOLAR_PERIOD, SV2017ParserKW_DOLAR_RECOVERY, SV2017ParserKW_DOLAR_RECREM, SV2017ParserKW_DOLAR_REMOVAL, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_SETUP, SV2017ParserKW_DOLAR_SETUPHOLD, SV2017ParserKW_DOLAR_SKEW, SV2017ParserKW_DOLAR_TIMESKEW, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_DOLAR_WARNING, SV2017ParserKW_DOLAR_WIDTH, SV2017ParserKW_BIT, SV2017ParserKW_BYTE, SV2017ParserKW_CONST, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LOCAL, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_NULL, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_SAMPLE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_SUPER, SV2017ParserKW_TAGGED, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_UNSIGNED, SV2017ParserTIME_LITERAL, SV2017ParserANY_BASED_NUMBER, SV2017ParserBASED_NUMBER_WITH_SIZE, SV2017ParserREAL_NUMBER_WITH_EXP, SV2017ParserFIXED_POINT_NUMBER, SV2017ParserUNSIGNED_NUMBER, SV2017ParserUNBASED_UNSIZED_LITERAL, SV2017ParserSTRING_LITERAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSYSTEM_TF_IDENTIFIER, SV2017ParserLPAREN, SV2017ParserLBRACE, SV2017ParserAPOSTROPHE_LBRACE, SV2017ParserDOLAR, SV2017ParserNOT, SV2017ParserNEG, SV2017ParserNAND, SV2017ParserNOR, SV2017ParserXOR, SV2017ParserNXOR, SV2017ParserXORN, SV2017ParserPLUS, SV2017ParserMINUS, SV2017ParserAMPERSAND, SV2017ParserBAR, SV2017ParserINCR, SV2017ParserDECR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3501)
			p.Covergroup_expression()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICovergroup_expressionContext is an interface to support dynamic dispatch.
type ICovergroup_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCovergroup_expressionContext differentiates from other interfaces.
	IsCovergroup_expressionContext()
}

type Covergroup_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCovergroup_expressionContext() *Covergroup_expressionContext {
	var p = new(Covergroup_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_covergroup_expression
	return p
}

func (*Covergroup_expressionContext) IsCovergroup_expressionContext() {}

func NewCovergroup_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Covergroup_expressionContext {
	var p = new(Covergroup_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_covergroup_expression

	return p
}

func (s *Covergroup_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Covergroup_expressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Covergroup_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Covergroup_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Covergroup_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCovergroup_expression(s)
	}
}

func (s *Covergroup_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCovergroup_expression(s)
	}
}

func (p *SV2017Parser) Covergroup_expression() (localctx ICovergroup_expressionContext) {
	localctx = NewCovergroup_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 494, SV2017ParserRULE_covergroup_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3504)
		p.expression(0)
	}

	return localctx
}

// ICoverage_spec_or_optionContext is an interface to support dynamic dispatch.
type ICoverage_spec_or_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCoverage_spec_or_optionContext differentiates from other interfaces.
	IsCoverage_spec_or_optionContext()
}

type Coverage_spec_or_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCoverage_spec_or_optionContext() *Coverage_spec_or_optionContext {
	var p = new(Coverage_spec_or_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_coverage_spec_or_option
	return p
}

func (*Coverage_spec_or_optionContext) IsCoverage_spec_or_optionContext() {}

func NewCoverage_spec_or_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Coverage_spec_or_optionContext {
	var p = new(Coverage_spec_or_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_coverage_spec_or_option

	return p
}

func (s *Coverage_spec_or_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Coverage_spec_or_optionContext) Coverage_spec() ICoverage_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICoverage_specContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICoverage_specContext)
}

func (s *Coverage_spec_or_optionContext) Coverage_option() ICoverage_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICoverage_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICoverage_optionContext)
}

func (s *Coverage_spec_or_optionContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Coverage_spec_or_optionContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Coverage_spec_or_optionContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Coverage_spec_or_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Coverage_spec_or_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Coverage_spec_or_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCoverage_spec_or_option(s)
	}
}

func (s *Coverage_spec_or_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCoverage_spec_or_option(s)
	}
}

func (p *SV2017Parser) Coverage_spec_or_option() (localctx ICoverage_spec_or_optionContext) {
	localctx = NewCoverage_spec_or_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 496, SV2017ParserRULE_coverage_spec_or_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3509)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 358, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(3506)
				p.Attribute_instance()
			}

		}
		p.SetState(3511)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 358, p.GetParserRuleContext())
	}
	p.SetState(3516)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 359, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(3512)
			p.Coverage_spec()
		}

	case 2:
		{
			p.SetState(3513)
			p.Coverage_option()
		}
		{
			p.SetState(3514)
			p.Match(SV2017ParserSEMI)
		}

	}

	return localctx
}

// ICoverage_optionContext is an interface to support dynamic dispatch.
type ICoverage_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCoverage_optionContext differentiates from other interfaces.
	IsCoverage_optionContext()
}

type Coverage_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCoverage_optionContext() *Coverage_optionContext {
	var p = new(Coverage_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_coverage_option
	return p
}

func (*Coverage_optionContext) IsCoverage_optionContext() {}

func NewCoverage_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Coverage_optionContext {
	var p = new(Coverage_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_coverage_option

	return p
}

func (s *Coverage_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Coverage_optionContext) KW_OPTION() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_OPTION, 0)
}

func (s *Coverage_optionContext) DOT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOT, 0)
}

func (s *Coverage_optionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Coverage_optionContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserASSIGN, 0)
}

func (s *Coverage_optionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Coverage_optionContext) KW_TYPE_OPTION() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_TYPE_OPTION, 0)
}

func (s *Coverage_optionContext) Constant_expression() IConstant_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_expressionContext)
}

func (s *Coverage_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Coverage_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Coverage_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCoverage_option(s)
	}
}

func (s *Coverage_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCoverage_option(s)
	}
}

func (p *SV2017Parser) Coverage_option() (localctx ICoverage_optionContext) {
	localctx = NewCoverage_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 498, SV2017ParserRULE_coverage_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3530)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_OPTION:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3518)
			p.Match(SV2017ParserKW_OPTION)
		}
		{
			p.SetState(3519)
			p.Match(SV2017ParserDOT)
		}
		{
			p.SetState(3520)
			p.Identifier()
		}
		{
			p.SetState(3521)
			p.Match(SV2017ParserASSIGN)
		}
		{
			p.SetState(3522)
			p.expression(0)
		}

	case SV2017ParserKW_TYPE_OPTION:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3524)
			p.Match(SV2017ParserKW_TYPE_OPTION)
		}
		{
			p.SetState(3525)
			p.Match(SV2017ParserDOT)
		}
		{
			p.SetState(3526)
			p.Identifier()
		}
		{
			p.SetState(3527)
			p.Match(SV2017ParserASSIGN)
		}
		{
			p.SetState(3528)
			p.Constant_expression()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICoverage_specContext is an interface to support dynamic dispatch.
type ICoverage_specContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCoverage_specContext differentiates from other interfaces.
	IsCoverage_specContext()
}

type Coverage_specContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCoverage_specContext() *Coverage_specContext {
	var p = new(Coverage_specContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_coverage_spec
	return p
}

func (*Coverage_specContext) IsCoverage_specContext() {}

func NewCoverage_specContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Coverage_specContext {
	var p = new(Coverage_specContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_coverage_spec

	return p
}

func (s *Coverage_specContext) GetParser() antlr.Parser { return s.parser }

func (s *Coverage_specContext) Cover_point() ICover_pointContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICover_pointContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICover_pointContext)
}

func (s *Coverage_specContext) Cover_cross() ICover_crossContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICover_crossContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICover_crossContext)
}

func (s *Coverage_specContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Coverage_specContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Coverage_specContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCoverage_spec(s)
	}
}

func (s *Coverage_specContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCoverage_spec(s)
	}
}

func (p *SV2017Parser) Coverage_spec() (localctx ICoverage_specContext) {
	localctx = NewCoverage_specContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 500, SV2017ParserRULE_coverage_spec)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3534)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 361, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3532)
			p.Cover_point()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3533)
			p.Cover_cross()
		}

	}

	return localctx
}

// ICover_pointContext is an interface to support dynamic dispatch.
type ICover_pointContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCover_pointContext differentiates from other interfaces.
	IsCover_pointContext()
}

type Cover_pointContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCover_pointContext() *Cover_pointContext {
	var p = new(Cover_pointContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_cover_point
	return p
}

func (*Cover_pointContext) IsCover_pointContext() {}

func NewCover_pointContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cover_pointContext {
	var p = new(Cover_pointContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_cover_point

	return p
}

func (s *Cover_pointContext) GetParser() antlr.Parser { return s.parser }

func (s *Cover_pointContext) KW_COVERPOINT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_COVERPOINT, 0)
}

func (s *Cover_pointContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Cover_pointContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Cover_pointContext) Bins_or_empty() IBins_or_emptyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBins_or_emptyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBins_or_emptyContext)
}

func (s *Cover_pointContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Cover_pointContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Cover_pointContext) KW_IFF() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_IFF, 0)
}

func (s *Cover_pointContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Cover_pointContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Cover_pointContext) Data_type_or_implicit() IData_type_or_implicitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_or_implicitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_or_implicitContext)
}

func (s *Cover_pointContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cover_pointContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Cover_pointContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCover_point(s)
	}
}

func (s *Cover_pointContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCover_point(s)
	}
}

func (p *SV2017Parser) Cover_point() (localctx ICover_pointContext) {
	localctx = NewCover_pointContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 502, SV2017ParserRULE_cover_point)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3542)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_DOLAR_ROOT || (((_la-35)&-(0x1f+1)) == 0 && ((1<<uint((_la-35)))&((1<<(SV2017ParserKW_DOLAR_UNIT-35))|(1<<(SV2017ParserKW_BIT-35))|(1<<(SV2017ParserKW_BYTE-35))|(1<<(SV2017ParserKW_CHANDLE-35)))) != 0) || _la == SV2017ParserKW_ENUM || _la == SV2017ParserKW_EVENT || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-174)&-(0x1f+1)) == 0 && ((1<<uint((_la-174)))&((1<<(SV2017ParserKW_OPTION-174))|(1<<(SV2017ParserKW_RANDOMIZE-174))|(1<<(SV2017ParserKW_REAL-174))|(1<<(SV2017ParserKW_REALTIME-174))|(1<<(SV2017ParserKW_REG-174)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_STRUCT-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserKW_VIRTUAL-260)))) != 0) || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299))|(1<<(SV2017ParserLSQUARE_BR-299)))) != 0) {
		p.SetState(3537)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 362, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3536)
				p.Data_type_or_implicit()
			}

		}
		{
			p.SetState(3539)
			p.Identifier()
		}
		{
			p.SetState(3540)
			p.Match(SV2017ParserCOLON)
		}

	}
	{
		p.SetState(3544)
		p.Match(SV2017ParserKW_COVERPOINT)
	}
	{
		p.SetState(3545)
		p.expression(0)
	}
	p.SetState(3551)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_IFF {
		{
			p.SetState(3546)
			p.Match(SV2017ParserKW_IFF)
		}
		{
			p.SetState(3547)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(3548)
			p.expression(0)
		}
		{
			p.SetState(3549)
			p.Match(SV2017ParserRPAREN)
		}

	}
	{
		p.SetState(3553)
		p.Bins_or_empty()
	}

	return localctx
}

// IBins_or_emptyContext is an interface to support dynamic dispatch.
type IBins_or_emptyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBins_or_emptyContext differentiates from other interfaces.
	IsBins_or_emptyContext()
}

type Bins_or_emptyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBins_or_emptyContext() *Bins_or_emptyContext {
	var p = new(Bins_or_emptyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_bins_or_empty
	return p
}

func (*Bins_or_emptyContext) IsBins_or_emptyContext() {}

func NewBins_or_emptyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bins_or_emptyContext {
	var p = new(Bins_or_emptyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_bins_or_empty

	return p
}

func (s *Bins_or_emptyContext) GetParser() antlr.Parser { return s.parser }

func (s *Bins_or_emptyContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLBRACE, 0)
}

func (s *Bins_or_emptyContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRBRACE, 0)
}

func (s *Bins_or_emptyContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Bins_or_emptyContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Bins_or_emptyContext) AllBins_or_options() []IBins_or_optionsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBins_or_optionsContext)(nil)).Elem())
	var tst = make([]IBins_or_optionsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBins_or_optionsContext)
		}
	}

	return tst
}

func (s *Bins_or_emptyContext) Bins_or_options(i int) IBins_or_optionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBins_or_optionsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBins_or_optionsContext)
}

func (s *Bins_or_emptyContext) AllSEMI() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserSEMI)
}

func (s *Bins_or_emptyContext) SEMI(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, i)
}

func (s *Bins_or_emptyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bins_or_emptyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bins_or_emptyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterBins_or_empty(s)
	}
}

func (s *Bins_or_emptyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitBins_or_empty(s)
	}
}

func (p *SV2017Parser) Bins_or_empty() (localctx IBins_or_emptyContext) {
	localctx = NewBins_or_emptyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 504, SV2017ParserRULE_bins_or_empty)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3572)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserLBRACE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3555)
			p.Match(SV2017ParserLBRACE)
		}
		p.SetState(3559)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserTICK_IDENTIFIER || _la == SV2017ParserLPAREN {
			{
				p.SetState(3556)
				p.Attribute_instance()
			}

			p.SetState(3561)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(3567)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserKW_BINS || _la == SV2017ParserKW_IGNORE_BINS || _la == SV2017ParserKW_ILLEGAL_BINS || _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_TYPE_OPTION || _la == SV2017ParserKW_WILDCARD {
			{
				p.SetState(3562)
				p.Bins_or_options()
			}
			{
				p.SetState(3563)
				p.Match(SV2017ParserSEMI)
			}

			p.SetState(3569)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(3570)
			p.Match(SV2017ParserRBRACE)
		}

	case SV2017ParserSEMI:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3571)
			p.Match(SV2017ParserSEMI)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBins_or_optionsContext is an interface to support dynamic dispatch.
type IBins_or_optionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBins_or_optionsContext differentiates from other interfaces.
	IsBins_or_optionsContext()
}

type Bins_or_optionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBins_or_optionsContext() *Bins_or_optionsContext {
	var p = new(Bins_or_optionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_bins_or_options
	return p
}

func (*Bins_or_optionsContext) IsBins_or_optionsContext() {}

func NewBins_or_optionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bins_or_optionsContext {
	var p = new(Bins_or_optionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_bins_or_options

	return p
}

func (s *Bins_or_optionsContext) GetParser() antlr.Parser { return s.parser }

func (s *Bins_or_optionsContext) Coverage_option() ICoverage_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICoverage_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICoverage_optionContext)
}

func (s *Bins_or_optionsContext) Bins_keyword() IBins_keywordContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBins_keywordContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBins_keywordContext)
}

func (s *Bins_or_optionsContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Bins_or_optionsContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Bins_or_optionsContext) KW_IFF() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_IFF, 0)
}

func (s *Bins_or_optionsContext) AllLPAREN() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserLPAREN)
}

func (s *Bins_or_optionsContext) LPAREN(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, i)
}

func (s *Bins_or_optionsContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Bins_or_optionsContext) AllRPAREN() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserRPAREN)
}

func (s *Bins_or_optionsContext) RPAREN(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, i)
}

func (s *Bins_or_optionsContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserASSIGN, 0)
}

func (s *Bins_or_optionsContext) Trans_list() ITrans_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITrans_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITrans_listContext)
}

func (s *Bins_or_optionsContext) KW_DEFAULT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DEFAULT, 0)
}

func (s *Bins_or_optionsContext) KW_SEQUENCE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_SEQUENCE, 0)
}

func (s *Bins_or_optionsContext) KW_WILDCARD() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_WILDCARD, 0)
}

func (s *Bins_or_optionsContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLBRACE, 0)
}

func (s *Bins_or_optionsContext) Covergroup_range_list() ICovergroup_range_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICovergroup_range_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICovergroup_range_listContext)
}

func (s *Bins_or_optionsContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRBRACE, 0)
}

func (s *Bins_or_optionsContext) KW_WITH() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_WITH, 0)
}

func (s *Bins_or_optionsContext) AllCovergroup_expression() []ICovergroup_expressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICovergroup_expressionContext)(nil)).Elem())
	var tst = make([]ICovergroup_expressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICovergroup_expressionContext)
		}
	}

	return tst
}

func (s *Bins_or_optionsContext) Covergroup_expression(i int) ICovergroup_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICovergroup_expressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICovergroup_expressionContext)
}

func (s *Bins_or_optionsContext) LSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLSQUARE_BR, 0)
}

func (s *Bins_or_optionsContext) RSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRSQUARE_BR, 0)
}

func (s *Bins_or_optionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bins_or_optionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bins_or_optionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterBins_or_options(s)
	}
}

func (s *Bins_or_optionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitBins_or_options(s)
	}
}

func (p *SV2017Parser) Bins_or_options() (localctx IBins_or_optionsContext) {
	localctx = NewBins_or_optionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 506, SV2017ParserRULE_bins_or_options)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3640)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_OPTION, SV2017ParserKW_TYPE_OPTION:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3574)
			p.Coverage_option()
		}

	case SV2017ParserKW_BINS, SV2017ParserKW_IGNORE_BINS, SV2017ParserKW_ILLEGAL_BINS, SV2017ParserKW_WILDCARD:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(3631)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 378, p.GetParserRuleContext()) {
		case 1:
			p.SetState(3576)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SV2017ParserKW_WILDCARD {
				{
					p.SetState(3575)
					p.Match(SV2017ParserKW_WILDCARD)
				}

			}
			{
				p.SetState(3578)
				p.Bins_keyword()
			}
			{
				p.SetState(3579)
				p.Identifier()
			}
			p.SetState(3613)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 374, p.GetParserRuleContext()) {
			case 1:
				p.SetState(3585)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == SV2017ParserLSQUARE_BR {
					{
						p.SetState(3580)
						p.Match(SV2017ParserLSQUARE_BR)
					}
					p.SetState(3582)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TAGGED-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserTIME_LITERAL-260)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(SV2017ParserANY_BASED_NUMBER-292))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-292))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-292))|(1<<(SV2017ParserFIXED_POINT_NUMBER-292))|(1<<(SV2017ParserUNSIGNED_NUMBER-292))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-292))|(1<<(SV2017ParserSTRING_LITERAL-292))|(1<<(SV2017ParserC_IDENTIFIER-292))|(1<<(SV2017ParserTICK_IDENTIFIER-292))|(1<<(SV2017ParserESCAPED_IDENTIFIER-292))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-292))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-292))|(1<<(SV2017ParserLPAREN-292))|(1<<(SV2017ParserLBRACE-292))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-292))|(1<<(SV2017ParserDOLAR-292))|(1<<(SV2017ParserNOT-292))|(1<<(SV2017ParserNEG-292))|(1<<(SV2017ParserNAND-292))|(1<<(SV2017ParserNOR-292)))) != 0) || (((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324))|(1<<(SV2017ParserPLUS-324)))) != 0) || (((_la-356)&-(0x1f+1)) == 0 && ((1<<uint((_la-356)))&((1<<(SV2017ParserMINUS-356))|(1<<(SV2017ParserAMPERSAND-356))|(1<<(SV2017ParserBAR-356))|(1<<(SV2017ParserINCR-356))|(1<<(SV2017ParserDECR-356)))) != 0) {
						{
							p.SetState(3581)
							p.Covergroup_expression()
						}

					}
					{
						p.SetState(3584)
						p.Match(SV2017ParserRSQUARE_BR)
					}

				}
				{
					p.SetState(3587)
					p.Match(SV2017ParserASSIGN)
				}
				p.SetState(3605)
				p.GetErrorHandler().Sync(p)
				switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 372, p.GetParserRuleContext()) {
				case 1:
					{
						p.SetState(3588)
						p.Match(SV2017ParserLBRACE)
					}
					{
						p.SetState(3589)
						p.Covergroup_range_list()
					}
					{
						p.SetState(3590)
						p.Match(SV2017ParserRBRACE)
					}
					p.SetState(3596)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == SV2017ParserKW_WITH {
						{
							p.SetState(3591)
							p.Match(SV2017ParserKW_WITH)
						}
						{
							p.SetState(3592)
							p.Match(SV2017ParserLPAREN)
						}
						{
							p.SetState(3593)
							p.Covergroup_expression()
						}
						{
							p.SetState(3594)
							p.Match(SV2017ParserRPAREN)
						}

					}

				case 2:
					{
						p.SetState(3598)
						p.Identifier()
					}
					{
						p.SetState(3599)
						p.Match(SV2017ParserKW_WITH)
					}
					{
						p.SetState(3600)
						p.Match(SV2017ParserLPAREN)
					}
					{
						p.SetState(3601)
						p.Covergroup_expression()
					}
					{
						p.SetState(3602)
						p.Match(SV2017ParserRPAREN)
					}

				case 3:
					{
						p.SetState(3604)
						p.Covergroup_expression()
					}

				}

			case 2:
				p.SetState(3609)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == SV2017ParserLSQUARE_BR {
					{
						p.SetState(3607)
						p.Match(SV2017ParserLSQUARE_BR)
					}
					{
						p.SetState(3608)
						p.Match(SV2017ParserRSQUARE_BR)
					}

				}
				{
					p.SetState(3611)
					p.Match(SV2017ParserASSIGN)
				}
				{
					p.SetState(3612)
					p.Trans_list()
				}

			}

		case 2:
			{
				p.SetState(3615)
				p.Bins_keyword()
			}
			{
				p.SetState(3616)
				p.Identifier()
			}
			p.SetState(3629)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 377, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(3617)
					p.Match(SV2017ParserASSIGN)
				}
				{
					p.SetState(3618)
					p.Match(SV2017ParserKW_DEFAULT)
				}
				{
					p.SetState(3619)
					p.Match(SV2017ParserKW_SEQUENCE)
				}

			case 2:
				p.SetState(3625)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == SV2017ParserLSQUARE_BR {
					{
						p.SetState(3620)
						p.Match(SV2017ParserLSQUARE_BR)
					}
					p.SetState(3622)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TAGGED-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserTIME_LITERAL-260)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(SV2017ParserANY_BASED_NUMBER-292))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-292))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-292))|(1<<(SV2017ParserFIXED_POINT_NUMBER-292))|(1<<(SV2017ParserUNSIGNED_NUMBER-292))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-292))|(1<<(SV2017ParserSTRING_LITERAL-292))|(1<<(SV2017ParserC_IDENTIFIER-292))|(1<<(SV2017ParserTICK_IDENTIFIER-292))|(1<<(SV2017ParserESCAPED_IDENTIFIER-292))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-292))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-292))|(1<<(SV2017ParserLPAREN-292))|(1<<(SV2017ParserLBRACE-292))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-292))|(1<<(SV2017ParserDOLAR-292))|(1<<(SV2017ParserNOT-292))|(1<<(SV2017ParserNEG-292))|(1<<(SV2017ParserNAND-292))|(1<<(SV2017ParserNOR-292)))) != 0) || (((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324))|(1<<(SV2017ParserPLUS-324)))) != 0) || (((_la-356)&-(0x1f+1)) == 0 && ((1<<uint((_la-356)))&((1<<(SV2017ParserMINUS-356))|(1<<(SV2017ParserAMPERSAND-356))|(1<<(SV2017ParserBAR-356))|(1<<(SV2017ParserINCR-356))|(1<<(SV2017ParserDECR-356)))) != 0) {
						{
							p.SetState(3621)
							p.Covergroup_expression()
						}

					}
					{
						p.SetState(3624)
						p.Match(SV2017ParserRSQUARE_BR)
					}

				}
				{
					p.SetState(3627)
					p.Match(SV2017ParserASSIGN)
				}
				{
					p.SetState(3628)
					p.Match(SV2017ParserKW_DEFAULT)
				}

			}

		}
		p.SetState(3638)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_IFF {
			{
				p.SetState(3633)
				p.Match(SV2017ParserKW_IFF)
			}
			{
				p.SetState(3634)
				p.Match(SV2017ParserLPAREN)
			}
			{
				p.SetState(3635)
				p.expression(0)
			}
			{
				p.SetState(3636)
				p.Match(SV2017ParserRPAREN)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITrans_listContext is an interface to support dynamic dispatch.
type ITrans_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTrans_listContext differentiates from other interfaces.
	IsTrans_listContext()
}

type Trans_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTrans_listContext() *Trans_listContext {
	var p = new(Trans_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_trans_list
	return p
}

func (*Trans_listContext) IsTrans_listContext() {}

func NewTrans_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Trans_listContext {
	var p = new(Trans_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_trans_list

	return p
}

func (s *Trans_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Trans_listContext) AllLPAREN() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserLPAREN)
}

func (s *Trans_listContext) LPAREN(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, i)
}

func (s *Trans_listContext) AllTrans_set() []ITrans_setContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITrans_setContext)(nil)).Elem())
	var tst = make([]ITrans_setContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITrans_setContext)
		}
	}

	return tst
}

func (s *Trans_listContext) Trans_set(i int) ITrans_setContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITrans_setContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITrans_setContext)
}

func (s *Trans_listContext) AllRPAREN() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserRPAREN)
}

func (s *Trans_listContext) RPAREN(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, i)
}

func (s *Trans_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Trans_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Trans_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Trans_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Trans_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterTrans_list(s)
	}
}

func (s *Trans_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitTrans_list(s)
	}
}

func (p *SV2017Parser) Trans_list() (localctx ITrans_listContext) {
	localctx = NewTrans_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 508, SV2017ParserRULE_trans_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3642)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(3643)
		p.Trans_set()
	}
	{
		p.SetState(3644)
		p.Match(SV2017ParserRPAREN)
	}
	p.SetState(3652)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserCOMMA {
		{
			p.SetState(3645)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(3646)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(3647)
			p.Trans_set()
		}
		{
			p.SetState(3648)
			p.Match(SV2017ParserRPAREN)
		}

		p.SetState(3654)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITrans_setContext is an interface to support dynamic dispatch.
type ITrans_setContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTrans_setContext differentiates from other interfaces.
	IsTrans_setContext()
}

type Trans_setContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTrans_setContext() *Trans_setContext {
	var p = new(Trans_setContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_trans_set
	return p
}

func (*Trans_setContext) IsTrans_setContext() {}

func NewTrans_setContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Trans_setContext {
	var p = new(Trans_setContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_trans_set

	return p
}

func (s *Trans_setContext) GetParser() antlr.Parser { return s.parser }

func (s *Trans_setContext) AllTrans_range_list() []ITrans_range_listContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITrans_range_listContext)(nil)).Elem())
	var tst = make([]ITrans_range_listContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITrans_range_listContext)
		}
	}

	return tst
}

func (s *Trans_setContext) Trans_range_list(i int) ITrans_range_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITrans_range_listContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITrans_range_listContext)
}

func (s *Trans_setContext) AllIMPLIES() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserIMPLIES)
}

func (s *Trans_setContext) IMPLIES(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserIMPLIES, i)
}

func (s *Trans_setContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Trans_setContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Trans_setContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterTrans_set(s)
	}
}

func (s *Trans_setContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitTrans_set(s)
	}
}

func (p *SV2017Parser) Trans_set() (localctx ITrans_setContext) {
	localctx = NewTrans_setContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 510, SV2017ParserRULE_trans_set)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3655)
		p.Trans_range_list()
	}
	p.SetState(3660)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserIMPLIES {
		{
			p.SetState(3656)
			p.Match(SV2017ParserIMPLIES)
		}
		{
			p.SetState(3657)
			p.Trans_range_list()
		}

		p.SetState(3662)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITrans_range_listContext is an interface to support dynamic dispatch.
type ITrans_range_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTrans_range_listContext differentiates from other interfaces.
	IsTrans_range_listContext()
}

type Trans_range_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTrans_range_listContext() *Trans_range_listContext {
	var p = new(Trans_range_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_trans_range_list
	return p
}

func (*Trans_range_listContext) IsTrans_range_listContext() {}

func NewTrans_range_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Trans_range_listContext {
	var p = new(Trans_range_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_trans_range_list

	return p
}

func (s *Trans_range_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Trans_range_listContext) Covergroup_range_list() ICovergroup_range_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICovergroup_range_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICovergroup_range_listContext)
}

func (s *Trans_range_listContext) LSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLSQUARE_BR, 0)
}

func (s *Trans_range_listContext) Repeat_range() IRepeat_rangeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRepeat_rangeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRepeat_rangeContext)
}

func (s *Trans_range_listContext) RSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRSQUARE_BR, 0)
}

func (s *Trans_range_listContext) MUL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserMUL, 0)
}

func (s *Trans_range_listContext) ARROW() antlr.TerminalNode {
	return s.GetToken(SV2017ParserARROW, 0)
}

func (s *Trans_range_listContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserASSIGN, 0)
}

func (s *Trans_range_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Trans_range_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Trans_range_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterTrans_range_list(s)
	}
}

func (s *Trans_range_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitTrans_range_list(s)
	}
}

func (p *SV2017Parser) Trans_range_list() (localctx ITrans_range_listContext) {
	localctx = NewTrans_range_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 512, SV2017ParserRULE_trans_range_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3663)
		p.Covergroup_range_list()
	}
	p.SetState(3669)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserLSQUARE_BR {
		{
			p.SetState(3664)
			p.Match(SV2017ParserLSQUARE_BR)
		}
		{
			p.SetState(3665)
			_la = p.GetTokenStream().LA(1)

			if !(((_la-338)&-(0x1f+1)) == 0 && ((1<<uint((_la-338)))&((1<<(SV2017ParserASSIGN-338))|(1<<(SV2017ParserMUL-338))|(1<<(SV2017ParserARROW-338)))) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(3666)
			p.Repeat_range()
		}
		{
			p.SetState(3667)
			p.Match(SV2017ParserRSQUARE_BR)
		}

	}

	return localctx
}

// IRepeat_rangeContext is an interface to support dynamic dispatch.
type IRepeat_rangeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRepeat_rangeContext differentiates from other interfaces.
	IsRepeat_rangeContext()
}

type Repeat_rangeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRepeat_rangeContext() *Repeat_rangeContext {
	var p = new(Repeat_rangeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_repeat_range
	return p
}

func (*Repeat_rangeContext) IsRepeat_rangeContext() {}

func NewRepeat_rangeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Repeat_rangeContext {
	var p = new(Repeat_rangeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_repeat_range

	return p
}

func (s *Repeat_rangeContext) GetParser() antlr.Parser { return s.parser }

func (s *Repeat_rangeContext) AllCovergroup_expression() []ICovergroup_expressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICovergroup_expressionContext)(nil)).Elem())
	var tst = make([]ICovergroup_expressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICovergroup_expressionContext)
		}
	}

	return tst
}

func (s *Repeat_rangeContext) Covergroup_expression(i int) ICovergroup_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICovergroup_expressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICovergroup_expressionContext)
}

func (s *Repeat_rangeContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Repeat_rangeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Repeat_rangeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Repeat_rangeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterRepeat_range(s)
	}
}

func (s *Repeat_rangeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitRepeat_range(s)
	}
}

func (p *SV2017Parser) Repeat_range() (localctx IRepeat_rangeContext) {
	localctx = NewRepeat_rangeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 514, SV2017ParserRULE_repeat_range)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3671)
		p.Covergroup_expression()
	}
	p.SetState(3674)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserCOLON {
		{
			p.SetState(3672)
			p.Match(SV2017ParserCOLON)
		}
		{
			p.SetState(3673)
			p.Covergroup_expression()
		}

	}

	return localctx
}

// ICoverage_eventContext is an interface to support dynamic dispatch.
type ICoverage_eventContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCoverage_eventContext differentiates from other interfaces.
	IsCoverage_eventContext()
}

type Coverage_eventContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCoverage_eventContext() *Coverage_eventContext {
	var p = new(Coverage_eventContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_coverage_event
	return p
}

func (*Coverage_eventContext) IsCoverage_eventContext() {}

func NewCoverage_eventContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Coverage_eventContext {
	var p = new(Coverage_eventContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_coverage_event

	return p
}

func (s *Coverage_eventContext) GetParser() antlr.Parser { return s.parser }

func (s *Coverage_eventContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Coverage_eventContext) KW_WITH() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_WITH, 0)
}

func (s *Coverage_eventContext) KW_FUNCTION() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_FUNCTION, 0)
}

func (s *Coverage_eventContext) KW_SAMPLE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_SAMPLE, 0)
}

func (s *Coverage_eventContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Coverage_eventContext) Tf_port_list() ITf_port_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITf_port_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITf_port_listContext)
}

func (s *Coverage_eventContext) DOUBLE_AT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOUBLE_AT, 0)
}

func (s *Coverage_eventContext) Block_event_expression() IBlock_event_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlock_event_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlock_event_expressionContext)
}

func (s *Coverage_eventContext) Clocking_event() IClocking_eventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClocking_eventContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClocking_eventContext)
}

func (s *Coverage_eventContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Coverage_eventContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Coverage_eventContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCoverage_event(s)
	}
}

func (s *Coverage_eventContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCoverage_event(s)
	}
}

func (p *SV2017Parser) Coverage_event() (localctx ICoverage_eventContext) {
	localctx = NewCoverage_eventContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 516, SV2017ParserRULE_coverage_event)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3689)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_WITH, SV2017ParserDOUBLE_AT:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(3684)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SV2017ParserKW_WITH:
			{
				p.SetState(3676)
				p.Match(SV2017ParserKW_WITH)
			}
			{
				p.SetState(3677)
				p.Match(SV2017ParserKW_FUNCTION)
			}
			{
				p.SetState(3678)
				p.Match(SV2017ParserKW_SAMPLE)
			}
			{
				p.SetState(3679)
				p.Match(SV2017ParserLPAREN)
			}
			{
				p.SetState(3680)
				p.Tf_port_list()
			}

		case SV2017ParserDOUBLE_AT:
			{
				p.SetState(3681)
				p.Match(SV2017ParserDOUBLE_AT)
			}
			{
				p.SetState(3682)
				p.Match(SV2017ParserLPAREN)
			}
			{
				p.SetState(3683)
				p.block_event_expression(0)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(3686)
			p.Match(SV2017ParserRPAREN)
		}

	case SV2017ParserAT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3688)
			p.Clocking_event()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBlock_event_expressionContext is an interface to support dynamic dispatch.
type IBlock_event_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlock_event_expressionContext differentiates from other interfaces.
	IsBlock_event_expressionContext()
}

type Block_event_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlock_event_expressionContext() *Block_event_expressionContext {
	var p = new(Block_event_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_block_event_expression
	return p
}

func (*Block_event_expressionContext) IsBlock_event_expressionContext() {}

func NewBlock_event_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Block_event_expressionContext {
	var p = new(Block_event_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_block_event_expression

	return p
}

func (s *Block_event_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Block_event_expressionContext) Hierarchical_btf_identifier() IHierarchical_btf_identifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHierarchical_btf_identifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHierarchical_btf_identifierContext)
}

func (s *Block_event_expressionContext) KW_BEGIN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_BEGIN, 0)
}

func (s *Block_event_expressionContext) KW_END() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_END, 0)
}

func (s *Block_event_expressionContext) AllBlock_event_expression() []IBlock_event_expressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBlock_event_expressionContext)(nil)).Elem())
	var tst = make([]IBlock_event_expressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBlock_event_expressionContext)
		}
	}

	return tst
}

func (s *Block_event_expressionContext) Block_event_expression(i int) IBlock_event_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlock_event_expressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBlock_event_expressionContext)
}

func (s *Block_event_expressionContext) KW_OR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_OR, 0)
}

func (s *Block_event_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Block_event_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Block_event_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterBlock_event_expression(s)
	}
}

func (s *Block_event_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitBlock_event_expression(s)
	}
}

func (p *SV2017Parser) Block_event_expression() (localctx IBlock_event_expressionContext) {
	return p.block_event_expression(0)
}

func (p *SV2017Parser) block_event_expression(_p int) (localctx IBlock_event_expressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBlock_event_expressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBlock_event_expressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 518
	p.EnterRecursionRule(localctx, 518, SV2017ParserRULE_block_event_expression, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3692)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserKW_BEGIN || _la == SV2017ParserKW_END) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(3693)
		p.Hierarchical_btf_identifier()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3700)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 387, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBlock_event_expressionContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, SV2017ParserRULE_block_event_expression)
			p.SetState(3695)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3696)
				p.Match(SV2017ParserKW_OR)
			}
			{
				p.SetState(3697)
				p.block_event_expression(2)
			}

		}
		p.SetState(3702)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 387, p.GetParserRuleContext())
	}

	return localctx
}

// IHierarchical_btf_identifierContext is an interface to support dynamic dispatch.
type IHierarchical_btf_identifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHierarchical_btf_identifierContext differentiates from other interfaces.
	IsHierarchical_btf_identifierContext()
}

type Hierarchical_btf_identifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHierarchical_btf_identifierContext() *Hierarchical_btf_identifierContext {
	var p = new(Hierarchical_btf_identifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_hierarchical_btf_identifier
	return p
}

func (*Hierarchical_btf_identifierContext) IsHierarchical_btf_identifierContext() {}

func NewHierarchical_btf_identifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Hierarchical_btf_identifierContext {
	var p = new(Hierarchical_btf_identifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_hierarchical_btf_identifier

	return p
}

func (s *Hierarchical_btf_identifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Hierarchical_btf_identifierContext) Hierarchical_identifier() IHierarchical_identifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHierarchical_identifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHierarchical_identifierContext)
}

func (s *Hierarchical_btf_identifierContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Hierarchical_btf_identifierContext) DOT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOT, 0)
}

func (s *Hierarchical_btf_identifierContext) Class_scope() IClass_scopeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_scopeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_scopeContext)
}

func (s *Hierarchical_btf_identifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Hierarchical_btf_identifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Hierarchical_btf_identifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterHierarchical_btf_identifier(s)
	}
}

func (s *Hierarchical_btf_identifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitHierarchical_btf_identifier(s)
	}
}

func (p *SV2017Parser) Hierarchical_btf_identifier() (localctx IHierarchical_btf_identifierContext) {
	localctx = NewHierarchical_btf_identifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 520, SV2017ParserRULE_hierarchical_btf_identifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3711)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 389, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3703)
			p.Hierarchical_identifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(3708)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 388, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3704)
				p.Hierarchical_identifier()
			}
			{
				p.SetState(3705)
				p.Match(SV2017ParserDOT)
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 388, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(3707)
				p.Class_scope()
			}

		}
		{
			p.SetState(3710)
			p.Identifier()
		}

	}

	return localctx
}

// IAssertion_variable_declarationContext is an interface to support dynamic dispatch.
type IAssertion_variable_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssertion_variable_declarationContext differentiates from other interfaces.
	IsAssertion_variable_declarationContext()
}

type Assertion_variable_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssertion_variable_declarationContext() *Assertion_variable_declarationContext {
	var p = new(Assertion_variable_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_assertion_variable_declaration
	return p
}

func (*Assertion_variable_declarationContext) IsAssertion_variable_declarationContext() {}

func NewAssertion_variable_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Assertion_variable_declarationContext {
	var p = new(Assertion_variable_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_assertion_variable_declaration

	return p
}

func (s *Assertion_variable_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Assertion_variable_declarationContext) List_of_variable_decl_assignments() IList_of_variable_decl_assignmentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_variable_decl_assignmentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_variable_decl_assignmentsContext)
}

func (s *Assertion_variable_declarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Assertion_variable_declarationContext) Var_data_type() IVar_data_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVar_data_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVar_data_typeContext)
}

func (s *Assertion_variable_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Assertion_variable_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Assertion_variable_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterAssertion_variable_declaration(s)
	}
}

func (s *Assertion_variable_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitAssertion_variable_declaration(s)
	}
}

func (p *SV2017Parser) Assertion_variable_declaration() (localctx IAssertion_variable_declarationContext) {
	localctx = NewAssertion_variable_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 522, SV2017ParserRULE_assertion_variable_declaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3714)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 390, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3713)
			p.Var_data_type()
		}

	}
	{
		p.SetState(3716)
		p.List_of_variable_decl_assignments()
	}
	{
		p.SetState(3717)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IDist_itemContext is an interface to support dynamic dispatch.
type IDist_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDist_itemContext differentiates from other interfaces.
	IsDist_itemContext()
}

type Dist_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDist_itemContext() *Dist_itemContext {
	var p = new(Dist_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_dist_item
	return p
}

func (*Dist_itemContext) IsDist_itemContext() {}

func NewDist_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dist_itemContext {
	var p = new(Dist_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_dist_item

	return p
}

func (s *Dist_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Dist_itemContext) Value_range() IValue_rangeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValue_rangeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValue_rangeContext)
}

func (s *Dist_itemContext) Dist_weight() IDist_weightContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDist_weightContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDist_weightContext)
}

func (s *Dist_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dist_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dist_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterDist_item(s)
	}
}

func (s *Dist_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitDist_item(s)
	}
}

func (p *SV2017Parser) Dist_item() (localctx IDist_itemContext) {
	localctx = NewDist_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 524, SV2017ParserRULE_dist_item)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3719)
		p.Value_range()
	}
	p.SetState(3721)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserCOLON || _la == SV2017ParserDIST_WEIGHT_ASSIGN {
		{
			p.SetState(3720)
			p.Dist_weight()
		}

	}

	return localctx
}

// IValue_rangeContext is an interface to support dynamic dispatch.
type IValue_rangeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsValue_rangeContext differentiates from other interfaces.
	IsValue_rangeContext()
}

type Value_rangeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyValue_rangeContext() *Value_rangeContext {
	var p = new(Value_rangeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_value_range
	return p
}

func (*Value_rangeContext) IsValue_rangeContext() {}

func NewValue_rangeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Value_rangeContext {
	var p = new(Value_rangeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_value_range

	return p
}

func (s *Value_rangeContext) GetParser() antlr.Parser { return s.parser }

func (s *Value_rangeContext) LSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLSQUARE_BR, 0)
}

func (s *Value_rangeContext) Range_expression() IRange_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRange_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRange_expressionContext)
}

func (s *Value_rangeContext) RSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRSQUARE_BR, 0)
}

func (s *Value_rangeContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Value_rangeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Value_rangeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Value_rangeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterValue_range(s)
	}
}

func (s *Value_rangeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitValue_range(s)
	}
}

func (p *SV2017Parser) Value_range() (localctx IValue_rangeContext) {
	localctx = NewValue_rangeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 526, SV2017ParserRULE_value_range)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3728)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserLSQUARE_BR:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3723)
			p.Match(SV2017ParserLSQUARE_BR)
		}
		{
			p.SetState(3724)
			p.Range_expression()
		}
		{
			p.SetState(3725)
			p.Match(SV2017ParserRSQUARE_BR)
		}

	case SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_FATAL, SV2017ParserKW_DOLAR_FULLSKEW, SV2017ParserKW_DOLAR_HOLD, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_NOCHANGE, SV2017ParserKW_DOLAR_PERIOD, SV2017ParserKW_DOLAR_RECOVERY, SV2017ParserKW_DOLAR_RECREM, SV2017ParserKW_DOLAR_REMOVAL, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_SETUP, SV2017ParserKW_DOLAR_SETUPHOLD, SV2017ParserKW_DOLAR_SKEW, SV2017ParserKW_DOLAR_TIMESKEW, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_DOLAR_WARNING, SV2017ParserKW_DOLAR_WIDTH, SV2017ParserKW_BIT, SV2017ParserKW_BYTE, SV2017ParserKW_CONST, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LOCAL, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_NULL, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_SAMPLE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_SUPER, SV2017ParserKW_TAGGED, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_UNSIGNED, SV2017ParserTIME_LITERAL, SV2017ParserANY_BASED_NUMBER, SV2017ParserBASED_NUMBER_WITH_SIZE, SV2017ParserREAL_NUMBER_WITH_EXP, SV2017ParserFIXED_POINT_NUMBER, SV2017ParserUNSIGNED_NUMBER, SV2017ParserUNBASED_UNSIZED_LITERAL, SV2017ParserSTRING_LITERAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSYSTEM_TF_IDENTIFIER, SV2017ParserLPAREN, SV2017ParserLBRACE, SV2017ParserAPOSTROPHE_LBRACE, SV2017ParserDOLAR, SV2017ParserNOT, SV2017ParserNEG, SV2017ParserNAND, SV2017ParserNOR, SV2017ParserXOR, SV2017ParserNXOR, SV2017ParserXORN, SV2017ParserPLUS, SV2017ParserMINUS, SV2017ParserAMPERSAND, SV2017ParserBAR, SV2017ParserINCR, SV2017ParserDECR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3727)
			p.expression(0)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAttribute_instanceContext is an interface to support dynamic dispatch.
type IAttribute_instanceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttribute_instanceContext differentiates from other interfaces.
	IsAttribute_instanceContext()
}

type Attribute_instanceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttribute_instanceContext() *Attribute_instanceContext {
	var p = new(Attribute_instanceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_attribute_instance
	return p
}

func (*Attribute_instanceContext) IsAttribute_instanceContext() {}

func NewAttribute_instanceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Attribute_instanceContext {
	var p = new(Attribute_instanceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_attribute_instance

	return p
}

func (s *Attribute_instanceContext) GetParser() antlr.Parser { return s.parser }

func (s *Attribute_instanceContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Attribute_instanceContext) AllMUL() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserMUL)
}

func (s *Attribute_instanceContext) MUL(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserMUL, i)
}

func (s *Attribute_instanceContext) AllAttr_spec() []IAttr_specContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttr_specContext)(nil)).Elem())
	var tst = make([]IAttr_specContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttr_specContext)
		}
	}

	return tst
}

func (s *Attribute_instanceContext) Attr_spec(i int) IAttr_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttr_specContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttr_specContext)
}

func (s *Attribute_instanceContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Attribute_instanceContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Attribute_instanceContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Attribute_instanceContext) TICK_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(SV2017ParserTICK_IDENTIFIER, 0)
}

func (s *Attribute_instanceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Attribute_instanceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Attribute_instanceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterAttribute_instance(s)
	}
}

func (s *Attribute_instanceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitAttribute_instance(s)
	}
}

func (p *SV2017Parser) Attribute_instance() (localctx IAttribute_instanceContext) {
	localctx = NewAttribute_instanceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 528, SV2017ParserRULE_attribute_instance)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3744)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserLPAREN:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3730)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(3731)
			p.Match(SV2017ParserMUL)
		}
		{
			p.SetState(3732)
			p.Attr_spec()
		}
		p.SetState(3737)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserCOMMA {
			{
				p.SetState(3733)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(3734)
				p.Attr_spec()
			}

			p.SetState(3739)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(3740)
			p.Match(SV2017ParserMUL)
		}
		{
			p.SetState(3741)
			p.Match(SV2017ParserRPAREN)
		}

	case SV2017ParserTICK_IDENTIFIER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3743)
			p.Match(SV2017ParserTICK_IDENTIFIER)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAttr_specContext is an interface to support dynamic dispatch.
type IAttr_specContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttr_specContext differentiates from other interfaces.
	IsAttr_specContext()
}

type Attr_specContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttr_specContext() *Attr_specContext {
	var p = new(Attr_specContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_attr_spec
	return p
}

func (*Attr_specContext) IsAttr_specContext() {}

func NewAttr_specContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Attr_specContext {
	var p = new(Attr_specContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_attr_spec

	return p
}

func (s *Attr_specContext) GetParser() antlr.Parser { return s.parser }

func (s *Attr_specContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Attr_specContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserASSIGN, 0)
}

func (s *Attr_specContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Attr_specContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Attr_specContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Attr_specContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterAttr_spec(s)
	}
}

func (s *Attr_specContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitAttr_spec(s)
	}
}

func (p *SV2017Parser) Attr_spec() (localctx IAttr_specContext) {
	localctx = NewAttr_specContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 530, SV2017ParserRULE_attr_spec)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3746)
		p.Identifier()
	}
	p.SetState(3749)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserASSIGN {
		{
			p.SetState(3747)
			p.Match(SV2017ParserASSIGN)
		}
		{
			p.SetState(3748)
			p.expression(0)
		}

	}

	return localctx
}

// IClass_newContext is an interface to support dynamic dispatch.
type IClass_newContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClass_newContext differentiates from other interfaces.
	IsClass_newContext()
}

type Class_newContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClass_newContext() *Class_newContext {
	var p = new(Class_newContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_class_new
	return p
}

func (*Class_newContext) IsClass_newContext() {}

func NewClass_newContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Class_newContext {
	var p = new(Class_newContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_class_new

	return p
}

func (s *Class_newContext) GetParser() antlr.Parser { return s.parser }

func (s *Class_newContext) KW_NEW() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_NEW, 0)
}

func (s *Class_newContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Class_newContext) Class_scope() IClass_scopeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_scopeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_scopeContext)
}

func (s *Class_newContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Class_newContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Class_newContext) List_of_arguments() IList_of_argumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_argumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_argumentsContext)
}

func (s *Class_newContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Class_newContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Class_newContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterClass_new(s)
	}
}

func (s *Class_newContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitClass_new(s)
	}
}

func (p *SV2017Parser) Class_new() (localctx IClass_newContext) {
	localctx = NewClass_newContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 532, SV2017ParserRULE_class_new)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3764)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 399, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3751)
			p.Match(SV2017ParserKW_NEW)
		}
		{
			p.SetState(3752)
			p.expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(3754)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_DOLAR_UNIT || _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
			{
				p.SetState(3753)
				p.Class_scope()
			}

		}
		{
			p.SetState(3756)
			p.Match(SV2017ParserKW_NEW)
		}
		p.SetState(3762)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserLPAREN {
			{
				p.SetState(3757)
				p.Match(SV2017ParserLPAREN)
			}
			p.SetState(3759)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TAGGED-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserTIME_LITERAL-260)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(SV2017ParserANY_BASED_NUMBER-292))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-292))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-292))|(1<<(SV2017ParserFIXED_POINT_NUMBER-292))|(1<<(SV2017ParserUNSIGNED_NUMBER-292))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-292))|(1<<(SV2017ParserSTRING_LITERAL-292))|(1<<(SV2017ParserC_IDENTIFIER-292))|(1<<(SV2017ParserTICK_IDENTIFIER-292))|(1<<(SV2017ParserESCAPED_IDENTIFIER-292))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-292))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-292))|(1<<(SV2017ParserLPAREN-292))|(1<<(SV2017ParserLBRACE-292))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-292))|(1<<(SV2017ParserDOLAR-292))|(1<<(SV2017ParserNOT-292))|(1<<(SV2017ParserNEG-292))|(1<<(SV2017ParserNAND-292))|(1<<(SV2017ParserNOR-292)))) != 0) || (((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324))|(1<<(SV2017ParserCOMMA-324))|(1<<(SV2017ParserDOT-324))|(1<<(SV2017ParserPLUS-324)))) != 0) || (((_la-356)&-(0x1f+1)) == 0 && ((1<<uint((_la-356)))&((1<<(SV2017ParserMINUS-356))|(1<<(SV2017ParserAMPERSAND-356))|(1<<(SV2017ParserBAR-356))|(1<<(SV2017ParserINCR-356))|(1<<(SV2017ParserDECR-356)))) != 0) {
				{
					p.SetState(3758)
					p.List_of_arguments()
				}

			}
			{
				p.SetState(3761)
				p.Match(SV2017ParserRPAREN)
			}

		}

	}

	return localctx
}

// IParam_expressionContext is an interface to support dynamic dispatch.
type IParam_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParam_expressionContext differentiates from other interfaces.
	IsParam_expressionContext()
}

type Param_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParam_expressionContext() *Param_expressionContext {
	var p = new(Param_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_param_expression
	return p
}

func (*Param_expressionContext) IsParam_expressionContext() {}

func NewParam_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Param_expressionContext {
	var p = new(Param_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_param_expression

	return p
}

func (s *Param_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Param_expressionContext) Mintypmax_expression() IMintypmax_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMintypmax_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMintypmax_expressionContext)
}

func (s *Param_expressionContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Param_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Param_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Param_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterParam_expression(s)
	}
}

func (s *Param_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitParam_expression(s)
	}
}

func (p *SV2017Parser) Param_expression() (localctx IParam_expressionContext) {
	localctx = NewParam_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 534, SV2017ParserRULE_param_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3768)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 400, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3766)
			p.Mintypmax_expression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3767)
			p.Data_type()
		}

	}

	return localctx
}

// IConstant_param_expressionContext is an interface to support dynamic dispatch.
type IConstant_param_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstant_param_expressionContext differentiates from other interfaces.
	IsConstant_param_expressionContext()
}

type Constant_param_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstant_param_expressionContext() *Constant_param_expressionContext {
	var p = new(Constant_param_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_constant_param_expression
	return p
}

func (*Constant_param_expressionContext) IsConstant_param_expressionContext() {}

func NewConstant_param_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Constant_param_expressionContext {
	var p = new(Constant_param_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_constant_param_expression

	return p
}

func (s *Constant_param_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Constant_param_expressionContext) Param_expression() IParam_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParam_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParam_expressionContext)
}

func (s *Constant_param_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Constant_param_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Constant_param_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterConstant_param_expression(s)
	}
}

func (s *Constant_param_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitConstant_param_expression(s)
	}
}

func (p *SV2017Parser) Constant_param_expression() (localctx IConstant_param_expressionContext) {
	localctx = NewConstant_param_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 536, SV2017ParserRULE_constant_param_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3770)
		p.Param_expression()
	}

	return localctx
}

// IUnpacked_dimensionContext is an interface to support dynamic dispatch.
type IUnpacked_dimensionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnpacked_dimensionContext differentiates from other interfaces.
	IsUnpacked_dimensionContext()
}

type Unpacked_dimensionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnpacked_dimensionContext() *Unpacked_dimensionContext {
	var p = new(Unpacked_dimensionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_unpacked_dimension
	return p
}

func (*Unpacked_dimensionContext) IsUnpacked_dimensionContext() {}

func NewUnpacked_dimensionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unpacked_dimensionContext {
	var p = new(Unpacked_dimensionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_unpacked_dimension

	return p
}

func (s *Unpacked_dimensionContext) GetParser() antlr.Parser { return s.parser }

func (s *Unpacked_dimensionContext) LSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLSQUARE_BR, 0)
}

func (s *Unpacked_dimensionContext) Range_expression() IRange_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRange_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRange_expressionContext)
}

func (s *Unpacked_dimensionContext) RSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRSQUARE_BR, 0)
}

func (s *Unpacked_dimensionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unpacked_dimensionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unpacked_dimensionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterUnpacked_dimension(s)
	}
}

func (s *Unpacked_dimensionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitUnpacked_dimension(s)
	}
}

func (p *SV2017Parser) Unpacked_dimension() (localctx IUnpacked_dimensionContext) {
	localctx = NewUnpacked_dimensionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 538, SV2017ParserRULE_unpacked_dimension)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3772)
		p.Match(SV2017ParserLSQUARE_BR)
	}
	{
		p.SetState(3773)
		p.Range_expression()
	}
	{
		p.SetState(3774)
		p.Match(SV2017ParserRSQUARE_BR)
	}

	return localctx
}

// IPacked_dimensionContext is an interface to support dynamic dispatch.
type IPacked_dimensionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPacked_dimensionContext differentiates from other interfaces.
	IsPacked_dimensionContext()
}

type Packed_dimensionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPacked_dimensionContext() *Packed_dimensionContext {
	var p = new(Packed_dimensionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_packed_dimension
	return p
}

func (*Packed_dimensionContext) IsPacked_dimensionContext() {}

func NewPacked_dimensionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Packed_dimensionContext {
	var p = new(Packed_dimensionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_packed_dimension

	return p
}

func (s *Packed_dimensionContext) GetParser() antlr.Parser { return s.parser }

func (s *Packed_dimensionContext) LSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLSQUARE_BR, 0)
}

func (s *Packed_dimensionContext) RSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRSQUARE_BR, 0)
}

func (s *Packed_dimensionContext) Range_expression() IRange_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRange_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRange_expressionContext)
}

func (s *Packed_dimensionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Packed_dimensionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Packed_dimensionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPacked_dimension(s)
	}
}

func (s *Packed_dimensionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPacked_dimension(s)
	}
}

func (p *SV2017Parser) Packed_dimension() (localctx IPacked_dimensionContext) {
	localctx = NewPacked_dimensionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 540, SV2017ParserRULE_packed_dimension)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3776)
		p.Match(SV2017ParserLSQUARE_BR)
	}
	p.SetState(3778)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TAGGED-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserTIME_LITERAL-260)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(SV2017ParserANY_BASED_NUMBER-292))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-292))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-292))|(1<<(SV2017ParserFIXED_POINT_NUMBER-292))|(1<<(SV2017ParserUNSIGNED_NUMBER-292))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-292))|(1<<(SV2017ParserSTRING_LITERAL-292))|(1<<(SV2017ParserC_IDENTIFIER-292))|(1<<(SV2017ParserTICK_IDENTIFIER-292))|(1<<(SV2017ParserESCAPED_IDENTIFIER-292))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-292))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-292))|(1<<(SV2017ParserLPAREN-292))|(1<<(SV2017ParserLBRACE-292))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-292))|(1<<(SV2017ParserDOLAR-292))|(1<<(SV2017ParserNOT-292))|(1<<(SV2017ParserNEG-292))|(1<<(SV2017ParserNAND-292))|(1<<(SV2017ParserNOR-292)))) != 0) || (((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324))|(1<<(SV2017ParserPLUS-324)))) != 0) || (((_la-356)&-(0x1f+1)) == 0 && ((1<<uint((_la-356)))&((1<<(SV2017ParserMINUS-356))|(1<<(SV2017ParserAMPERSAND-356))|(1<<(SV2017ParserBAR-356))|(1<<(SV2017ParserINCR-356))|(1<<(SV2017ParserDECR-356)))) != 0) {
		{
			p.SetState(3777)
			p.Range_expression()
		}

	}
	{
		p.SetState(3780)
		p.Match(SV2017ParserRSQUARE_BR)
	}

	return localctx
}

// IVariable_dimensionContext is an interface to support dynamic dispatch.
type IVariable_dimensionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariable_dimensionContext differentiates from other interfaces.
	IsVariable_dimensionContext()
}

type Variable_dimensionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariable_dimensionContext() *Variable_dimensionContext {
	var p = new(Variable_dimensionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_variable_dimension
	return p
}

func (*Variable_dimensionContext) IsVariable_dimensionContext() {}

func NewVariable_dimensionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Variable_dimensionContext {
	var p = new(Variable_dimensionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_variable_dimension

	return p
}

func (s *Variable_dimensionContext) GetParser() antlr.Parser { return s.parser }

func (s *Variable_dimensionContext) LSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLSQUARE_BR, 0)
}

func (s *Variable_dimensionContext) RSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRSQUARE_BR, 0)
}

func (s *Variable_dimensionContext) MUL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserMUL, 0)
}

func (s *Variable_dimensionContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Variable_dimensionContext) Array_range_expression() IArray_range_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArray_range_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArray_range_expressionContext)
}

func (s *Variable_dimensionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Variable_dimensionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Variable_dimensionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterVariable_dimension(s)
	}
}

func (s *Variable_dimensionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitVariable_dimension(s)
	}
}

func (p *SV2017Parser) Variable_dimension() (localctx IVariable_dimensionContext) {
	localctx = NewVariable_dimensionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 542, SV2017ParserRULE_variable_dimension)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3782)
		p.Match(SV2017ParserLSQUARE_BR)
	}
	p.SetState(3786)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 402, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3783)
			p.Match(SV2017ParserMUL)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 402, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(3784)
			p.Data_type()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 402, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(3785)
			p.Array_range_expression()
		}

	}
	{
		p.SetState(3788)
		p.Match(SV2017ParserRSQUARE_BR)
	}

	return localctx
}

// IStruct_unionContext is an interface to support dynamic dispatch.
type IStruct_unionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStruct_unionContext differentiates from other interfaces.
	IsStruct_unionContext()
}

type Struct_unionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStruct_unionContext() *Struct_unionContext {
	var p = new(Struct_unionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_struct_union
	return p
}

func (*Struct_unionContext) IsStruct_unionContext() {}

func NewStruct_unionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Struct_unionContext {
	var p = new(Struct_unionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_struct_union

	return p
}

func (s *Struct_unionContext) GetParser() antlr.Parser { return s.parser }

func (s *Struct_unionContext) KW_STRUCT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_STRUCT, 0)
}

func (s *Struct_unionContext) KW_UNION() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_UNION, 0)
}

func (s *Struct_unionContext) KW_TAGGED() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_TAGGED, 0)
}

func (s *Struct_unionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Struct_unionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Struct_unionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterStruct_union(s)
	}
}

func (s *Struct_unionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitStruct_union(s)
	}
}

func (p *SV2017Parser) Struct_union() (localctx IStruct_unionContext) {
	localctx = NewStruct_unionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 544, SV2017ParserRULE_struct_union)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3795)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_STRUCT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3790)
			p.Match(SV2017ParserKW_STRUCT)
		}

	case SV2017ParserKW_UNION:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3791)
			p.Match(SV2017ParserKW_UNION)
		}
		p.SetState(3793)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_TAGGED {
			{
				p.SetState(3792)
				p.Match(SV2017ParserKW_TAGGED)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IEnum_base_typeContext is an interface to support dynamic dispatch.
type IEnum_base_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnum_base_typeContext differentiates from other interfaces.
	IsEnum_base_typeContext()
}

type Enum_base_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnum_base_typeContext() *Enum_base_typeContext {
	var p = new(Enum_base_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_enum_base_type
	return p
}

func (*Enum_base_typeContext) IsEnum_base_typeContext() {}

func NewEnum_base_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Enum_base_typeContext {
	var p = new(Enum_base_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_enum_base_type

	return p
}

func (s *Enum_base_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Enum_base_typeContext) Integer_atom_type() IInteger_atom_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInteger_atom_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInteger_atom_typeContext)
}

func (s *Enum_base_typeContext) Signing() ISigningContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISigningContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISigningContext)
}

func (s *Enum_base_typeContext) Integer_vector_type() IInteger_vector_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInteger_vector_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInteger_vector_typeContext)
}

func (s *Enum_base_typeContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Enum_base_typeContext) Variable_dimension() IVariable_dimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_dimensionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_dimensionContext)
}

func (s *Enum_base_typeContext) Packed_dimension() IPacked_dimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPacked_dimensionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPacked_dimensionContext)
}

func (s *Enum_base_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Enum_base_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Enum_base_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterEnum_base_type(s)
	}
}

func (s *Enum_base_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitEnum_base_type(s)
	}
}

func (p *SV2017Parser) Enum_base_type() (localctx IEnum_base_typeContext) {
	localctx = NewEnum_base_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 546, SV2017ParserRULE_enum_base_type)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3812)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_BYTE, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LONGINT, SV2017ParserKW_SHORTINT, SV2017ParserKW_TIME:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3797)
			p.Integer_atom_type()
		}
		p.SetState(3799)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_SIGNED || _la == SV2017ParserKW_UNSIGNED {
			{
				p.SetState(3798)
				p.Signing()
			}

		}

	case SV2017ParserKW_BIT, SV2017ParserKW_LOGIC, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_REG, SV2017ParserKW_SAMPLE, SV2017ParserKW_STD, SV2017ParserKW_TYPE_OPTION, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(3806)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SV2017ParserKW_BIT, SV2017ParserKW_LOGIC, SV2017ParserKW_REG:
			{
				p.SetState(3801)
				p.Integer_vector_type()
			}
			p.SetState(3803)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SV2017ParserKW_SIGNED || _la == SV2017ParserKW_UNSIGNED {
				{
					p.SetState(3802)
					p.Signing()
				}

			}

		case SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_SAMPLE, SV2017ParserKW_STD, SV2017ParserKW_TYPE_OPTION, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
			{
				p.SetState(3805)
				p.Identifier()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(3809)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserLSQUARE_BR {
			{
				p.SetState(3808)
				p.Variable_dimension()
			}

		}

	case SV2017ParserLSQUARE_BR:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3811)
			p.Packed_dimension()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IData_type_primitiveContext is an interface to support dynamic dispatch.
type IData_type_primitiveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsData_type_primitiveContext differentiates from other interfaces.
	IsData_type_primitiveContext()
}

type Data_type_primitiveContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyData_type_primitiveContext() *Data_type_primitiveContext {
	var p = new(Data_type_primitiveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_data_type_primitive
	return p
}

func (*Data_type_primitiveContext) IsData_type_primitiveContext() {}

func NewData_type_primitiveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Data_type_primitiveContext {
	var p = new(Data_type_primitiveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_data_type_primitive

	return p
}

func (s *Data_type_primitiveContext) GetParser() antlr.Parser { return s.parser }

func (s *Data_type_primitiveContext) Integer_type() IInteger_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInteger_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInteger_typeContext)
}

func (s *Data_type_primitiveContext) Signing() ISigningContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISigningContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISigningContext)
}

func (s *Data_type_primitiveContext) Non_integer_type() INon_integer_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INon_integer_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INon_integer_typeContext)
}

func (s *Data_type_primitiveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Data_type_primitiveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Data_type_primitiveContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterData_type_primitive(s)
	}
}

func (s *Data_type_primitiveContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitData_type_primitive(s)
	}
}

func (p *SV2017Parser) Data_type_primitive() (localctx IData_type_primitiveContext) {
	localctx = NewData_type_primitiveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 548, SV2017ParserRULE_data_type_primitive)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3819)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_BIT, SV2017ParserKW_BYTE, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_REG, SV2017ParserKW_SHORTINT, SV2017ParserKW_TIME:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3814)
			p.Integer_type()
		}
		p.SetState(3816)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_SIGNED || _la == SV2017ParserKW_UNSIGNED {
			{
				p.SetState(3815)
				p.Signing()
			}

		}

	case SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_SHORTREAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3818)
			p.Non_integer_type()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IData_type_usualContext is an interface to support dynamic dispatch.
type IData_type_usualContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsData_type_usualContext differentiates from other interfaces.
	IsData_type_usualContext()
}

type Data_type_usualContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyData_type_usualContext() *Data_type_usualContext {
	var p = new(Data_type_usualContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_data_type_usual
	return p
}

func (*Data_type_usualContext) IsData_type_usualContext() {}

func NewData_type_usualContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Data_type_usualContext {
	var p = new(Data_type_usualContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_data_type_usual

	return p
}

func (s *Data_type_usualContext) GetParser() antlr.Parser { return s.parser }

func (s *Data_type_usualContext) Data_type_primitive() IData_type_primitiveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_primitiveContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_primitiveContext)
}

func (s *Data_type_usualContext) KW_ENUM() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ENUM, 0)
}

func (s *Data_type_usualContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLBRACE, 0)
}

func (s *Data_type_usualContext) AllEnum_name_declaration() []IEnum_name_declarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEnum_name_declarationContext)(nil)).Elem())
	var tst = make([]IEnum_name_declarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEnum_name_declarationContext)
		}
	}

	return tst
}

func (s *Data_type_usualContext) Enum_name_declaration(i int) IEnum_name_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnum_name_declarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEnum_name_declarationContext)
}

func (s *Data_type_usualContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRBRACE, 0)
}

func (s *Data_type_usualContext) Struct_union() IStruct_unionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStruct_unionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStruct_unionContext)
}

func (s *Data_type_usualContext) Package_or_class_scoped_path() IPackage_or_class_scoped_pathContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackage_or_class_scoped_pathContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackage_or_class_scoped_pathContext)
}

func (s *Data_type_usualContext) AllVariable_dimension() []IVariable_dimensionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariable_dimensionContext)(nil)).Elem())
	var tst = make([]IVariable_dimensionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariable_dimensionContext)
		}
	}

	return tst
}

func (s *Data_type_usualContext) Variable_dimension(i int) IVariable_dimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_dimensionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariable_dimensionContext)
}

func (s *Data_type_usualContext) Enum_base_type() IEnum_base_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnum_base_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnum_base_typeContext)
}

func (s *Data_type_usualContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Data_type_usualContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Data_type_usualContext) KW_PACKED() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_PACKED, 0)
}

func (s *Data_type_usualContext) AllStruct_union_member() []IStruct_union_memberContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStruct_union_memberContext)(nil)).Elem())
	var tst = make([]IStruct_union_memberContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStruct_union_memberContext)
		}
	}

	return tst
}

func (s *Data_type_usualContext) Struct_union_member(i int) IStruct_union_memberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStruct_union_memberContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStruct_union_memberContext)
}

func (s *Data_type_usualContext) Signing() ISigningContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISigningContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISigningContext)
}

func (s *Data_type_usualContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Data_type_usualContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Data_type_usualContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterData_type_usual(s)
	}
}

func (s *Data_type_usualContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitData_type_usual(s)
	}
}

func (p *SV2017Parser) Data_type_usual() (localctx IData_type_usualContext) {
	localctx = NewData_type_usualContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 550, SV2017ParserRULE_data_type_usual)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3853)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_BIT, SV2017ParserKW_BYTE, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_TIME:
		{
			p.SetState(3821)
			p.Data_type_primitive()
		}

	case SV2017ParserKW_ENUM:
		{
			p.SetState(3822)
			p.Match(SV2017ParserKW_ENUM)
		}
		p.SetState(3824)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_BIT || _la == SV2017ParserKW_BYTE || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-174)&-(0x1f+1)) == 0 && ((1<<uint((_la-174)))&((1<<(SV2017ParserKW_OPTION-174))|(1<<(SV2017ParserKW_RANDOMIZE-174))|(1<<(SV2017ParserKW_REG-174)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299))|(1<<(SV2017ParserLSQUARE_BR-299)))) != 0) {
			{
				p.SetState(3823)
				p.Enum_base_type()
			}

		}
		{
			p.SetState(3826)
			p.Match(SV2017ParserLBRACE)
		}
		{
			p.SetState(3827)
			p.Enum_name_declaration()
		}
		p.SetState(3832)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserCOMMA {
			{
				p.SetState(3828)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(3829)
				p.Enum_name_declaration()
			}

			p.SetState(3834)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(3835)
			p.Match(SV2017ParserRBRACE)
		}

	case SV2017ParserKW_STRUCT, SV2017ParserKW_UNION:
		{
			p.SetState(3837)
			p.Struct_union()
		}
		p.SetState(3842)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_PACKED {
			{
				p.SetState(3838)
				p.Match(SV2017ParserKW_PACKED)
			}
			p.SetState(3840)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SV2017ParserKW_SIGNED || _la == SV2017ParserKW_UNSIGNED {
				{
					p.SetState(3839)
					p.Signing()
				}

			}

		}
		{
			p.SetState(3844)
			p.Match(SV2017ParserLBRACE)
		}
		p.SetState(3846)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == SV2017ParserKW_DOLAR_ROOT || (((_la-35)&-(0x1f+1)) == 0 && ((1<<uint((_la-35)))&((1<<(SV2017ParserKW_DOLAR_UNIT-35))|(1<<(SV2017ParserKW_BIT-35))|(1<<(SV2017ParserKW_BYTE-35))|(1<<(SV2017ParserKW_CHANDLE-35)))) != 0) || _la == SV2017ParserKW_ENUM || _la == SV2017ParserKW_EVENT || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-174)&-(0x1f+1)) == 0 && ((1<<uint((_la-174)))&((1<<(SV2017ParserKW_OPTION-174))|(1<<(SV2017ParserKW_RAND-174))|(1<<(SV2017ParserKW_RANDC-174))|(1<<(SV2017ParserKW_RANDOMIZE-174))|(1<<(SV2017ParserKW_REAL-174))|(1<<(SV2017ParserKW_REALTIME-174))|(1<<(SV2017ParserKW_REG-174)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_STRUCT-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNION-260))|(1<<(SV2017ParserKW_VIRTUAL-260))|(1<<(SV2017ParserKW_VOID-260)))) != 0) || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299))|(1<<(SV2017ParserLPAREN-299)))) != 0) {
			{
				p.SetState(3845)
				p.Struct_union_member()
			}

			p.SetState(3848)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(3850)
			p.Match(SV2017ParserRBRACE)
		}

	case SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_LOCAL, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_SAMPLE, SV2017ParserKW_STD, SV2017ParserKW_SUPER, SV2017ParserKW_THIS, SV2017ParserKW_TYPE_OPTION, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
		{
			p.SetState(3852)
			p.Package_or_class_scoped_path()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(3858)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserLSQUARE_BR {
		{
			p.SetState(3855)
			p.Variable_dimension()
		}

		p.SetState(3860)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IData_typeContext is an interface to support dynamic dispatch.
type IData_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsData_typeContext differentiates from other interfaces.
	IsData_typeContext()
}

type Data_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyData_typeContext() *Data_typeContext {
	var p = new(Data_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_data_type
	return p
}

func (*Data_typeContext) IsData_typeContext() {}

func NewData_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Data_typeContext {
	var p = new(Data_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_data_type

	return p
}

func (s *Data_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Data_typeContext) KW_STRING() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_STRING, 0)
}

func (s *Data_typeContext) KW_CHANDLE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_CHANDLE, 0)
}

func (s *Data_typeContext) KW_VIRTUAL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_VIRTUAL, 0)
}

func (s *Data_typeContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Data_typeContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Data_typeContext) KW_INTERFACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_INTERFACE, 0)
}

func (s *Data_typeContext) Parameter_value_assignment() IParameter_value_assignmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameter_value_assignmentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameter_value_assignmentContext)
}

func (s *Data_typeContext) DOT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOT, 0)
}

func (s *Data_typeContext) KW_EVENT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_EVENT, 0)
}

func (s *Data_typeContext) Data_type_usual() IData_type_usualContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_usualContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_usualContext)
}

func (s *Data_typeContext) Type_reference() IType_referenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_referenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_referenceContext)
}

func (s *Data_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Data_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Data_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterData_type(s)
	}
}

func (s *Data_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitData_type(s)
	}
}

func (p *SV2017Parser) Data_type() (localctx IData_typeContext) {
	localctx = NewData_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 552, SV2017ParserRULE_data_type)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3878)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_STRING:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3861)
			p.Match(SV2017ParserKW_STRING)
		}

	case SV2017ParserKW_CHANDLE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3862)
			p.Match(SV2017ParserKW_CHANDLE)
		}

	case SV2017ParserKW_VIRTUAL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3863)
			p.Match(SV2017ParserKW_VIRTUAL)
		}
		p.SetState(3865)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_INTERFACE {
			{
				p.SetState(3864)
				p.Match(SV2017ParserKW_INTERFACE)
			}

		}
		{
			p.SetState(3867)
			p.Identifier()
		}
		p.SetState(3869)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 420, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3868)
				p.Parameter_value_assignment()
			}

		}
		p.SetState(3873)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserDOT {
			{
				p.SetState(3871)
				p.Match(SV2017ParserDOT)
			}
			{
				p.SetState(3872)
				p.Identifier()
			}

		}

	case SV2017ParserKW_EVENT:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3875)
			p.Match(SV2017ParserKW_EVENT)
		}

	case SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_BIT, SV2017ParserKW_BYTE, SV2017ParserKW_ENUM, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LOCAL, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_SAMPLE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_STD, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_UNION, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3876)
			p.Data_type_usual()
		}

	case SV2017ParserKW_TYPE:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3877)
			p.Type_reference()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IData_type_or_implicitContext is an interface to support dynamic dispatch.
type IData_type_or_implicitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsData_type_or_implicitContext differentiates from other interfaces.
	IsData_type_or_implicitContext()
}

type Data_type_or_implicitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyData_type_or_implicitContext() *Data_type_or_implicitContext {
	var p = new(Data_type_or_implicitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_data_type_or_implicit
	return p
}

func (*Data_type_or_implicitContext) IsData_type_or_implicitContext() {}

func NewData_type_or_implicitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Data_type_or_implicitContext {
	var p = new(Data_type_or_implicitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_data_type_or_implicit

	return p
}

func (s *Data_type_or_implicitContext) GetParser() antlr.Parser { return s.parser }

func (s *Data_type_or_implicitContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Data_type_or_implicitContext) Implicit_data_type() IImplicit_data_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImplicit_data_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImplicit_data_typeContext)
}

func (s *Data_type_or_implicitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Data_type_or_implicitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Data_type_or_implicitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterData_type_or_implicit(s)
	}
}

func (s *Data_type_or_implicitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitData_type_or_implicit(s)
	}
}

func (p *SV2017Parser) Data_type_or_implicit() (localctx IData_type_or_implicitContext) {
	localctx = NewData_type_or_implicitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 554, SV2017ParserRULE_data_type_or_implicit)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3882)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_BIT, SV2017ParserKW_BYTE, SV2017ParserKW_CHANDLE, SV2017ParserKW_ENUM, SV2017ParserKW_EVENT, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LOCAL, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_SAMPLE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_UNION, SV2017ParserKW_VIRTUAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3880)
			p.Data_type()
		}

	case SV2017ParserKW_SIGNED, SV2017ParserKW_UNSIGNED, SV2017ParserLSQUARE_BR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3881)
			p.Implicit_data_type()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IImplicit_data_typeContext is an interface to support dynamic dispatch.
type IImplicit_data_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImplicit_data_typeContext differentiates from other interfaces.
	IsImplicit_data_typeContext()
}

type Implicit_data_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImplicit_data_typeContext() *Implicit_data_typeContext {
	var p = new(Implicit_data_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_implicit_data_type
	return p
}

func (*Implicit_data_typeContext) IsImplicit_data_typeContext() {}

func NewImplicit_data_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Implicit_data_typeContext {
	var p = new(Implicit_data_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_implicit_data_type

	return p
}

func (s *Implicit_data_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Implicit_data_typeContext) Signing() ISigningContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISigningContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISigningContext)
}

func (s *Implicit_data_typeContext) AllPacked_dimension() []IPacked_dimensionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPacked_dimensionContext)(nil)).Elem())
	var tst = make([]IPacked_dimensionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPacked_dimensionContext)
		}
	}

	return tst
}

func (s *Implicit_data_typeContext) Packed_dimension(i int) IPacked_dimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPacked_dimensionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPacked_dimensionContext)
}

func (s *Implicit_data_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Implicit_data_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Implicit_data_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterImplicit_data_type(s)
	}
}

func (s *Implicit_data_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitImplicit_data_type(s)
	}
}

func (p *SV2017Parser) Implicit_data_type() (localctx IImplicit_data_typeContext) {
	localctx = NewImplicit_data_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 556, SV2017ParserRULE_implicit_data_type)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3896)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_SIGNED, SV2017ParserKW_UNSIGNED:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3884)
			p.Signing()
		}
		p.SetState(3888)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserLSQUARE_BR {
			{
				p.SetState(3885)
				p.Packed_dimension()
			}

			p.SetState(3890)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case SV2017ParserLSQUARE_BR:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(3892)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == SV2017ParserLSQUARE_BR {
			{
				p.SetState(3891)
				p.Packed_dimension()
			}

			p.SetState(3894)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISequence_list_of_arguments_named_itemContext is an interface to support dynamic dispatch.
type ISequence_list_of_arguments_named_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSequence_list_of_arguments_named_itemContext differentiates from other interfaces.
	IsSequence_list_of_arguments_named_itemContext()
}

type Sequence_list_of_arguments_named_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySequence_list_of_arguments_named_itemContext() *Sequence_list_of_arguments_named_itemContext {
	var p = new(Sequence_list_of_arguments_named_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_sequence_list_of_arguments_named_item
	return p
}

func (*Sequence_list_of_arguments_named_itemContext) IsSequence_list_of_arguments_named_itemContext() {
}

func NewSequence_list_of_arguments_named_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sequence_list_of_arguments_named_itemContext {
	var p = new(Sequence_list_of_arguments_named_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_sequence_list_of_arguments_named_item

	return p
}

func (s *Sequence_list_of_arguments_named_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Sequence_list_of_arguments_named_itemContext) DOT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOT, 0)
}

func (s *Sequence_list_of_arguments_named_itemContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Sequence_list_of_arguments_named_itemContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Sequence_list_of_arguments_named_itemContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Sequence_list_of_arguments_named_itemContext) Sequence_actual_arg() ISequence_actual_argContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISequence_actual_argContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISequence_actual_argContext)
}

func (s *Sequence_list_of_arguments_named_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sequence_list_of_arguments_named_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sequence_list_of_arguments_named_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterSequence_list_of_arguments_named_item(s)
	}
}

func (s *Sequence_list_of_arguments_named_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitSequence_list_of_arguments_named_item(s)
	}
}

func (p *SV2017Parser) Sequence_list_of_arguments_named_item() (localctx ISequence_list_of_arguments_named_itemContext) {
	localctx = NewSequence_list_of_arguments_named_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 558, SV2017ParserRULE_sequence_list_of_arguments_named_item)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3898)
		p.Match(SV2017ParserDOT)
	}
	{
		p.SetState(3899)
		p.Identifier()
	}
	{
		p.SetState(3900)
		p.Match(SV2017ParserLPAREN)
	}
	p.SetState(3902)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56))|(1<<(SV2017ParserKW_EDGE-56)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(SV2017ParserKW_FIRST_MATCH-115))|(1<<(SV2017ParserKW_INT-115))|(1<<(SV2017ParserKW_INTEGER-115)))) != 0) || (((_la-152)&-(0x1f+1)) == 0 && ((1<<uint((_la-152)))&((1<<(SV2017ParserKW_LOCAL-152))|(1<<(SV2017ParserKW_LOGIC-152))|(1<<(SV2017ParserKW_LONGINT-152))|(1<<(SV2017ParserKW_NEGEDGE-152))|(1<<(SV2017ParserKW_NULL-152))|(1<<(SV2017ParserKW_OPTION-152))|(1<<(SV2017ParserKW_POSEDGE-152)))) != 0) || (((_la-197)&-(0x1f+1)) == 0 && ((1<<uint((_la-197)))&((1<<(SV2017ParserKW_RANDOMIZE-197))|(1<<(SV2017ParserKW_REAL-197))|(1<<(SV2017ParserKW_REALTIME-197))|(1<<(SV2017ParserKW_REG-197))|(1<<(SV2017ParserKW_SAMPLE-197))|(1<<(SV2017ParserKW_SHORTINT-197))|(1<<(SV2017ParserKW_SHORTREAL-197))|(1<<(SV2017ParserKW_SIGNED-197)))) != 0) || (((_la-232)&-(0x1f+1)) == 0 && ((1<<uint((_la-232)))&((1<<(SV2017ParserKW_STD-232))|(1<<(SV2017ParserKW_STRING-232))|(1<<(SV2017ParserKW_SUPER-232))|(1<<(SV2017ParserKW_TAGGED-232))|(1<<(SV2017ParserKW_THIS-232))|(1<<(SV2017ParserKW_TIME-232))|(1<<(SV2017ParserKW_TYPE-232))|(1<<(SV2017ParserKW_TYPE_OPTION-232)))) != 0) || (((_la-266)&-(0x1f+1)) == 0 && ((1<<uint((_la-266)))&((1<<(SV2017ParserKW_UNSIGNED-266))|(1<<(SV2017ParserTIME_LITERAL-266))|(1<<(SV2017ParserANY_BASED_NUMBER-266))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-266))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-266))|(1<<(SV2017ParserFIXED_POINT_NUMBER-266))|(1<<(SV2017ParserUNSIGNED_NUMBER-266))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-266)))) != 0) || (((_la-298)&-(0x1f+1)) == 0 && ((1<<uint((_la-298)))&((1<<(SV2017ParserSTRING_LITERAL-298))|(1<<(SV2017ParserC_IDENTIFIER-298))|(1<<(SV2017ParserTICK_IDENTIFIER-298))|(1<<(SV2017ParserESCAPED_IDENTIFIER-298))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-298))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-298))|(1<<(SV2017ParserLPAREN-298))|(1<<(SV2017ParserLBRACE-298))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-298))|(1<<(SV2017ParserDOLAR-298))|(1<<(SV2017ParserNOT-298))|(1<<(SV2017ParserNEG-298))|(1<<(SV2017ParserNAND-298))|(1<<(SV2017ParserNOR-298))|(1<<(SV2017ParserXOR-298))|(1<<(SV2017ParserNXOR-298))|(1<<(SV2017ParserXORN-298)))) != 0) || (((_la-355)&-(0x1f+1)) == 0 && ((1<<uint((_la-355)))&((1<<(SV2017ParserPLUS-355))|(1<<(SV2017ParserMINUS-355))|(1<<(SV2017ParserAMPERSAND-355))|(1<<(SV2017ParserBAR-355))|(1<<(SV2017ParserINCR-355))|(1<<(SV2017ParserDECR-355))|(1<<(SV2017ParserAT-355))|(1<<(SV2017ParserDOUBLE_HASH-355)))) != 0) {
		{
			p.SetState(3901)
			p.Sequence_actual_arg()
		}

	}
	{
		p.SetState(3904)
		p.Match(SV2017ParserRPAREN)
	}

	return localctx
}

// ISequence_list_of_argumentsContext is an interface to support dynamic dispatch.
type ISequence_list_of_argumentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSequence_list_of_argumentsContext differentiates from other interfaces.
	IsSequence_list_of_argumentsContext()
}

type Sequence_list_of_argumentsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySequence_list_of_argumentsContext() *Sequence_list_of_argumentsContext {
	var p = new(Sequence_list_of_argumentsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_sequence_list_of_arguments
	return p
}

func (*Sequence_list_of_argumentsContext) IsSequence_list_of_argumentsContext() {}

func NewSequence_list_of_argumentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sequence_list_of_argumentsContext {
	var p = new(Sequence_list_of_argumentsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_sequence_list_of_arguments

	return p
}

func (s *Sequence_list_of_argumentsContext) GetParser() antlr.Parser { return s.parser }

func (s *Sequence_list_of_argumentsContext) AllSequence_list_of_arguments_named_item() []ISequence_list_of_arguments_named_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISequence_list_of_arguments_named_itemContext)(nil)).Elem())
	var tst = make([]ISequence_list_of_arguments_named_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISequence_list_of_arguments_named_itemContext)
		}
	}

	return tst
}

func (s *Sequence_list_of_argumentsContext) Sequence_list_of_arguments_named_item(i int) ISequence_list_of_arguments_named_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISequence_list_of_arguments_named_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISequence_list_of_arguments_named_itemContext)
}

func (s *Sequence_list_of_argumentsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Sequence_list_of_argumentsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Sequence_list_of_argumentsContext) AllSequence_actual_arg() []ISequence_actual_argContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISequence_actual_argContext)(nil)).Elem())
	var tst = make([]ISequence_actual_argContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISequence_actual_argContext)
		}
	}

	return tst
}

func (s *Sequence_list_of_argumentsContext) Sequence_actual_arg(i int) ISequence_actual_argContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISequence_actual_argContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISequence_actual_argContext)
}

func (s *Sequence_list_of_argumentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sequence_list_of_argumentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sequence_list_of_argumentsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterSequence_list_of_arguments(s)
	}
}

func (s *Sequence_list_of_argumentsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitSequence_list_of_arguments(s)
	}
}

func (p *SV2017Parser) Sequence_list_of_arguments() (localctx ISequence_list_of_argumentsContext) {
	localctx = NewSequence_list_of_argumentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 560, SV2017ParserRULE_sequence_list_of_arguments)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3927)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 432, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(3906)
			p.Sequence_list_of_arguments_named_item()
		}

	case 2:
		{
			p.SetState(3907)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(3908)
			p.Sequence_list_of_arguments_named_item()
		}

	case 3:
		{
			p.SetState(3909)
			p.Sequence_actual_arg()
		}
		p.SetState(3916)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 429, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(3910)
					p.Match(SV2017ParserCOMMA)
				}
				p.SetState(3912)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56))|(1<<(SV2017ParserKW_EDGE-56)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(SV2017ParserKW_FIRST_MATCH-115))|(1<<(SV2017ParserKW_INT-115))|(1<<(SV2017ParserKW_INTEGER-115)))) != 0) || (((_la-152)&-(0x1f+1)) == 0 && ((1<<uint((_la-152)))&((1<<(SV2017ParserKW_LOCAL-152))|(1<<(SV2017ParserKW_LOGIC-152))|(1<<(SV2017ParserKW_LONGINT-152))|(1<<(SV2017ParserKW_NEGEDGE-152))|(1<<(SV2017ParserKW_NULL-152))|(1<<(SV2017ParserKW_OPTION-152))|(1<<(SV2017ParserKW_POSEDGE-152)))) != 0) || (((_la-197)&-(0x1f+1)) == 0 && ((1<<uint((_la-197)))&((1<<(SV2017ParserKW_RANDOMIZE-197))|(1<<(SV2017ParserKW_REAL-197))|(1<<(SV2017ParserKW_REALTIME-197))|(1<<(SV2017ParserKW_REG-197))|(1<<(SV2017ParserKW_SAMPLE-197))|(1<<(SV2017ParserKW_SHORTINT-197))|(1<<(SV2017ParserKW_SHORTREAL-197))|(1<<(SV2017ParserKW_SIGNED-197)))) != 0) || (((_la-232)&-(0x1f+1)) == 0 && ((1<<uint((_la-232)))&((1<<(SV2017ParserKW_STD-232))|(1<<(SV2017ParserKW_STRING-232))|(1<<(SV2017ParserKW_SUPER-232))|(1<<(SV2017ParserKW_TAGGED-232))|(1<<(SV2017ParserKW_THIS-232))|(1<<(SV2017ParserKW_TIME-232))|(1<<(SV2017ParserKW_TYPE-232))|(1<<(SV2017ParserKW_TYPE_OPTION-232)))) != 0) || (((_la-266)&-(0x1f+1)) == 0 && ((1<<uint((_la-266)))&((1<<(SV2017ParserKW_UNSIGNED-266))|(1<<(SV2017ParserTIME_LITERAL-266))|(1<<(SV2017ParserANY_BASED_NUMBER-266))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-266))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-266))|(1<<(SV2017ParserFIXED_POINT_NUMBER-266))|(1<<(SV2017ParserUNSIGNED_NUMBER-266))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-266)))) != 0) || (((_la-298)&-(0x1f+1)) == 0 && ((1<<uint((_la-298)))&((1<<(SV2017ParserSTRING_LITERAL-298))|(1<<(SV2017ParserC_IDENTIFIER-298))|(1<<(SV2017ParserTICK_IDENTIFIER-298))|(1<<(SV2017ParserESCAPED_IDENTIFIER-298))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-298))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-298))|(1<<(SV2017ParserLPAREN-298))|(1<<(SV2017ParserLBRACE-298))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-298))|(1<<(SV2017ParserDOLAR-298))|(1<<(SV2017ParserNOT-298))|(1<<(SV2017ParserNEG-298))|(1<<(SV2017ParserNAND-298))|(1<<(SV2017ParserNOR-298))|(1<<(SV2017ParserXOR-298))|(1<<(SV2017ParserNXOR-298))|(1<<(SV2017ParserXORN-298)))) != 0) || (((_la-355)&-(0x1f+1)) == 0 && ((1<<uint((_la-355)))&((1<<(SV2017ParserPLUS-355))|(1<<(SV2017ParserMINUS-355))|(1<<(SV2017ParserAMPERSAND-355))|(1<<(SV2017ParserBAR-355))|(1<<(SV2017ParserINCR-355))|(1<<(SV2017ParserDECR-355))|(1<<(SV2017ParserAT-355))|(1<<(SV2017ParserDOUBLE_HASH-355)))) != 0) {
					{
						p.SetState(3911)
						p.Sequence_actual_arg()
					}

				}

			}
			p.SetState(3918)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 429, p.GetParserRuleContext())
		}

	case 4:
		p.SetState(3923)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(3919)
					p.Match(SV2017ParserCOMMA)
				}
				p.SetState(3921)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56))|(1<<(SV2017ParserKW_EDGE-56)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(SV2017ParserKW_FIRST_MATCH-115))|(1<<(SV2017ParserKW_INT-115))|(1<<(SV2017ParserKW_INTEGER-115)))) != 0) || (((_la-152)&-(0x1f+1)) == 0 && ((1<<uint((_la-152)))&((1<<(SV2017ParserKW_LOCAL-152))|(1<<(SV2017ParserKW_LOGIC-152))|(1<<(SV2017ParserKW_LONGINT-152))|(1<<(SV2017ParserKW_NEGEDGE-152))|(1<<(SV2017ParserKW_NULL-152))|(1<<(SV2017ParserKW_OPTION-152))|(1<<(SV2017ParserKW_POSEDGE-152)))) != 0) || (((_la-197)&-(0x1f+1)) == 0 && ((1<<uint((_la-197)))&((1<<(SV2017ParserKW_RANDOMIZE-197))|(1<<(SV2017ParserKW_REAL-197))|(1<<(SV2017ParserKW_REALTIME-197))|(1<<(SV2017ParserKW_REG-197))|(1<<(SV2017ParserKW_SAMPLE-197))|(1<<(SV2017ParserKW_SHORTINT-197))|(1<<(SV2017ParserKW_SHORTREAL-197))|(1<<(SV2017ParserKW_SIGNED-197)))) != 0) || (((_la-232)&-(0x1f+1)) == 0 && ((1<<uint((_la-232)))&((1<<(SV2017ParserKW_STD-232))|(1<<(SV2017ParserKW_STRING-232))|(1<<(SV2017ParserKW_SUPER-232))|(1<<(SV2017ParserKW_TAGGED-232))|(1<<(SV2017ParserKW_THIS-232))|(1<<(SV2017ParserKW_TIME-232))|(1<<(SV2017ParserKW_TYPE-232))|(1<<(SV2017ParserKW_TYPE_OPTION-232)))) != 0) || (((_la-266)&-(0x1f+1)) == 0 && ((1<<uint((_la-266)))&((1<<(SV2017ParserKW_UNSIGNED-266))|(1<<(SV2017ParserTIME_LITERAL-266))|(1<<(SV2017ParserANY_BASED_NUMBER-266))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-266))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-266))|(1<<(SV2017ParserFIXED_POINT_NUMBER-266))|(1<<(SV2017ParserUNSIGNED_NUMBER-266))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-266)))) != 0) || (((_la-298)&-(0x1f+1)) == 0 && ((1<<uint((_la-298)))&((1<<(SV2017ParserSTRING_LITERAL-298))|(1<<(SV2017ParserC_IDENTIFIER-298))|(1<<(SV2017ParserTICK_IDENTIFIER-298))|(1<<(SV2017ParserESCAPED_IDENTIFIER-298))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-298))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-298))|(1<<(SV2017ParserLPAREN-298))|(1<<(SV2017ParserLBRACE-298))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-298))|(1<<(SV2017ParserDOLAR-298))|(1<<(SV2017ParserNOT-298))|(1<<(SV2017ParserNEG-298))|(1<<(SV2017ParserNAND-298))|(1<<(SV2017ParserNOR-298))|(1<<(SV2017ParserXOR-298))|(1<<(SV2017ParserNXOR-298))|(1<<(SV2017ParserXORN-298)))) != 0) || (((_la-355)&-(0x1f+1)) == 0 && ((1<<uint((_la-355)))&((1<<(SV2017ParserPLUS-355))|(1<<(SV2017ParserMINUS-355))|(1<<(SV2017ParserAMPERSAND-355))|(1<<(SV2017ParserBAR-355))|(1<<(SV2017ParserINCR-355))|(1<<(SV2017ParserDECR-355))|(1<<(SV2017ParserAT-355))|(1<<(SV2017ParserDOUBLE_HASH-355)))) != 0) {
					{
						p.SetState(3920)
						p.Sequence_actual_arg()
					}

				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(3925)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 431, p.GetParserRuleContext())
		}

	}
	p.SetState(3933)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserCOMMA {
		{
			p.SetState(3929)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(3930)
			p.Sequence_list_of_arguments_named_item()
		}

		p.SetState(3935)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IList_of_arguments_named_itemContext is an interface to support dynamic dispatch.
type IList_of_arguments_named_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsList_of_arguments_named_itemContext differentiates from other interfaces.
	IsList_of_arguments_named_itemContext()
}

type List_of_arguments_named_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyList_of_arguments_named_itemContext() *List_of_arguments_named_itemContext {
	var p = new(List_of_arguments_named_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_list_of_arguments_named_item
	return p
}

func (*List_of_arguments_named_itemContext) IsList_of_arguments_named_itemContext() {}

func NewList_of_arguments_named_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *List_of_arguments_named_itemContext {
	var p = new(List_of_arguments_named_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_list_of_arguments_named_item

	return p
}

func (s *List_of_arguments_named_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *List_of_arguments_named_itemContext) DOT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOT, 0)
}

func (s *List_of_arguments_named_itemContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *List_of_arguments_named_itemContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *List_of_arguments_named_itemContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *List_of_arguments_named_itemContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *List_of_arguments_named_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *List_of_arguments_named_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *List_of_arguments_named_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterList_of_arguments_named_item(s)
	}
}

func (s *List_of_arguments_named_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitList_of_arguments_named_item(s)
	}
}

func (p *SV2017Parser) List_of_arguments_named_item() (localctx IList_of_arguments_named_itemContext) {
	localctx = NewList_of_arguments_named_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 562, SV2017ParserRULE_list_of_arguments_named_item)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3936)
		p.Match(SV2017ParserDOT)
	}
	{
		p.SetState(3937)
		p.Identifier()
	}
	{
		p.SetState(3938)
		p.Match(SV2017ParserLPAREN)
	}
	p.SetState(3940)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TAGGED-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserTIME_LITERAL-260)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(SV2017ParserANY_BASED_NUMBER-292))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-292))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-292))|(1<<(SV2017ParserFIXED_POINT_NUMBER-292))|(1<<(SV2017ParserUNSIGNED_NUMBER-292))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-292))|(1<<(SV2017ParserSTRING_LITERAL-292))|(1<<(SV2017ParserC_IDENTIFIER-292))|(1<<(SV2017ParserTICK_IDENTIFIER-292))|(1<<(SV2017ParserESCAPED_IDENTIFIER-292))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-292))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-292))|(1<<(SV2017ParserLPAREN-292))|(1<<(SV2017ParserLBRACE-292))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-292))|(1<<(SV2017ParserDOLAR-292))|(1<<(SV2017ParserNOT-292))|(1<<(SV2017ParserNEG-292))|(1<<(SV2017ParserNAND-292))|(1<<(SV2017ParserNOR-292)))) != 0) || (((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324))|(1<<(SV2017ParserPLUS-324)))) != 0) || (((_la-356)&-(0x1f+1)) == 0 && ((1<<uint((_la-356)))&((1<<(SV2017ParserMINUS-356))|(1<<(SV2017ParserAMPERSAND-356))|(1<<(SV2017ParserBAR-356))|(1<<(SV2017ParserINCR-356))|(1<<(SV2017ParserDECR-356)))) != 0) {
		{
			p.SetState(3939)
			p.expression(0)
		}

	}
	{
		p.SetState(3942)
		p.Match(SV2017ParserRPAREN)
	}

	return localctx
}

// IList_of_argumentsContext is an interface to support dynamic dispatch.
type IList_of_argumentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsList_of_argumentsContext differentiates from other interfaces.
	IsList_of_argumentsContext()
}

type List_of_argumentsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyList_of_argumentsContext() *List_of_argumentsContext {
	var p = new(List_of_argumentsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_list_of_arguments
	return p
}

func (*List_of_argumentsContext) IsList_of_argumentsContext() {}

func NewList_of_argumentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *List_of_argumentsContext {
	var p = new(List_of_argumentsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_list_of_arguments

	return p
}

func (s *List_of_argumentsContext) GetParser() antlr.Parser { return s.parser }

func (s *List_of_argumentsContext) AllList_of_arguments_named_item() []IList_of_arguments_named_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IList_of_arguments_named_itemContext)(nil)).Elem())
	var tst = make([]IList_of_arguments_named_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IList_of_arguments_named_itemContext)
		}
	}

	return tst
}

func (s *List_of_argumentsContext) List_of_arguments_named_item(i int) IList_of_arguments_named_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_arguments_named_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IList_of_arguments_named_itemContext)
}

func (s *List_of_argumentsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *List_of_argumentsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *List_of_argumentsContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *List_of_argumentsContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *List_of_argumentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *List_of_argumentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *List_of_argumentsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterList_of_arguments(s)
	}
}

func (s *List_of_argumentsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitList_of_arguments(s)
	}
}

func (p *SV2017Parser) List_of_arguments() (localctx IList_of_argumentsContext) {
	localctx = NewList_of_argumentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 564, SV2017ParserRULE_list_of_arguments)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3965)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 439, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(3944)
			p.List_of_arguments_named_item()
		}

	case 2:
		{
			p.SetState(3945)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(3946)
			p.List_of_arguments_named_item()
		}

	case 3:
		{
			p.SetState(3947)
			p.expression(0)
		}
		p.SetState(3954)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 436, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(3948)
					p.Match(SV2017ParserCOMMA)
				}
				p.SetState(3950)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TAGGED-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserTIME_LITERAL-260)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(SV2017ParserANY_BASED_NUMBER-292))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-292))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-292))|(1<<(SV2017ParserFIXED_POINT_NUMBER-292))|(1<<(SV2017ParserUNSIGNED_NUMBER-292))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-292))|(1<<(SV2017ParserSTRING_LITERAL-292))|(1<<(SV2017ParserC_IDENTIFIER-292))|(1<<(SV2017ParserTICK_IDENTIFIER-292))|(1<<(SV2017ParserESCAPED_IDENTIFIER-292))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-292))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-292))|(1<<(SV2017ParserLPAREN-292))|(1<<(SV2017ParserLBRACE-292))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-292))|(1<<(SV2017ParserDOLAR-292))|(1<<(SV2017ParserNOT-292))|(1<<(SV2017ParserNEG-292))|(1<<(SV2017ParserNAND-292))|(1<<(SV2017ParserNOR-292)))) != 0) || (((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324))|(1<<(SV2017ParserPLUS-324)))) != 0) || (((_la-356)&-(0x1f+1)) == 0 && ((1<<uint((_la-356)))&((1<<(SV2017ParserMINUS-356))|(1<<(SV2017ParserAMPERSAND-356))|(1<<(SV2017ParserBAR-356))|(1<<(SV2017ParserINCR-356))|(1<<(SV2017ParserDECR-356)))) != 0) {
					{
						p.SetState(3949)
						p.expression(0)
					}

				}

			}
			p.SetState(3956)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 436, p.GetParserRuleContext())
		}

	case 4:
		p.SetState(3961)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(3957)
					p.Match(SV2017ParserCOMMA)
				}
				p.SetState(3959)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TAGGED-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserTIME_LITERAL-260)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(SV2017ParserANY_BASED_NUMBER-292))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-292))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-292))|(1<<(SV2017ParserFIXED_POINT_NUMBER-292))|(1<<(SV2017ParserUNSIGNED_NUMBER-292))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-292))|(1<<(SV2017ParserSTRING_LITERAL-292))|(1<<(SV2017ParserC_IDENTIFIER-292))|(1<<(SV2017ParserTICK_IDENTIFIER-292))|(1<<(SV2017ParserESCAPED_IDENTIFIER-292))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-292))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-292))|(1<<(SV2017ParserLPAREN-292))|(1<<(SV2017ParserLBRACE-292))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-292))|(1<<(SV2017ParserDOLAR-292))|(1<<(SV2017ParserNOT-292))|(1<<(SV2017ParserNEG-292))|(1<<(SV2017ParserNAND-292))|(1<<(SV2017ParserNOR-292)))) != 0) || (((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324))|(1<<(SV2017ParserPLUS-324)))) != 0) || (((_la-356)&-(0x1f+1)) == 0 && ((1<<uint((_la-356)))&((1<<(SV2017ParserMINUS-356))|(1<<(SV2017ParserAMPERSAND-356))|(1<<(SV2017ParserBAR-356))|(1<<(SV2017ParserINCR-356))|(1<<(SV2017ParserDECR-356)))) != 0) {
					{
						p.SetState(3958)
						p.expression(0)
					}

				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(3963)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 438, p.GetParserRuleContext())
		}

	}
	p.SetState(3971)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 440, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(3967)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(3968)
				p.List_of_arguments_named_item()
			}

		}
		p.SetState(3973)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 440, p.GetParserRuleContext())
	}

	return localctx
}

// IPrimary_literalContext is an interface to support dynamic dispatch.
type IPrimary_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrimary_literalContext differentiates from other interfaces.
	IsPrimary_literalContext()
}

type Primary_literalContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimary_literalContext() *Primary_literalContext {
	var p = new(Primary_literalContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_primary_literal
	return p
}

func (*Primary_literalContext) IsPrimary_literalContext() {}

func NewPrimary_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Primary_literalContext {
	var p = new(Primary_literalContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_primary_literal

	return p
}

func (s *Primary_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Primary_literalContext) Time_lit() ITime_litContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITime_litContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITime_litContext)
}

func (s *Primary_literalContext) UNBASED_UNSIZED_LITERAL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserUNBASED_UNSIZED_LITERAL, 0)
}

func (s *Primary_literalContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSTRING_LITERAL, 0)
}

func (s *Primary_literalContext) Number() INumberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumberContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *Primary_literalContext) KW_NULL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_NULL, 0)
}

func (s *Primary_literalContext) KW_THIS() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_THIS, 0)
}

func (s *Primary_literalContext) DOLAR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOLAR, 0)
}

func (s *Primary_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Primary_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Primary_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPrimary_literal(s)
	}
}

func (s *Primary_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPrimary_literal(s)
	}
}

func (p *SV2017Parser) Primary_literal() (localctx IPrimary_literalContext) {
	localctx = NewPrimary_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 566, SV2017ParserRULE_primary_literal)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3981)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 441, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3974)
			p.Time_lit()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3975)
			p.Match(SV2017ParserUNBASED_UNSIZED_LITERAL)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3976)
			p.Match(SV2017ParserSTRING_LITERAL)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3977)
			p.Number()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3978)
			p.Match(SV2017ParserKW_NULL)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3979)
			p.Match(SV2017ParserKW_THIS)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(3980)
			p.Match(SV2017ParserDOLAR)
		}

	}

	return localctx
}

// IType_referenceContext is an interface to support dynamic dispatch.
type IType_referenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsType_referenceContext differentiates from other interfaces.
	IsType_referenceContext()
}

type Type_referenceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_referenceContext() *Type_referenceContext {
	var p = new(Type_referenceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_type_reference
	return p
}

func (*Type_referenceContext) IsType_referenceContext() {}

func NewType_referenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_referenceContext {
	var p = new(Type_referenceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_type_reference

	return p
}

func (s *Type_referenceContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_referenceContext) KW_TYPE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_TYPE, 0)
}

func (s *Type_referenceContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Type_referenceContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Type_referenceContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Type_referenceContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Type_referenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_referenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_referenceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterType_reference(s)
	}
}

func (s *Type_referenceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitType_reference(s)
	}
}

func (p *SV2017Parser) Type_reference() (localctx IType_referenceContext) {
	localctx = NewType_referenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 568, SV2017ParserRULE_type_reference)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3983)
		p.Match(SV2017ParserKW_TYPE)
	}
	{
		p.SetState(3984)
		p.Match(SV2017ParserLPAREN)
	}
	p.SetState(3987)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 442, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(3985)
			p.expression(0)
		}

	case 2:
		{
			p.SetState(3986)
			p.Data_type()
		}

	}
	{
		p.SetState(3989)
		p.Match(SV2017ParserRPAREN)
	}

	return localctx
}

// IPackage_scopeContext is an interface to support dynamic dispatch.
type IPackage_scopeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackage_scopeContext differentiates from other interfaces.
	IsPackage_scopeContext()
}

type Package_scopeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackage_scopeContext() *Package_scopeContext {
	var p = new(Package_scopeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_package_scope
	return p
}

func (*Package_scopeContext) IsPackage_scopeContext() {}

func NewPackage_scopeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Package_scopeContext {
	var p = new(Package_scopeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_package_scope

	return p
}

func (s *Package_scopeContext) GetParser() antlr.Parser { return s.parser }

func (s *Package_scopeContext) DOUBLE_COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOUBLE_COLON, 0)
}

func (s *Package_scopeContext) KW_DOLAR_UNIT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DOLAR_UNIT, 0)
}

func (s *Package_scopeContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Package_scopeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Package_scopeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Package_scopeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPackage_scope(s)
	}
}

func (s *Package_scopeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPackage_scope(s)
	}
}

func (p *SV2017Parser) Package_scope() (localctx IPackage_scopeContext) {
	localctx = NewPackage_scopeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 570, SV2017ParserRULE_package_scope)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3993)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_DOLAR_UNIT:
		{
			p.SetState(3991)
			p.Match(SV2017ParserKW_DOLAR_UNIT)
		}

	case SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_SAMPLE, SV2017ParserKW_STD, SV2017ParserKW_TYPE_OPTION, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
		{
			p.SetState(3992)
			p.Identifier()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(3995)
		p.Match(SV2017ParserDOUBLE_COLON)
	}

	return localctx
}

// IPs_identifierContext is an interface to support dynamic dispatch.
type IPs_identifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPs_identifierContext differentiates from other interfaces.
	IsPs_identifierContext()
}

type Ps_identifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPs_identifierContext() *Ps_identifierContext {
	var p = new(Ps_identifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_ps_identifier
	return p
}

func (*Ps_identifierContext) IsPs_identifierContext() {}

func NewPs_identifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ps_identifierContext {
	var p = new(Ps_identifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_ps_identifier

	return p
}

func (s *Ps_identifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Ps_identifierContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Ps_identifierContext) Package_scope() IPackage_scopeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackage_scopeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackage_scopeContext)
}

func (s *Ps_identifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ps_identifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Ps_identifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPs_identifier(s)
	}
}

func (s *Ps_identifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPs_identifier(s)
	}
}

func (p *SV2017Parser) Ps_identifier() (localctx IPs_identifierContext) {
	localctx = NewPs_identifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 572, SV2017ParserRULE_ps_identifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3998)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 444, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3997)
			p.Package_scope()
		}

	}
	{
		p.SetState(4000)
		p.Identifier()
	}

	return localctx
}

// IList_of_parameter_value_assignmentsContext is an interface to support dynamic dispatch.
type IList_of_parameter_value_assignmentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsList_of_parameter_value_assignmentsContext differentiates from other interfaces.
	IsList_of_parameter_value_assignmentsContext()
}

type List_of_parameter_value_assignmentsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyList_of_parameter_value_assignmentsContext() *List_of_parameter_value_assignmentsContext {
	var p = new(List_of_parameter_value_assignmentsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_list_of_parameter_value_assignments
	return p
}

func (*List_of_parameter_value_assignmentsContext) IsList_of_parameter_value_assignmentsContext() {}

func NewList_of_parameter_value_assignmentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *List_of_parameter_value_assignmentsContext {
	var p = new(List_of_parameter_value_assignmentsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_list_of_parameter_value_assignments

	return p
}

func (s *List_of_parameter_value_assignmentsContext) GetParser() antlr.Parser { return s.parser }

func (s *List_of_parameter_value_assignmentsContext) AllParam_expression() []IParam_expressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParam_expressionContext)(nil)).Elem())
	var tst = make([]IParam_expressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParam_expressionContext)
		}
	}

	return tst
}

func (s *List_of_parameter_value_assignmentsContext) Param_expression(i int) IParam_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParam_expressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParam_expressionContext)
}

func (s *List_of_parameter_value_assignmentsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *List_of_parameter_value_assignmentsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *List_of_parameter_value_assignmentsContext) AllNamed_parameter_assignment() []INamed_parameter_assignmentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INamed_parameter_assignmentContext)(nil)).Elem())
	var tst = make([]INamed_parameter_assignmentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INamed_parameter_assignmentContext)
		}
	}

	return tst
}

func (s *List_of_parameter_value_assignmentsContext) Named_parameter_assignment(i int) INamed_parameter_assignmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamed_parameter_assignmentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INamed_parameter_assignmentContext)
}

func (s *List_of_parameter_value_assignmentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *List_of_parameter_value_assignmentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *List_of_parameter_value_assignmentsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterList_of_parameter_value_assignments(s)
	}
}

func (s *List_of_parameter_value_assignmentsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitList_of_parameter_value_assignments(s)
	}
}

func (p *SV2017Parser) List_of_parameter_value_assignments() (localctx IList_of_parameter_value_assignmentsContext) {
	localctx = NewList_of_parameter_value_assignmentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 574, SV2017ParserRULE_list_of_parameter_value_assignments)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4018)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_FATAL, SV2017ParserKW_DOLAR_FULLSKEW, SV2017ParserKW_DOLAR_HOLD, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_NOCHANGE, SV2017ParserKW_DOLAR_PERIOD, SV2017ParserKW_DOLAR_RECOVERY, SV2017ParserKW_DOLAR_RECREM, SV2017ParserKW_DOLAR_REMOVAL, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_SETUP, SV2017ParserKW_DOLAR_SETUPHOLD, SV2017ParserKW_DOLAR_SKEW, SV2017ParserKW_DOLAR_TIMESKEW, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_DOLAR_WARNING, SV2017ParserKW_DOLAR_WIDTH, SV2017ParserKW_BIT, SV2017ParserKW_BYTE, SV2017ParserKW_CHANDLE, SV2017ParserKW_CONST, SV2017ParserKW_ENUM, SV2017ParserKW_EVENT, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LOCAL, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_NULL, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_SAMPLE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_TAGGED, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_UNION, SV2017ParserKW_UNSIGNED, SV2017ParserKW_VIRTUAL, SV2017ParserTIME_LITERAL, SV2017ParserANY_BASED_NUMBER, SV2017ParserBASED_NUMBER_WITH_SIZE, SV2017ParserREAL_NUMBER_WITH_EXP, SV2017ParserFIXED_POINT_NUMBER, SV2017ParserUNSIGNED_NUMBER, SV2017ParserUNBASED_UNSIZED_LITERAL, SV2017ParserSTRING_LITERAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSYSTEM_TF_IDENTIFIER, SV2017ParserLPAREN, SV2017ParserLBRACE, SV2017ParserAPOSTROPHE_LBRACE, SV2017ParserDOLAR, SV2017ParserNOT, SV2017ParserNEG, SV2017ParserNAND, SV2017ParserNOR, SV2017ParserXOR, SV2017ParserNXOR, SV2017ParserXORN, SV2017ParserPLUS, SV2017ParserMINUS, SV2017ParserAMPERSAND, SV2017ParserBAR, SV2017ParserINCR, SV2017ParserDECR:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4002)
			p.Param_expression()
		}
		p.SetState(4007)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserCOMMA {
			{
				p.SetState(4003)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(4004)
				p.Param_expression()
			}

			p.SetState(4009)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case SV2017ParserDOT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4010)
			p.Named_parameter_assignment()
		}
		p.SetState(4015)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserCOMMA {
			{
				p.SetState(4011)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(4012)
				p.Named_parameter_assignment()
			}

			p.SetState(4017)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IParameter_value_assignmentContext is an interface to support dynamic dispatch.
type IParameter_value_assignmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameter_value_assignmentContext differentiates from other interfaces.
	IsParameter_value_assignmentContext()
}

type Parameter_value_assignmentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameter_value_assignmentContext() *Parameter_value_assignmentContext {
	var p = new(Parameter_value_assignmentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_parameter_value_assignment
	return p
}

func (*Parameter_value_assignmentContext) IsParameter_value_assignmentContext() {}

func NewParameter_value_assignmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Parameter_value_assignmentContext {
	var p = new(Parameter_value_assignmentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_parameter_value_assignment

	return p
}

func (s *Parameter_value_assignmentContext) GetParser() antlr.Parser { return s.parser }

func (s *Parameter_value_assignmentContext) HASH() antlr.TerminalNode {
	return s.GetToken(SV2017ParserHASH, 0)
}

func (s *Parameter_value_assignmentContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Parameter_value_assignmentContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Parameter_value_assignmentContext) List_of_parameter_value_assignments() IList_of_parameter_value_assignmentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_parameter_value_assignmentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_parameter_value_assignmentsContext)
}

func (s *Parameter_value_assignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Parameter_value_assignmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Parameter_value_assignmentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterParameter_value_assignment(s)
	}
}

func (s *Parameter_value_assignmentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitParameter_value_assignment(s)
	}
}

func (p *SV2017Parser) Parameter_value_assignment() (localctx IParameter_value_assignmentContext) {
	localctx = NewParameter_value_assignmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 576, SV2017ParserRULE_parameter_value_assignment)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4020)
		p.Match(SV2017ParserHASH)
	}
	{
		p.SetState(4021)
		p.Match(SV2017ParserLPAREN)
	}
	p.SetState(4023)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CHANDLE-56))|(1<<(SV2017ParserKW_CONST-56)))) != 0) || _la == SV2017ParserKW_ENUM || _la == SV2017ParserKW_EVENT || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_STRUCT-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TAGGED-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserKW_VIRTUAL-260))|(1<<(SV2017ParserTIME_LITERAL-260)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(SV2017ParserANY_BASED_NUMBER-292))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-292))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-292))|(1<<(SV2017ParserFIXED_POINT_NUMBER-292))|(1<<(SV2017ParserUNSIGNED_NUMBER-292))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-292))|(1<<(SV2017ParserSTRING_LITERAL-292))|(1<<(SV2017ParserC_IDENTIFIER-292))|(1<<(SV2017ParserTICK_IDENTIFIER-292))|(1<<(SV2017ParserESCAPED_IDENTIFIER-292))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-292))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-292))|(1<<(SV2017ParserLPAREN-292))|(1<<(SV2017ParserLBRACE-292))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-292))|(1<<(SV2017ParserDOLAR-292))|(1<<(SV2017ParserNOT-292))|(1<<(SV2017ParserNEG-292))|(1<<(SV2017ParserNAND-292))|(1<<(SV2017ParserNOR-292)))) != 0) || (((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324))|(1<<(SV2017ParserDOT-324))|(1<<(SV2017ParserPLUS-324)))) != 0) || (((_la-356)&-(0x1f+1)) == 0 && ((1<<uint((_la-356)))&((1<<(SV2017ParserMINUS-356))|(1<<(SV2017ParserAMPERSAND-356))|(1<<(SV2017ParserBAR-356))|(1<<(SV2017ParserINCR-356))|(1<<(SV2017ParserDECR-356)))) != 0) {
		{
			p.SetState(4022)
			p.List_of_parameter_value_assignments()
		}

	}
	{
		p.SetState(4025)
		p.Match(SV2017ParserRPAREN)
	}

	return localctx
}

// IClass_typeContext is an interface to support dynamic dispatch.
type IClass_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClass_typeContext differentiates from other interfaces.
	IsClass_typeContext()
}

type Class_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClass_typeContext() *Class_typeContext {
	var p = new(Class_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_class_type
	return p
}

func (*Class_typeContext) IsClass_typeContext() {}

func NewClass_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Class_typeContext {
	var p = new(Class_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_class_type

	return p
}

func (s *Class_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Class_typeContext) Ps_identifier() IPs_identifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPs_identifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPs_identifierContext)
}

func (s *Class_typeContext) AllParameter_value_assignment() []IParameter_value_assignmentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParameter_value_assignmentContext)(nil)).Elem())
	var tst = make([]IParameter_value_assignmentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParameter_value_assignmentContext)
		}
	}

	return tst
}

func (s *Class_typeContext) Parameter_value_assignment(i int) IParameter_value_assignmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameter_value_assignmentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParameter_value_assignmentContext)
}

func (s *Class_typeContext) AllDOUBLE_COLON() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserDOUBLE_COLON)
}

func (s *Class_typeContext) DOUBLE_COLON(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOUBLE_COLON, i)
}

func (s *Class_typeContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Class_typeContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Class_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Class_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Class_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterClass_type(s)
	}
}

func (s *Class_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitClass_type(s)
	}
}

func (p *SV2017Parser) Class_type() (localctx IClass_typeContext) {
	localctx = NewClass_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 578, SV2017ParserRULE_class_type)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4027)
		p.Ps_identifier()
	}
	p.SetState(4029)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserHASH {
		{
			p.SetState(4028)
			p.Parameter_value_assignment()
		}

	}
	p.SetState(4038)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 451, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(4031)
				p.Match(SV2017ParserDOUBLE_COLON)
			}
			{
				p.SetState(4032)
				p.Identifier()
			}
			p.SetState(4034)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SV2017ParserHASH {
				{
					p.SetState(4033)
					p.Parameter_value_assignment()
				}

			}

		}
		p.SetState(4040)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 451, p.GetParserRuleContext())
	}

	return localctx
}

// IClass_scopeContext is an interface to support dynamic dispatch.
type IClass_scopeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClass_scopeContext differentiates from other interfaces.
	IsClass_scopeContext()
}

type Class_scopeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClass_scopeContext() *Class_scopeContext {
	var p = new(Class_scopeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_class_scope
	return p
}

func (*Class_scopeContext) IsClass_scopeContext() {}

func NewClass_scopeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Class_scopeContext {
	var p = new(Class_scopeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_class_scope

	return p
}

func (s *Class_scopeContext) GetParser() antlr.Parser { return s.parser }

func (s *Class_scopeContext) Class_type() IClass_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_typeContext)
}

func (s *Class_scopeContext) DOUBLE_COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOUBLE_COLON, 0)
}

func (s *Class_scopeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Class_scopeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Class_scopeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterClass_scope(s)
	}
}

func (s *Class_scopeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitClass_scope(s)
	}
}

func (p *SV2017Parser) Class_scope() (localctx IClass_scopeContext) {
	localctx = NewClass_scopeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 580, SV2017ParserRULE_class_scope)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4041)
		p.Class_type()
	}
	{
		p.SetState(4042)
		p.Match(SV2017ParserDOUBLE_COLON)
	}

	return localctx
}

// IRange_expressionContext is an interface to support dynamic dispatch.
type IRange_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRange_expressionContext differentiates from other interfaces.
	IsRange_expressionContext()
}

type Range_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRange_expressionContext() *Range_expressionContext {
	var p = new(Range_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_range_expression
	return p
}

func (*Range_expressionContext) IsRange_expressionContext() {}

func NewRange_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Range_expressionContext {
	var p = new(Range_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_range_expression

	return p
}

func (s *Range_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Range_expressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Range_expressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Range_expressionContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Range_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Range_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Range_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterRange_expression(s)
	}
}

func (s *Range_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitRange_expression(s)
	}
}

func (p *SV2017Parser) Range_expression() (localctx IRange_expressionContext) {
	localctx = NewRange_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 582, SV2017ParserRULE_range_expression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4044)
		p.expression(0)
	}
	p.SetState(4047)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserCOLON {
		{
			p.SetState(4045)
			p.Match(SV2017ParserCOLON)
		}
		{
			p.SetState(4046)
			p.expression(0)
		}

	}

	return localctx
}

// IConstant_range_expressionContext is an interface to support dynamic dispatch.
type IConstant_range_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstant_range_expressionContext differentiates from other interfaces.
	IsConstant_range_expressionContext()
}

type Constant_range_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstant_range_expressionContext() *Constant_range_expressionContext {
	var p = new(Constant_range_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_constant_range_expression
	return p
}

func (*Constant_range_expressionContext) IsConstant_range_expressionContext() {}

func NewConstant_range_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Constant_range_expressionContext {
	var p = new(Constant_range_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_constant_range_expression

	return p
}

func (s *Constant_range_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Constant_range_expressionContext) Range_expression() IRange_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRange_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRange_expressionContext)
}

func (s *Constant_range_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Constant_range_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Constant_range_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterConstant_range_expression(s)
	}
}

func (s *Constant_range_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitConstant_range_expression(s)
	}
}

func (p *SV2017Parser) Constant_range_expression() (localctx IConstant_range_expressionContext) {
	localctx = NewConstant_range_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 584, SV2017ParserRULE_constant_range_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4049)
		p.Range_expression()
	}

	return localctx
}

// IConstant_mintypmax_expressionContext is an interface to support dynamic dispatch.
type IConstant_mintypmax_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstant_mintypmax_expressionContext differentiates from other interfaces.
	IsConstant_mintypmax_expressionContext()
}

type Constant_mintypmax_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstant_mintypmax_expressionContext() *Constant_mintypmax_expressionContext {
	var p = new(Constant_mintypmax_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_constant_mintypmax_expression
	return p
}

func (*Constant_mintypmax_expressionContext) IsConstant_mintypmax_expressionContext() {}

func NewConstant_mintypmax_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Constant_mintypmax_expressionContext {
	var p = new(Constant_mintypmax_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_constant_mintypmax_expression

	return p
}

func (s *Constant_mintypmax_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Constant_mintypmax_expressionContext) Mintypmax_expression() IMintypmax_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMintypmax_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMintypmax_expressionContext)
}

func (s *Constant_mintypmax_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Constant_mintypmax_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Constant_mintypmax_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterConstant_mintypmax_expression(s)
	}
}

func (s *Constant_mintypmax_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitConstant_mintypmax_expression(s)
	}
}

func (p *SV2017Parser) Constant_mintypmax_expression() (localctx IConstant_mintypmax_expressionContext) {
	localctx = NewConstant_mintypmax_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 586, SV2017ParserRULE_constant_mintypmax_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4051)
		p.Mintypmax_expression()
	}

	return localctx
}

// IMintypmax_expressionContext is an interface to support dynamic dispatch.
type IMintypmax_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMintypmax_expressionContext differentiates from other interfaces.
	IsMintypmax_expressionContext()
}

type Mintypmax_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMintypmax_expressionContext() *Mintypmax_expressionContext {
	var p = new(Mintypmax_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_mintypmax_expression
	return p
}

func (*Mintypmax_expressionContext) IsMintypmax_expressionContext() {}

func NewMintypmax_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Mintypmax_expressionContext {
	var p = new(Mintypmax_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_mintypmax_expression

	return p
}

func (s *Mintypmax_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Mintypmax_expressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Mintypmax_expressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Mintypmax_expressionContext) AllCOLON() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOLON)
}

func (s *Mintypmax_expressionContext) COLON(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, i)
}

func (s *Mintypmax_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Mintypmax_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Mintypmax_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterMintypmax_expression(s)
	}
}

func (s *Mintypmax_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitMintypmax_expression(s)
	}
}

func (p *SV2017Parser) Mintypmax_expression() (localctx IMintypmax_expressionContext) {
	localctx = NewMintypmax_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 588, SV2017ParserRULE_mintypmax_expression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4053)
		p.expression(0)
	}
	p.SetState(4059)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserCOLON {
		{
			p.SetState(4054)
			p.Match(SV2017ParserCOLON)
		}
		{
			p.SetState(4055)
			p.expression(0)
		}
		{
			p.SetState(4056)
			p.Match(SV2017ParserCOLON)
		}
		{
			p.SetState(4057)
			p.expression(0)
		}

	}

	return localctx
}

// INamed_parameter_assignmentContext is an interface to support dynamic dispatch.
type INamed_parameter_assignmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNamed_parameter_assignmentContext differentiates from other interfaces.
	IsNamed_parameter_assignmentContext()
}

type Named_parameter_assignmentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamed_parameter_assignmentContext() *Named_parameter_assignmentContext {
	var p = new(Named_parameter_assignmentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_named_parameter_assignment
	return p
}

func (*Named_parameter_assignmentContext) IsNamed_parameter_assignmentContext() {}

func NewNamed_parameter_assignmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Named_parameter_assignmentContext {
	var p = new(Named_parameter_assignmentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_named_parameter_assignment

	return p
}

func (s *Named_parameter_assignmentContext) GetParser() antlr.Parser { return s.parser }

func (s *Named_parameter_assignmentContext) DOT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOT, 0)
}

func (s *Named_parameter_assignmentContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Named_parameter_assignmentContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Named_parameter_assignmentContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Named_parameter_assignmentContext) Param_expression() IParam_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParam_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParam_expressionContext)
}

func (s *Named_parameter_assignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Named_parameter_assignmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Named_parameter_assignmentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterNamed_parameter_assignment(s)
	}
}

func (s *Named_parameter_assignmentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitNamed_parameter_assignment(s)
	}
}

func (p *SV2017Parser) Named_parameter_assignment() (localctx INamed_parameter_assignmentContext) {
	localctx = NewNamed_parameter_assignmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 590, SV2017ParserRULE_named_parameter_assignment)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4061)
		p.Match(SV2017ParserDOT)
	}
	{
		p.SetState(4062)
		p.Identifier()
	}
	{
		p.SetState(4063)
		p.Match(SV2017ParserLPAREN)
	}
	p.SetState(4065)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CHANDLE-56))|(1<<(SV2017ParserKW_CONST-56)))) != 0) || _la == SV2017ParserKW_ENUM || _la == SV2017ParserKW_EVENT || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_STRUCT-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TAGGED-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserKW_VIRTUAL-260))|(1<<(SV2017ParserTIME_LITERAL-260)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(SV2017ParserANY_BASED_NUMBER-292))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-292))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-292))|(1<<(SV2017ParserFIXED_POINT_NUMBER-292))|(1<<(SV2017ParserUNSIGNED_NUMBER-292))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-292))|(1<<(SV2017ParserSTRING_LITERAL-292))|(1<<(SV2017ParserC_IDENTIFIER-292))|(1<<(SV2017ParserTICK_IDENTIFIER-292))|(1<<(SV2017ParserESCAPED_IDENTIFIER-292))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-292))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-292))|(1<<(SV2017ParserLPAREN-292))|(1<<(SV2017ParserLBRACE-292))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-292))|(1<<(SV2017ParserDOLAR-292))|(1<<(SV2017ParserNOT-292))|(1<<(SV2017ParserNEG-292))|(1<<(SV2017ParserNAND-292))|(1<<(SV2017ParserNOR-292)))) != 0) || (((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324))|(1<<(SV2017ParserPLUS-324)))) != 0) || (((_la-356)&-(0x1f+1)) == 0 && ((1<<uint((_la-356)))&((1<<(SV2017ParserMINUS-356))|(1<<(SV2017ParserAMPERSAND-356))|(1<<(SV2017ParserBAR-356))|(1<<(SV2017ParserINCR-356))|(1<<(SV2017ParserDECR-356)))) != 0) {
		{
			p.SetState(4064)
			p.Param_expression()
		}

	}
	{
		p.SetState(4067)
		p.Match(SV2017ParserRPAREN)
	}

	return localctx
}

// IPrimaryContext is an interface to support dynamic dispatch.
type IPrimaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrimaryContext differentiates from other interfaces.
	IsPrimaryContext()
}

type PrimaryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimaryContext() *PrimaryContext {
	var p = new(PrimaryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_primary
	return p
}

func (*PrimaryContext) IsPrimaryContext() {}

func NewPrimaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryContext {
	var p = new(PrimaryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_primary

	return p
}

func (s *PrimaryContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimaryContext) CopyFrom(ctx *PrimaryContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *PrimaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type PrimaryLitContext struct {
	*PrimaryContext
}

func NewPrimaryLitContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PrimaryLitContext {
	var p = new(PrimaryLitContext)

	p.PrimaryContext = NewEmptyPrimaryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryContext))

	return p
}

func (s *PrimaryLitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryLitContext) Primary_literal() IPrimary_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimary_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimary_literalContext)
}

func (s *PrimaryLitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPrimaryLit(s)
	}
}

func (s *PrimaryLitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPrimaryLit(s)
	}
}

type PrimaryRandomizeContext struct {
	*PrimaryContext
}

func NewPrimaryRandomizeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PrimaryRandomizeContext {
	var p = new(PrimaryRandomizeContext)

	p.PrimaryContext = NewEmptyPrimaryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryContext))

	return p
}

func (s *PrimaryRandomizeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryRandomizeContext) Randomize_call() IRandomize_callContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRandomize_callContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRandomize_callContext)
}

func (s *PrimaryRandomizeContext) KW_STD() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_STD, 0)
}

func (s *PrimaryRandomizeContext) DOUBLE_COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOUBLE_COLON, 0)
}

func (s *PrimaryRandomizeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPrimaryRandomize(s)
	}
}

func (s *PrimaryRandomizeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPrimaryRandomize(s)
	}
}

type PrimaryAssigContext struct {
	*PrimaryContext
}

func NewPrimaryAssigContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PrimaryAssigContext {
	var p = new(PrimaryAssigContext)

	p.PrimaryContext = NewEmptyPrimaryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryContext))

	return p
}

func (s *PrimaryAssigContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryAssigContext) Assignment_pattern_expression() IAssignment_pattern_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignment_pattern_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignment_pattern_expressionContext)
}

func (s *PrimaryAssigContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPrimaryAssig(s)
	}
}

func (s *PrimaryAssigContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPrimaryAssig(s)
	}
}

type PrimaryBitSelectContext struct {
	*PrimaryContext
}

func NewPrimaryBitSelectContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PrimaryBitSelectContext {
	var p = new(PrimaryBitSelectContext)

	p.PrimaryContext = NewEmptyPrimaryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryContext))

	return p
}

func (s *PrimaryBitSelectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryBitSelectContext) Primary() IPrimaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryContext)
}

func (s *PrimaryBitSelectContext) Bit_select() IBit_selectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBit_selectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBit_selectContext)
}

func (s *PrimaryBitSelectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPrimaryBitSelect(s)
	}
}

func (s *PrimaryBitSelectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPrimaryBitSelect(s)
	}
}

type PrimaryTfCallContext struct {
	*PrimaryContext
}

func NewPrimaryTfCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PrimaryTfCallContext {
	var p = new(PrimaryTfCallContext)

	p.PrimaryContext = NewEmptyPrimaryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryContext))

	return p
}

func (s *PrimaryTfCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryTfCallContext) Any_system_tf_identifier() IAny_system_tf_identifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_system_tf_identifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_system_tf_identifierContext)
}

func (s *PrimaryTfCallContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *PrimaryTfCallContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *PrimaryTfCallContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *PrimaryTfCallContext) List_of_arguments() IList_of_argumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_argumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_argumentsContext)
}

func (s *PrimaryTfCallContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *PrimaryTfCallContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *PrimaryTfCallContext) Clocking_event() IClocking_eventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClocking_eventContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClocking_eventContext)
}

func (s *PrimaryTfCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPrimaryTfCall(s)
	}
}

func (s *PrimaryTfCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPrimaryTfCall(s)
	}
}

type PrimaryTypeRefContext struct {
	*PrimaryContext
}

func NewPrimaryTypeRefContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PrimaryTypeRefContext {
	var p = new(PrimaryTypeRefContext)

	p.PrimaryContext = NewEmptyPrimaryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryContext))

	return p
}

func (s *PrimaryTypeRefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryTypeRefContext) Type_reference() IType_referenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_referenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_referenceContext)
}

func (s *PrimaryTypeRefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPrimaryTypeRef(s)
	}
}

func (s *PrimaryTypeRefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPrimaryTypeRef(s)
	}
}

type PrimaryCallArrayMethodNoArgsContext struct {
	*PrimaryContext
}

func NewPrimaryCallArrayMethodNoArgsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PrimaryCallArrayMethodNoArgsContext {
	var p = new(PrimaryCallArrayMethodNoArgsContext)

	p.PrimaryContext = NewEmptyPrimaryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryContext))

	return p
}

func (s *PrimaryCallArrayMethodNoArgsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryCallArrayMethodNoArgsContext) Primary() IPrimaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryContext)
}

func (s *PrimaryCallArrayMethodNoArgsContext) DOT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOT, 0)
}

func (s *PrimaryCallArrayMethodNoArgsContext) Array_method_name() IArray_method_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArray_method_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArray_method_nameContext)
}

func (s *PrimaryCallArrayMethodNoArgsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPrimaryCallArrayMethodNoArgs(s)
	}
}

func (s *PrimaryCallArrayMethodNoArgsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPrimaryCallArrayMethodNoArgs(s)
	}
}

type PrimaryCastContext struct {
	*PrimaryContext
}

func NewPrimaryCastContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PrimaryCastContext {
	var p = new(PrimaryCastContext)

	p.PrimaryContext = NewEmptyPrimaryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryContext))

	return p
}

func (s *PrimaryCastContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryCastContext) APOSTROPHE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserAPOSTROPHE, 0)
}

func (s *PrimaryCastContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *PrimaryCastContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PrimaryCastContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *PrimaryCastContext) KW_STRING() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_STRING, 0)
}

func (s *PrimaryCastContext) KW_CONST() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_CONST, 0)
}

func (s *PrimaryCastContext) Integer_type() IInteger_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInteger_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInteger_typeContext)
}

func (s *PrimaryCastContext) Non_integer_type() INon_integer_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INon_integer_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INon_integer_typeContext)
}

func (s *PrimaryCastContext) Signing() ISigningContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISigningContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISigningContext)
}

func (s *PrimaryCastContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPrimaryCast(s)
	}
}

func (s *PrimaryCastContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPrimaryCast(s)
	}
}

type PrimaryParContext struct {
	*PrimaryContext
}

func NewPrimaryParContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PrimaryParContext {
	var p = new(PrimaryParContext)

	p.PrimaryContext = NewEmptyPrimaryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryContext))

	return p
}

func (s *PrimaryParContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryParContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *PrimaryParContext) Mintypmax_expression() IMintypmax_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMintypmax_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMintypmax_expressionContext)
}

func (s *PrimaryParContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *PrimaryParContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPrimaryPar(s)
	}
}

func (s *PrimaryParContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPrimaryPar(s)
	}
}

type PrimaryCallContext struct {
	*PrimaryContext
}

func NewPrimaryCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PrimaryCallContext {
	var p = new(PrimaryCallContext)

	p.PrimaryContext = NewEmptyPrimaryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryContext))

	return p
}

func (s *PrimaryCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryCallContext) Primary() IPrimaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryContext)
}

func (s *PrimaryCallContext) AllLPAREN() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserLPAREN)
}

func (s *PrimaryCallContext) LPAREN(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, i)
}

func (s *PrimaryCallContext) AllRPAREN() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserRPAREN)
}

func (s *PrimaryCallContext) RPAREN(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, i)
}

func (s *PrimaryCallContext) DOT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOT, 0)
}

func (s *PrimaryCallContext) Array_method_name() IArray_method_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArray_method_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArray_method_nameContext)
}

func (s *PrimaryCallContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *PrimaryCallContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *PrimaryCallContext) List_of_arguments() IList_of_argumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_argumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_argumentsContext)
}

func (s *PrimaryCallContext) KW_WITH() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_WITH, 0)
}

func (s *PrimaryCallContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PrimaryCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPrimaryCall(s)
	}
}

func (s *PrimaryCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPrimaryCall(s)
	}
}

type PrimaryRandomize2Context struct {
	*PrimaryContext
}

func NewPrimaryRandomize2Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *PrimaryRandomize2Context {
	var p = new(PrimaryRandomize2Context)

	p.PrimaryContext = NewEmptyPrimaryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryContext))

	return p
}

func (s *PrimaryRandomize2Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryRandomize2Context) Primary() IPrimaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryContext)
}

func (s *PrimaryRandomize2Context) DOT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOT, 0)
}

func (s *PrimaryRandomize2Context) Randomize_call() IRandomize_callContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRandomize_callContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRandomize_callContext)
}

func (s *PrimaryRandomize2Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPrimaryRandomize2(s)
	}
}

func (s *PrimaryRandomize2Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPrimaryRandomize2(s)
	}
}

type PrimaryDotContext struct {
	*PrimaryContext
}

func NewPrimaryDotContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PrimaryDotContext {
	var p = new(PrimaryDotContext)

	p.PrimaryContext = NewEmptyPrimaryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryContext))

	return p
}

func (s *PrimaryDotContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryDotContext) Primary() IPrimaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryContext)
}

func (s *PrimaryDotContext) DOT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOT, 0)
}

func (s *PrimaryDotContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *PrimaryDotContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPrimaryDot(s)
	}
}

func (s *PrimaryDotContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPrimaryDot(s)
	}
}

type PrimaryStreaming_concatenationContext struct {
	*PrimaryContext
}

func NewPrimaryStreaming_concatenationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PrimaryStreaming_concatenationContext {
	var p = new(PrimaryStreaming_concatenationContext)

	p.PrimaryContext = NewEmptyPrimaryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryContext))

	return p
}

func (s *PrimaryStreaming_concatenationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryStreaming_concatenationContext) Streaming_concatenation() IStreaming_concatenationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStreaming_concatenationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStreaming_concatenationContext)
}

func (s *PrimaryStreaming_concatenationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPrimaryStreaming_concatenation(s)
	}
}

func (s *PrimaryStreaming_concatenationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPrimaryStreaming_concatenation(s)
	}
}

type PrimaryPathContext struct {
	*PrimaryContext
}

func NewPrimaryPathContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PrimaryPathContext {
	var p = new(PrimaryPathContext)

	p.PrimaryContext = NewEmptyPrimaryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryContext))

	return p
}

func (s *PrimaryPathContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryPathContext) Package_or_class_scoped_path() IPackage_or_class_scoped_pathContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackage_or_class_scoped_pathContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackage_or_class_scoped_pathContext)
}

func (s *PrimaryPathContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPrimaryPath(s)
	}
}

func (s *PrimaryPathContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPrimaryPath(s)
	}
}

type PrimaryRangeContext struct {
	*PrimaryContext
}

func NewPrimaryRangeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PrimaryRangeContext {
	var p = new(PrimaryRangeContext)

	p.PrimaryContext = NewEmptyPrimaryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryContext))

	return p
}

func (s *PrimaryRangeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryRangeContext) Primary() IPrimaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryContext)
}

func (s *PrimaryRangeContext) LSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLSQUARE_BR, 0)
}

func (s *PrimaryRangeContext) Array_range_expression() IArray_range_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArray_range_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArray_range_expressionContext)
}

func (s *PrimaryRangeContext) RSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRSQUARE_BR, 0)
}

func (s *PrimaryRangeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPrimaryRange(s)
	}
}

func (s *PrimaryRangeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPrimaryRange(s)
	}
}

type PrimaryCallWithContext struct {
	*PrimaryContext
}

func NewPrimaryCallWithContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PrimaryCallWithContext {
	var p = new(PrimaryCallWithContext)

	p.PrimaryContext = NewEmptyPrimaryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryContext))

	return p
}

func (s *PrimaryCallWithContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryCallWithContext) Primary() IPrimaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryContext)
}

func (s *PrimaryCallWithContext) KW_WITH() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_WITH, 0)
}

func (s *PrimaryCallWithContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *PrimaryCallWithContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PrimaryCallWithContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *PrimaryCallWithContext) DOT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOT, 0)
}

func (s *PrimaryCallWithContext) Array_method_name() IArray_method_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArray_method_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArray_method_nameContext)
}

func (s *PrimaryCallWithContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *PrimaryCallWithContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *PrimaryCallWithContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPrimaryCallWith(s)
	}
}

func (s *PrimaryCallWithContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPrimaryCallWith(s)
	}
}

type PrimaryConcatContext struct {
	*PrimaryContext
}

func NewPrimaryConcatContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PrimaryConcatContext {
	var p = new(PrimaryConcatContext)

	p.PrimaryContext = NewEmptyPrimaryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryContext))

	return p
}

func (s *PrimaryConcatContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryConcatContext) Concatenation() IConcatenationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConcatenationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConcatenationContext)
}

func (s *PrimaryConcatContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPrimaryConcat(s)
	}
}

func (s *PrimaryConcatContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPrimaryConcat(s)
	}
}

type PrimaryCast2Context struct {
	*PrimaryContext
}

func NewPrimaryCast2Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *PrimaryCast2Context {
	var p = new(PrimaryCast2Context)

	p.PrimaryContext = NewEmptyPrimaryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryContext))

	return p
}

func (s *PrimaryCast2Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryCast2Context) Primary() IPrimaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryContext)
}

func (s *PrimaryCast2Context) APOSTROPHE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserAPOSTROPHE, 0)
}

func (s *PrimaryCast2Context) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *PrimaryCast2Context) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PrimaryCast2Context) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *PrimaryCast2Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPrimaryCast2(s)
	}
}

func (s *PrimaryCast2Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPrimaryCast2(s)
	}
}

func (p *SV2017Parser) Primary() (localctx IPrimaryContext) {
	return p.primary(0)
}

func (p *SV2017Parser) primary(_p int) (localctx IPrimaryContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewPrimaryContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IPrimaryContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 592
	p.EnterRecursionRule(localctx, 592, SV2017ParserRULE_primary, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4120)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 461, p.GetParserRuleContext()) {
	case 1:
		localctx = NewPrimaryLitContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(4070)
			p.Primary_literal()
		}

	case 2:
		localctx = NewPrimaryPathContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(4071)
			p.Package_or_class_scoped_path()
		}

	case 3:
		localctx = NewPrimaryParContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(4072)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(4073)
			p.Mintypmax_expression()
		}
		{
			p.SetState(4074)
			p.Match(SV2017ParserRPAREN)
		}

	case 4:
		localctx = NewPrimaryCastContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		p.SetState(4081)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SV2017ParserKW_STRING:
			{
				p.SetState(4076)
				p.Match(SV2017ParserKW_STRING)
			}

		case SV2017ParserKW_CONST:
			{
				p.SetState(4077)
				p.Match(SV2017ParserKW_CONST)
			}

		case SV2017ParserKW_BIT, SV2017ParserKW_BYTE, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_REG, SV2017ParserKW_SHORTINT, SV2017ParserKW_TIME:
			{
				p.SetState(4078)
				p.Integer_type()
			}

		case SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_SHORTREAL:
			{
				p.SetState(4079)
				p.Non_integer_type()
			}

		case SV2017ParserKW_SIGNED, SV2017ParserKW_UNSIGNED:
			{
				p.SetState(4080)
				p.Signing()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(4083)
			p.Match(SV2017ParserAPOSTROPHE)
		}
		{
			p.SetState(4084)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(4085)
			p.expression(0)
		}
		{
			p.SetState(4086)
			p.Match(SV2017ParserRPAREN)
		}

	case 5:
		localctx = NewPrimaryConcatContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(4088)
			p.Concatenation()
		}

	case 6:
		localctx = NewPrimaryStreaming_concatenationContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(4089)
			p.Streaming_concatenation()
		}

	case 7:
		localctx = NewPrimaryTfCallContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(4090)
			p.Any_system_tf_identifier()
		}
		p.SetState(4111)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 459, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4091)
				p.Match(SV2017ParserLPAREN)
			}
			{
				p.SetState(4092)
				p.Data_type()
			}
			p.SetState(4095)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 456, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(4093)
					p.Match(SV2017ParserCOMMA)
				}
				{
					p.SetState(4094)
					p.List_of_arguments()
				}

			}
			p.SetState(4099)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SV2017ParserCOMMA {
				{
					p.SetState(4097)
					p.Match(SV2017ParserCOMMA)
				}
				{
					p.SetState(4098)
					p.Clocking_event()
				}

			}
			{
				p.SetState(4101)
				p.Match(SV2017ParserRPAREN)
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 459, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(4103)
				p.Match(SV2017ParserLPAREN)
			}
			{
				p.SetState(4104)
				p.List_of_arguments()
			}
			p.SetState(4107)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SV2017ParserCOMMA {
				{
					p.SetState(4105)
					p.Match(SV2017ParserCOMMA)
				}
				{
					p.SetState(4106)
					p.Clocking_event()
				}

			}
			{
				p.SetState(4109)
				p.Match(SV2017ParserRPAREN)
			}

		}

	case 8:
		localctx = NewPrimaryRandomizeContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		p.SetState(4115)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_STD {
			{
				p.SetState(4113)
				p.Match(SV2017ParserKW_STD)
			}
			{
				p.SetState(4114)
				p.Match(SV2017ParserDOUBLE_COLON)
			}

		}
		{
			p.SetState(4117)
			p.Randomize_call()
		}

	case 9:
		localctx = NewPrimaryAssigContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(4118)
			p.Assignment_pattern_expression()
		}

	case 10:
		localctx = NewPrimaryTypeRefContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(4119)
			p.Type_reference()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(4185)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 469, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(4183)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 468, p.GetParserRuleContext()) {
			case 1:
				localctx = NewPrimaryCast2Context(p, NewPrimaryContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SV2017ParserRULE_primary)
				p.SetState(4122)

				if !(p.Precpred(p.GetParserRuleContext(), 14)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 14)", ""))
				}
				{
					p.SetState(4123)
					p.Match(SV2017ParserAPOSTROPHE)
				}
				{
					p.SetState(4124)
					p.Match(SV2017ParserLPAREN)
				}
				{
					p.SetState(4125)
					p.expression(0)
				}
				{
					p.SetState(4126)
					p.Match(SV2017ParserRPAREN)
				}

			case 2:
				localctx = NewPrimaryBitSelectContext(p, NewPrimaryContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SV2017ParserRULE_primary)
				p.SetState(4128)

				if !(p.Precpred(p.GetParserRuleContext(), 13)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 13)", ""))
				}
				{
					p.SetState(4129)
					p.Bit_select()
				}

			case 3:
				localctx = NewPrimaryDotContext(p, NewPrimaryContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SV2017ParserRULE_primary)
				p.SetState(4130)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
				}
				{
					p.SetState(4131)
					p.Match(SV2017ParserDOT)
				}
				{
					p.SetState(4132)
					p.Identifier()
				}

			case 4:
				localctx = NewPrimaryRangeContext(p, NewPrimaryContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SV2017ParserRULE_primary)
				p.SetState(4133)

				if !(p.Precpred(p.GetParserRuleContext(), 11)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 11)", ""))
				}
				{
					p.SetState(4134)
					p.Match(SV2017ParserLSQUARE_BR)
				}
				{
					p.SetState(4135)
					p.Array_range_expression()
				}
				{
					p.SetState(4136)
					p.Match(SV2017ParserRSQUARE_BR)
				}

			case 5:
				localctx = NewPrimaryRandomize2Context(p, NewPrimaryContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SV2017ParserRULE_primary)
				p.SetState(4138)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(4139)
					p.Match(SV2017ParserDOT)
				}
				{
					p.SetState(4140)
					p.Randomize_call()
				}

			case 6:
				localctx = NewPrimaryCallContext(p, NewPrimaryContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SV2017ParserRULE_primary)
				p.SetState(4141)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				p.SetState(4144)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == SV2017ParserDOT {
					{
						p.SetState(4142)
						p.Match(SV2017ParserDOT)
					}
					{
						p.SetState(4143)
						p.Array_method_name()
					}

				}
				p.SetState(4149)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 463, p.GetParserRuleContext())

				for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
					if _alt == 1 {
						{
							p.SetState(4146)
							p.Attribute_instance()
						}

					}
					p.SetState(4151)
					p.GetErrorHandler().Sync(p)
					_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 463, p.GetParserRuleContext())
				}
				{
					p.SetState(4152)
					p.Match(SV2017ParserLPAREN)
				}
				p.SetState(4154)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TAGGED-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserTIME_LITERAL-260)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(SV2017ParserANY_BASED_NUMBER-292))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-292))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-292))|(1<<(SV2017ParserFIXED_POINT_NUMBER-292))|(1<<(SV2017ParserUNSIGNED_NUMBER-292))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-292))|(1<<(SV2017ParserSTRING_LITERAL-292))|(1<<(SV2017ParserC_IDENTIFIER-292))|(1<<(SV2017ParserTICK_IDENTIFIER-292))|(1<<(SV2017ParserESCAPED_IDENTIFIER-292))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-292))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-292))|(1<<(SV2017ParserLPAREN-292))|(1<<(SV2017ParserLBRACE-292))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-292))|(1<<(SV2017ParserDOLAR-292))|(1<<(SV2017ParserNOT-292))|(1<<(SV2017ParserNEG-292))|(1<<(SV2017ParserNAND-292))|(1<<(SV2017ParserNOR-292)))) != 0) || (((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324))|(1<<(SV2017ParserCOMMA-324))|(1<<(SV2017ParserDOT-324))|(1<<(SV2017ParserPLUS-324)))) != 0) || (((_la-356)&-(0x1f+1)) == 0 && ((1<<uint((_la-356)))&((1<<(SV2017ParserMINUS-356))|(1<<(SV2017ParserAMPERSAND-356))|(1<<(SV2017ParserBAR-356))|(1<<(SV2017ParserINCR-356))|(1<<(SV2017ParserDECR-356)))) != 0) {
					{
						p.SetState(4153)
						p.List_of_arguments()
					}

				}
				{
					p.SetState(4156)
					p.Match(SV2017ParserRPAREN)
				}
				p.SetState(4162)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 465, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(4157)
						p.Match(SV2017ParserKW_WITH)
					}
					{
						p.SetState(4158)
						p.Match(SV2017ParserLPAREN)
					}
					{
						p.SetState(4159)
						p.expression(0)
					}
					{
						p.SetState(4160)
						p.Match(SV2017ParserRPAREN)
					}

				}

			case 7:
				localctx = NewPrimaryCallArrayMethodNoArgsContext(p, NewPrimaryContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SV2017ParserRULE_primary)
				p.SetState(4164)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(4165)
					p.Match(SV2017ParserDOT)
				}
				{
					p.SetState(4166)
					p.Array_method_name()
				}

			case 8:
				localctx = NewPrimaryCallWithContext(p, NewPrimaryContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SV2017ParserRULE_primary)
				p.SetState(4167)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				p.SetState(4170)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == SV2017ParserDOT {
					{
						p.SetState(4168)
						p.Match(SV2017ParserDOT)
					}
					{
						p.SetState(4169)
						p.Array_method_name()
					}

				}
				p.SetState(4175)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == SV2017ParserTICK_IDENTIFIER || _la == SV2017ParserLPAREN {
					{
						p.SetState(4172)
						p.Attribute_instance()
					}

					p.SetState(4177)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(4178)
					p.Match(SV2017ParserKW_WITH)
				}
				{
					p.SetState(4179)
					p.Match(SV2017ParserLPAREN)
				}
				{
					p.SetState(4180)
					p.expression(0)
				}
				{
					p.SetState(4181)
					p.Match(SV2017ParserRPAREN)
				}

			}

		}
		p.SetState(4187)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 469, p.GetParserRuleContext())
	}

	return localctx
}

// IConstant_expressionContext is an interface to support dynamic dispatch.
type IConstant_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstant_expressionContext differentiates from other interfaces.
	IsConstant_expressionContext()
}

type Constant_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstant_expressionContext() *Constant_expressionContext {
	var p = new(Constant_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_constant_expression
	return p
}

func (*Constant_expressionContext) IsConstant_expressionContext() {}

func NewConstant_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Constant_expressionContext {
	var p = new(Constant_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_constant_expression

	return p
}

func (s *Constant_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Constant_expressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Constant_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Constant_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Constant_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterConstant_expression(s)
	}
}

func (s *Constant_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitConstant_expression(s)
	}
}

func (p *SV2017Parser) Constant_expression() (localctx IConstant_expressionContext) {
	localctx = NewConstant_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 594, SV2017ParserRULE_constant_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4188)
		p.expression(0)
	}

	return localctx
}

// IInc_or_dec_expressionContext is an interface to support dynamic dispatch.
type IInc_or_dec_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInc_or_dec_expressionContext differentiates from other interfaces.
	IsInc_or_dec_expressionContext()
}

type Inc_or_dec_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInc_or_dec_expressionContext() *Inc_or_dec_expressionContext {
	var p = new(Inc_or_dec_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_inc_or_dec_expression
	return p
}

func (*Inc_or_dec_expressionContext) IsInc_or_dec_expressionContext() {}

func NewInc_or_dec_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Inc_or_dec_expressionContext {
	var p = new(Inc_or_dec_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_inc_or_dec_expression

	return p
}

func (s *Inc_or_dec_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Inc_or_dec_expressionContext) CopyFrom(ctx *Inc_or_dec_expressionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Inc_or_dec_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Inc_or_dec_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Inc_or_dec_expressionPreContext struct {
	*Inc_or_dec_expressionContext
}

func NewInc_or_dec_expressionPreContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Inc_or_dec_expressionPreContext {
	var p = new(Inc_or_dec_expressionPreContext)

	p.Inc_or_dec_expressionContext = NewEmptyInc_or_dec_expressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Inc_or_dec_expressionContext))

	return p
}

func (s *Inc_or_dec_expressionPreContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Inc_or_dec_expressionPreContext) Inc_or_dec_operator() IInc_or_dec_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInc_or_dec_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInc_or_dec_operatorContext)
}

func (s *Inc_or_dec_expressionPreContext) Variable_lvalue() IVariable_lvalueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_lvalueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_lvalueContext)
}

func (s *Inc_or_dec_expressionPreContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Inc_or_dec_expressionPreContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Inc_or_dec_expressionPreContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterInc_or_dec_expressionPre(s)
	}
}

func (s *Inc_or_dec_expressionPreContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitInc_or_dec_expressionPre(s)
	}
}

type Inc_or_dec_expressionPostContext struct {
	*Inc_or_dec_expressionContext
}

func NewInc_or_dec_expressionPostContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Inc_or_dec_expressionPostContext {
	var p = new(Inc_or_dec_expressionPostContext)

	p.Inc_or_dec_expressionContext = NewEmptyInc_or_dec_expressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Inc_or_dec_expressionContext))

	return p
}

func (s *Inc_or_dec_expressionPostContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Inc_or_dec_expressionPostContext) Variable_lvalue() IVariable_lvalueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_lvalueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_lvalueContext)
}

func (s *Inc_or_dec_expressionPostContext) Inc_or_dec_operator() IInc_or_dec_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInc_or_dec_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInc_or_dec_operatorContext)
}

func (s *Inc_or_dec_expressionPostContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Inc_or_dec_expressionPostContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Inc_or_dec_expressionPostContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterInc_or_dec_expressionPost(s)
	}
}

func (s *Inc_or_dec_expressionPostContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitInc_or_dec_expressionPost(s)
	}
}

func (p *SV2017Parser) Inc_or_dec_expression() (localctx IInc_or_dec_expressionContext) {
	localctx = NewInc_or_dec_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 596, SV2017ParserRULE_inc_or_dec_expression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(4208)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserINCR, SV2017ParserDECR:
		localctx = NewInc_or_dec_expressionPreContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4190)
			p.Inc_or_dec_operator()
		}
		p.SetState(4194)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 470, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(4191)
					p.Attribute_instance()
				}

			}
			p.SetState(4196)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 470, p.GetParserRuleContext())
		}
		{
			p.SetState(4197)
			p.Variable_lvalue()
		}

	case SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_BYTE, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LOCAL, SV2017ParserKW_LONGINT, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_SAMPLE, SV2017ParserKW_SHORTINT, SV2017ParserKW_STD, SV2017ParserKW_SUPER, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserLBRACE, SV2017ParserAPOSTROPHE_LBRACE:
		localctx = NewInc_or_dec_expressionPostContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4199)
			p.Variable_lvalue()
		}
		p.SetState(4203)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserTICK_IDENTIFIER || _la == SV2017ParserLPAREN {
			{
				p.SetState(4200)
				p.Attribute_instance()
			}

			p.SetState(4205)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(4206)
			p.Inc_or_dec_operator()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) CopyFrom(ctx *ExpressionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ExpressionPrimaryContext struct {
	*ExpressionContext
}

func NewExpressionPrimaryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExpressionPrimaryContext {
	var p = new(ExpressionPrimaryContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *ExpressionPrimaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionPrimaryContext) Primary() IPrimaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryContext)
}

func (s *ExpressionPrimaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterExpressionPrimary(s)
	}
}

func (s *ExpressionPrimaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitExpressionPrimary(s)
	}
}

type ExpressionInsideContext struct {
	*ExpressionContext
}

func NewExpressionInsideContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExpressionInsideContext {
	var p = new(ExpressionInsideContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *ExpressionInsideContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionInsideContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionInsideContext) KW_INSIDE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_INSIDE, 0)
}

func (s *ExpressionInsideContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLBRACE, 0)
}

func (s *ExpressionInsideContext) Open_range_list() IOpen_range_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOpen_range_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOpen_range_listContext)
}

func (s *ExpressionInsideContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRBRACE, 0)
}

func (s *ExpressionInsideContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterExpressionInside(s)
	}
}

func (s *ExpressionInsideContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitExpressionInside(s)
	}
}

type ExpressionBinOpAndContext struct {
	*ExpressionContext
}

func NewExpressionBinOpAndContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExpressionBinOpAndContext {
	var p = new(ExpressionBinOpAndContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *ExpressionBinOpAndContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionBinOpAndContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionBinOpAndContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionBinOpAndContext) LOG_AND() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLOG_AND, 0)
}

func (s *ExpressionBinOpAndContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *ExpressionBinOpAndContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *ExpressionBinOpAndContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterExpressionBinOpAnd(s)
	}
}

func (s *ExpressionBinOpAndContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitExpressionBinOpAnd(s)
	}
}

type ExpressionBinOpPowerContext struct {
	*ExpressionContext
}

func NewExpressionBinOpPowerContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExpressionBinOpPowerContext {
	var p = new(ExpressionBinOpPowerContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *ExpressionBinOpPowerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionBinOpPowerContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionBinOpPowerContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionBinOpPowerContext) DOUBLESTAR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOUBLESTAR, 0)
}

func (s *ExpressionBinOpPowerContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *ExpressionBinOpPowerContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *ExpressionBinOpPowerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterExpressionBinOpPower(s)
	}
}

func (s *ExpressionBinOpPowerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitExpressionBinOpPower(s)
	}
}

type ExpressionBinOpImplContext struct {
	*ExpressionContext
}

func NewExpressionBinOpImplContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExpressionBinOpImplContext {
	var p = new(ExpressionBinOpImplContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *ExpressionBinOpImplContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionBinOpImplContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionBinOpImplContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionBinOpImplContext) Operator_impl() IOperator_implContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperator_implContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperator_implContext)
}

func (s *ExpressionBinOpImplContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *ExpressionBinOpImplContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *ExpressionBinOpImplContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterExpressionBinOpImpl(s)
	}
}

func (s *ExpressionBinOpImplContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitExpressionBinOpImpl(s)
	}
}

type ExpressionBinOpEqContext struct {
	*ExpressionContext
}

func NewExpressionBinOpEqContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExpressionBinOpEqContext {
	var p = new(ExpressionBinOpEqContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *ExpressionBinOpEqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionBinOpEqContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionBinOpEqContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionBinOpEqContext) Operator_eq_neq() IOperator_eq_neqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperator_eq_neqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperator_eq_neqContext)
}

func (s *ExpressionBinOpEqContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *ExpressionBinOpEqContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *ExpressionBinOpEqContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterExpressionBinOpEq(s)
	}
}

func (s *ExpressionBinOpEqContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitExpressionBinOpEq(s)
	}
}

type ExpressionTernaryContext struct {
	*ExpressionContext
}

func NewExpressionTernaryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExpressionTernaryContext {
	var p = new(ExpressionTernaryContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *ExpressionTernaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionTernaryContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionTernaryContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionTernaryContext) QUESTIONMARK() antlr.TerminalNode {
	return s.GetToken(SV2017ParserQUESTIONMARK, 0)
}

func (s *ExpressionTernaryContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *ExpressionTernaryContext) KW_MATCHES() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_MATCHES, 0)
}

func (s *ExpressionTernaryContext) Pattern() IPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPatternContext)
}

func (s *ExpressionTernaryContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *ExpressionTernaryContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *ExpressionTernaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterExpressionTernary(s)
	}
}

func (s *ExpressionTernaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitExpressionTernary(s)
	}
}

type ExpressionTaggedIdContext struct {
	*ExpressionContext
}

func NewExpressionTaggedIdContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExpressionTaggedIdContext {
	var p = new(ExpressionTaggedIdContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *ExpressionTaggedIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionTaggedIdContext) KW_TAGGED() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_TAGGED, 0)
}

func (s *ExpressionTaggedIdContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ExpressionTaggedIdContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionTaggedIdContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterExpressionTaggedId(s)
	}
}

func (s *ExpressionTaggedIdContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitExpressionTaggedId(s)
	}
}

type ExpressionUnaryContext struct {
	*ExpressionContext
}

func NewExpressionUnaryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExpressionUnaryContext {
	var p = new(ExpressionUnaryContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *ExpressionUnaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionUnaryContext) Unary_operator() IUnary_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnary_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnary_operatorContext)
}

func (s *ExpressionUnaryContext) Primary() IPrimaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryContext)
}

func (s *ExpressionUnaryContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *ExpressionUnaryContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *ExpressionUnaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterExpressionUnary(s)
	}
}

func (s *ExpressionUnaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitExpressionUnary(s)
	}
}

type ExpressionAssignContext struct {
	*ExpressionContext
}

func NewExpressionAssignContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExpressionAssignContext {
	var p = new(ExpressionAssignContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *ExpressionAssignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionAssignContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *ExpressionAssignContext) Operator_assignment() IOperator_assignmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperator_assignmentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperator_assignmentContext)
}

func (s *ExpressionAssignContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *ExpressionAssignContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterExpressionAssign(s)
	}
}

func (s *ExpressionAssignContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitExpressionAssign(s)
	}
}

type ExpressionIncDecContext struct {
	*ExpressionContext
}

func NewExpressionIncDecContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExpressionIncDecContext {
	var p = new(ExpressionIncDecContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *ExpressionIncDecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionIncDecContext) Inc_or_dec_expression() IInc_or_dec_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInc_or_dec_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInc_or_dec_expressionContext)
}

func (s *ExpressionIncDecContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterExpressionIncDec(s)
	}
}

func (s *ExpressionIncDecContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitExpressionIncDec(s)
	}
}

type ExpressionBinOpMulContext struct {
	*ExpressionContext
}

func NewExpressionBinOpMulContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExpressionBinOpMulContext {
	var p = new(ExpressionBinOpMulContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *ExpressionBinOpMulContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionBinOpMulContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionBinOpMulContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionBinOpMulContext) Operator_mul_div_mod() IOperator_mul_div_modContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperator_mul_div_modContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperator_mul_div_modContext)
}

func (s *ExpressionBinOpMulContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *ExpressionBinOpMulContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *ExpressionBinOpMulContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterExpressionBinOpMul(s)
	}
}

func (s *ExpressionBinOpMulContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitExpressionBinOpMul(s)
	}
}

type ExpressionBinOpShiftContext struct {
	*ExpressionContext
}

func NewExpressionBinOpShiftContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExpressionBinOpShiftContext {
	var p = new(ExpressionBinOpShiftContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *ExpressionBinOpShiftContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionBinOpShiftContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionBinOpShiftContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionBinOpShiftContext) Operator_shift() IOperator_shiftContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperator_shiftContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperator_shiftContext)
}

func (s *ExpressionBinOpShiftContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *ExpressionBinOpShiftContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *ExpressionBinOpShiftContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterExpressionBinOpShift(s)
	}
}

func (s *ExpressionBinOpShiftContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitExpressionBinOpShift(s)
	}
}

type ExpressionBinOpCmpContext struct {
	*ExpressionContext
}

func NewExpressionBinOpCmpContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExpressionBinOpCmpContext {
	var p = new(ExpressionBinOpCmpContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *ExpressionBinOpCmpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionBinOpCmpContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionBinOpCmpContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionBinOpCmpContext) Operator_cmp() IOperator_cmpContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperator_cmpContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperator_cmpContext)
}

func (s *ExpressionBinOpCmpContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *ExpressionBinOpCmpContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *ExpressionBinOpCmpContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterExpressionBinOpCmp(s)
	}
}

func (s *ExpressionBinOpCmpContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitExpressionBinOpCmp(s)
	}
}

type ExpressionBinOpBitAndContext struct {
	*ExpressionContext
}

func NewExpressionBinOpBitAndContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExpressionBinOpBitAndContext {
	var p = new(ExpressionBinOpBitAndContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *ExpressionBinOpBitAndContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionBinOpBitAndContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionBinOpBitAndContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionBinOpBitAndContext) AMPERSAND() antlr.TerminalNode {
	return s.GetToken(SV2017ParserAMPERSAND, 0)
}

func (s *ExpressionBinOpBitAndContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *ExpressionBinOpBitAndContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *ExpressionBinOpBitAndContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterExpressionBinOpBitAnd(s)
	}
}

func (s *ExpressionBinOpBitAndContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitExpressionBinOpBitAnd(s)
	}
}

type ExpressionBinOpAddContext struct {
	*ExpressionContext
}

func NewExpressionBinOpAddContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExpressionBinOpAddContext {
	var p = new(ExpressionBinOpAddContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *ExpressionBinOpAddContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionBinOpAddContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionBinOpAddContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionBinOpAddContext) Operator_plus_minus() IOperator_plus_minusContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperator_plus_minusContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperator_plus_minusContext)
}

func (s *ExpressionBinOpAddContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *ExpressionBinOpAddContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *ExpressionBinOpAddContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterExpressionBinOpAdd(s)
	}
}

func (s *ExpressionBinOpAddContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitExpressionBinOpAdd(s)
	}
}

type ExpressionBinOpBitXorContext struct {
	*ExpressionContext
}

func NewExpressionBinOpBitXorContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExpressionBinOpBitXorContext {
	var p = new(ExpressionBinOpBitXorContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *ExpressionBinOpBitXorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionBinOpBitXorContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionBinOpBitXorContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionBinOpBitXorContext) Operator_xor() IOperator_xorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperator_xorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperator_xorContext)
}

func (s *ExpressionBinOpBitXorContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *ExpressionBinOpBitXorContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *ExpressionBinOpBitXorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterExpressionBinOpBitXor(s)
	}
}

func (s *ExpressionBinOpBitXorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitExpressionBinOpBitXor(s)
	}
}

type ExpressionBinOpBitOrContext struct {
	*ExpressionContext
}

func NewExpressionBinOpBitOrContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExpressionBinOpBitOrContext {
	var p = new(ExpressionBinOpBitOrContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *ExpressionBinOpBitOrContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionBinOpBitOrContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionBinOpBitOrContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionBinOpBitOrContext) BAR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserBAR, 0)
}

func (s *ExpressionBinOpBitOrContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *ExpressionBinOpBitOrContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *ExpressionBinOpBitOrContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterExpressionBinOpBitOr(s)
	}
}

func (s *ExpressionBinOpBitOrContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitExpressionBinOpBitOr(s)
	}
}

type ExpressionBinOpOrContext struct {
	*ExpressionContext
}

func NewExpressionBinOpOrContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExpressionBinOpOrContext {
	var p = new(ExpressionBinOpOrContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *ExpressionBinOpOrContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionBinOpOrContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionBinOpOrContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionBinOpOrContext) LOG_OR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLOG_OR, 0)
}

func (s *ExpressionBinOpOrContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *ExpressionBinOpOrContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *ExpressionBinOpOrContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterExpressionBinOpOr(s)
	}
}

func (s *ExpressionBinOpOrContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitExpressionBinOpOr(s)
	}
}

type ExpressionTripleAndContext struct {
	*ExpressionContext
}

func NewExpressionTripleAndContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExpressionTripleAndContext {
	var p = new(ExpressionTripleAndContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *ExpressionTripleAndContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionTripleAndContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionTripleAndContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionTripleAndContext) TRIPLE_AND() antlr.TerminalNode {
	return s.GetToken(SV2017ParserTRIPLE_AND, 0)
}

func (s *ExpressionTripleAndContext) AllKW_MATCHES() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserKW_MATCHES)
}

func (s *ExpressionTripleAndContext) KW_MATCHES(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_MATCHES, i)
}

func (s *ExpressionTripleAndContext) AllPattern() []IPatternContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPatternContext)(nil)).Elem())
	var tst = make([]IPatternContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPatternContext)
		}
	}

	return tst
}

func (s *ExpressionTripleAndContext) Pattern(i int) IPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPatternContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPatternContext)
}

func (s *ExpressionTripleAndContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterExpressionTripleAnd(s)
	}
}

func (s *ExpressionTripleAndContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitExpressionTripleAnd(s)
	}
}

func (p *SV2017Parser) Expression() (localctx IExpressionContext) {
	return p.expression(0)
}

func (p *SV2017Parser) expression(_p int) (localctx IExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 598
	p.EnterRecursionRule(localctx, 598, SV2017ParserRULE_expression, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4231)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 475, p.GetParserRuleContext()) {
	case 1:
		localctx = NewExpressionPrimaryContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(4211)
			p.primary(0)
		}

	case 2:
		localctx = NewExpressionAssignContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(4212)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(4213)
			p.Operator_assignment()
		}
		{
			p.SetState(4214)
			p.Match(SV2017ParserRPAREN)
		}

	case 3:
		localctx = NewExpressionTaggedIdContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(4216)
			p.Match(SV2017ParserKW_TAGGED)
		}
		{
			p.SetState(4217)
			p.Identifier()
		}
		p.SetState(4219)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 473, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4218)
				p.expression(0)
			}

		}

	case 4:
		localctx = NewExpressionUnaryContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(4221)
			p.Unary_operator()
		}
		p.SetState(4225)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 474, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(4222)
					p.Attribute_instance()
				}

			}
			p.SetState(4227)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 474, p.GetParserRuleContext())
		}
		{
			p.SetState(4228)
			p.primary(0)
		}

	case 5:
		localctx = NewExpressionIncDecContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(4230)
			p.Inc_or_dec_expression()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(4383)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 493, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(4381)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 492, p.GetParserRuleContext()) {
			case 1:
				localctx = NewExpressionBinOpPowerContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SV2017ParserRULE_expression)
				p.SetState(4233)

				if !(p.Precpred(p.GetParserRuleContext(), 15)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 15)", ""))
				}
				{
					p.SetState(4234)
					p.Match(SV2017ParserDOUBLESTAR)
				}
				p.SetState(4238)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 476, p.GetParserRuleContext())

				for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
					if _alt == 1 {
						{
							p.SetState(4235)
							p.Attribute_instance()
						}

					}
					p.SetState(4240)
					p.GetErrorHandler().Sync(p)
					_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 476, p.GetParserRuleContext())
				}
				{
					p.SetState(4241)
					p.expression(16)
				}

			case 2:
				localctx = NewExpressionBinOpMulContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SV2017ParserRULE_expression)
				p.SetState(4242)

				if !(p.Precpred(p.GetParserRuleContext(), 14)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 14)", ""))
				}
				{
					p.SetState(4243)
					p.Operator_mul_div_mod()
				}
				p.SetState(4247)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 477, p.GetParserRuleContext())

				for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
					if _alt == 1 {
						{
							p.SetState(4244)
							p.Attribute_instance()
						}

					}
					p.SetState(4249)
					p.GetErrorHandler().Sync(p)
					_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 477, p.GetParserRuleContext())
				}
				{
					p.SetState(4250)
					p.expression(15)
				}

			case 3:
				localctx = NewExpressionBinOpAddContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SV2017ParserRULE_expression)
				p.SetState(4252)

				if !(p.Precpred(p.GetParserRuleContext(), 13)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 13)", ""))
				}
				{
					p.SetState(4253)
					p.Operator_plus_minus()
				}
				p.SetState(4257)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 478, p.GetParserRuleContext())

				for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
					if _alt == 1 {
						{
							p.SetState(4254)
							p.Attribute_instance()
						}

					}
					p.SetState(4259)
					p.GetErrorHandler().Sync(p)
					_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 478, p.GetParserRuleContext())
				}
				{
					p.SetState(4260)
					p.expression(14)
				}

			case 4:
				localctx = NewExpressionBinOpShiftContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SV2017ParserRULE_expression)
				p.SetState(4262)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
				}
				{
					p.SetState(4263)
					p.Operator_shift()
				}
				p.SetState(4267)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 479, p.GetParserRuleContext())

				for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
					if _alt == 1 {
						{
							p.SetState(4264)
							p.Attribute_instance()
						}

					}
					p.SetState(4269)
					p.GetErrorHandler().Sync(p)
					_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 479, p.GetParserRuleContext())
				}
				{
					p.SetState(4270)
					p.expression(13)
				}

			case 5:
				localctx = NewExpressionBinOpCmpContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SV2017ParserRULE_expression)
				p.SetState(4272)

				if !(p.Precpred(p.GetParserRuleContext(), 11)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 11)", ""))
				}
				{
					p.SetState(4273)
					p.Operator_cmp()
				}
				p.SetState(4277)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 480, p.GetParserRuleContext())

				for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
					if _alt == 1 {
						{
							p.SetState(4274)
							p.Attribute_instance()
						}

					}
					p.SetState(4279)
					p.GetErrorHandler().Sync(p)
					_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 480, p.GetParserRuleContext())
				}
				{
					p.SetState(4280)
					p.expression(12)
				}

			case 6:
				localctx = NewExpressionBinOpEqContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SV2017ParserRULE_expression)
				p.SetState(4282)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
				}
				{
					p.SetState(4283)
					p.Operator_eq_neq()
				}
				p.SetState(4287)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 481, p.GetParserRuleContext())

				for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
					if _alt == 1 {
						{
							p.SetState(4284)
							p.Attribute_instance()
						}

					}
					p.SetState(4289)
					p.GetErrorHandler().Sync(p)
					_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 481, p.GetParserRuleContext())
				}
				{
					p.SetState(4290)
					p.expression(10)
				}

			case 7:
				localctx = NewExpressionBinOpBitAndContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SV2017ParserRULE_expression)
				p.SetState(4292)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
				}
				{
					p.SetState(4293)
					p.Match(SV2017ParserAMPERSAND)
				}
				p.SetState(4297)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 482, p.GetParserRuleContext())

				for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
					if _alt == 1 {
						{
							p.SetState(4294)
							p.Attribute_instance()
						}

					}
					p.SetState(4299)
					p.GetErrorHandler().Sync(p)
					_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 482, p.GetParserRuleContext())
				}
				{
					p.SetState(4300)
					p.expression(9)
				}

			case 8:
				localctx = NewExpressionBinOpBitXorContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SV2017ParserRULE_expression)
				p.SetState(4301)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
				}
				{
					p.SetState(4302)
					p.Operator_xor()
				}
				p.SetState(4306)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 483, p.GetParserRuleContext())

				for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
					if _alt == 1 {
						{
							p.SetState(4303)
							p.Attribute_instance()
						}

					}
					p.SetState(4308)
					p.GetErrorHandler().Sync(p)
					_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 483, p.GetParserRuleContext())
				}
				{
					p.SetState(4309)
					p.expression(8)
				}

			case 9:
				localctx = NewExpressionBinOpBitOrContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SV2017ParserRULE_expression)
				p.SetState(4311)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(4312)
					p.Match(SV2017ParserBAR)
				}
				p.SetState(4316)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 484, p.GetParserRuleContext())

				for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
					if _alt == 1 {
						{
							p.SetState(4313)
							p.Attribute_instance()
						}

					}
					p.SetState(4318)
					p.GetErrorHandler().Sync(p)
					_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 484, p.GetParserRuleContext())
				}
				{
					p.SetState(4319)
					p.expression(7)
				}

			case 10:
				localctx = NewExpressionBinOpAndContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SV2017ParserRULE_expression)
				p.SetState(4320)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(4321)
					p.Match(SV2017ParserLOG_AND)
				}
				p.SetState(4325)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 485, p.GetParserRuleContext())

				for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
					if _alt == 1 {
						{
							p.SetState(4322)
							p.Attribute_instance()
						}

					}
					p.SetState(4327)
					p.GetErrorHandler().Sync(p)
					_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 485, p.GetParserRuleContext())
				}
				{
					p.SetState(4328)
					p.expression(6)
				}

			case 11:
				localctx = NewExpressionBinOpOrContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SV2017ParserRULE_expression)
				p.SetState(4329)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(4330)
					p.Match(SV2017ParserLOG_OR)
				}
				p.SetState(4334)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 486, p.GetParserRuleContext())

				for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
					if _alt == 1 {
						{
							p.SetState(4331)
							p.Attribute_instance()
						}

					}
					p.SetState(4336)
					p.GetErrorHandler().Sync(p)
					_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 486, p.GetParserRuleContext())
				}
				{
					p.SetState(4337)
					p.expression(5)
				}

			case 12:
				localctx = NewExpressionTernaryContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SV2017ParserRULE_expression)
				p.SetState(4338)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				p.SetState(4341)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == SV2017ParserKW_MATCHES {
					{
						p.SetState(4339)
						p.Match(SV2017ParserKW_MATCHES)
					}
					{
						p.SetState(4340)
						p.Pattern()
					}

				}
				{
					p.SetState(4343)
					p.Match(SV2017ParserQUESTIONMARK)
				}
				p.SetState(4347)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 488, p.GetParserRuleContext())

				for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
					if _alt == 1 {
						{
							p.SetState(4344)
							p.Attribute_instance()
						}

					}
					p.SetState(4349)
					p.GetErrorHandler().Sync(p)
					_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 488, p.GetParserRuleContext())
				}
				{
					p.SetState(4350)
					p.expression(0)
				}
				{
					p.SetState(4351)
					p.Match(SV2017ParserCOLON)
				}
				{
					p.SetState(4352)
					p.expression(2)
				}

			case 13:
				localctx = NewExpressionBinOpImplContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SV2017ParserRULE_expression)
				p.SetState(4354)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(4355)
					p.Operator_impl()
				}
				p.SetState(4359)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 489, p.GetParserRuleContext())

				for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
					if _alt == 1 {
						{
							p.SetState(4356)
							p.Attribute_instance()
						}

					}
					p.SetState(4361)
					p.GetErrorHandler().Sync(p)
					_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 489, p.GetParserRuleContext())
				}
				{
					p.SetState(4362)
					p.expression(2)
				}

			case 14:
				localctx = NewExpressionInsideContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SV2017ParserRULE_expression)
				p.SetState(4364)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
				}
				{
					p.SetState(4365)
					p.Match(SV2017ParserKW_INSIDE)
				}
				{
					p.SetState(4366)
					p.Match(SV2017ParserLBRACE)
				}
				{
					p.SetState(4367)
					p.Open_range_list()
				}
				{
					p.SetState(4368)
					p.Match(SV2017ParserRBRACE)
				}

			case 15:
				localctx = NewExpressionTripleAndContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SV2017ParserRULE_expression)
				p.SetState(4370)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				p.SetState(4373)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == SV2017ParserKW_MATCHES {
					{
						p.SetState(4371)
						p.Match(SV2017ParserKW_MATCHES)
					}
					{
						p.SetState(4372)
						p.Pattern()
					}

				}
				{
					p.SetState(4375)
					p.Match(SV2017ParserTRIPLE_AND)
				}
				{
					p.SetState(4376)
					p.expression(0)
				}
				p.SetState(4379)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 491, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(4377)
						p.Match(SV2017ParserKW_MATCHES)
					}
					{
						p.SetState(4378)
						p.Pattern()
					}

				}

			}

		}
		p.SetState(4385)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 493, p.GetParserRuleContext())
	}

	return localctx
}

// IConcatenationContext is an interface to support dynamic dispatch.
type IConcatenationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConcatenationContext differentiates from other interfaces.
	IsConcatenationContext()
}

type ConcatenationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConcatenationContext() *ConcatenationContext {
	var p = new(ConcatenationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_concatenation
	return p
}

func (*ConcatenationContext) IsConcatenationContext() {}

func NewConcatenationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConcatenationContext {
	var p = new(ConcatenationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_concatenation

	return p
}

func (s *ConcatenationContext) GetParser() antlr.Parser { return s.parser }

func (s *ConcatenationContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLBRACE, 0)
}

func (s *ConcatenationContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRBRACE, 0)
}

func (s *ConcatenationContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ConcatenationContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ConcatenationContext) Concatenation() IConcatenationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConcatenationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConcatenationContext)
}

func (s *ConcatenationContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *ConcatenationContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *ConcatenationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConcatenationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConcatenationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterConcatenation(s)
	}
}

func (s *ConcatenationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitConcatenation(s)
	}
}

func (p *SV2017Parser) Concatenation() (localctx IConcatenationContext) {
	localctx = NewConcatenationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 600, SV2017ParserRULE_concatenation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4386)
		p.Match(SV2017ParserLBRACE)
	}
	p.SetState(4397)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TAGGED-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserTIME_LITERAL-260)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(SV2017ParserANY_BASED_NUMBER-292))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-292))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-292))|(1<<(SV2017ParserFIXED_POINT_NUMBER-292))|(1<<(SV2017ParserUNSIGNED_NUMBER-292))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-292))|(1<<(SV2017ParserSTRING_LITERAL-292))|(1<<(SV2017ParserC_IDENTIFIER-292))|(1<<(SV2017ParserTICK_IDENTIFIER-292))|(1<<(SV2017ParserESCAPED_IDENTIFIER-292))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-292))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-292))|(1<<(SV2017ParserLPAREN-292))|(1<<(SV2017ParserLBRACE-292))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-292))|(1<<(SV2017ParserDOLAR-292))|(1<<(SV2017ParserNOT-292))|(1<<(SV2017ParserNEG-292))|(1<<(SV2017ParserNAND-292))|(1<<(SV2017ParserNOR-292)))) != 0) || (((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324))|(1<<(SV2017ParserPLUS-324)))) != 0) || (((_la-356)&-(0x1f+1)) == 0 && ((1<<uint((_la-356)))&((1<<(SV2017ParserMINUS-356))|(1<<(SV2017ParserAMPERSAND-356))|(1<<(SV2017ParserBAR-356))|(1<<(SV2017ParserINCR-356))|(1<<(SV2017ParserDECR-356)))) != 0) {
		{
			p.SetState(4387)
			p.expression(0)
		}
		p.SetState(4395)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SV2017ParserLBRACE:
			{
				p.SetState(4388)
				p.Concatenation()
			}

		case SV2017ParserCOMMA:
			p.SetState(4391)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for ok := true; ok; ok = _la == SV2017ParserCOMMA {
				{
					p.SetState(4389)
					p.Match(SV2017ParserCOMMA)
				}
				{
					p.SetState(4390)
					p.expression(0)
				}

				p.SetState(4393)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		case SV2017ParserRBRACE:

		default:
		}

	}
	{
		p.SetState(4399)
		p.Match(SV2017ParserRBRACE)
	}

	return localctx
}

// IDynamic_array_newContext is an interface to support dynamic dispatch.
type IDynamic_array_newContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDynamic_array_newContext differentiates from other interfaces.
	IsDynamic_array_newContext()
}

type Dynamic_array_newContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDynamic_array_newContext() *Dynamic_array_newContext {
	var p = new(Dynamic_array_newContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_dynamic_array_new
	return p
}

func (*Dynamic_array_newContext) IsDynamic_array_newContext() {}

func NewDynamic_array_newContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dynamic_array_newContext {
	var p = new(Dynamic_array_newContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_dynamic_array_new

	return p
}

func (s *Dynamic_array_newContext) GetParser() antlr.Parser { return s.parser }

func (s *Dynamic_array_newContext) KW_NEW() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_NEW, 0)
}

func (s *Dynamic_array_newContext) LSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLSQUARE_BR, 0)
}

func (s *Dynamic_array_newContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Dynamic_array_newContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Dynamic_array_newContext) RSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRSQUARE_BR, 0)
}

func (s *Dynamic_array_newContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Dynamic_array_newContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Dynamic_array_newContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dynamic_array_newContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dynamic_array_newContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterDynamic_array_new(s)
	}
}

func (s *Dynamic_array_newContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitDynamic_array_new(s)
	}
}

func (p *SV2017Parser) Dynamic_array_new() (localctx IDynamic_array_newContext) {
	localctx = NewDynamic_array_newContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 602, SV2017ParserRULE_dynamic_array_new)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4401)
		p.Match(SV2017ParserKW_NEW)
	}
	{
		p.SetState(4402)
		p.Match(SV2017ParserLSQUARE_BR)
	}
	{
		p.SetState(4403)
		p.expression(0)
	}
	{
		p.SetState(4404)
		p.Match(SV2017ParserRSQUARE_BR)
	}
	p.SetState(4409)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserLPAREN {
		{
			p.SetState(4405)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(4406)
			p.expression(0)
		}
		{
			p.SetState(4407)
			p.Match(SV2017ParserRPAREN)
		}

	}

	return localctx
}

// IConst_or_range_expressionContext is an interface to support dynamic dispatch.
type IConst_or_range_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConst_or_range_expressionContext differentiates from other interfaces.
	IsConst_or_range_expressionContext()
}

type Const_or_range_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConst_or_range_expressionContext() *Const_or_range_expressionContext {
	var p = new(Const_or_range_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_const_or_range_expression
	return p
}

func (*Const_or_range_expressionContext) IsConst_or_range_expressionContext() {}

func NewConst_or_range_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Const_or_range_expressionContext {
	var p = new(Const_or_range_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_const_or_range_expression

	return p
}

func (s *Const_or_range_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Const_or_range_expressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Const_or_range_expressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Const_or_range_expressionContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Const_or_range_expressionContext) DOLAR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOLAR, 0)
}

func (s *Const_or_range_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Const_or_range_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Const_or_range_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterConst_or_range_expression(s)
	}
}

func (s *Const_or_range_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitConst_or_range_expression(s)
	}
}

func (p *SV2017Parser) Const_or_range_expression() (localctx IConst_or_range_expressionContext) {
	localctx = NewConst_or_range_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 604, SV2017ParserRULE_const_or_range_expression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4411)
		p.expression(0)
	}
	p.SetState(4417)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserCOLON {
		{
			p.SetState(4412)
			p.Match(SV2017ParserCOLON)
		}
		p.SetState(4415)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 498, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(4413)
				p.Match(SV2017ParserDOLAR)
			}

		case 2:
			{
				p.SetState(4414)
				p.expression(0)
			}

		}

	}

	return localctx
}

// IVariable_decl_assignmentContext is an interface to support dynamic dispatch.
type IVariable_decl_assignmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariable_decl_assignmentContext differentiates from other interfaces.
	IsVariable_decl_assignmentContext()
}

type Variable_decl_assignmentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariable_decl_assignmentContext() *Variable_decl_assignmentContext {
	var p = new(Variable_decl_assignmentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_variable_decl_assignment
	return p
}

func (*Variable_decl_assignmentContext) IsVariable_decl_assignmentContext() {}

func NewVariable_decl_assignmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Variable_decl_assignmentContext {
	var p = new(Variable_decl_assignmentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_variable_decl_assignment

	return p
}

func (s *Variable_decl_assignmentContext) GetParser() antlr.Parser { return s.parser }

func (s *Variable_decl_assignmentContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Variable_decl_assignmentContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserASSIGN, 0)
}

func (s *Variable_decl_assignmentContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Variable_decl_assignmentContext) Class_new() IClass_newContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_newContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_newContext)
}

func (s *Variable_decl_assignmentContext) AllVariable_dimension() []IVariable_dimensionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariable_dimensionContext)(nil)).Elem())
	var tst = make([]IVariable_dimensionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariable_dimensionContext)
		}
	}

	return tst
}

func (s *Variable_decl_assignmentContext) Variable_dimension(i int) IVariable_dimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_dimensionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariable_dimensionContext)
}

func (s *Variable_decl_assignmentContext) Dynamic_array_new() IDynamic_array_newContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDynamic_array_newContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDynamic_array_newContext)
}

func (s *Variable_decl_assignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Variable_decl_assignmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Variable_decl_assignmentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterVariable_decl_assignment(s)
	}
}

func (s *Variable_decl_assignmentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitVariable_decl_assignment(s)
	}
}

func (p *SV2017Parser) Variable_decl_assignment() (localctx IVariable_decl_assignmentContext) {
	localctx = NewVariable_decl_assignmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 606, SV2017ParserRULE_variable_decl_assignment)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4419)
		p.Identifier()
	}
	p.SetState(4437)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserASSIGN:
		{
			p.SetState(4420)
			p.Match(SV2017ParserASSIGN)
		}
		p.SetState(4423)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 500, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(4421)
				p.expression(0)
			}

		case 2:
			{
				p.SetState(4422)
				p.Class_new()
			}

		}

	case SV2017ParserLSQUARE_BR:
		p.SetState(4426)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == SV2017ParserLSQUARE_BR {
			{
				p.SetState(4425)
				p.Variable_dimension()
			}

			p.SetState(4428)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(4435)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserASSIGN {
			{
				p.SetState(4430)
				p.Match(SV2017ParserASSIGN)
			}
			p.SetState(4433)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_FATAL, SV2017ParserKW_DOLAR_FULLSKEW, SV2017ParserKW_DOLAR_HOLD, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_NOCHANGE, SV2017ParserKW_DOLAR_PERIOD, SV2017ParserKW_DOLAR_RECOVERY, SV2017ParserKW_DOLAR_RECREM, SV2017ParserKW_DOLAR_REMOVAL, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_SETUP, SV2017ParserKW_DOLAR_SETUPHOLD, SV2017ParserKW_DOLAR_SKEW, SV2017ParserKW_DOLAR_TIMESKEW, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_DOLAR_WARNING, SV2017ParserKW_DOLAR_WIDTH, SV2017ParserKW_BIT, SV2017ParserKW_BYTE, SV2017ParserKW_CONST, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LOCAL, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_NULL, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_SAMPLE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_SUPER, SV2017ParserKW_TAGGED, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_UNSIGNED, SV2017ParserTIME_LITERAL, SV2017ParserANY_BASED_NUMBER, SV2017ParserBASED_NUMBER_WITH_SIZE, SV2017ParserREAL_NUMBER_WITH_EXP, SV2017ParserFIXED_POINT_NUMBER, SV2017ParserUNSIGNED_NUMBER, SV2017ParserUNBASED_UNSIZED_LITERAL, SV2017ParserSTRING_LITERAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSYSTEM_TF_IDENTIFIER, SV2017ParserLPAREN, SV2017ParserLBRACE, SV2017ParserAPOSTROPHE_LBRACE, SV2017ParserDOLAR, SV2017ParserNOT, SV2017ParserNEG, SV2017ParserNAND, SV2017ParserNOR, SV2017ParserXOR, SV2017ParserNXOR, SV2017ParserXORN, SV2017ParserPLUS, SV2017ParserMINUS, SV2017ParserAMPERSAND, SV2017ParserBAR, SV2017ParserINCR, SV2017ParserDECR:
				{
					p.SetState(4431)
					p.expression(0)
				}

			case SV2017ParserKW_NEW:
				{
					p.SetState(4432)
					p.Dynamic_array_new()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}

	case SV2017ParserSEMI, SV2017ParserCOMMA:

	default:
	}

	return localctx
}

// IAssignment_pattern_variable_lvalueContext is an interface to support dynamic dispatch.
type IAssignment_pattern_variable_lvalueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignment_pattern_variable_lvalueContext differentiates from other interfaces.
	IsAssignment_pattern_variable_lvalueContext()
}

type Assignment_pattern_variable_lvalueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignment_pattern_variable_lvalueContext() *Assignment_pattern_variable_lvalueContext {
	var p = new(Assignment_pattern_variable_lvalueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_assignment_pattern_variable_lvalue
	return p
}

func (*Assignment_pattern_variable_lvalueContext) IsAssignment_pattern_variable_lvalueContext() {}

func NewAssignment_pattern_variable_lvalueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Assignment_pattern_variable_lvalueContext {
	var p = new(Assignment_pattern_variable_lvalueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_assignment_pattern_variable_lvalue

	return p
}

func (s *Assignment_pattern_variable_lvalueContext) GetParser() antlr.Parser { return s.parser }

func (s *Assignment_pattern_variable_lvalueContext) APOSTROPHE_LBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserAPOSTROPHE_LBRACE, 0)
}

func (s *Assignment_pattern_variable_lvalueContext) AllVariable_lvalue() []IVariable_lvalueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariable_lvalueContext)(nil)).Elem())
	var tst = make([]IVariable_lvalueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariable_lvalueContext)
		}
	}

	return tst
}

func (s *Assignment_pattern_variable_lvalueContext) Variable_lvalue(i int) IVariable_lvalueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_lvalueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariable_lvalueContext)
}

func (s *Assignment_pattern_variable_lvalueContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRBRACE, 0)
}

func (s *Assignment_pattern_variable_lvalueContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Assignment_pattern_variable_lvalueContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Assignment_pattern_variable_lvalueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Assignment_pattern_variable_lvalueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Assignment_pattern_variable_lvalueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterAssignment_pattern_variable_lvalue(s)
	}
}

func (s *Assignment_pattern_variable_lvalueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitAssignment_pattern_variable_lvalue(s)
	}
}

func (p *SV2017Parser) Assignment_pattern_variable_lvalue() (localctx IAssignment_pattern_variable_lvalueContext) {
	localctx = NewAssignment_pattern_variable_lvalueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 608, SV2017ParserRULE_assignment_pattern_variable_lvalue)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4439)
		p.Match(SV2017ParserAPOSTROPHE_LBRACE)
	}
	{
		p.SetState(4440)
		p.Variable_lvalue()
	}
	p.SetState(4445)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserCOMMA {
		{
			p.SetState(4441)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(4442)
			p.Variable_lvalue()
		}

		p.SetState(4447)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(4448)
		p.Match(SV2017ParserRBRACE)
	}

	return localctx
}

// IStream_operatorContext is an interface to support dynamic dispatch.
type IStream_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStream_operatorContext differentiates from other interfaces.
	IsStream_operatorContext()
}

type Stream_operatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStream_operatorContext() *Stream_operatorContext {
	var p = new(Stream_operatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_stream_operator
	return p
}

func (*Stream_operatorContext) IsStream_operatorContext() {}

func NewStream_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Stream_operatorContext {
	var p = new(Stream_operatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_stream_operator

	return p
}

func (s *Stream_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Stream_operatorContext) SHIFT_RIGHT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSHIFT_RIGHT, 0)
}

func (s *Stream_operatorContext) SHIFT_LEFT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSHIFT_LEFT, 0)
}

func (s *Stream_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Stream_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Stream_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterStream_operator(s)
	}
}

func (s *Stream_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitStream_operator(s)
	}
}

func (p *SV2017Parser) Stream_operator() (localctx IStream_operatorContext) {
	localctx = NewStream_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 610, SV2017ParserRULE_stream_operator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4450)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserSHIFT_LEFT || _la == SV2017ParserSHIFT_RIGHT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ISlice_sizeContext is an interface to support dynamic dispatch.
type ISlice_sizeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSlice_sizeContext differentiates from other interfaces.
	IsSlice_sizeContext()
}

type Slice_sizeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySlice_sizeContext() *Slice_sizeContext {
	var p = new(Slice_sizeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_slice_size
	return p
}

func (*Slice_sizeContext) IsSlice_sizeContext() {}

func NewSlice_sizeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Slice_sizeContext {
	var p = new(Slice_sizeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_slice_size

	return p
}

func (s *Slice_sizeContext) GetParser() antlr.Parser { return s.parser }

func (s *Slice_sizeContext) Integer_type() IInteger_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInteger_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInteger_typeContext)
}

func (s *Slice_sizeContext) Non_integer_type() INon_integer_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INon_integer_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INon_integer_typeContext)
}

func (s *Slice_sizeContext) Package_or_class_scoped_path() IPackage_or_class_scoped_pathContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackage_or_class_scoped_pathContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackage_or_class_scoped_pathContext)
}

func (s *Slice_sizeContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Slice_sizeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Slice_sizeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Slice_sizeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterSlice_size(s)
	}
}

func (s *Slice_sizeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitSlice_size(s)
	}
}

func (p *SV2017Parser) Slice_size() (localctx ISlice_sizeContext) {
	localctx = NewSlice_sizeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 612, SV2017ParserRULE_slice_size)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4456)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 506, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4452)
			p.Integer_type()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4453)
			p.Non_integer_type()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4454)
			p.Package_or_class_scoped_path()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4455)
			p.expression(0)
		}

	}

	return localctx
}

// IStreaming_concatenationContext is an interface to support dynamic dispatch.
type IStreaming_concatenationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStreaming_concatenationContext differentiates from other interfaces.
	IsStreaming_concatenationContext()
}

type Streaming_concatenationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStreaming_concatenationContext() *Streaming_concatenationContext {
	var p = new(Streaming_concatenationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_streaming_concatenation
	return p
}

func (*Streaming_concatenationContext) IsStreaming_concatenationContext() {}

func NewStreaming_concatenationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Streaming_concatenationContext {
	var p = new(Streaming_concatenationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_streaming_concatenation

	return p
}

func (s *Streaming_concatenationContext) GetParser() antlr.Parser { return s.parser }

func (s *Streaming_concatenationContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLBRACE, 0)
}

func (s *Streaming_concatenationContext) Stream_operator() IStream_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStream_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStream_operatorContext)
}

func (s *Streaming_concatenationContext) Stream_concatenation() IStream_concatenationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStream_concatenationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStream_concatenationContext)
}

func (s *Streaming_concatenationContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRBRACE, 0)
}

func (s *Streaming_concatenationContext) Slice_size() ISlice_sizeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISlice_sizeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISlice_sizeContext)
}

func (s *Streaming_concatenationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Streaming_concatenationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Streaming_concatenationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterStreaming_concatenation(s)
	}
}

func (s *Streaming_concatenationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitStreaming_concatenation(s)
	}
}

func (p *SV2017Parser) Streaming_concatenation() (localctx IStreaming_concatenationContext) {
	localctx = NewStreaming_concatenationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 614, SV2017ParserRULE_streaming_concatenation)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4458)
		p.Match(SV2017ParserLBRACE)
	}
	{
		p.SetState(4459)
		p.Stream_operator()
	}
	p.SetState(4461)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 507, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4460)
			p.Slice_size()
		}

	}
	{
		p.SetState(4463)
		p.Stream_concatenation()
	}
	{
		p.SetState(4464)
		p.Match(SV2017ParserRBRACE)
	}

	return localctx
}

// IStream_concatenationContext is an interface to support dynamic dispatch.
type IStream_concatenationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStream_concatenationContext differentiates from other interfaces.
	IsStream_concatenationContext()
}

type Stream_concatenationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStream_concatenationContext() *Stream_concatenationContext {
	var p = new(Stream_concatenationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_stream_concatenation
	return p
}

func (*Stream_concatenationContext) IsStream_concatenationContext() {}

func NewStream_concatenationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Stream_concatenationContext {
	var p = new(Stream_concatenationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_stream_concatenation

	return p
}

func (s *Stream_concatenationContext) GetParser() antlr.Parser { return s.parser }

func (s *Stream_concatenationContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLBRACE, 0)
}

func (s *Stream_concatenationContext) AllStream_expression() []IStream_expressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStream_expressionContext)(nil)).Elem())
	var tst = make([]IStream_expressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStream_expressionContext)
		}
	}

	return tst
}

func (s *Stream_concatenationContext) Stream_expression(i int) IStream_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStream_expressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStream_expressionContext)
}

func (s *Stream_concatenationContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRBRACE, 0)
}

func (s *Stream_concatenationContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Stream_concatenationContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Stream_concatenationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Stream_concatenationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Stream_concatenationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterStream_concatenation(s)
	}
}

func (s *Stream_concatenationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitStream_concatenation(s)
	}
}

func (p *SV2017Parser) Stream_concatenation() (localctx IStream_concatenationContext) {
	localctx = NewStream_concatenationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 616, SV2017ParserRULE_stream_concatenation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4466)
		p.Match(SV2017ParserLBRACE)
	}
	{
		p.SetState(4467)
		p.Stream_expression()
	}
	p.SetState(4472)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserCOMMA {
		{
			p.SetState(4468)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(4469)
			p.Stream_expression()
		}

		p.SetState(4474)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(4475)
		p.Match(SV2017ParserRBRACE)
	}

	return localctx
}

// IStream_expressionContext is an interface to support dynamic dispatch.
type IStream_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStream_expressionContext differentiates from other interfaces.
	IsStream_expressionContext()
}

type Stream_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStream_expressionContext() *Stream_expressionContext {
	var p = new(Stream_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_stream_expression
	return p
}

func (*Stream_expressionContext) IsStream_expressionContext() {}

func NewStream_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Stream_expressionContext {
	var p = new(Stream_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_stream_expression

	return p
}

func (s *Stream_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Stream_expressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Stream_expressionContext) KW_WITH() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_WITH, 0)
}

func (s *Stream_expressionContext) LSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLSQUARE_BR, 0)
}

func (s *Stream_expressionContext) Array_range_expression() IArray_range_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArray_range_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArray_range_expressionContext)
}

func (s *Stream_expressionContext) RSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRSQUARE_BR, 0)
}

func (s *Stream_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Stream_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Stream_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterStream_expression(s)
	}
}

func (s *Stream_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitStream_expression(s)
	}
}

func (p *SV2017Parser) Stream_expression() (localctx IStream_expressionContext) {
	localctx = NewStream_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 618, SV2017ParserRULE_stream_expression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4477)
		p.expression(0)
	}
	p.SetState(4483)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_WITH {
		{
			p.SetState(4478)
			p.Match(SV2017ParserKW_WITH)
		}
		{
			p.SetState(4479)
			p.Match(SV2017ParserLSQUARE_BR)
		}
		{
			p.SetState(4480)
			p.Array_range_expression()
		}
		{
			p.SetState(4481)
			p.Match(SV2017ParserRSQUARE_BR)
		}

	}

	return localctx
}

// IArray_range_expressionContext is an interface to support dynamic dispatch.
type IArray_range_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArray_range_expressionContext differentiates from other interfaces.
	IsArray_range_expressionContext()
}

type Array_range_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArray_range_expressionContext() *Array_range_expressionContext {
	var p = new(Array_range_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_array_range_expression
	return p
}

func (*Array_range_expressionContext) IsArray_range_expressionContext() {}

func NewArray_range_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Array_range_expressionContext {
	var p = new(Array_range_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_array_range_expression

	return p
}

func (s *Array_range_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Array_range_expressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Array_range_expressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Array_range_expressionContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Array_range_expressionContext) Operator_plus_minus() IOperator_plus_minusContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperator_plus_minusContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperator_plus_minusContext)
}

func (s *Array_range_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_range_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Array_range_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterArray_range_expression(s)
	}
}

func (s *Array_range_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitArray_range_expression(s)
	}
}

func (p *SV2017Parser) Array_range_expression() (localctx IArray_range_expressionContext) {
	localctx = NewArray_range_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 620, SV2017ParserRULE_array_range_expression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4485)
		p.expression(0)
	}
	p.SetState(4491)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la-330)&-(0x1f+1)) == 0 && ((1<<uint((_la-330)))&((1<<(SV2017ParserCOLON-330))|(1<<(SV2017ParserPLUS-330))|(1<<(SV2017ParserMINUS-330)))) != 0 {
		p.SetState(4487)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserPLUS || _la == SV2017ParserMINUS {
			{
				p.SetState(4486)
				p.Operator_plus_minus()
			}

		}
		{
			p.SetState(4489)
			p.Match(SV2017ParserCOLON)
		}
		{
			p.SetState(4490)
			p.expression(0)
		}

	}

	return localctx
}

// IOpen_range_listContext is an interface to support dynamic dispatch.
type IOpen_range_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOpen_range_listContext differentiates from other interfaces.
	IsOpen_range_listContext()
}

type Open_range_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpen_range_listContext() *Open_range_listContext {
	var p = new(Open_range_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_open_range_list
	return p
}

func (*Open_range_listContext) IsOpen_range_listContext() {}

func NewOpen_range_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Open_range_listContext {
	var p = new(Open_range_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_open_range_list

	return p
}

func (s *Open_range_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Open_range_listContext) AllValue_range() []IValue_rangeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IValue_rangeContext)(nil)).Elem())
	var tst = make([]IValue_rangeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IValue_rangeContext)
		}
	}

	return tst
}

func (s *Open_range_listContext) Value_range(i int) IValue_rangeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValue_rangeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IValue_rangeContext)
}

func (s *Open_range_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Open_range_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Open_range_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Open_range_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Open_range_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterOpen_range_list(s)
	}
}

func (s *Open_range_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitOpen_range_list(s)
	}
}

func (p *SV2017Parser) Open_range_list() (localctx IOpen_range_listContext) {
	localctx = NewOpen_range_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 622, SV2017ParserRULE_open_range_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4493)
		p.Value_range()
	}
	p.SetState(4498)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserCOMMA {
		{
			p.SetState(4494)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(4495)
			p.Value_range()
		}

		p.SetState(4500)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IPatternContext is an interface to support dynamic dispatch.
type IPatternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPatternContext differentiates from other interfaces.
	IsPatternContext()
}

type PatternContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPatternContext() *PatternContext {
	var p = new(PatternContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_pattern
	return p
}

func (*PatternContext) IsPatternContext() {}

func NewPatternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PatternContext {
	var p = new(PatternContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_pattern

	return p
}

func (s *PatternContext) GetParser() antlr.Parser { return s.parser }

func (s *PatternContext) DOT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOT, 0)
}

func (s *PatternContext) MUL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserMUL, 0)
}

func (s *PatternContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *PatternContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *PatternContext) KW_TAGGED() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_TAGGED, 0)
}

func (s *PatternContext) AllPattern() []IPatternContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPatternContext)(nil)).Elem())
	var tst = make([]IPatternContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPatternContext)
		}
	}

	return tst
}

func (s *PatternContext) Pattern(i int) IPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPatternContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPatternContext)
}

func (s *PatternContext) APOSTROPHE_LBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserAPOSTROPHE_LBRACE, 0)
}

func (s *PatternContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRBRACE, 0)
}

func (s *PatternContext) AllCOLON() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOLON)
}

func (s *PatternContext) COLON(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, i)
}

func (s *PatternContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *PatternContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *PatternContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PatternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PatternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PatternContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPattern(s)
	}
}

func (s *PatternContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPattern(s)
	}
}

func (p *SV2017Parser) Pattern() (localctx IPatternContext) {
	localctx = NewPatternContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 624, SV2017ParserRULE_pattern)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4538)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 518, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4501)
			p.Match(SV2017ParserDOT)
		}
		p.SetState(4504)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SV2017ParserMUL:
			{
				p.SetState(4502)
				p.Match(SV2017ParserMUL)
			}

		case SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_SAMPLE, SV2017ParserKW_STD, SV2017ParserKW_TYPE_OPTION, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
			{
				p.SetState(4503)
				p.Identifier()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4506)
			p.Match(SV2017ParserKW_TAGGED)
		}
		{
			p.SetState(4507)
			p.Identifier()
		}
		p.SetState(4509)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 514, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4508)
				p.Pattern()
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4511)
			p.Match(SV2017ParserAPOSTROPHE_LBRACE)
		}
		p.SetState(4533)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 517, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(4512)
				p.Pattern()
			}
			p.SetState(4517)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SV2017ParserCOMMA {
				{
					p.SetState(4513)
					p.Match(SV2017ParserCOMMA)
				}
				{
					p.SetState(4514)
					p.Pattern()
				}

				p.SetState(4519)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		case 2:
			{
				p.SetState(4520)
				p.Identifier()
			}
			{
				p.SetState(4521)
				p.Match(SV2017ParserCOLON)
			}
			{
				p.SetState(4522)
				p.Pattern()
			}
			p.SetState(4530)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SV2017ParserCOMMA {
				{
					p.SetState(4523)
					p.Match(SV2017ParserCOMMA)
				}
				{
					p.SetState(4524)
					p.Identifier()
				}
				{
					p.SetState(4525)
					p.Match(SV2017ParserCOLON)
				}
				{
					p.SetState(4526)
					p.Pattern()
				}

				p.SetState(4532)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(4535)
			p.Match(SV2017ParserRBRACE)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4537)
			p.expression(0)
		}

	}

	return localctx
}

// IAssignment_patternContext is an interface to support dynamic dispatch.
type IAssignment_patternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignment_patternContext differentiates from other interfaces.
	IsAssignment_patternContext()
}

type Assignment_patternContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignment_patternContext() *Assignment_patternContext {
	var p = new(Assignment_patternContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_assignment_pattern
	return p
}

func (*Assignment_patternContext) IsAssignment_patternContext() {}

func NewAssignment_patternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Assignment_patternContext {
	var p = new(Assignment_patternContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_assignment_pattern

	return p
}

func (s *Assignment_patternContext) GetParser() antlr.Parser { return s.parser }

func (s *Assignment_patternContext) APOSTROPHE_LBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserAPOSTROPHE_LBRACE, 0)
}

func (s *Assignment_patternContext) AllRBRACE() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserRBRACE)
}

func (s *Assignment_patternContext) RBRACE(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserRBRACE, i)
}

func (s *Assignment_patternContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Assignment_patternContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Assignment_patternContext) AllStructure_pattern_key() []IStructure_pattern_keyContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStructure_pattern_keyContext)(nil)).Elem())
	var tst = make([]IStructure_pattern_keyContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStructure_pattern_keyContext)
		}
	}

	return tst
}

func (s *Assignment_patternContext) Structure_pattern_key(i int) IStructure_pattern_keyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStructure_pattern_keyContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStructure_pattern_keyContext)
}

func (s *Assignment_patternContext) AllCOLON() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOLON)
}

func (s *Assignment_patternContext) COLON(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, i)
}

func (s *Assignment_patternContext) AllArray_pattern_key() []IArray_pattern_keyContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IArray_pattern_keyContext)(nil)).Elem())
	var tst = make([]IArray_pattern_keyContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IArray_pattern_keyContext)
		}
	}

	return tst
}

func (s *Assignment_patternContext) Array_pattern_key(i int) IArray_pattern_keyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArray_pattern_keyContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IArray_pattern_keyContext)
}

func (s *Assignment_patternContext) Constant_expression() IConstant_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_expressionContext)
}

func (s *Assignment_patternContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLBRACE, 0)
}

func (s *Assignment_patternContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Assignment_patternContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Assignment_patternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Assignment_patternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Assignment_patternContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterAssignment_pattern(s)
	}
}

func (s *Assignment_patternContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitAssignment_pattern(s)
	}
}

func (p *SV2017Parser) Assignment_pattern() (localctx IAssignment_patternContext) {
	localctx = NewAssignment_patternContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 626, SV2017ParserRULE_assignment_pattern)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4540)
		p.Match(SV2017ParserAPOSTROPHE_LBRACE)
	}
	p.SetState(4587)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 523, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4541)
			p.expression(0)
		}
		p.SetState(4546)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserCOMMA {
			{
				p.SetState(4542)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(4543)
				p.expression(0)
			}

			p.SetState(4548)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 523, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(4549)
			p.Structure_pattern_key()
		}
		{
			p.SetState(4550)
			p.Match(SV2017ParserCOLON)
		}
		{
			p.SetState(4551)
			p.expression(0)
		}
		p.SetState(4559)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserCOMMA {
			{
				p.SetState(4552)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(4553)
				p.Structure_pattern_key()
			}
			{
				p.SetState(4554)
				p.Match(SV2017ParserCOLON)
			}
			{
				p.SetState(4555)
				p.expression(0)
			}

			p.SetState(4561)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 523, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(4562)
			p.Array_pattern_key()
		}
		{
			p.SetState(4563)
			p.Match(SV2017ParserCOLON)
		}
		{
			p.SetState(4564)
			p.expression(0)
		}
		p.SetState(4572)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserCOMMA {
			{
				p.SetState(4565)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(4566)
				p.Array_pattern_key()
			}
			{
				p.SetState(4567)
				p.Match(SV2017ParserCOLON)
			}
			{
				p.SetState(4568)
				p.expression(0)
			}

			p.SetState(4574)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 523, p.GetParserRuleContext()) == 4 {
		{
			p.SetState(4575)
			p.Constant_expression()
		}
		{
			p.SetState(4576)
			p.Match(SV2017ParserLBRACE)
		}
		{
			p.SetState(4577)
			p.expression(0)
		}
		p.SetState(4582)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserCOMMA {
			{
				p.SetState(4578)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(4579)
				p.expression(0)
			}

			p.SetState(4584)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(4585)
			p.Match(SV2017ParserRBRACE)
		}

	}
	{
		p.SetState(4589)
		p.Match(SV2017ParserRBRACE)
	}

	return localctx
}

// IStructure_pattern_keyContext is an interface to support dynamic dispatch.
type IStructure_pattern_keyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStructure_pattern_keyContext differentiates from other interfaces.
	IsStructure_pattern_keyContext()
}

type Structure_pattern_keyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructure_pattern_keyContext() *Structure_pattern_keyContext {
	var p = new(Structure_pattern_keyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_structure_pattern_key
	return p
}

func (*Structure_pattern_keyContext) IsStructure_pattern_keyContext() {}

func NewStructure_pattern_keyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Structure_pattern_keyContext {
	var p = new(Structure_pattern_keyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_structure_pattern_key

	return p
}

func (s *Structure_pattern_keyContext) GetParser() antlr.Parser { return s.parser }

func (s *Structure_pattern_keyContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Structure_pattern_keyContext) Assignment_pattern_key() IAssignment_pattern_keyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignment_pattern_keyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignment_pattern_keyContext)
}

func (s *Structure_pattern_keyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Structure_pattern_keyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Structure_pattern_keyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterStructure_pattern_key(s)
	}
}

func (s *Structure_pattern_keyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitStructure_pattern_key(s)
	}
}

func (p *SV2017Parser) Structure_pattern_key() (localctx IStructure_pattern_keyContext) {
	localctx = NewStructure_pattern_keyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 628, SV2017ParserRULE_structure_pattern_key)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4593)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 524, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4591)
			p.Identifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4592)
			p.Assignment_pattern_key()
		}

	}

	return localctx
}

// IArray_pattern_keyContext is an interface to support dynamic dispatch.
type IArray_pattern_keyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArray_pattern_keyContext differentiates from other interfaces.
	IsArray_pattern_keyContext()
}

type Array_pattern_keyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArray_pattern_keyContext() *Array_pattern_keyContext {
	var p = new(Array_pattern_keyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_array_pattern_key
	return p
}

func (*Array_pattern_keyContext) IsArray_pattern_keyContext() {}

func NewArray_pattern_keyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Array_pattern_keyContext {
	var p = new(Array_pattern_keyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_array_pattern_key

	return p
}

func (s *Array_pattern_keyContext) GetParser() antlr.Parser { return s.parser }

func (s *Array_pattern_keyContext) Constant_expression() IConstant_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_expressionContext)
}

func (s *Array_pattern_keyContext) Assignment_pattern_key() IAssignment_pattern_keyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignment_pattern_keyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignment_pattern_keyContext)
}

func (s *Array_pattern_keyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_pattern_keyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Array_pattern_keyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterArray_pattern_key(s)
	}
}

func (s *Array_pattern_keyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitArray_pattern_key(s)
	}
}

func (p *SV2017Parser) Array_pattern_key() (localctx IArray_pattern_keyContext) {
	localctx = NewArray_pattern_keyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 630, SV2017ParserRULE_array_pattern_key)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4597)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 525, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4595)
			p.Constant_expression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4596)
			p.Assignment_pattern_key()
		}

	}

	return localctx
}

// IAssignment_pattern_keyContext is an interface to support dynamic dispatch.
type IAssignment_pattern_keyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignment_pattern_keyContext differentiates from other interfaces.
	IsAssignment_pattern_keyContext()
}

type Assignment_pattern_keyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignment_pattern_keyContext() *Assignment_pattern_keyContext {
	var p = new(Assignment_pattern_keyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_assignment_pattern_key
	return p
}

func (*Assignment_pattern_keyContext) IsAssignment_pattern_keyContext() {}

func NewAssignment_pattern_keyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Assignment_pattern_keyContext {
	var p = new(Assignment_pattern_keyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_assignment_pattern_key

	return p
}

func (s *Assignment_pattern_keyContext) GetParser() antlr.Parser { return s.parser }

func (s *Assignment_pattern_keyContext) KW_DEFAULT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DEFAULT, 0)
}

func (s *Assignment_pattern_keyContext) Integer_type() IInteger_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInteger_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInteger_typeContext)
}

func (s *Assignment_pattern_keyContext) Non_integer_type() INon_integer_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INon_integer_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INon_integer_typeContext)
}

func (s *Assignment_pattern_keyContext) Package_or_class_scoped_path() IPackage_or_class_scoped_pathContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackage_or_class_scoped_pathContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackage_or_class_scoped_pathContext)
}

func (s *Assignment_pattern_keyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Assignment_pattern_keyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Assignment_pattern_keyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterAssignment_pattern_key(s)
	}
}

func (s *Assignment_pattern_keyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitAssignment_pattern_key(s)
	}
}

func (p *SV2017Parser) Assignment_pattern_key() (localctx IAssignment_pattern_keyContext) {
	localctx = NewAssignment_pattern_keyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 632, SV2017ParserRULE_assignment_pattern_key)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4603)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_DEFAULT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4599)
			p.Match(SV2017ParserKW_DEFAULT)
		}

	case SV2017ParserKW_BIT, SV2017ParserKW_BYTE, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_REG, SV2017ParserKW_SHORTINT, SV2017ParserKW_TIME:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4600)
			p.Integer_type()
		}

	case SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_SHORTREAL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4601)
			p.Non_integer_type()
		}

	case SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_LOCAL, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_SAMPLE, SV2017ParserKW_STD, SV2017ParserKW_SUPER, SV2017ParserKW_THIS, SV2017ParserKW_TYPE_OPTION, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4602)
			p.Package_or_class_scoped_path()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IStruct_union_memberContext is an interface to support dynamic dispatch.
type IStruct_union_memberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStruct_union_memberContext differentiates from other interfaces.
	IsStruct_union_memberContext()
}

type Struct_union_memberContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStruct_union_memberContext() *Struct_union_memberContext {
	var p = new(Struct_union_memberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_struct_union_member
	return p
}

func (*Struct_union_memberContext) IsStruct_union_memberContext() {}

func NewStruct_union_memberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Struct_union_memberContext {
	var p = new(Struct_union_memberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_struct_union_member

	return p
}

func (s *Struct_union_memberContext) GetParser() antlr.Parser { return s.parser }

func (s *Struct_union_memberContext) Data_type_or_void() IData_type_or_voidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_or_voidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_or_voidContext)
}

func (s *Struct_union_memberContext) List_of_variable_decl_assignments() IList_of_variable_decl_assignmentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_variable_decl_assignmentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_variable_decl_assignmentsContext)
}

func (s *Struct_union_memberContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Struct_union_memberContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Struct_union_memberContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Struct_union_memberContext) Random_qualifier() IRandom_qualifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRandom_qualifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRandom_qualifierContext)
}

func (s *Struct_union_memberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Struct_union_memberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Struct_union_memberContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterStruct_union_member(s)
	}
}

func (s *Struct_union_memberContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitStruct_union_member(s)
	}
}

func (p *SV2017Parser) Struct_union_member() (localctx IStruct_union_memberContext) {
	localctx = NewStruct_union_memberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 634, SV2017ParserRULE_struct_union_member)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4608)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 527, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(4605)
				p.Attribute_instance()
			}

		}
		p.SetState(4610)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 527, p.GetParserRuleContext())
	}
	p.SetState(4612)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_RAND || _la == SV2017ParserKW_RANDC {
		{
			p.SetState(4611)
			p.Random_qualifier()
		}

	}
	{
		p.SetState(4614)
		p.Data_type_or_void()
	}
	{
		p.SetState(4615)
		p.List_of_variable_decl_assignments()
	}
	{
		p.SetState(4616)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IData_type_or_voidContext is an interface to support dynamic dispatch.
type IData_type_or_voidContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsData_type_or_voidContext differentiates from other interfaces.
	IsData_type_or_voidContext()
}

type Data_type_or_voidContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyData_type_or_voidContext() *Data_type_or_voidContext {
	var p = new(Data_type_or_voidContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_data_type_or_void
	return p
}

func (*Data_type_or_voidContext) IsData_type_or_voidContext() {}

func NewData_type_or_voidContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Data_type_or_voidContext {
	var p = new(Data_type_or_voidContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_data_type_or_void

	return p
}

func (s *Data_type_or_voidContext) GetParser() antlr.Parser { return s.parser }

func (s *Data_type_or_voidContext) KW_VOID() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_VOID, 0)
}

func (s *Data_type_or_voidContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Data_type_or_voidContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Data_type_or_voidContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Data_type_or_voidContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterData_type_or_void(s)
	}
}

func (s *Data_type_or_voidContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitData_type_or_void(s)
	}
}

func (p *SV2017Parser) Data_type_or_void() (localctx IData_type_or_voidContext) {
	localctx = NewData_type_or_voidContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 636, SV2017ParserRULE_data_type_or_void)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4620)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_VOID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4618)
			p.Match(SV2017ParserKW_VOID)
		}

	case SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_BIT, SV2017ParserKW_BYTE, SV2017ParserKW_CHANDLE, SV2017ParserKW_ENUM, SV2017ParserKW_EVENT, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LOCAL, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_SAMPLE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_UNION, SV2017ParserKW_VIRTUAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4619)
			p.Data_type()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IEnum_name_declarationContext is an interface to support dynamic dispatch.
type IEnum_name_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnum_name_declarationContext differentiates from other interfaces.
	IsEnum_name_declarationContext()
}

type Enum_name_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnum_name_declarationContext() *Enum_name_declarationContext {
	var p = new(Enum_name_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_enum_name_declaration
	return p
}

func (*Enum_name_declarationContext) IsEnum_name_declarationContext() {}

func NewEnum_name_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Enum_name_declarationContext {
	var p = new(Enum_name_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_enum_name_declaration

	return p
}

func (s *Enum_name_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Enum_name_declarationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Enum_name_declarationContext) LSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLSQUARE_BR, 0)
}

func (s *Enum_name_declarationContext) AllIntegral_number() []IIntegral_numberContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIntegral_numberContext)(nil)).Elem())
	var tst = make([]IIntegral_numberContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIntegral_numberContext)
		}
	}

	return tst
}

func (s *Enum_name_declarationContext) Integral_number(i int) IIntegral_numberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntegral_numberContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIntegral_numberContext)
}

func (s *Enum_name_declarationContext) RSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRSQUARE_BR, 0)
}

func (s *Enum_name_declarationContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserASSIGN, 0)
}

func (s *Enum_name_declarationContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Enum_name_declarationContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Enum_name_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Enum_name_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Enum_name_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterEnum_name_declaration(s)
	}
}

func (s *Enum_name_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitEnum_name_declaration(s)
	}
}

func (p *SV2017Parser) Enum_name_declaration() (localctx IEnum_name_declarationContext) {
	localctx = NewEnum_name_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 638, SV2017ParserRULE_enum_name_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4622)
		p.Identifier()
	}
	p.SetState(4631)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserLSQUARE_BR {
		{
			p.SetState(4623)
			p.Match(SV2017ParserLSQUARE_BR)
		}
		{
			p.SetState(4624)
			p.Integral_number()
		}
		p.SetState(4627)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserCOLON {
			{
				p.SetState(4625)
				p.Match(SV2017ParserCOLON)
			}
			{
				p.SetState(4626)
				p.Integral_number()
			}

		}
		{
			p.SetState(4629)
			p.Match(SV2017ParserRSQUARE_BR)
		}

	}
	p.SetState(4635)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserASSIGN {
		{
			p.SetState(4633)
			p.Match(SV2017ParserASSIGN)
		}
		{
			p.SetState(4634)
			p.expression(0)
		}

	}

	return localctx
}

// IAssignment_pattern_expressionContext is an interface to support dynamic dispatch.
type IAssignment_pattern_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignment_pattern_expressionContext differentiates from other interfaces.
	IsAssignment_pattern_expressionContext()
}

type Assignment_pattern_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignment_pattern_expressionContext() *Assignment_pattern_expressionContext {
	var p = new(Assignment_pattern_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_assignment_pattern_expression
	return p
}

func (*Assignment_pattern_expressionContext) IsAssignment_pattern_expressionContext() {}

func NewAssignment_pattern_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Assignment_pattern_expressionContext {
	var p = new(Assignment_pattern_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_assignment_pattern_expression

	return p
}

func (s *Assignment_pattern_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Assignment_pattern_expressionContext) Assignment_pattern() IAssignment_patternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignment_patternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignment_patternContext)
}

func (s *Assignment_pattern_expressionContext) Assignment_pattern_expression_type() IAssignment_pattern_expression_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignment_pattern_expression_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignment_pattern_expression_typeContext)
}

func (s *Assignment_pattern_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Assignment_pattern_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Assignment_pattern_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterAssignment_pattern_expression(s)
	}
}

func (s *Assignment_pattern_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitAssignment_pattern_expression(s)
	}
}

func (p *SV2017Parser) Assignment_pattern_expression() (localctx IAssignment_pattern_expressionContext) {
	localctx = NewAssignment_pattern_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 640, SV2017ParserRULE_assignment_pattern_expression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4638)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-30)&-(0x1f+1)) == 0 && ((1<<uint((_la-30)))&((1<<(SV2017ParserKW_DOLAR_ROOT-30))|(1<<(SV2017ParserKW_DOLAR_UNIT-30))|(1<<(SV2017ParserKW_BYTE-30)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || _la == SV2017ParserKW_TYPE || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
		{
			p.SetState(4637)
			p.Assignment_pattern_expression_type()
		}

	}
	{
		p.SetState(4640)
		p.Assignment_pattern()
	}

	return localctx
}

// IAssignment_pattern_expression_typeContext is an interface to support dynamic dispatch.
type IAssignment_pattern_expression_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignment_pattern_expression_typeContext differentiates from other interfaces.
	IsAssignment_pattern_expression_typeContext()
}

type Assignment_pattern_expression_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignment_pattern_expression_typeContext() *Assignment_pattern_expression_typeContext {
	var p = new(Assignment_pattern_expression_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_assignment_pattern_expression_type
	return p
}

func (*Assignment_pattern_expression_typeContext) IsAssignment_pattern_expression_typeContext() {}

func NewAssignment_pattern_expression_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Assignment_pattern_expression_typeContext {
	var p = new(Assignment_pattern_expression_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_assignment_pattern_expression_type

	return p
}

func (s *Assignment_pattern_expression_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Assignment_pattern_expression_typeContext) Package_or_class_scoped_path() IPackage_or_class_scoped_pathContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackage_or_class_scoped_pathContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackage_or_class_scoped_pathContext)
}

func (s *Assignment_pattern_expression_typeContext) Integer_atom_type() IInteger_atom_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInteger_atom_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInteger_atom_typeContext)
}

func (s *Assignment_pattern_expression_typeContext) Type_reference() IType_referenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_referenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_referenceContext)
}

func (s *Assignment_pattern_expression_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Assignment_pattern_expression_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Assignment_pattern_expression_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterAssignment_pattern_expression_type(s)
	}
}

func (s *Assignment_pattern_expression_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitAssignment_pattern_expression_type(s)
	}
}

func (p *SV2017Parser) Assignment_pattern_expression_type() (localctx IAssignment_pattern_expression_typeContext) {
	localctx = NewAssignment_pattern_expression_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 642, SV2017ParserRULE_assignment_pattern_expression_type)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4645)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_LOCAL, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_SAMPLE, SV2017ParserKW_STD, SV2017ParserKW_SUPER, SV2017ParserKW_THIS, SV2017ParserKW_TYPE_OPTION, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4642)
			p.Package_or_class_scoped_path()
		}

	case SV2017ParserKW_BYTE, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LONGINT, SV2017ParserKW_SHORTINT, SV2017ParserKW_TIME:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4643)
			p.Integer_atom_type()
		}

	case SV2017ParserKW_TYPE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4644)
			p.Type_reference()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// INet_lvalueContext is an interface to support dynamic dispatch.
type INet_lvalueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNet_lvalueContext differentiates from other interfaces.
	IsNet_lvalueContext()
}

type Net_lvalueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNet_lvalueContext() *Net_lvalueContext {
	var p = new(Net_lvalueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_net_lvalue
	return p
}

func (*Net_lvalueContext) IsNet_lvalueContext() {}

func NewNet_lvalueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Net_lvalueContext {
	var p = new(Net_lvalueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_net_lvalue

	return p
}

func (s *Net_lvalueContext) GetParser() antlr.Parser { return s.parser }

func (s *Net_lvalueContext) Variable_lvalue() IVariable_lvalueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_lvalueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_lvalueContext)
}

func (s *Net_lvalueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Net_lvalueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Net_lvalueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterNet_lvalue(s)
	}
}

func (s *Net_lvalueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitNet_lvalue(s)
	}
}

func (p *SV2017Parser) Net_lvalue() (localctx INet_lvalueContext) {
	localctx = NewNet_lvalueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 644, SV2017ParserRULE_net_lvalue)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4647)
		p.Variable_lvalue()
	}

	return localctx
}

// IVariable_lvalueContext is an interface to support dynamic dispatch.
type IVariable_lvalueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariable_lvalueContext differentiates from other interfaces.
	IsVariable_lvalueContext()
}

type Variable_lvalueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariable_lvalueContext() *Variable_lvalueContext {
	var p = new(Variable_lvalueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_variable_lvalue
	return p
}

func (*Variable_lvalueContext) IsVariable_lvalueContext() {}

func NewVariable_lvalueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Variable_lvalueContext {
	var p = new(Variable_lvalueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_variable_lvalue

	return p
}

func (s *Variable_lvalueContext) GetParser() antlr.Parser { return s.parser }

func (s *Variable_lvalueContext) CopyFrom(ctx *Variable_lvalueContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Variable_lvalueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Variable_lvalueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type VarLStreamConcatContext struct {
	*Variable_lvalueContext
}

func NewVarLStreamConcatContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *VarLStreamConcatContext {
	var p = new(VarLStreamConcatContext)

	p.Variable_lvalueContext = NewEmptyVariable_lvalueContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Variable_lvalueContext))

	return p
}

func (s *VarLStreamConcatContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VarLStreamConcatContext) Streaming_concatenation() IStreaming_concatenationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStreaming_concatenationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStreaming_concatenationContext)
}

func (s *VarLStreamConcatContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterVarLStreamConcat(s)
	}
}

func (s *VarLStreamConcatContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitVarLStreamConcat(s)
	}
}

type VarLPathContext struct {
	*Variable_lvalueContext
}

func NewVarLPathContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *VarLPathContext {
	var p = new(VarLPathContext)

	p.Variable_lvalueContext = NewEmptyVariable_lvalueContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Variable_lvalueContext))

	return p
}

func (s *VarLPathContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VarLPathContext) Package_or_class_scoped_hier_id_with_select() IPackage_or_class_scoped_hier_id_with_selectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackage_or_class_scoped_hier_id_with_selectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackage_or_class_scoped_hier_id_with_selectContext)
}

func (s *VarLPathContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterVarLPath(s)
	}
}

func (s *VarLPathContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitVarLPath(s)
	}
}

type VarLConcatContext struct {
	*Variable_lvalueContext
}

func NewVarLConcatContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *VarLConcatContext {
	var p = new(VarLConcatContext)

	p.Variable_lvalueContext = NewEmptyVariable_lvalueContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Variable_lvalueContext))

	return p
}

func (s *VarLConcatContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VarLConcatContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLBRACE, 0)
}

func (s *VarLConcatContext) AllVariable_lvalue() []IVariable_lvalueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariable_lvalueContext)(nil)).Elem())
	var tst = make([]IVariable_lvalueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariable_lvalueContext)
		}
	}

	return tst
}

func (s *VarLConcatContext) Variable_lvalue(i int) IVariable_lvalueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_lvalueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariable_lvalueContext)
}

func (s *VarLConcatContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRBRACE, 0)
}

func (s *VarLConcatContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *VarLConcatContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *VarLConcatContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterVarLConcat(s)
	}
}

func (s *VarLConcatContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitVarLConcat(s)
	}
}

type VarLAssignContext struct {
	*Variable_lvalueContext
}

func NewVarLAssignContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *VarLAssignContext {
	var p = new(VarLAssignContext)

	p.Variable_lvalueContext = NewEmptyVariable_lvalueContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Variable_lvalueContext))

	return p
}

func (s *VarLAssignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VarLAssignContext) Assignment_pattern_variable_lvalue() IAssignment_pattern_variable_lvalueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignment_pattern_variable_lvalueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignment_pattern_variable_lvalueContext)
}

func (s *VarLAssignContext) Assignment_pattern_expression_type() IAssignment_pattern_expression_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignment_pattern_expression_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignment_pattern_expression_typeContext)
}

func (s *VarLAssignContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterVarLAssign(s)
	}
}

func (s *VarLAssignContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitVarLAssign(s)
	}
}

func (p *SV2017Parser) Variable_lvalue() (localctx IVariable_lvalueContext) {
	localctx = NewVariable_lvalueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 646, SV2017ParserRULE_variable_lvalue)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4666)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 537, p.GetParserRuleContext()) {
	case 1:
		localctx = NewVarLConcatContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4649)
			p.Match(SV2017ParserLBRACE)
		}
		{
			p.SetState(4650)
			p.Variable_lvalue()
		}
		p.SetState(4655)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserCOMMA {
			{
				p.SetState(4651)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(4652)
				p.Variable_lvalue()
			}

			p.SetState(4657)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(4658)
			p.Match(SV2017ParserRBRACE)
		}

	case 2:
		localctx = NewVarLPathContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4660)
			p.Package_or_class_scoped_hier_id_with_select()
		}

	case 3:
		localctx = NewVarLAssignContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		p.SetState(4662)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-30)&-(0x1f+1)) == 0 && ((1<<uint((_la-30)))&((1<<(SV2017ParserKW_DOLAR_ROOT-30))|(1<<(SV2017ParserKW_DOLAR_UNIT-30))|(1<<(SV2017ParserKW_BYTE-30)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || _la == SV2017ParserKW_TYPE || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
			{
				p.SetState(4661)
				p.Assignment_pattern_expression_type()
			}

		}
		{
			p.SetState(4664)
			p.Assignment_pattern_variable_lvalue()
		}

	case 4:
		localctx = NewVarLStreamConcatContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4665)
			p.Streaming_concatenation()
		}

	}

	return localctx
}

// ISolve_before_listContext is an interface to support dynamic dispatch.
type ISolve_before_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSolve_before_listContext differentiates from other interfaces.
	IsSolve_before_listContext()
}

type Solve_before_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySolve_before_listContext() *Solve_before_listContext {
	var p = new(Solve_before_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_solve_before_list
	return p
}

func (*Solve_before_listContext) IsSolve_before_listContext() {}

func NewSolve_before_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Solve_before_listContext {
	var p = new(Solve_before_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_solve_before_list

	return p
}

func (s *Solve_before_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Solve_before_listContext) AllPrimary() []IPrimaryContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPrimaryContext)(nil)).Elem())
	var tst = make([]IPrimaryContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPrimaryContext)
		}
	}

	return tst
}

func (s *Solve_before_listContext) Primary(i int) IPrimaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPrimaryContext)
}

func (s *Solve_before_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Solve_before_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Solve_before_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Solve_before_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Solve_before_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterSolve_before_list(s)
	}
}

func (s *Solve_before_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitSolve_before_list(s)
	}
}

func (p *SV2017Parser) Solve_before_list() (localctx ISolve_before_listContext) {
	localctx = NewSolve_before_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 648, SV2017ParserRULE_solve_before_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4668)
		p.primary(0)
	}
	p.SetState(4673)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserCOMMA {
		{
			p.SetState(4669)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(4670)
			p.primary(0)
		}

		p.SetState(4675)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IConstraint_block_itemContext is an interface to support dynamic dispatch.
type IConstraint_block_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstraint_block_itemContext differentiates from other interfaces.
	IsConstraint_block_itemContext()
}

type Constraint_block_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstraint_block_itemContext() *Constraint_block_itemContext {
	var p = new(Constraint_block_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_constraint_block_item
	return p
}

func (*Constraint_block_itemContext) IsConstraint_block_itemContext() {}

func NewConstraint_block_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Constraint_block_itemContext {
	var p = new(Constraint_block_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_constraint_block_item

	return p
}

func (s *Constraint_block_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Constraint_block_itemContext) KW_SOLVE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_SOLVE, 0)
}

func (s *Constraint_block_itemContext) AllSolve_before_list() []ISolve_before_listContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISolve_before_listContext)(nil)).Elem())
	var tst = make([]ISolve_before_listContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISolve_before_listContext)
		}
	}

	return tst
}

func (s *Constraint_block_itemContext) Solve_before_list(i int) ISolve_before_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISolve_before_listContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISolve_before_listContext)
}

func (s *Constraint_block_itemContext) KW_BEFORE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_BEFORE, 0)
}

func (s *Constraint_block_itemContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Constraint_block_itemContext) Constraint_expression() IConstraint_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstraint_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstraint_expressionContext)
}

func (s *Constraint_block_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Constraint_block_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Constraint_block_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterConstraint_block_item(s)
	}
}

func (s *Constraint_block_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitConstraint_block_item(s)
	}
}

func (p *SV2017Parser) Constraint_block_item() (localctx IConstraint_block_itemContext) {
	localctx = NewConstraint_block_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 650, SV2017ParserRULE_constraint_block_item)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4683)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_SOLVE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4676)
			p.Match(SV2017ParserKW_SOLVE)
		}
		{
			p.SetState(4677)
			p.Solve_before_list()
		}
		{
			p.SetState(4678)
			p.Match(SV2017ParserKW_BEFORE)
		}
		{
			p.SetState(4679)
			p.Solve_before_list()
		}
		{
			p.SetState(4680)
			p.Match(SV2017ParserSEMI)
		}

	case SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_FATAL, SV2017ParserKW_DOLAR_FULLSKEW, SV2017ParserKW_DOLAR_HOLD, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_NOCHANGE, SV2017ParserKW_DOLAR_PERIOD, SV2017ParserKW_DOLAR_RECOVERY, SV2017ParserKW_DOLAR_RECREM, SV2017ParserKW_DOLAR_REMOVAL, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_SETUP, SV2017ParserKW_DOLAR_SETUPHOLD, SV2017ParserKW_DOLAR_SKEW, SV2017ParserKW_DOLAR_TIMESKEW, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_DOLAR_WARNING, SV2017ParserKW_DOLAR_WIDTH, SV2017ParserKW_BIT, SV2017ParserKW_BYTE, SV2017ParserKW_CONST, SV2017ParserKW_DISABLE, SV2017ParserKW_FOREACH, SV2017ParserKW_IF, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LOCAL, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_NULL, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_SAMPLE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_SOFT, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_SUPER, SV2017ParserKW_TAGGED, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_UNIQUE, SV2017ParserKW_UNSIGNED, SV2017ParserTIME_LITERAL, SV2017ParserANY_BASED_NUMBER, SV2017ParserBASED_NUMBER_WITH_SIZE, SV2017ParserREAL_NUMBER_WITH_EXP, SV2017ParserFIXED_POINT_NUMBER, SV2017ParserUNSIGNED_NUMBER, SV2017ParserUNBASED_UNSIZED_LITERAL, SV2017ParserSTRING_LITERAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSYSTEM_TF_IDENTIFIER, SV2017ParserLPAREN, SV2017ParserLBRACE, SV2017ParserAPOSTROPHE_LBRACE, SV2017ParserDOLAR, SV2017ParserNOT, SV2017ParserNEG, SV2017ParserNAND, SV2017ParserNOR, SV2017ParserXOR, SV2017ParserNXOR, SV2017ParserXORN, SV2017ParserPLUS, SV2017ParserMINUS, SV2017ParserAMPERSAND, SV2017ParserBAR, SV2017ParserINCR, SV2017ParserDECR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4682)
			p.Constraint_expression()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IConstraint_expressionContext is an interface to support dynamic dispatch.
type IConstraint_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstraint_expressionContext differentiates from other interfaces.
	IsConstraint_expressionContext()
}

type Constraint_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstraint_expressionContext() *Constraint_expressionContext {
	var p = new(Constraint_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_constraint_expression
	return p
}

func (*Constraint_expressionContext) IsConstraint_expressionContext() {}

func NewConstraint_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Constraint_expressionContext {
	var p = new(Constraint_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_constraint_expression

	return p
}

func (s *Constraint_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Constraint_expressionContext) KW_IF() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_IF, 0)
}

func (s *Constraint_expressionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Constraint_expressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Constraint_expressionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Constraint_expressionContext) AllConstraint_set() []IConstraint_setContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConstraint_setContext)(nil)).Elem())
	var tst = make([]IConstraint_setContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConstraint_setContext)
		}
	}

	return tst
}

func (s *Constraint_expressionContext) Constraint_set(i int) IConstraint_setContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstraint_setContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConstraint_setContext)
}

func (s *Constraint_expressionContext) KW_ELSE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ELSE, 0)
}

func (s *Constraint_expressionContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Constraint_expressionContext) KW_DISABLE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DISABLE, 0)
}

func (s *Constraint_expressionContext) KW_SOFT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_SOFT, 0)
}

func (s *Constraint_expressionContext) Primary() IPrimaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryContext)
}

func (s *Constraint_expressionContext) Expression_or_dist() IExpression_or_distContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_or_distContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_or_distContext)
}

func (s *Constraint_expressionContext) Uniqueness_constraint() IUniqueness_constraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUniqueness_constraintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUniqueness_constraintContext)
}

func (s *Constraint_expressionContext) KW_FOREACH() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_FOREACH, 0)
}

func (s *Constraint_expressionContext) LSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLSQUARE_BR, 0)
}

func (s *Constraint_expressionContext) Loop_variables() ILoop_variablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoop_variablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoop_variablesContext)
}

func (s *Constraint_expressionContext) RSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRSQUARE_BR, 0)
}

func (s *Constraint_expressionContext) ARROW() antlr.TerminalNode {
	return s.GetToken(SV2017ParserARROW, 0)
}

func (s *Constraint_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Constraint_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Constraint_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterConstraint_expression(s)
	}
}

func (s *Constraint_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitConstraint_expression(s)
	}
}

func (p *SV2017Parser) Constraint_expression() (localctx IConstraint_expressionContext) {
	localctx = NewConstraint_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 652, SV2017ParserRULE_constraint_expression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4722)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 544, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4685)
			p.Match(SV2017ParserKW_IF)
		}
		{
			p.SetState(4686)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(4687)
			p.expression(0)
		}
		{
			p.SetState(4688)
			p.Match(SV2017ParserRPAREN)
		}
		{
			p.SetState(4689)
			p.Constraint_set()
		}
		p.SetState(4693)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 540, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(4690)
				p.Match(SV2017ParserKW_ELSE)
			}
			{
				p.SetState(4691)
				p.Constraint_set()
			}

		case 2:

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(4703)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SV2017ParserKW_DISABLE:
			{
				p.SetState(4695)
				p.Match(SV2017ParserKW_DISABLE)
			}
			{
				p.SetState(4696)
				p.Match(SV2017ParserKW_SOFT)
			}
			{
				p.SetState(4697)
				p.primary(0)
			}

		case SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_FATAL, SV2017ParserKW_DOLAR_FULLSKEW, SV2017ParserKW_DOLAR_HOLD, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_NOCHANGE, SV2017ParserKW_DOLAR_PERIOD, SV2017ParserKW_DOLAR_RECOVERY, SV2017ParserKW_DOLAR_RECREM, SV2017ParserKW_DOLAR_REMOVAL, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_SETUP, SV2017ParserKW_DOLAR_SETUPHOLD, SV2017ParserKW_DOLAR_SKEW, SV2017ParserKW_DOLAR_TIMESKEW, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_DOLAR_WARNING, SV2017ParserKW_DOLAR_WIDTH, SV2017ParserKW_BIT, SV2017ParserKW_BYTE, SV2017ParserKW_CONST, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LOCAL, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_NULL, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_SAMPLE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_SOFT, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_SUPER, SV2017ParserKW_TAGGED, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_UNSIGNED, SV2017ParserTIME_LITERAL, SV2017ParserANY_BASED_NUMBER, SV2017ParserBASED_NUMBER_WITH_SIZE, SV2017ParserREAL_NUMBER_WITH_EXP, SV2017ParserFIXED_POINT_NUMBER, SV2017ParserUNSIGNED_NUMBER, SV2017ParserUNBASED_UNSIZED_LITERAL, SV2017ParserSTRING_LITERAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSYSTEM_TF_IDENTIFIER, SV2017ParserLPAREN, SV2017ParserLBRACE, SV2017ParserAPOSTROPHE_LBRACE, SV2017ParserDOLAR, SV2017ParserNOT, SV2017ParserNEG, SV2017ParserNAND, SV2017ParserNOR, SV2017ParserXOR, SV2017ParserNXOR, SV2017ParserXORN, SV2017ParserPLUS, SV2017ParserMINUS, SV2017ParserAMPERSAND, SV2017ParserBAR, SV2017ParserINCR, SV2017ParserDECR:
			p.SetState(4699)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SV2017ParserKW_SOFT {
				{
					p.SetState(4698)
					p.Match(SV2017ParserKW_SOFT)
				}

			}
			{
				p.SetState(4701)
				p.Expression_or_dist()
			}

		case SV2017ParserKW_UNIQUE:
			{
				p.SetState(4702)
				p.Uniqueness_constraint()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(4705)
			p.Match(SV2017ParserSEMI)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(4718)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SV2017ParserKW_FOREACH:
			{
				p.SetState(4707)
				p.Match(SV2017ParserKW_FOREACH)
			}
			{
				p.SetState(4708)
				p.Match(SV2017ParserLPAREN)
			}
			{
				p.SetState(4709)
				p.primary(0)
			}
			{
				p.SetState(4710)
				p.Match(SV2017ParserLSQUARE_BR)
			}
			{
				p.SetState(4711)
				p.Loop_variables()
			}
			{
				p.SetState(4712)
				p.Match(SV2017ParserRSQUARE_BR)
			}
			{
				p.SetState(4713)
				p.Match(SV2017ParserRPAREN)
			}

		case SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_FATAL, SV2017ParserKW_DOLAR_FULLSKEW, SV2017ParserKW_DOLAR_HOLD, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_NOCHANGE, SV2017ParserKW_DOLAR_PERIOD, SV2017ParserKW_DOLAR_RECOVERY, SV2017ParserKW_DOLAR_RECREM, SV2017ParserKW_DOLAR_REMOVAL, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_SETUP, SV2017ParserKW_DOLAR_SETUPHOLD, SV2017ParserKW_DOLAR_SKEW, SV2017ParserKW_DOLAR_TIMESKEW, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_DOLAR_WARNING, SV2017ParserKW_DOLAR_WIDTH, SV2017ParserKW_BIT, SV2017ParserKW_BYTE, SV2017ParserKW_CONST, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LOCAL, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_NULL, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_SAMPLE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_SUPER, SV2017ParserKW_TAGGED, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_UNSIGNED, SV2017ParserTIME_LITERAL, SV2017ParserANY_BASED_NUMBER, SV2017ParserBASED_NUMBER_WITH_SIZE, SV2017ParserREAL_NUMBER_WITH_EXP, SV2017ParserFIXED_POINT_NUMBER, SV2017ParserUNSIGNED_NUMBER, SV2017ParserUNBASED_UNSIZED_LITERAL, SV2017ParserSTRING_LITERAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSYSTEM_TF_IDENTIFIER, SV2017ParserLPAREN, SV2017ParserLBRACE, SV2017ParserAPOSTROPHE_LBRACE, SV2017ParserDOLAR, SV2017ParserNOT, SV2017ParserNEG, SV2017ParserNAND, SV2017ParserNOR, SV2017ParserXOR, SV2017ParserNXOR, SV2017ParserXORN, SV2017ParserPLUS, SV2017ParserMINUS, SV2017ParserAMPERSAND, SV2017ParserBAR, SV2017ParserINCR, SV2017ParserDECR:
			{
				p.SetState(4715)
				p.expression(0)
			}
			{
				p.SetState(4716)
				p.Match(SV2017ParserARROW)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(4720)
			p.Constraint_set()
		}

	}

	return localctx
}

// IUniqueness_constraintContext is an interface to support dynamic dispatch.
type IUniqueness_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUniqueness_constraintContext differentiates from other interfaces.
	IsUniqueness_constraintContext()
}

type Uniqueness_constraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUniqueness_constraintContext() *Uniqueness_constraintContext {
	var p = new(Uniqueness_constraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_uniqueness_constraint
	return p
}

func (*Uniqueness_constraintContext) IsUniqueness_constraintContext() {}

func NewUniqueness_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Uniqueness_constraintContext {
	var p = new(Uniqueness_constraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_uniqueness_constraint

	return p
}

func (s *Uniqueness_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Uniqueness_constraintContext) KW_UNIQUE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_UNIQUE, 0)
}

func (s *Uniqueness_constraintContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLBRACE, 0)
}

func (s *Uniqueness_constraintContext) Open_range_list() IOpen_range_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOpen_range_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOpen_range_listContext)
}

func (s *Uniqueness_constraintContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRBRACE, 0)
}

func (s *Uniqueness_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Uniqueness_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Uniqueness_constraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterUniqueness_constraint(s)
	}
}

func (s *Uniqueness_constraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitUniqueness_constraint(s)
	}
}

func (p *SV2017Parser) Uniqueness_constraint() (localctx IUniqueness_constraintContext) {
	localctx = NewUniqueness_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 654, SV2017ParserRULE_uniqueness_constraint)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4724)
		p.Match(SV2017ParserKW_UNIQUE)
	}
	{
		p.SetState(4725)
		p.Match(SV2017ParserLBRACE)
	}
	{
		p.SetState(4726)
		p.Open_range_list()
	}
	{
		p.SetState(4727)
		p.Match(SV2017ParserRBRACE)
	}

	return localctx
}

// IConstraint_setContext is an interface to support dynamic dispatch.
type IConstraint_setContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstraint_setContext differentiates from other interfaces.
	IsConstraint_setContext()
}

type Constraint_setContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstraint_setContext() *Constraint_setContext {
	var p = new(Constraint_setContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_constraint_set
	return p
}

func (*Constraint_setContext) IsConstraint_setContext() {}

func NewConstraint_setContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Constraint_setContext {
	var p = new(Constraint_setContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_constraint_set

	return p
}

func (s *Constraint_setContext) GetParser() antlr.Parser { return s.parser }

func (s *Constraint_setContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLBRACE, 0)
}

func (s *Constraint_setContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRBRACE, 0)
}

func (s *Constraint_setContext) AllConstraint_expression() []IConstraint_expressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConstraint_expressionContext)(nil)).Elem())
	var tst = make([]IConstraint_expressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConstraint_expressionContext)
		}
	}

	return tst
}

func (s *Constraint_setContext) Constraint_expression(i int) IConstraint_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstraint_expressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConstraint_expressionContext)
}

func (s *Constraint_setContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Constraint_setContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Constraint_setContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterConstraint_set(s)
	}
}

func (s *Constraint_setContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitConstraint_set(s)
	}
}

func (p *SV2017Parser) Constraint_set() (localctx IConstraint_setContext) {
	localctx = NewConstraint_setContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 656, SV2017ParserRULE_constraint_set)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4738)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 546, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4729)
			p.Match(SV2017ParserLBRACE)
		}
		p.SetState(4733)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56))|(1<<(SV2017ParserKW_DISABLE-56)))) != 0) || (((_la-118)&-(0x1f+1)) == 0 && ((1<<uint((_la-118)))&((1<<(SV2017ParserKW_FOREACH-118))|(1<<(SV2017ParserKW_IF-118))|(1<<(SV2017ParserKW_INT-118))|(1<<(SV2017ParserKW_INTEGER-118)))) != 0) || (((_la-152)&-(0x1f+1)) == 0 && ((1<<uint((_la-152)))&((1<<(SV2017ParserKW_LOCAL-152))|(1<<(SV2017ParserKW_LOGIC-152))|(1<<(SV2017ParserKW_LONGINT-152))|(1<<(SV2017ParserKW_NULL-152))|(1<<(SV2017ParserKW_OPTION-152)))) != 0) || (((_la-197)&-(0x1f+1)) == 0 && ((1<<uint((_la-197)))&((1<<(SV2017ParserKW_RANDOMIZE-197))|(1<<(SV2017ParserKW_REAL-197))|(1<<(SV2017ParserKW_REALTIME-197))|(1<<(SV2017ParserKW_REG-197))|(1<<(SV2017ParserKW_SAMPLE-197))|(1<<(SV2017ParserKW_SHORTINT-197))|(1<<(SV2017ParserKW_SHORTREAL-197))|(1<<(SV2017ParserKW_SIGNED-197))|(1<<(SV2017ParserKW_SOFT-197)))) != 0) || (((_la-232)&-(0x1f+1)) == 0 && ((1<<uint((_la-232)))&((1<<(SV2017ParserKW_STD-232))|(1<<(SV2017ParserKW_STRING-232))|(1<<(SV2017ParserKW_SUPER-232))|(1<<(SV2017ParserKW_TAGGED-232))|(1<<(SV2017ParserKW_THIS-232))|(1<<(SV2017ParserKW_TIME-232))|(1<<(SV2017ParserKW_TYPE-232))|(1<<(SV2017ParserKW_TYPE_OPTION-232)))) != 0) || (((_la-264)&-(0x1f+1)) == 0 && ((1<<uint((_la-264)))&((1<<(SV2017ParserKW_UNIQUE-264))|(1<<(SV2017ParserKW_UNSIGNED-264))|(1<<(SV2017ParserTIME_LITERAL-264))|(1<<(SV2017ParserANY_BASED_NUMBER-264))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-264))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-264))|(1<<(SV2017ParserFIXED_POINT_NUMBER-264)))) != 0) || (((_la-296)&-(0x1f+1)) == 0 && ((1<<uint((_la-296)))&((1<<(SV2017ParserUNSIGNED_NUMBER-296))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-296))|(1<<(SV2017ParserSTRING_LITERAL-296))|(1<<(SV2017ParserC_IDENTIFIER-296))|(1<<(SV2017ParserTICK_IDENTIFIER-296))|(1<<(SV2017ParserESCAPED_IDENTIFIER-296))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-296))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-296))|(1<<(SV2017ParserLPAREN-296))|(1<<(SV2017ParserLBRACE-296))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-296))|(1<<(SV2017ParserDOLAR-296))|(1<<(SV2017ParserNOT-296))|(1<<(SV2017ParserNEG-296))|(1<<(SV2017ParserNAND-296))|(1<<(SV2017ParserNOR-296))|(1<<(SV2017ParserXOR-296))|(1<<(SV2017ParserNXOR-296))|(1<<(SV2017ParserXORN-296)))) != 0) || (((_la-355)&-(0x1f+1)) == 0 && ((1<<uint((_la-355)))&((1<<(SV2017ParserPLUS-355))|(1<<(SV2017ParserMINUS-355))|(1<<(SV2017ParserAMPERSAND-355))|(1<<(SV2017ParserBAR-355))|(1<<(SV2017ParserINCR-355))|(1<<(SV2017ParserDECR-355)))) != 0) {
			{
				p.SetState(4730)
				p.Constraint_expression()
			}

			p.SetState(4735)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(4736)
			p.Match(SV2017ParserRBRACE)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4737)
			p.Constraint_expression()
		}

	}

	return localctx
}

// IRandomize_callContext is an interface to support dynamic dispatch.
type IRandomize_callContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRandomize_callContext differentiates from other interfaces.
	IsRandomize_callContext()
}

type Randomize_callContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRandomize_callContext() *Randomize_callContext {
	var p = new(Randomize_callContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_randomize_call
	return p
}

func (*Randomize_callContext) IsRandomize_callContext() {}

func NewRandomize_callContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Randomize_callContext {
	var p = new(Randomize_callContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_randomize_call

	return p
}

func (s *Randomize_callContext) GetParser() antlr.Parser { return s.parser }

func (s *Randomize_callContext) KW_RANDOMIZE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_RANDOMIZE, 0)
}

func (s *Randomize_callContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Randomize_callContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Randomize_callContext) AllLPAREN() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserLPAREN)
}

func (s *Randomize_callContext) LPAREN(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, i)
}

func (s *Randomize_callContext) AllRPAREN() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserRPAREN)
}

func (s *Randomize_callContext) RPAREN(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, i)
}

func (s *Randomize_callContext) KW_WITH() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_WITH, 0)
}

func (s *Randomize_callContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLBRACE, 0)
}

func (s *Randomize_callContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRBRACE, 0)
}

func (s *Randomize_callContext) KW_NULL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_NULL, 0)
}

func (s *Randomize_callContext) AllList_of_arguments() []IList_of_argumentsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IList_of_argumentsContext)(nil)).Elem())
	var tst = make([]IList_of_argumentsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IList_of_argumentsContext)
		}
	}

	return tst
}

func (s *Randomize_callContext) List_of_arguments(i int) IList_of_argumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_argumentsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IList_of_argumentsContext)
}

func (s *Randomize_callContext) AllConstraint_block_item() []IConstraint_block_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConstraint_block_itemContext)(nil)).Elem())
	var tst = make([]IConstraint_block_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConstraint_block_itemContext)
		}
	}

	return tst
}

func (s *Randomize_callContext) Constraint_block_item(i int) IConstraint_block_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstraint_block_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConstraint_block_itemContext)
}

func (s *Randomize_callContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Randomize_callContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Randomize_callContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterRandomize_call(s)
	}
}

func (s *Randomize_callContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitRandomize_call(s)
	}
}

func (p *SV2017Parser) Randomize_call() (localctx IRandomize_callContext) {
	localctx = NewRandomize_callContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 658, SV2017ParserRULE_randomize_call)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4740)
		p.Match(SV2017ParserKW_RANDOMIZE)
	}
	p.SetState(4744)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 547, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(4741)
				p.Attribute_instance()
			}

		}
		p.SetState(4746)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 547, p.GetParserRuleContext())
	}
	p.SetState(4753)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 549, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4747)
			p.Match(SV2017ParserLPAREN)
		}
		p.SetState(4750)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 548, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4748)
				p.Match(SV2017ParserKW_NULL)
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 548, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(4749)
				p.List_of_arguments()
			}

		}
		{
			p.SetState(4752)
			p.Match(SV2017ParserRPAREN)
		}

	}
	p.SetState(4771)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 553, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4755)
			p.Match(SV2017ParserKW_WITH)
		}
		p.SetState(4761)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserLPAREN {
			{
				p.SetState(4756)
				p.Match(SV2017ParserLPAREN)
			}
			p.SetState(4758)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TAGGED-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserTIME_LITERAL-260)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(SV2017ParserANY_BASED_NUMBER-292))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-292))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-292))|(1<<(SV2017ParserFIXED_POINT_NUMBER-292))|(1<<(SV2017ParserUNSIGNED_NUMBER-292))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-292))|(1<<(SV2017ParserSTRING_LITERAL-292))|(1<<(SV2017ParserC_IDENTIFIER-292))|(1<<(SV2017ParserTICK_IDENTIFIER-292))|(1<<(SV2017ParserESCAPED_IDENTIFIER-292))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-292))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-292))|(1<<(SV2017ParserLPAREN-292))|(1<<(SV2017ParserLBRACE-292))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-292))|(1<<(SV2017ParserDOLAR-292))|(1<<(SV2017ParserNOT-292))|(1<<(SV2017ParserNEG-292))|(1<<(SV2017ParserNAND-292))|(1<<(SV2017ParserNOR-292)))) != 0) || (((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324))|(1<<(SV2017ParserCOMMA-324))|(1<<(SV2017ParserDOT-324))|(1<<(SV2017ParserPLUS-324)))) != 0) || (((_la-356)&-(0x1f+1)) == 0 && ((1<<uint((_la-356)))&((1<<(SV2017ParserMINUS-356))|(1<<(SV2017ParserAMPERSAND-356))|(1<<(SV2017ParserBAR-356))|(1<<(SV2017ParserINCR-356))|(1<<(SV2017ParserDECR-356)))) != 0) {
				{
					p.SetState(4757)
					p.List_of_arguments()
				}

			}
			{
				p.SetState(4760)
				p.Match(SV2017ParserRPAREN)
			}

		}
		{
			p.SetState(4763)
			p.Match(SV2017ParserLBRACE)
		}
		p.SetState(4767)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56))|(1<<(SV2017ParserKW_DISABLE-56)))) != 0) || (((_la-118)&-(0x1f+1)) == 0 && ((1<<uint((_la-118)))&((1<<(SV2017ParserKW_FOREACH-118))|(1<<(SV2017ParserKW_IF-118))|(1<<(SV2017ParserKW_INT-118))|(1<<(SV2017ParserKW_INTEGER-118)))) != 0) || (((_la-152)&-(0x1f+1)) == 0 && ((1<<uint((_la-152)))&((1<<(SV2017ParserKW_LOCAL-152))|(1<<(SV2017ParserKW_LOGIC-152))|(1<<(SV2017ParserKW_LONGINT-152))|(1<<(SV2017ParserKW_NULL-152))|(1<<(SV2017ParserKW_OPTION-152)))) != 0) || (((_la-197)&-(0x1f+1)) == 0 && ((1<<uint((_la-197)))&((1<<(SV2017ParserKW_RANDOMIZE-197))|(1<<(SV2017ParserKW_REAL-197))|(1<<(SV2017ParserKW_REALTIME-197))|(1<<(SV2017ParserKW_REG-197))|(1<<(SV2017ParserKW_SAMPLE-197))|(1<<(SV2017ParserKW_SHORTINT-197))|(1<<(SV2017ParserKW_SHORTREAL-197))|(1<<(SV2017ParserKW_SIGNED-197))|(1<<(SV2017ParserKW_SOFT-197))|(1<<(SV2017ParserKW_SOLVE-197)))) != 0) || (((_la-232)&-(0x1f+1)) == 0 && ((1<<uint((_la-232)))&((1<<(SV2017ParserKW_STD-232))|(1<<(SV2017ParserKW_STRING-232))|(1<<(SV2017ParserKW_SUPER-232))|(1<<(SV2017ParserKW_TAGGED-232))|(1<<(SV2017ParserKW_THIS-232))|(1<<(SV2017ParserKW_TIME-232))|(1<<(SV2017ParserKW_TYPE-232))|(1<<(SV2017ParserKW_TYPE_OPTION-232)))) != 0) || (((_la-264)&-(0x1f+1)) == 0 && ((1<<uint((_la-264)))&((1<<(SV2017ParserKW_UNIQUE-264))|(1<<(SV2017ParserKW_UNSIGNED-264))|(1<<(SV2017ParserTIME_LITERAL-264))|(1<<(SV2017ParserANY_BASED_NUMBER-264))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-264))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-264))|(1<<(SV2017ParserFIXED_POINT_NUMBER-264)))) != 0) || (((_la-296)&-(0x1f+1)) == 0 && ((1<<uint((_la-296)))&((1<<(SV2017ParserUNSIGNED_NUMBER-296))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-296))|(1<<(SV2017ParserSTRING_LITERAL-296))|(1<<(SV2017ParserC_IDENTIFIER-296))|(1<<(SV2017ParserTICK_IDENTIFIER-296))|(1<<(SV2017ParserESCAPED_IDENTIFIER-296))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-296))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-296))|(1<<(SV2017ParserLPAREN-296))|(1<<(SV2017ParserLBRACE-296))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-296))|(1<<(SV2017ParserDOLAR-296))|(1<<(SV2017ParserNOT-296))|(1<<(SV2017ParserNEG-296))|(1<<(SV2017ParserNAND-296))|(1<<(SV2017ParserNOR-296))|(1<<(SV2017ParserXOR-296))|(1<<(SV2017ParserNXOR-296))|(1<<(SV2017ParserXORN-296)))) != 0) || (((_la-355)&-(0x1f+1)) == 0 && ((1<<uint((_la-355)))&((1<<(SV2017ParserPLUS-355))|(1<<(SV2017ParserMINUS-355))|(1<<(SV2017ParserAMPERSAND-355))|(1<<(SV2017ParserBAR-355))|(1<<(SV2017ParserINCR-355))|(1<<(SV2017ParserDECR-355)))) != 0) {
			{
				p.SetState(4764)
				p.Constraint_block_item()
			}

			p.SetState(4769)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(4770)
			p.Match(SV2017ParserRBRACE)
		}

	}

	return localctx
}

// IModule_header_commonContext is an interface to support dynamic dispatch.
type IModule_header_commonContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModule_header_commonContext differentiates from other interfaces.
	IsModule_header_commonContext()
}

type Module_header_commonContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModule_header_commonContext() *Module_header_commonContext {
	var p = new(Module_header_commonContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_module_header_common
	return p
}

func (*Module_header_commonContext) IsModule_header_commonContext() {}

func NewModule_header_commonContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Module_header_commonContext {
	var p = new(Module_header_commonContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_module_header_common

	return p
}

func (s *Module_header_commonContext) GetParser() antlr.Parser { return s.parser }

func (s *Module_header_commonContext) Module_keyword() IModule_keywordContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModule_keywordContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModule_keywordContext)
}

func (s *Module_header_commonContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Module_header_commonContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Module_header_commonContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Module_header_commonContext) Lifetime() ILifetimeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILifetimeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILifetimeContext)
}

func (s *Module_header_commonContext) AllPackage_import_declaration() []IPackage_import_declarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPackage_import_declarationContext)(nil)).Elem())
	var tst = make([]IPackage_import_declarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPackage_import_declarationContext)
		}
	}

	return tst
}

func (s *Module_header_commonContext) Package_import_declaration(i int) IPackage_import_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackage_import_declarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPackage_import_declarationContext)
}

func (s *Module_header_commonContext) Parameter_port_list() IParameter_port_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameter_port_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameter_port_listContext)
}

func (s *Module_header_commonContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Module_header_commonContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Module_header_commonContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterModule_header_common(s)
	}
}

func (s *Module_header_commonContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitModule_header_common(s)
	}
}

func (p *SV2017Parser) Module_header_common() (localctx IModule_header_commonContext) {
	localctx = NewModule_header_commonContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 660, SV2017ParserRULE_module_header_common)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4776)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserTICK_IDENTIFIER || _la == SV2017ParserLPAREN {
		{
			p.SetState(4773)
			p.Attribute_instance()
		}

		p.SetState(4778)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(4779)
		p.Module_keyword()
	}
	p.SetState(4781)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_AUTOMATIC || _la == SV2017ParserKW_STATIC {
		{
			p.SetState(4780)
			p.Lifetime()
		}

	}
	{
		p.SetState(4783)
		p.Identifier()
	}
	p.SetState(4787)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserKW_IMPORT {
		{
			p.SetState(4784)
			p.Package_import_declaration()
		}

		p.SetState(4789)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(4791)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserHASH {
		{
			p.SetState(4790)
			p.Parameter_port_list()
		}

	}

	return localctx
}

// IModule_declarationContext is an interface to support dynamic dispatch.
type IModule_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModule_declarationContext differentiates from other interfaces.
	IsModule_declarationContext()
}

type Module_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModule_declarationContext() *Module_declarationContext {
	var p = new(Module_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_module_declaration
	return p
}

func (*Module_declarationContext) IsModule_declarationContext() {}

func NewModule_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Module_declarationContext {
	var p = new(Module_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_module_declaration

	return p
}

func (s *Module_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Module_declarationContext) KW_EXTERN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_EXTERN, 0)
}

func (s *Module_declarationContext) Module_header_common() IModule_header_commonContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModule_header_commonContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModule_header_commonContext)
}

func (s *Module_declarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Module_declarationContext) List_of_port_declarations() IList_of_port_declarationsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_port_declarationsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_port_declarationsContext)
}

func (s *Module_declarationContext) KW_ENDMODULE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ENDMODULE, 0)
}

func (s *Module_declarationContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Module_declarationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Module_declarationContext) Timeunits_declaration() ITimeunits_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITimeunits_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITimeunits_declarationContext)
}

func (s *Module_declarationContext) AllModule_item() []IModule_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IModule_itemContext)(nil)).Elem())
	var tst = make([]IModule_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IModule_itemContext)
		}
	}

	return tst
}

func (s *Module_declarationContext) Module_item(i int) IModule_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModule_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IModule_itemContext)
}

func (s *Module_declarationContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Module_declarationContext) DOT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOT, 0)
}

func (s *Module_declarationContext) MUL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserMUL, 0)
}

func (s *Module_declarationContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Module_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Module_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Module_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterModule_declaration(s)
	}
}

func (s *Module_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitModule_declaration(s)
	}
}

func (p *SV2017Parser) Module_declaration() (localctx IModule_declarationContext) {
	localctx = NewModule_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 662, SV2017ParserRULE_module_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4824)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_EXTERN:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4793)
			p.Match(SV2017ParserKW_EXTERN)
		}
		{
			p.SetState(4794)
			p.Module_header_common()
		}
		p.SetState(4796)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserLPAREN {
			{
				p.SetState(4795)
				p.List_of_port_declarations()
			}

		}
		{
			p.SetState(4798)
			p.Match(SV2017ParserSEMI)
		}

	case SV2017ParserKW_MACROMODULE, SV2017ParserKW_MODULE, SV2017ParserTICK_IDENTIFIER, SV2017ParserLPAREN:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4800)
			p.Module_header_common()
		}
		p.SetState(4806)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 559, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4801)
				p.List_of_port_declarations()
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 559, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(4802)
				p.Match(SV2017ParserLPAREN)
			}
			{
				p.SetState(4803)
				p.Match(SV2017ParserDOT)
			}
			{
				p.SetState(4804)
				p.Match(SV2017ParserMUL)
			}
			{
				p.SetState(4805)
				p.Match(SV2017ParserRPAREN)
			}

		}
		{
			p.SetState(4808)
			p.Match(SV2017ParserSEMI)
		}
		p.SetState(4810)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 560, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4809)
				p.Timeunits_declaration()
			}

		}
		p.SetState(4815)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_ALIAS-20))|(1<<(SV2017ParserKW_ALWAYS-20))|(1<<(SV2017ParserKW_ALWAYS_COMB-20))|(1<<(SV2017ParserKW_ALWAYS_FF-20))|(1<<(SV2017ParserKW_ALWAYS_LATCH-20))|(1<<(SV2017ParserKW_AND-20))|(1<<(SV2017ParserKW_ASSERT-20))|(1<<(SV2017ParserKW_ASSIGN-20))|(1<<(SV2017ParserKW_ASSUME-20))|(1<<(SV2017ParserKW_AUTOMATIC-20)))) != 0) || (((_la-53)&-(0x1f+1)) == 0 && ((1<<uint((_la-53)))&((1<<(SV2017ParserKW_BIND-53))|(1<<(SV2017ParserKW_BIT-53))|(1<<(SV2017ParserKW_BUF-53))|(1<<(SV2017ParserKW_BUFIF0-53))|(1<<(SV2017ParserKW_BUFIF1-53))|(1<<(SV2017ParserKW_BYTE-53))|(1<<(SV2017ParserKW_CASE-53))|(1<<(SV2017ParserKW_CHANDLE-53))|(1<<(SV2017ParserKW_CHECKER-53))|(1<<(SV2017ParserKW_CLASS-53))|(1<<(SV2017ParserKW_CLOCKING-53))|(1<<(SV2017ParserKW_CMOS-53))|(1<<(SV2017ParserKW_CONST-53))|(1<<(SV2017ParserKW_CONSTRAINT-53))|(1<<(SV2017ParserKW_COVER-53))|(1<<(SV2017ParserKW_COVERGROUP-53))|(1<<(SV2017ParserKW_DEFAULT-53))|(1<<(SV2017ParserKW_DEFPARAM-53)))) != 0) || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(SV2017ParserKW_ENUM-107))|(1<<(SV2017ParserKW_EVENT-107))|(1<<(SV2017ParserKW_EXPORT-107))|(1<<(SV2017ParserKW_EXTERN-107))|(1<<(SV2017ParserKW_FINAL-107))|(1<<(SV2017ParserKW_FOR-107))|(1<<(SV2017ParserKW_FUNCTION-107))|(1<<(SV2017ParserKW_GENERATE-107))|(1<<(SV2017ParserKW_GENVAR-107))|(1<<(SV2017ParserKW_GLOBAL-107))|(1<<(SV2017ParserKW_IF-107))|(1<<(SV2017ParserKW_IMPORT-107))|(1<<(SV2017ParserKW_INITIAL-107))|(1<<(SV2017ParserKW_INOUT-107))|(1<<(SV2017ParserKW_INPUT-107)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_INTERCONNECT-141))|(1<<(SV2017ParserKW_INTERFACE-141))|(1<<(SV2017ParserKW_LET-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOCALPARAM-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141))|(1<<(SV2017ParserKW_MACROMODULE-141))|(1<<(SV2017ParserKW_MODULE-141))|(1<<(SV2017ParserKW_NAND-141))|(1<<(SV2017ParserKW_NETTYPE-141))|(1<<(SV2017ParserKW_NMOS-141))|(1<<(SV2017ParserKW_NOR-141))|(1<<(SV2017ParserKW_NONE-141))|(1<<(SV2017ParserKW_NOT-141))|(1<<(SV2017ParserKW_NOTIF0-141))|(1<<(SV2017ParserKW_NOTIF1-141)))) != 0) || (((_la-174)&-(0x1f+1)) == 0 && ((1<<uint((_la-174)))&((1<<(SV2017ParserKW_OPTION-174))|(1<<(SV2017ParserKW_OR-174))|(1<<(SV2017ParserKW_OUTPUT-174))|(1<<(SV2017ParserKW_PARAMETER-174))|(1<<(SV2017ParserKW_PMOS-174))|(1<<(SV2017ParserKW_PROGRAM-174))|(1<<(SV2017ParserKW_PROPERTY-174))|(1<<(SV2017ParserKW_PULLDOWN-174))|(1<<(SV2017ParserKW_PULLUP-174))|(1<<(SV2017ParserKW_RANDOMIZE-174))|(1<<(SV2017ParserKW_RCMOS-174))|(1<<(SV2017ParserKW_REAL-174))|(1<<(SV2017ParserKW_REALTIME-174))|(1<<(SV2017ParserKW_REF-174))|(1<<(SV2017ParserKW_REG-174)))) != 0) || (((_la-207)&-(0x1f+1)) == 0 && ((1<<uint((_la-207)))&((1<<(SV2017ParserKW_RESTRICT-207))|(1<<(SV2017ParserKW_RNMOS-207))|(1<<(SV2017ParserKW_RPMOS-207))|(1<<(SV2017ParserKW_RTRAN-207))|(1<<(SV2017ParserKW_RTRANIF0-207))|(1<<(SV2017ParserKW_RTRANIF1-207))|(1<<(SV2017ParserKW_SAMPLE-207))|(1<<(SV2017ParserKW_SEQUENCE-207))|(1<<(SV2017ParserKW_SHORTINT-207))|(1<<(SV2017ParserKW_SHORTREAL-207))|(1<<(SV2017ParserKW_SIGNED-207))|(1<<(SV2017ParserKW_SPECIFY-207))|(1<<(SV2017ParserKW_SPECPARAM-207))|(1<<(SV2017ParserKW_STATIC-207))|(1<<(SV2017ParserKW_STD-207))|(1<<(SV2017ParserKW_STRING-207))|(1<<(SV2017ParserKW_STRUCT-207))|(1<<(SV2017ParserKW_SUPER-207)))) != 0) || (((_la-239)&-(0x1f+1)) == 0 && ((1<<uint((_la-239)))&((1<<(SV2017ParserKW_SUPPLY0-239))|(1<<(SV2017ParserKW_SUPPLY1-239))|(1<<(SV2017ParserKW_TASK-239))|(1<<(SV2017ParserKW_THIS-239))|(1<<(SV2017ParserKW_TIME-239))|(1<<(SV2017ParserKW_TIMEPRECISION-239))|(1<<(SV2017ParserKW_TIMEUNIT-239))|(1<<(SV2017ParserKW_TRAN-239))|(1<<(SV2017ParserKW_TRANIF0-239))|(1<<(SV2017ParserKW_TRANIF1-239))|(1<<(SV2017ParserKW_TRI-239))|(1<<(SV2017ParserKW_TRI0-239))|(1<<(SV2017ParserKW_TRI1-239))|(1<<(SV2017ParserKW_TRIAND-239))|(1<<(SV2017ParserKW_TRIOR-239))|(1<<(SV2017ParserKW_TRIREG-239))|(1<<(SV2017ParserKW_TYPE-239))|(1<<(SV2017ParserKW_TYPE_OPTION-239))|(1<<(SV2017ParserKW_TYPEDEF-239))|(1<<(SV2017ParserKW_UNION-239))|(1<<(SV2017ParserKW_UNSIGNED-239)))) != 0) || (((_la-271)&-(0x1f+1)) == 0 && ((1<<uint((_la-271)))&((1<<(SV2017ParserKW_UWIRE-271))|(1<<(SV2017ParserKW_VAR-271))|(1<<(SV2017ParserKW_VIRTUAL-271))|(1<<(SV2017ParserKW_WAND-271))|(1<<(SV2017ParserKW_WIRE-271))|(1<<(SV2017ParserKW_WOR-271))|(1<<(SV2017ParserKW_XNOR-271))|(1<<(SV2017ParserKW_XOR-271))|(1<<(SV2017ParserC_IDENTIFIER-271))|(1<<(SV2017ParserTICK_IDENTIFIER-271))|(1<<(SV2017ParserESCAPED_IDENTIFIER-271)))) != 0) || (((_la-303)&-(0x1f+1)) == 0 && ((1<<uint((_la-303)))&((1<<(SV2017ParserSIMPLE_IDENTIFIER-303))|(1<<(SV2017ParserSEMI-303))|(1<<(SV2017ParserLPAREN-303))|(1<<(SV2017ParserLSQUARE_BR-303)))) != 0) {
			{
				p.SetState(4812)
				p.Module_item()
			}

			p.SetState(4817)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(4818)
			p.Match(SV2017ParserKW_ENDMODULE)
		}
		p.SetState(4822)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SV2017ParserCOLON:
			{
				p.SetState(4819)
				p.Match(SV2017ParserCOLON)
			}
			{
				p.SetState(4820)
				p.Identifier()
			}

		case SV2017ParserEOF, SV2017ParserTICK_TIMESCALE, SV2017ParserTICK_DEFAULT_NETTYPE, SV2017ParserTICK_INCLUDE, SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_FATAL, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_DOLAR_WARNING, SV2017ParserKW_ALIAS, SV2017ParserKW_ALWAYS, SV2017ParserKW_ALWAYS_COMB, SV2017ParserKW_ALWAYS_FF, SV2017ParserKW_ALWAYS_LATCH, SV2017ParserKW_AND, SV2017ParserKW_ASSERT, SV2017ParserKW_ASSIGN, SV2017ParserKW_ASSUME, SV2017ParserKW_AUTOMATIC, SV2017ParserKW_BIND, SV2017ParserKW_BIT, SV2017ParserKW_BUF, SV2017ParserKW_BUFIF0, SV2017ParserKW_BUFIF1, SV2017ParserKW_BYTE, SV2017ParserKW_CASE, SV2017ParserKW_CHANDLE, SV2017ParserKW_CHECKER, SV2017ParserKW_CLASS, SV2017ParserKW_CLOCKING, SV2017ParserKW_CMOS, SV2017ParserKW_CONFIG, SV2017ParserKW_CONST, SV2017ParserKW_CONSTRAINT, SV2017ParserKW_COVER, SV2017ParserKW_COVERGROUP, SV2017ParserKW_DEFAULT, SV2017ParserKW_DEFPARAM, SV2017ParserKW_ENDMODULE, SV2017ParserKW_ENUM, SV2017ParserKW_EVENT, SV2017ParserKW_EXPORT, SV2017ParserKW_EXTERN, SV2017ParserKW_FINAL, SV2017ParserKW_FOR, SV2017ParserKW_FUNCTION, SV2017ParserKW_GENERATE, SV2017ParserKW_GENVAR, SV2017ParserKW_GLOBAL, SV2017ParserKW_IF, SV2017ParserKW_IMPORT, SV2017ParserKW_INITIAL, SV2017ParserKW_INOUT, SV2017ParserKW_INPUT, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_INTERCONNECT, SV2017ParserKW_INTERFACE, SV2017ParserKW_LET, SV2017ParserKW_LOCAL, SV2017ParserKW_LOCALPARAM, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_MACROMODULE, SV2017ParserKW_MODULE, SV2017ParserKW_NAND, SV2017ParserKW_NETTYPE, SV2017ParserKW_NMOS, SV2017ParserKW_NOR, SV2017ParserKW_NONE, SV2017ParserKW_NOT, SV2017ParserKW_NOTIF0, SV2017ParserKW_NOTIF1, SV2017ParserKW_OPTION, SV2017ParserKW_OR, SV2017ParserKW_OUTPUT, SV2017ParserKW_PACKAGE, SV2017ParserKW_PARAMETER, SV2017ParserKW_PMOS, SV2017ParserKW_PRIMITIVE, SV2017ParserKW_PROGRAM, SV2017ParserKW_PROPERTY, SV2017ParserKW_PULLDOWN, SV2017ParserKW_PULLUP, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_RCMOS, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REF, SV2017ParserKW_REG, SV2017ParserKW_RESTRICT, SV2017ParserKW_RNMOS, SV2017ParserKW_RPMOS, SV2017ParserKW_RTRAN, SV2017ParserKW_RTRANIF0, SV2017ParserKW_RTRANIF1, SV2017ParserKW_SAMPLE, SV2017ParserKW_SEQUENCE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_SPECIFY, SV2017ParserKW_SPECPARAM, SV2017ParserKW_STATIC, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_SUPPLY0, SV2017ParserKW_SUPPLY1, SV2017ParserKW_TASK, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TIMEPRECISION, SV2017ParserKW_TIMEUNIT, SV2017ParserKW_TRAN, SV2017ParserKW_TRANIF0, SV2017ParserKW_TRANIF1, SV2017ParserKW_TRI, SV2017ParserKW_TRI0, SV2017ParserKW_TRI1, SV2017ParserKW_TRIAND, SV2017ParserKW_TRIOR, SV2017ParserKW_TRIREG, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_TYPEDEF, SV2017ParserKW_UNION, SV2017ParserKW_UNSIGNED, SV2017ParserKW_UWIRE, SV2017ParserKW_VAR, SV2017ParserKW_VIRTUAL, SV2017ParserKW_WAND, SV2017ParserKW_WIRE, SV2017ParserKW_WOR, SV2017ParserKW_XNOR, SV2017ParserKW_XOR, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSEMI, SV2017ParserLPAREN, SV2017ParserLSQUARE_BR:

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IModule_keywordContext is an interface to support dynamic dispatch.
type IModule_keywordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModule_keywordContext differentiates from other interfaces.
	IsModule_keywordContext()
}

type Module_keywordContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModule_keywordContext() *Module_keywordContext {
	var p = new(Module_keywordContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_module_keyword
	return p
}

func (*Module_keywordContext) IsModule_keywordContext() {}

func NewModule_keywordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Module_keywordContext {
	var p = new(Module_keywordContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_module_keyword

	return p
}

func (s *Module_keywordContext) GetParser() antlr.Parser { return s.parser }

func (s *Module_keywordContext) KW_MODULE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_MODULE, 0)
}

func (s *Module_keywordContext) KW_MACROMODULE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_MACROMODULE, 0)
}

func (s *Module_keywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Module_keywordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Module_keywordContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterModule_keyword(s)
	}
}

func (s *Module_keywordContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitModule_keyword(s)
	}
}

func (p *SV2017Parser) Module_keyword() (localctx IModule_keywordContext) {
	localctx = NewModule_keywordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 664, SV2017ParserRULE_module_keyword)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4826)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserKW_MACROMODULE || _la == SV2017ParserKW_MODULE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// INet_port_typeContext is an interface to support dynamic dispatch.
type INet_port_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNet_port_typeContext differentiates from other interfaces.
	IsNet_port_typeContext()
}

type Net_port_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNet_port_typeContext() *Net_port_typeContext {
	var p = new(Net_port_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_net_port_type
	return p
}

func (*Net_port_typeContext) IsNet_port_typeContext() {}

func NewNet_port_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Net_port_typeContext {
	var p = new(Net_port_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_net_port_type

	return p
}

func (s *Net_port_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Net_port_typeContext) KW_INTERCONNECT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_INTERCONNECT, 0)
}

func (s *Net_port_typeContext) Implicit_data_type() IImplicit_data_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImplicit_data_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImplicit_data_typeContext)
}

func (s *Net_port_typeContext) Net_type() INet_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INet_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INet_typeContext)
}

func (s *Net_port_typeContext) Data_type_or_implicit() IData_type_or_implicitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_or_implicitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_or_implicitContext)
}

func (s *Net_port_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Net_port_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Net_port_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterNet_port_type(s)
	}
}

func (s *Net_port_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitNet_port_type(s)
	}
}

func (p *SV2017Parser) Net_port_type() (localctx INet_port_typeContext) {
	localctx = NewNet_port_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 666, SV2017ParserRULE_net_port_type)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4837)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_INTERCONNECT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4828)
			p.Match(SV2017ParserKW_INTERCONNECT)
		}
		p.SetState(4830)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_SIGNED || _la == SV2017ParserKW_UNSIGNED || _la == SV2017ParserLSQUARE_BR {
			{
				p.SetState(4829)
				p.Implicit_data_type()
			}

		}

	case SV2017ParserKW_NONE, SV2017ParserKW_SUPPLY0, SV2017ParserKW_SUPPLY1, SV2017ParserKW_TRI, SV2017ParserKW_TRI0, SV2017ParserKW_TRI1, SV2017ParserKW_TRIAND, SV2017ParserKW_TRIOR, SV2017ParserKW_TRIREG, SV2017ParserKW_UWIRE, SV2017ParserKW_WAND, SV2017ParserKW_WIRE, SV2017ParserKW_WOR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4832)
			p.Net_type()
		}
		p.SetState(4834)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 565, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4833)
				p.Data_type_or_implicit()
			}

		}

	case SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_BIT, SV2017ParserKW_BYTE, SV2017ParserKW_CHANDLE, SV2017ParserKW_ENUM, SV2017ParserKW_EVENT, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LOCAL, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_SAMPLE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_UNION, SV2017ParserKW_UNSIGNED, SV2017ParserKW_VIRTUAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserLSQUARE_BR:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4836)
			p.Data_type_or_implicit()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IVar_data_typeContext is an interface to support dynamic dispatch.
type IVar_data_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVar_data_typeContext differentiates from other interfaces.
	IsVar_data_typeContext()
}

type Var_data_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVar_data_typeContext() *Var_data_typeContext {
	var p = new(Var_data_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_var_data_type
	return p
}

func (*Var_data_typeContext) IsVar_data_typeContext() {}

func NewVar_data_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Var_data_typeContext {
	var p = new(Var_data_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_var_data_type

	return p
}

func (s *Var_data_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Var_data_typeContext) KW_VAR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_VAR, 0)
}

func (s *Var_data_typeContext) Data_type_or_implicit() IData_type_or_implicitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_or_implicitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_or_implicitContext)
}

func (s *Var_data_typeContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Var_data_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Var_data_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Var_data_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterVar_data_type(s)
	}
}

func (s *Var_data_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitVar_data_type(s)
	}
}

func (p *SV2017Parser) Var_data_type() (localctx IVar_data_typeContext) {
	localctx = NewVar_data_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 668, SV2017ParserRULE_var_data_type)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4844)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_VAR:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4839)
			p.Match(SV2017ParserKW_VAR)
		}
		p.SetState(4841)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 567, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4840)
				p.Data_type_or_implicit()
			}

		}

	case SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_BIT, SV2017ParserKW_BYTE, SV2017ParserKW_CHANDLE, SV2017ParserKW_ENUM, SV2017ParserKW_EVENT, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LOCAL, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_SAMPLE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_UNION, SV2017ParserKW_VIRTUAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4843)
			p.Data_type()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// INet_or_var_data_typeContext is an interface to support dynamic dispatch.
type INet_or_var_data_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNet_or_var_data_typeContext differentiates from other interfaces.
	IsNet_or_var_data_typeContext()
}

type Net_or_var_data_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNet_or_var_data_typeContext() *Net_or_var_data_typeContext {
	var p = new(Net_or_var_data_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_net_or_var_data_type
	return p
}

func (*Net_or_var_data_typeContext) IsNet_or_var_data_typeContext() {}

func NewNet_or_var_data_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Net_or_var_data_typeContext {
	var p = new(Net_or_var_data_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_net_or_var_data_type

	return p
}

func (s *Net_or_var_data_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Net_or_var_data_typeContext) KW_INTERCONNECT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_INTERCONNECT, 0)
}

func (s *Net_or_var_data_typeContext) Implicit_data_type() IImplicit_data_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImplicit_data_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImplicit_data_typeContext)
}

func (s *Net_or_var_data_typeContext) KW_VAR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_VAR, 0)
}

func (s *Net_or_var_data_typeContext) Data_type_or_implicit() IData_type_or_implicitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_or_implicitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_or_implicitContext)
}

func (s *Net_or_var_data_typeContext) Net_type() INet_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INet_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INet_typeContext)
}

func (s *Net_or_var_data_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Net_or_var_data_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Net_or_var_data_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterNet_or_var_data_type(s)
	}
}

func (s *Net_or_var_data_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitNet_or_var_data_type(s)
	}
}

func (p *SV2017Parser) Net_or_var_data_type() (localctx INet_or_var_data_typeContext) {
	localctx = NewNet_or_var_data_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 670, SV2017ParserRULE_net_or_var_data_type)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4859)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_INTERCONNECT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4846)
			p.Match(SV2017ParserKW_INTERCONNECT)
		}
		p.SetState(4848)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_SIGNED || _la == SV2017ParserKW_UNSIGNED || _la == SV2017ParserLSQUARE_BR {
			{
				p.SetState(4847)
				p.Implicit_data_type()
			}

		}

	case SV2017ParserKW_VAR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4850)
			p.Match(SV2017ParserKW_VAR)
		}
		p.SetState(4852)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 570, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4851)
				p.Data_type_or_implicit()
			}

		}

	case SV2017ParserKW_NONE, SV2017ParserKW_SUPPLY0, SV2017ParserKW_SUPPLY1, SV2017ParserKW_TRI, SV2017ParserKW_TRI0, SV2017ParserKW_TRI1, SV2017ParserKW_TRIAND, SV2017ParserKW_TRIOR, SV2017ParserKW_TRIREG, SV2017ParserKW_UWIRE, SV2017ParserKW_WAND, SV2017ParserKW_WIRE, SV2017ParserKW_WOR:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4854)
			p.Net_type()
		}
		p.SetState(4856)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 571, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4855)
				p.Data_type_or_implicit()
			}

		}

	case SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_BIT, SV2017ParserKW_BYTE, SV2017ParserKW_CHANDLE, SV2017ParserKW_ENUM, SV2017ParserKW_EVENT, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LOCAL, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_SAMPLE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_UNION, SV2017ParserKW_UNSIGNED, SV2017ParserKW_VIRTUAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserLSQUARE_BR:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4858)
			p.Data_type_or_implicit()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IList_of_defparam_assignmentsContext is an interface to support dynamic dispatch.
type IList_of_defparam_assignmentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsList_of_defparam_assignmentsContext differentiates from other interfaces.
	IsList_of_defparam_assignmentsContext()
}

type List_of_defparam_assignmentsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyList_of_defparam_assignmentsContext() *List_of_defparam_assignmentsContext {
	var p = new(List_of_defparam_assignmentsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_list_of_defparam_assignments
	return p
}

func (*List_of_defparam_assignmentsContext) IsList_of_defparam_assignmentsContext() {}

func NewList_of_defparam_assignmentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *List_of_defparam_assignmentsContext {
	var p = new(List_of_defparam_assignmentsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_list_of_defparam_assignments

	return p
}

func (s *List_of_defparam_assignmentsContext) GetParser() antlr.Parser { return s.parser }

func (s *List_of_defparam_assignmentsContext) AllDefparam_assignment() []IDefparam_assignmentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDefparam_assignmentContext)(nil)).Elem())
	var tst = make([]IDefparam_assignmentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDefparam_assignmentContext)
		}
	}

	return tst
}

func (s *List_of_defparam_assignmentsContext) Defparam_assignment(i int) IDefparam_assignmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefparam_assignmentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDefparam_assignmentContext)
}

func (s *List_of_defparam_assignmentsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *List_of_defparam_assignmentsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *List_of_defparam_assignmentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *List_of_defparam_assignmentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *List_of_defparam_assignmentsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterList_of_defparam_assignments(s)
	}
}

func (s *List_of_defparam_assignmentsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitList_of_defparam_assignments(s)
	}
}

func (p *SV2017Parser) List_of_defparam_assignments() (localctx IList_of_defparam_assignmentsContext) {
	localctx = NewList_of_defparam_assignmentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 672, SV2017ParserRULE_list_of_defparam_assignments)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4861)
		p.Defparam_assignment()
	}
	p.SetState(4866)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserCOMMA {
		{
			p.SetState(4862)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(4863)
			p.Defparam_assignment()
		}

		p.SetState(4868)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IList_of_net_decl_assignmentsContext is an interface to support dynamic dispatch.
type IList_of_net_decl_assignmentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsList_of_net_decl_assignmentsContext differentiates from other interfaces.
	IsList_of_net_decl_assignmentsContext()
}

type List_of_net_decl_assignmentsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyList_of_net_decl_assignmentsContext() *List_of_net_decl_assignmentsContext {
	var p = new(List_of_net_decl_assignmentsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_list_of_net_decl_assignments
	return p
}

func (*List_of_net_decl_assignmentsContext) IsList_of_net_decl_assignmentsContext() {}

func NewList_of_net_decl_assignmentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *List_of_net_decl_assignmentsContext {
	var p = new(List_of_net_decl_assignmentsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_list_of_net_decl_assignments

	return p
}

func (s *List_of_net_decl_assignmentsContext) GetParser() antlr.Parser { return s.parser }

func (s *List_of_net_decl_assignmentsContext) AllNet_decl_assignment() []INet_decl_assignmentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INet_decl_assignmentContext)(nil)).Elem())
	var tst = make([]INet_decl_assignmentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INet_decl_assignmentContext)
		}
	}

	return tst
}

func (s *List_of_net_decl_assignmentsContext) Net_decl_assignment(i int) INet_decl_assignmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INet_decl_assignmentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INet_decl_assignmentContext)
}

func (s *List_of_net_decl_assignmentsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *List_of_net_decl_assignmentsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *List_of_net_decl_assignmentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *List_of_net_decl_assignmentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *List_of_net_decl_assignmentsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterList_of_net_decl_assignments(s)
	}
}

func (s *List_of_net_decl_assignmentsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitList_of_net_decl_assignments(s)
	}
}

func (p *SV2017Parser) List_of_net_decl_assignments() (localctx IList_of_net_decl_assignmentsContext) {
	localctx = NewList_of_net_decl_assignmentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 674, SV2017ParserRULE_list_of_net_decl_assignments)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4869)
		p.Net_decl_assignment()
	}
	p.SetState(4874)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserCOMMA {
		{
			p.SetState(4870)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(4871)
			p.Net_decl_assignment()
		}

		p.SetState(4876)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IList_of_specparam_assignmentsContext is an interface to support dynamic dispatch.
type IList_of_specparam_assignmentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsList_of_specparam_assignmentsContext differentiates from other interfaces.
	IsList_of_specparam_assignmentsContext()
}

type List_of_specparam_assignmentsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyList_of_specparam_assignmentsContext() *List_of_specparam_assignmentsContext {
	var p = new(List_of_specparam_assignmentsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_list_of_specparam_assignments
	return p
}

func (*List_of_specparam_assignmentsContext) IsList_of_specparam_assignmentsContext() {}

func NewList_of_specparam_assignmentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *List_of_specparam_assignmentsContext {
	var p = new(List_of_specparam_assignmentsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_list_of_specparam_assignments

	return p
}

func (s *List_of_specparam_assignmentsContext) GetParser() antlr.Parser { return s.parser }

func (s *List_of_specparam_assignmentsContext) AllSpecparam_assignment() []ISpecparam_assignmentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISpecparam_assignmentContext)(nil)).Elem())
	var tst = make([]ISpecparam_assignmentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISpecparam_assignmentContext)
		}
	}

	return tst
}

func (s *List_of_specparam_assignmentsContext) Specparam_assignment(i int) ISpecparam_assignmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISpecparam_assignmentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISpecparam_assignmentContext)
}

func (s *List_of_specparam_assignmentsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *List_of_specparam_assignmentsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *List_of_specparam_assignmentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *List_of_specparam_assignmentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *List_of_specparam_assignmentsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterList_of_specparam_assignments(s)
	}
}

func (s *List_of_specparam_assignmentsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitList_of_specparam_assignments(s)
	}
}

func (p *SV2017Parser) List_of_specparam_assignments() (localctx IList_of_specparam_assignmentsContext) {
	localctx = NewList_of_specparam_assignmentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 676, SV2017ParserRULE_list_of_specparam_assignments)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4877)
		p.Specparam_assignment()
	}
	p.SetState(4882)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserCOMMA {
		{
			p.SetState(4878)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(4879)
			p.Specparam_assignment()
		}

		p.SetState(4884)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IList_of_variable_decl_assignmentsContext is an interface to support dynamic dispatch.
type IList_of_variable_decl_assignmentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsList_of_variable_decl_assignmentsContext differentiates from other interfaces.
	IsList_of_variable_decl_assignmentsContext()
}

type List_of_variable_decl_assignmentsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyList_of_variable_decl_assignmentsContext() *List_of_variable_decl_assignmentsContext {
	var p = new(List_of_variable_decl_assignmentsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_list_of_variable_decl_assignments
	return p
}

func (*List_of_variable_decl_assignmentsContext) IsList_of_variable_decl_assignmentsContext() {}

func NewList_of_variable_decl_assignmentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *List_of_variable_decl_assignmentsContext {
	var p = new(List_of_variable_decl_assignmentsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_list_of_variable_decl_assignments

	return p
}

func (s *List_of_variable_decl_assignmentsContext) GetParser() antlr.Parser { return s.parser }

func (s *List_of_variable_decl_assignmentsContext) AllVariable_decl_assignment() []IVariable_decl_assignmentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariable_decl_assignmentContext)(nil)).Elem())
	var tst = make([]IVariable_decl_assignmentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariable_decl_assignmentContext)
		}
	}

	return tst
}

func (s *List_of_variable_decl_assignmentsContext) Variable_decl_assignment(i int) IVariable_decl_assignmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_decl_assignmentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariable_decl_assignmentContext)
}

func (s *List_of_variable_decl_assignmentsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *List_of_variable_decl_assignmentsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *List_of_variable_decl_assignmentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *List_of_variable_decl_assignmentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *List_of_variable_decl_assignmentsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterList_of_variable_decl_assignments(s)
	}
}

func (s *List_of_variable_decl_assignmentsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitList_of_variable_decl_assignments(s)
	}
}

func (p *SV2017Parser) List_of_variable_decl_assignments() (localctx IList_of_variable_decl_assignmentsContext) {
	localctx = NewList_of_variable_decl_assignmentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 678, SV2017ParserRULE_list_of_variable_decl_assignments)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4885)
		p.Variable_decl_assignment()
	}
	p.SetState(4890)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserCOMMA {
		{
			p.SetState(4886)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(4887)
			p.Variable_decl_assignment()
		}

		p.SetState(4892)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IList_of_variable_identifiers_itemContext is an interface to support dynamic dispatch.
type IList_of_variable_identifiers_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsList_of_variable_identifiers_itemContext differentiates from other interfaces.
	IsList_of_variable_identifiers_itemContext()
}

type List_of_variable_identifiers_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyList_of_variable_identifiers_itemContext() *List_of_variable_identifiers_itemContext {
	var p = new(List_of_variable_identifiers_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_list_of_variable_identifiers_item
	return p
}

func (*List_of_variable_identifiers_itemContext) IsList_of_variable_identifiers_itemContext() {}

func NewList_of_variable_identifiers_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *List_of_variable_identifiers_itemContext {
	var p = new(List_of_variable_identifiers_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_list_of_variable_identifiers_item

	return p
}

func (s *List_of_variable_identifiers_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *List_of_variable_identifiers_itemContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *List_of_variable_identifiers_itemContext) AllVariable_dimension() []IVariable_dimensionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariable_dimensionContext)(nil)).Elem())
	var tst = make([]IVariable_dimensionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariable_dimensionContext)
		}
	}

	return tst
}

func (s *List_of_variable_identifiers_itemContext) Variable_dimension(i int) IVariable_dimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_dimensionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariable_dimensionContext)
}

func (s *List_of_variable_identifiers_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *List_of_variable_identifiers_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *List_of_variable_identifiers_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterList_of_variable_identifiers_item(s)
	}
}

func (s *List_of_variable_identifiers_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitList_of_variable_identifiers_item(s)
	}
}

func (p *SV2017Parser) List_of_variable_identifiers_item() (localctx IList_of_variable_identifiers_itemContext) {
	localctx = NewList_of_variable_identifiers_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 680, SV2017ParserRULE_list_of_variable_identifiers_item)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4893)
		p.Identifier()
	}
	p.SetState(4897)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserLSQUARE_BR {
		{
			p.SetState(4894)
			p.Variable_dimension()
		}

		p.SetState(4899)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IList_of_variable_identifiersContext is an interface to support dynamic dispatch.
type IList_of_variable_identifiersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsList_of_variable_identifiersContext differentiates from other interfaces.
	IsList_of_variable_identifiersContext()
}

type List_of_variable_identifiersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyList_of_variable_identifiersContext() *List_of_variable_identifiersContext {
	var p = new(List_of_variable_identifiersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_list_of_variable_identifiers
	return p
}

func (*List_of_variable_identifiersContext) IsList_of_variable_identifiersContext() {}

func NewList_of_variable_identifiersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *List_of_variable_identifiersContext {
	var p = new(List_of_variable_identifiersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_list_of_variable_identifiers

	return p
}

func (s *List_of_variable_identifiersContext) GetParser() antlr.Parser { return s.parser }

func (s *List_of_variable_identifiersContext) AllList_of_variable_identifiers_item() []IList_of_variable_identifiers_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IList_of_variable_identifiers_itemContext)(nil)).Elem())
	var tst = make([]IList_of_variable_identifiers_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IList_of_variable_identifiers_itemContext)
		}
	}

	return tst
}

func (s *List_of_variable_identifiersContext) List_of_variable_identifiers_item(i int) IList_of_variable_identifiers_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_variable_identifiers_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IList_of_variable_identifiers_itemContext)
}

func (s *List_of_variable_identifiersContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *List_of_variable_identifiersContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *List_of_variable_identifiersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *List_of_variable_identifiersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *List_of_variable_identifiersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterList_of_variable_identifiers(s)
	}
}

func (s *List_of_variable_identifiersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitList_of_variable_identifiers(s)
	}
}

func (p *SV2017Parser) List_of_variable_identifiers() (localctx IList_of_variable_identifiersContext) {
	localctx = NewList_of_variable_identifiersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 682, SV2017ParserRULE_list_of_variable_identifiers)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4900)
		p.List_of_variable_identifiers_item()
	}
	p.SetState(4905)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserCOMMA {
		{
			p.SetState(4901)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(4902)
			p.List_of_variable_identifiers_item()
		}

		p.SetState(4907)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IList_of_variable_port_identifiersContext is an interface to support dynamic dispatch.
type IList_of_variable_port_identifiersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsList_of_variable_port_identifiersContext differentiates from other interfaces.
	IsList_of_variable_port_identifiersContext()
}

type List_of_variable_port_identifiersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyList_of_variable_port_identifiersContext() *List_of_variable_port_identifiersContext {
	var p = new(List_of_variable_port_identifiersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_list_of_variable_port_identifiers
	return p
}

func (*List_of_variable_port_identifiersContext) IsList_of_variable_port_identifiersContext() {}

func NewList_of_variable_port_identifiersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *List_of_variable_port_identifiersContext {
	var p = new(List_of_variable_port_identifiersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_list_of_variable_port_identifiers

	return p
}

func (s *List_of_variable_port_identifiersContext) GetParser() antlr.Parser { return s.parser }

func (s *List_of_variable_port_identifiersContext) List_of_tf_variable_identifiers() IList_of_tf_variable_identifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_tf_variable_identifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_tf_variable_identifiersContext)
}

func (s *List_of_variable_port_identifiersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *List_of_variable_port_identifiersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *List_of_variable_port_identifiersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterList_of_variable_port_identifiers(s)
	}
}

func (s *List_of_variable_port_identifiersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitList_of_variable_port_identifiers(s)
	}
}

func (p *SV2017Parser) List_of_variable_port_identifiers() (localctx IList_of_variable_port_identifiersContext) {
	localctx = NewList_of_variable_port_identifiersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 684, SV2017ParserRULE_list_of_variable_port_identifiers)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4908)
		p.List_of_tf_variable_identifiers()
	}

	return localctx
}

// IDefparam_assignmentContext is an interface to support dynamic dispatch.
type IDefparam_assignmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDefparam_assignmentContext differentiates from other interfaces.
	IsDefparam_assignmentContext()
}

type Defparam_assignmentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefparam_assignmentContext() *Defparam_assignmentContext {
	var p = new(Defparam_assignmentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_defparam_assignment
	return p
}

func (*Defparam_assignmentContext) IsDefparam_assignmentContext() {}

func NewDefparam_assignmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Defparam_assignmentContext {
	var p = new(Defparam_assignmentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_defparam_assignment

	return p
}

func (s *Defparam_assignmentContext) GetParser() antlr.Parser { return s.parser }

func (s *Defparam_assignmentContext) Hierarchical_identifier() IHierarchical_identifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHierarchical_identifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHierarchical_identifierContext)
}

func (s *Defparam_assignmentContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserASSIGN, 0)
}

func (s *Defparam_assignmentContext) Mintypmax_expression() IMintypmax_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMintypmax_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMintypmax_expressionContext)
}

func (s *Defparam_assignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Defparam_assignmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Defparam_assignmentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterDefparam_assignment(s)
	}
}

func (s *Defparam_assignmentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitDefparam_assignment(s)
	}
}

func (p *SV2017Parser) Defparam_assignment() (localctx IDefparam_assignmentContext) {
	localctx = NewDefparam_assignmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 686, SV2017ParserRULE_defparam_assignment)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4910)
		p.Hierarchical_identifier()
	}
	{
		p.SetState(4911)
		p.Match(SV2017ParserASSIGN)
	}
	{
		p.SetState(4912)
		p.Mintypmax_expression()
	}

	return localctx
}

// INet_decl_assignmentContext is an interface to support dynamic dispatch.
type INet_decl_assignmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNet_decl_assignmentContext differentiates from other interfaces.
	IsNet_decl_assignmentContext()
}

type Net_decl_assignmentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNet_decl_assignmentContext() *Net_decl_assignmentContext {
	var p = new(Net_decl_assignmentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_net_decl_assignment
	return p
}

func (*Net_decl_assignmentContext) IsNet_decl_assignmentContext() {}

func NewNet_decl_assignmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Net_decl_assignmentContext {
	var p = new(Net_decl_assignmentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_net_decl_assignment

	return p
}

func (s *Net_decl_assignmentContext) GetParser() antlr.Parser { return s.parser }

func (s *Net_decl_assignmentContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Net_decl_assignmentContext) AllUnpacked_dimension() []IUnpacked_dimensionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUnpacked_dimensionContext)(nil)).Elem())
	var tst = make([]IUnpacked_dimensionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUnpacked_dimensionContext)
		}
	}

	return tst
}

func (s *Net_decl_assignmentContext) Unpacked_dimension(i int) IUnpacked_dimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnpacked_dimensionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUnpacked_dimensionContext)
}

func (s *Net_decl_assignmentContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserASSIGN, 0)
}

func (s *Net_decl_assignmentContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Net_decl_assignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Net_decl_assignmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Net_decl_assignmentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterNet_decl_assignment(s)
	}
}

func (s *Net_decl_assignmentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitNet_decl_assignment(s)
	}
}

func (p *SV2017Parser) Net_decl_assignment() (localctx INet_decl_assignmentContext) {
	localctx = NewNet_decl_assignmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 688, SV2017ParserRULE_net_decl_assignment)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4914)
		p.Identifier()
	}
	p.SetState(4918)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserLSQUARE_BR {
		{
			p.SetState(4915)
			p.Unpacked_dimension()
		}

		p.SetState(4920)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(4923)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserASSIGN {
		{
			p.SetState(4921)
			p.Match(SV2017ParserASSIGN)
		}
		{
			p.SetState(4922)
			p.expression(0)
		}

	}

	return localctx
}

// ISpecparam_assignmentContext is an interface to support dynamic dispatch.
type ISpecparam_assignmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSpecparam_assignmentContext differentiates from other interfaces.
	IsSpecparam_assignmentContext()
}

type Specparam_assignmentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySpecparam_assignmentContext() *Specparam_assignmentContext {
	var p = new(Specparam_assignmentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_specparam_assignment
	return p
}

func (*Specparam_assignmentContext) IsSpecparam_assignmentContext() {}

func NewSpecparam_assignmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Specparam_assignmentContext {
	var p = new(Specparam_assignmentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_specparam_assignment

	return p
}

func (s *Specparam_assignmentContext) GetParser() antlr.Parser { return s.parser }

func (s *Specparam_assignmentContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Specparam_assignmentContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserASSIGN, 0)
}

func (s *Specparam_assignmentContext) Mintypmax_expression() IMintypmax_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMintypmax_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMintypmax_expressionContext)
}

func (s *Specparam_assignmentContext) Pulse_control_specparam() IPulse_control_specparamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPulse_control_specparamContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPulse_control_specparamContext)
}

func (s *Specparam_assignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Specparam_assignmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Specparam_assignmentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterSpecparam_assignment(s)
	}
}

func (s *Specparam_assignmentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitSpecparam_assignment(s)
	}
}

func (p *SV2017Parser) Specparam_assignment() (localctx ISpecparam_assignmentContext) {
	localctx = NewSpecparam_assignmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 690, SV2017ParserRULE_specparam_assignment)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4930)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_SAMPLE, SV2017ParserKW_STD, SV2017ParserKW_TYPE_OPTION, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4925)
			p.Identifier()
		}
		{
			p.SetState(4926)
			p.Match(SV2017ParserASSIGN)
		}
		{
			p.SetState(4927)
			p.Mintypmax_expression()
		}

	case SV2017ParserKW_PATHPULSE_DOLAR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4929)
			p.Pulse_control_specparam()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IError_limit_valueContext is an interface to support dynamic dispatch.
type IError_limit_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsError_limit_valueContext differentiates from other interfaces.
	IsError_limit_valueContext()
}

type Error_limit_valueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyError_limit_valueContext() *Error_limit_valueContext {
	var p = new(Error_limit_valueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_error_limit_value
	return p
}

func (*Error_limit_valueContext) IsError_limit_valueContext() {}

func NewError_limit_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Error_limit_valueContext {
	var p = new(Error_limit_valueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_error_limit_value

	return p
}

func (s *Error_limit_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Error_limit_valueContext) Mintypmax_expression() IMintypmax_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMintypmax_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMintypmax_expressionContext)
}

func (s *Error_limit_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Error_limit_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Error_limit_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterError_limit_value(s)
	}
}

func (s *Error_limit_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitError_limit_value(s)
	}
}

func (p *SV2017Parser) Error_limit_value() (localctx IError_limit_valueContext) {
	localctx = NewError_limit_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 692, SV2017ParserRULE_error_limit_value)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4932)
		p.Mintypmax_expression()
	}

	return localctx
}

// IReject_limit_valueContext is an interface to support dynamic dispatch.
type IReject_limit_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReject_limit_valueContext differentiates from other interfaces.
	IsReject_limit_valueContext()
}

type Reject_limit_valueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReject_limit_valueContext() *Reject_limit_valueContext {
	var p = new(Reject_limit_valueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_reject_limit_value
	return p
}

func (*Reject_limit_valueContext) IsReject_limit_valueContext() {}

func NewReject_limit_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Reject_limit_valueContext {
	var p = new(Reject_limit_valueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_reject_limit_value

	return p
}

func (s *Reject_limit_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Reject_limit_valueContext) Mintypmax_expression() IMintypmax_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMintypmax_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMintypmax_expressionContext)
}

func (s *Reject_limit_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Reject_limit_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Reject_limit_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterReject_limit_value(s)
	}
}

func (s *Reject_limit_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitReject_limit_value(s)
	}
}

func (p *SV2017Parser) Reject_limit_value() (localctx IReject_limit_valueContext) {
	localctx = NewReject_limit_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 694, SV2017ParserRULE_reject_limit_value)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4934)
		p.Mintypmax_expression()
	}

	return localctx
}

// IPulse_control_specparamContext is an interface to support dynamic dispatch.
type IPulse_control_specparamContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPulse_control_specparamContext differentiates from other interfaces.
	IsPulse_control_specparamContext()
}

type Pulse_control_specparamContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPulse_control_specparamContext() *Pulse_control_specparamContext {
	var p = new(Pulse_control_specparamContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_pulse_control_specparam
	return p
}

func (*Pulse_control_specparamContext) IsPulse_control_specparamContext() {}

func NewPulse_control_specparamContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pulse_control_specparamContext {
	var p = new(Pulse_control_specparamContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_pulse_control_specparam

	return p
}

func (s *Pulse_control_specparamContext) GetParser() antlr.Parser { return s.parser }

func (s *Pulse_control_specparamContext) KW_PATHPULSE_DOLAR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_PATHPULSE_DOLAR, 0)
}

func (s *Pulse_control_specparamContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserASSIGN, 0)
}

func (s *Pulse_control_specparamContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Pulse_control_specparamContext) Reject_limit_value() IReject_limit_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReject_limit_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReject_limit_valueContext)
}

func (s *Pulse_control_specparamContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Pulse_control_specparamContext) Specify_input_terminal_descriptor() ISpecify_input_terminal_descriptorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISpecify_input_terminal_descriptorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISpecify_input_terminal_descriptorContext)
}

func (s *Pulse_control_specparamContext) DOLAR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOLAR, 0)
}

func (s *Pulse_control_specparamContext) Specify_output_terminal_descriptor() ISpecify_output_terminal_descriptorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISpecify_output_terminal_descriptorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISpecify_output_terminal_descriptorContext)
}

func (s *Pulse_control_specparamContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, 0)
}

func (s *Pulse_control_specparamContext) Error_limit_value() IError_limit_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IError_limit_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IError_limit_valueContext)
}

func (s *Pulse_control_specparamContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pulse_control_specparamContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pulse_control_specparamContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPulse_control_specparam(s)
	}
}

func (s *Pulse_control_specparamContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPulse_control_specparam(s)
	}
}

func (p *SV2017Parser) Pulse_control_specparam() (localctx IPulse_control_specparamContext) {
	localctx = NewPulse_control_specparamContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 696, SV2017ParserRULE_pulse_control_specparam)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4936)
		p.Match(SV2017ParserKW_PATHPULSE_DOLAR)
	}
	p.SetState(4941)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
		{
			p.SetState(4937)
			p.Specify_input_terminal_descriptor()
		}
		{
			p.SetState(4938)
			p.Match(SV2017ParserDOLAR)
		}
		{
			p.SetState(4939)
			p.Specify_output_terminal_descriptor()
		}

	}
	{
		p.SetState(4943)
		p.Match(SV2017ParserASSIGN)
	}
	{
		p.SetState(4944)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(4945)
		p.Reject_limit_value()
	}
	p.SetState(4948)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserCOMMA {
		{
			p.SetState(4946)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(4947)
			p.Error_limit_value()
		}

	}
	{
		p.SetState(4950)
		p.Match(SV2017ParserRPAREN)
	}

	return localctx
}

// IIdentifier_doted_index_at_endContext is an interface to support dynamic dispatch.
type IIdentifier_doted_index_at_endContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifier_doted_index_at_endContext differentiates from other interfaces.
	IsIdentifier_doted_index_at_endContext()
}

type Identifier_doted_index_at_endContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifier_doted_index_at_endContext() *Identifier_doted_index_at_endContext {
	var p = new(Identifier_doted_index_at_endContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_identifier_doted_index_at_end
	return p
}

func (*Identifier_doted_index_at_endContext) IsIdentifier_doted_index_at_endContext() {}

func NewIdentifier_doted_index_at_endContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Identifier_doted_index_at_endContext {
	var p = new(Identifier_doted_index_at_endContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_identifier_doted_index_at_end

	return p
}

func (s *Identifier_doted_index_at_endContext) GetParser() antlr.Parser { return s.parser }

func (s *Identifier_doted_index_at_endContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Identifier_doted_index_at_endContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Identifier_doted_index_at_endContext) DOT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOT, 0)
}

func (s *Identifier_doted_index_at_endContext) AllLSQUARE_BR() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserLSQUARE_BR)
}

func (s *Identifier_doted_index_at_endContext) LSQUARE_BR(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserLSQUARE_BR, i)
}

func (s *Identifier_doted_index_at_endContext) AllRange_expression() []IRange_expressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRange_expressionContext)(nil)).Elem())
	var tst = make([]IRange_expressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRange_expressionContext)
		}
	}

	return tst
}

func (s *Identifier_doted_index_at_endContext) Range_expression(i int) IRange_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRange_expressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRange_expressionContext)
}

func (s *Identifier_doted_index_at_endContext) AllRSQUARE_BR() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserRSQUARE_BR)
}

func (s *Identifier_doted_index_at_endContext) RSQUARE_BR(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserRSQUARE_BR, i)
}

func (s *Identifier_doted_index_at_endContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Identifier_doted_index_at_endContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Identifier_doted_index_at_endContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterIdentifier_doted_index_at_end(s)
	}
}

func (s *Identifier_doted_index_at_endContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitIdentifier_doted_index_at_end(s)
	}
}

func (p *SV2017Parser) Identifier_doted_index_at_end() (localctx IIdentifier_doted_index_at_endContext) {
	localctx = NewIdentifier_doted_index_at_endContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 698, SV2017ParserRULE_identifier_doted_index_at_end)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4952)
		p.Identifier()
	}
	p.SetState(4955)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserDOT {
		{
			p.SetState(4953)
			p.Match(SV2017ParserDOT)
		}
		{
			p.SetState(4954)
			p.Identifier()
		}

	}
	p.SetState(4963)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserLSQUARE_BR {
		{
			p.SetState(4957)
			p.Match(SV2017ParserLSQUARE_BR)
		}
		{
			p.SetState(4958)
			p.Range_expression()
		}
		{
			p.SetState(4959)
			p.Match(SV2017ParserRSQUARE_BR)
		}

		p.SetState(4965)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISpecify_terminal_descriptorContext is an interface to support dynamic dispatch.
type ISpecify_terminal_descriptorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSpecify_terminal_descriptorContext differentiates from other interfaces.
	IsSpecify_terminal_descriptorContext()
}

type Specify_terminal_descriptorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySpecify_terminal_descriptorContext() *Specify_terminal_descriptorContext {
	var p = new(Specify_terminal_descriptorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_specify_terminal_descriptor
	return p
}

func (*Specify_terminal_descriptorContext) IsSpecify_terminal_descriptorContext() {}

func NewSpecify_terminal_descriptorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Specify_terminal_descriptorContext {
	var p = new(Specify_terminal_descriptorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_specify_terminal_descriptor

	return p
}

func (s *Specify_terminal_descriptorContext) GetParser() antlr.Parser { return s.parser }

func (s *Specify_terminal_descriptorContext) Identifier_doted_index_at_end() IIdentifier_doted_index_at_endContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_doted_index_at_endContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_doted_index_at_endContext)
}

func (s *Specify_terminal_descriptorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Specify_terminal_descriptorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Specify_terminal_descriptorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterSpecify_terminal_descriptor(s)
	}
}

func (s *Specify_terminal_descriptorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitSpecify_terminal_descriptor(s)
	}
}

func (p *SV2017Parser) Specify_terminal_descriptor() (localctx ISpecify_terminal_descriptorContext) {
	localctx = NewSpecify_terminal_descriptorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 700, SV2017ParserRULE_specify_terminal_descriptor)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4966)
		p.Identifier_doted_index_at_end()
	}

	return localctx
}

// ISpecify_input_terminal_descriptorContext is an interface to support dynamic dispatch.
type ISpecify_input_terminal_descriptorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSpecify_input_terminal_descriptorContext differentiates from other interfaces.
	IsSpecify_input_terminal_descriptorContext()
}

type Specify_input_terminal_descriptorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySpecify_input_terminal_descriptorContext() *Specify_input_terminal_descriptorContext {
	var p = new(Specify_input_terminal_descriptorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_specify_input_terminal_descriptor
	return p
}

func (*Specify_input_terminal_descriptorContext) IsSpecify_input_terminal_descriptorContext() {}

func NewSpecify_input_terminal_descriptorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Specify_input_terminal_descriptorContext {
	var p = new(Specify_input_terminal_descriptorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_specify_input_terminal_descriptor

	return p
}

func (s *Specify_input_terminal_descriptorContext) GetParser() antlr.Parser { return s.parser }

func (s *Specify_input_terminal_descriptorContext) Identifier_doted_index_at_end() IIdentifier_doted_index_at_endContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_doted_index_at_endContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_doted_index_at_endContext)
}

func (s *Specify_input_terminal_descriptorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Specify_input_terminal_descriptorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Specify_input_terminal_descriptorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterSpecify_input_terminal_descriptor(s)
	}
}

func (s *Specify_input_terminal_descriptorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitSpecify_input_terminal_descriptor(s)
	}
}

func (p *SV2017Parser) Specify_input_terminal_descriptor() (localctx ISpecify_input_terminal_descriptorContext) {
	localctx = NewSpecify_input_terminal_descriptorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 702, SV2017ParserRULE_specify_input_terminal_descriptor)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4968)
		p.Identifier_doted_index_at_end()
	}

	return localctx
}

// ISpecify_output_terminal_descriptorContext is an interface to support dynamic dispatch.
type ISpecify_output_terminal_descriptorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSpecify_output_terminal_descriptorContext differentiates from other interfaces.
	IsSpecify_output_terminal_descriptorContext()
}

type Specify_output_terminal_descriptorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySpecify_output_terminal_descriptorContext() *Specify_output_terminal_descriptorContext {
	var p = new(Specify_output_terminal_descriptorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_specify_output_terminal_descriptor
	return p
}

func (*Specify_output_terminal_descriptorContext) IsSpecify_output_terminal_descriptorContext() {}

func NewSpecify_output_terminal_descriptorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Specify_output_terminal_descriptorContext {
	var p = new(Specify_output_terminal_descriptorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_specify_output_terminal_descriptor

	return p
}

func (s *Specify_output_terminal_descriptorContext) GetParser() antlr.Parser { return s.parser }

func (s *Specify_output_terminal_descriptorContext) Identifier_doted_index_at_end() IIdentifier_doted_index_at_endContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_doted_index_at_endContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_doted_index_at_endContext)
}

func (s *Specify_output_terminal_descriptorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Specify_output_terminal_descriptorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Specify_output_terminal_descriptorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterSpecify_output_terminal_descriptor(s)
	}
}

func (s *Specify_output_terminal_descriptorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitSpecify_output_terminal_descriptor(s)
	}
}

func (p *SV2017Parser) Specify_output_terminal_descriptor() (localctx ISpecify_output_terminal_descriptorContext) {
	localctx = NewSpecify_output_terminal_descriptorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 704, SV2017ParserRULE_specify_output_terminal_descriptor)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4970)
		p.Identifier_doted_index_at_end()
	}

	return localctx
}

// ISpecify_itemContext is an interface to support dynamic dispatch.
type ISpecify_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSpecify_itemContext differentiates from other interfaces.
	IsSpecify_itemContext()
}

type Specify_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySpecify_itemContext() *Specify_itemContext {
	var p = new(Specify_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_specify_item
	return p
}

func (*Specify_itemContext) IsSpecify_itemContext() {}

func NewSpecify_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Specify_itemContext {
	var p = new(Specify_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_specify_item

	return p
}

func (s *Specify_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Specify_itemContext) Specparam_declaration() ISpecparam_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISpecparam_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISpecparam_declarationContext)
}

func (s *Specify_itemContext) Pulsestyle_declaration() IPulsestyle_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPulsestyle_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPulsestyle_declarationContext)
}

func (s *Specify_itemContext) Showcancelled_declaration() IShowcancelled_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowcancelled_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowcancelled_declarationContext)
}

func (s *Specify_itemContext) Path_declaration() IPath_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPath_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPath_declarationContext)
}

func (s *Specify_itemContext) System_timing_check() ISystem_timing_checkContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISystem_timing_checkContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISystem_timing_checkContext)
}

func (s *Specify_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Specify_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Specify_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterSpecify_item(s)
	}
}

func (s *Specify_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitSpecify_item(s)
	}
}

func (p *SV2017Parser) Specify_item() (localctx ISpecify_itemContext) {
	localctx = NewSpecify_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 706, SV2017ParserRULE_specify_item)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4977)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_SPECPARAM:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4972)
			p.Specparam_declaration()
		}

	case SV2017ParserKW_PULSESTYLE_ONDETECT, SV2017ParserKW_PULSESTYLE_ONEVENT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4973)
			p.Pulsestyle_declaration()
		}

	case SV2017ParserKW_NOSHOWCANCELLED, SV2017ParserKW_SHOWCANCELLED:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4974)
			p.Showcancelled_declaration()
		}

	case SV2017ParserKW_IF, SV2017ParserKW_IFNONE, SV2017ParserLPAREN:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4975)
			p.Path_declaration()
		}

	case SV2017ParserKW_DOLAR_FULLSKEW, SV2017ParserKW_DOLAR_HOLD, SV2017ParserKW_DOLAR_NOCHANGE, SV2017ParserKW_DOLAR_PERIOD, SV2017ParserKW_DOLAR_RECOVERY, SV2017ParserKW_DOLAR_RECREM, SV2017ParserKW_DOLAR_REMOVAL, SV2017ParserKW_DOLAR_SETUP, SV2017ParserKW_DOLAR_SETUPHOLD, SV2017ParserKW_DOLAR_SKEW, SV2017ParserKW_DOLAR_TIMESKEW, SV2017ParserKW_DOLAR_WIDTH:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4976)
			p.System_timing_check()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPulsestyle_declarationContext is an interface to support dynamic dispatch.
type IPulsestyle_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPulsestyle_declarationContext differentiates from other interfaces.
	IsPulsestyle_declarationContext()
}

type Pulsestyle_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPulsestyle_declarationContext() *Pulsestyle_declarationContext {
	var p = new(Pulsestyle_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_pulsestyle_declaration
	return p
}

func (*Pulsestyle_declarationContext) IsPulsestyle_declarationContext() {}

func NewPulsestyle_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pulsestyle_declarationContext {
	var p = new(Pulsestyle_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_pulsestyle_declaration

	return p
}

func (s *Pulsestyle_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Pulsestyle_declarationContext) List_of_path_outputs() IList_of_path_outputsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_path_outputsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_path_outputsContext)
}

func (s *Pulsestyle_declarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Pulsestyle_declarationContext) KW_PULSESTYLE_ONEVENT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_PULSESTYLE_ONEVENT, 0)
}

func (s *Pulsestyle_declarationContext) KW_PULSESTYLE_ONDETECT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_PULSESTYLE_ONDETECT, 0)
}

func (s *Pulsestyle_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pulsestyle_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pulsestyle_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPulsestyle_declaration(s)
	}
}

func (s *Pulsestyle_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPulsestyle_declaration(s)
	}
}

func (p *SV2017Parser) Pulsestyle_declaration() (localctx IPulsestyle_declarationContext) {
	localctx = NewPulsestyle_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 708, SV2017ParserRULE_pulsestyle_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4979)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserKW_PULSESTYLE_ONDETECT || _la == SV2017ParserKW_PULSESTYLE_ONEVENT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(4980)
		p.List_of_path_outputs()
	}
	{
		p.SetState(4981)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IShowcancelled_declarationContext is an interface to support dynamic dispatch.
type IShowcancelled_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowcancelled_declarationContext differentiates from other interfaces.
	IsShowcancelled_declarationContext()
}

type Showcancelled_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowcancelled_declarationContext() *Showcancelled_declarationContext {
	var p = new(Showcancelled_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_showcancelled_declaration
	return p
}

func (*Showcancelled_declarationContext) IsShowcancelled_declarationContext() {}

func NewShowcancelled_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Showcancelled_declarationContext {
	var p = new(Showcancelled_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_showcancelled_declaration

	return p
}

func (s *Showcancelled_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Showcancelled_declarationContext) List_of_path_outputs() IList_of_path_outputsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_path_outputsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_path_outputsContext)
}

func (s *Showcancelled_declarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Showcancelled_declarationContext) KW_SHOWCANCELLED() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_SHOWCANCELLED, 0)
}

func (s *Showcancelled_declarationContext) KW_NOSHOWCANCELLED() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_NOSHOWCANCELLED, 0)
}

func (s *Showcancelled_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Showcancelled_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Showcancelled_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterShowcancelled_declaration(s)
	}
}

func (s *Showcancelled_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitShowcancelled_declaration(s)
	}
}

func (p *SV2017Parser) Showcancelled_declaration() (localctx IShowcancelled_declarationContext) {
	localctx = NewShowcancelled_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 710, SV2017ParserRULE_showcancelled_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4983)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserKW_NOSHOWCANCELLED || _la == SV2017ParserKW_SHOWCANCELLED) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(4984)
		p.List_of_path_outputs()
	}
	{
		p.SetState(4985)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IPath_declarationContext is an interface to support dynamic dispatch.
type IPath_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPath_declarationContext differentiates from other interfaces.
	IsPath_declarationContext()
}

type Path_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPath_declarationContext() *Path_declarationContext {
	var p = new(Path_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_path_declaration
	return p
}

func (*Path_declarationContext) IsPath_declarationContext() {}

func NewPath_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Path_declarationContext {
	var p = new(Path_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_path_declaration

	return p
}

func (s *Path_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Path_declarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Path_declarationContext) Simple_path_declaration() ISimple_path_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimple_path_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimple_path_declarationContext)
}

func (s *Path_declarationContext) Edge_sensitive_path_declaration() IEdge_sensitive_path_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEdge_sensitive_path_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEdge_sensitive_path_declarationContext)
}

func (s *Path_declarationContext) State_dependent_path_declaration() IState_dependent_path_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IState_dependent_path_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IState_dependent_path_declarationContext)
}

func (s *Path_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Path_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Path_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPath_declaration(s)
	}
}

func (s *Path_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPath_declaration(s)
	}
}

func (p *SV2017Parser) Path_declaration() (localctx IPath_declarationContext) {
	localctx = NewPath_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 712, SV2017ParserRULE_path_declaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4990)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 587, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(4987)
			p.Simple_path_declaration()
		}

	case 2:
		{
			p.SetState(4988)
			p.Edge_sensitive_path_declaration()
		}

	case 3:
		{
			p.SetState(4989)
			p.State_dependent_path_declaration()
		}

	}
	{
		p.SetState(4992)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// ISimple_path_declarationContext is an interface to support dynamic dispatch.
type ISimple_path_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSimple_path_declarationContext differentiates from other interfaces.
	IsSimple_path_declarationContext()
}

type Simple_path_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimple_path_declarationContext() *Simple_path_declarationContext {
	var p = new(Simple_path_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_simple_path_declaration
	return p
}

func (*Simple_path_declarationContext) IsSimple_path_declarationContext() {}

func NewSimple_path_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Simple_path_declarationContext {
	var p = new(Simple_path_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_simple_path_declaration

	return p
}

func (s *Simple_path_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Simple_path_declarationContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserASSIGN, 0)
}

func (s *Simple_path_declarationContext) Path_delay_value() IPath_delay_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPath_delay_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPath_delay_valueContext)
}

func (s *Simple_path_declarationContext) Parallel_path_description() IParallel_path_descriptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParallel_path_descriptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParallel_path_descriptionContext)
}

func (s *Simple_path_declarationContext) Full_path_description() IFull_path_descriptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_path_descriptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_path_descriptionContext)
}

func (s *Simple_path_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Simple_path_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Simple_path_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterSimple_path_declaration(s)
	}
}

func (s *Simple_path_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitSimple_path_declaration(s)
	}
}

func (p *SV2017Parser) Simple_path_declaration() (localctx ISimple_path_declarationContext) {
	localctx = NewSimple_path_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 714, SV2017ParserRULE_simple_path_declaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4996)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 588, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(4994)
			p.Parallel_path_description()
		}

	case 2:
		{
			p.SetState(4995)
			p.Full_path_description()
		}

	}
	{
		p.SetState(4998)
		p.Match(SV2017ParserASSIGN)
	}
	{
		p.SetState(4999)
		p.Path_delay_value()
	}

	return localctx
}

// IPath_delay_valueContext is an interface to support dynamic dispatch.
type IPath_delay_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPath_delay_valueContext differentiates from other interfaces.
	IsPath_delay_valueContext()
}

type Path_delay_valueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPath_delay_valueContext() *Path_delay_valueContext {
	var p = new(Path_delay_valueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_path_delay_value
	return p
}

func (*Path_delay_valueContext) IsPath_delay_valueContext() {}

func NewPath_delay_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Path_delay_valueContext {
	var p = new(Path_delay_valueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_path_delay_value

	return p
}

func (s *Path_delay_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Path_delay_valueContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Path_delay_valueContext) List_of_path_delay_expressions() IList_of_path_delay_expressionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_path_delay_expressionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_path_delay_expressionsContext)
}

func (s *Path_delay_valueContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Path_delay_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Path_delay_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Path_delay_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPath_delay_value(s)
	}
}

func (s *Path_delay_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPath_delay_value(s)
	}
}

func (p *SV2017Parser) Path_delay_value() (localctx IPath_delay_valueContext) {
	localctx = NewPath_delay_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 716, SV2017ParserRULE_path_delay_value)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5006)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 589, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5001)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(5002)
			p.List_of_path_delay_expressions()
		}
		{
			p.SetState(5003)
			p.Match(SV2017ParserRPAREN)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5005)
			p.List_of_path_delay_expressions()
		}

	}

	return localctx
}

// IList_of_path_outputsContext is an interface to support dynamic dispatch.
type IList_of_path_outputsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsList_of_path_outputsContext differentiates from other interfaces.
	IsList_of_path_outputsContext()
}

type List_of_path_outputsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyList_of_path_outputsContext() *List_of_path_outputsContext {
	var p = new(List_of_path_outputsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_list_of_path_outputs
	return p
}

func (*List_of_path_outputsContext) IsList_of_path_outputsContext() {}

func NewList_of_path_outputsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *List_of_path_outputsContext {
	var p = new(List_of_path_outputsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_list_of_path_outputs

	return p
}

func (s *List_of_path_outputsContext) GetParser() antlr.Parser { return s.parser }

func (s *List_of_path_outputsContext) List_of_paths() IList_of_pathsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_pathsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_pathsContext)
}

func (s *List_of_path_outputsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *List_of_path_outputsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *List_of_path_outputsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterList_of_path_outputs(s)
	}
}

func (s *List_of_path_outputsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitList_of_path_outputs(s)
	}
}

func (p *SV2017Parser) List_of_path_outputs() (localctx IList_of_path_outputsContext) {
	localctx = NewList_of_path_outputsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 718, SV2017ParserRULE_list_of_path_outputs)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5008)
		p.List_of_paths()
	}

	return localctx
}

// IList_of_path_inputsContext is an interface to support dynamic dispatch.
type IList_of_path_inputsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsList_of_path_inputsContext differentiates from other interfaces.
	IsList_of_path_inputsContext()
}

type List_of_path_inputsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyList_of_path_inputsContext() *List_of_path_inputsContext {
	var p = new(List_of_path_inputsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_list_of_path_inputs
	return p
}

func (*List_of_path_inputsContext) IsList_of_path_inputsContext() {}

func NewList_of_path_inputsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *List_of_path_inputsContext {
	var p = new(List_of_path_inputsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_list_of_path_inputs

	return p
}

func (s *List_of_path_inputsContext) GetParser() antlr.Parser { return s.parser }

func (s *List_of_path_inputsContext) List_of_paths() IList_of_pathsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_pathsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_pathsContext)
}

func (s *List_of_path_inputsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *List_of_path_inputsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *List_of_path_inputsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterList_of_path_inputs(s)
	}
}

func (s *List_of_path_inputsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitList_of_path_inputs(s)
	}
}

func (p *SV2017Parser) List_of_path_inputs() (localctx IList_of_path_inputsContext) {
	localctx = NewList_of_path_inputsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 720, SV2017ParserRULE_list_of_path_inputs)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5010)
		p.List_of_paths()
	}

	return localctx
}

// IList_of_pathsContext is an interface to support dynamic dispatch.
type IList_of_pathsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsList_of_pathsContext differentiates from other interfaces.
	IsList_of_pathsContext()
}

type List_of_pathsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyList_of_pathsContext() *List_of_pathsContext {
	var p = new(List_of_pathsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_list_of_paths
	return p
}

func (*List_of_pathsContext) IsList_of_pathsContext() {}

func NewList_of_pathsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *List_of_pathsContext {
	var p = new(List_of_pathsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_list_of_paths

	return p
}

func (s *List_of_pathsContext) GetParser() antlr.Parser { return s.parser }

func (s *List_of_pathsContext) AllIdentifier_doted_index_at_end() []IIdentifier_doted_index_at_endContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifier_doted_index_at_endContext)(nil)).Elem())
	var tst = make([]IIdentifier_doted_index_at_endContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifier_doted_index_at_endContext)
		}
	}

	return tst
}

func (s *List_of_pathsContext) Identifier_doted_index_at_end(i int) IIdentifier_doted_index_at_endContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_doted_index_at_endContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_doted_index_at_endContext)
}

func (s *List_of_pathsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *List_of_pathsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *List_of_pathsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *List_of_pathsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *List_of_pathsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterList_of_paths(s)
	}
}

func (s *List_of_pathsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitList_of_paths(s)
	}
}

func (p *SV2017Parser) List_of_paths() (localctx IList_of_pathsContext) {
	localctx = NewList_of_pathsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 722, SV2017ParserRULE_list_of_paths)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5012)
		p.Identifier_doted_index_at_end()
	}
	p.SetState(5017)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserCOMMA {
		{
			p.SetState(5013)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(5014)
			p.Identifier_doted_index_at_end()
		}

		p.SetState(5019)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IList_of_path_delay_expressionsContext is an interface to support dynamic dispatch.
type IList_of_path_delay_expressionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsList_of_path_delay_expressionsContext differentiates from other interfaces.
	IsList_of_path_delay_expressionsContext()
}

type List_of_path_delay_expressionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyList_of_path_delay_expressionsContext() *List_of_path_delay_expressionsContext {
	var p = new(List_of_path_delay_expressionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_list_of_path_delay_expressions
	return p
}

func (*List_of_path_delay_expressionsContext) IsList_of_path_delay_expressionsContext() {}

func NewList_of_path_delay_expressionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *List_of_path_delay_expressionsContext {
	var p = new(List_of_path_delay_expressionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_list_of_path_delay_expressions

	return p
}

func (s *List_of_path_delay_expressionsContext) GetParser() antlr.Parser { return s.parser }

func (s *List_of_path_delay_expressionsContext) T_path_delay_expression() IT_path_delay_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IT_path_delay_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IT_path_delay_expressionContext)
}

func (s *List_of_path_delay_expressionsContext) Trise_path_delay_expression() ITrise_path_delay_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITrise_path_delay_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITrise_path_delay_expressionContext)
}

func (s *List_of_path_delay_expressionsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *List_of_path_delay_expressionsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *List_of_path_delay_expressionsContext) Tfall_path_delay_expression() ITfall_path_delay_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITfall_path_delay_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITfall_path_delay_expressionContext)
}

func (s *List_of_path_delay_expressionsContext) Tz_path_delay_expression() ITz_path_delay_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITz_path_delay_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITz_path_delay_expressionContext)
}

func (s *List_of_path_delay_expressionsContext) T01_path_delay_expression() IT01_path_delay_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IT01_path_delay_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IT01_path_delay_expressionContext)
}

func (s *List_of_path_delay_expressionsContext) T10_path_delay_expression() IT10_path_delay_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IT10_path_delay_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IT10_path_delay_expressionContext)
}

func (s *List_of_path_delay_expressionsContext) T0z_path_delay_expression() IT0z_path_delay_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IT0z_path_delay_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IT0z_path_delay_expressionContext)
}

func (s *List_of_path_delay_expressionsContext) Tz1_path_delay_expression() ITz1_path_delay_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITz1_path_delay_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITz1_path_delay_expressionContext)
}

func (s *List_of_path_delay_expressionsContext) T1z_path_delay_expression() IT1z_path_delay_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IT1z_path_delay_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IT1z_path_delay_expressionContext)
}

func (s *List_of_path_delay_expressionsContext) Tz0_path_delay_expression() ITz0_path_delay_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITz0_path_delay_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITz0_path_delay_expressionContext)
}

func (s *List_of_path_delay_expressionsContext) T0x_path_delay_expression() IT0x_path_delay_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IT0x_path_delay_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IT0x_path_delay_expressionContext)
}

func (s *List_of_path_delay_expressionsContext) Tx1_path_delay_expression() ITx1_path_delay_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITx1_path_delay_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITx1_path_delay_expressionContext)
}

func (s *List_of_path_delay_expressionsContext) T1x_path_delay_expression() IT1x_path_delay_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IT1x_path_delay_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IT1x_path_delay_expressionContext)
}

func (s *List_of_path_delay_expressionsContext) Tx0_path_delay_expression() ITx0_path_delay_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITx0_path_delay_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITx0_path_delay_expressionContext)
}

func (s *List_of_path_delay_expressionsContext) Txz_path_delay_expression() ITxz_path_delay_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITxz_path_delay_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITxz_path_delay_expressionContext)
}

func (s *List_of_path_delay_expressionsContext) Tzx_path_delay_expression() ITzx_path_delay_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITzx_path_delay_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITzx_path_delay_expressionContext)
}

func (s *List_of_path_delay_expressionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *List_of_path_delay_expressionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *List_of_path_delay_expressionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterList_of_path_delay_expressions(s)
	}
}

func (s *List_of_path_delay_expressionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitList_of_path_delay_expressions(s)
	}
}

func (p *SV2017Parser) List_of_path_delay_expressions() (localctx IList_of_path_delay_expressionsContext) {
	localctx = NewList_of_path_delay_expressionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 724, SV2017ParserRULE_list_of_path_delay_expressions)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5054)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 593, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5020)
			p.T_path_delay_expression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5021)
			p.Trise_path_delay_expression()
		}
		{
			p.SetState(5022)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(5023)
			p.Tfall_path_delay_expression()
		}
		p.SetState(5026)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserCOMMA {
			{
				p.SetState(5024)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(5025)
				p.Tz_path_delay_expression()
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5028)
			p.T01_path_delay_expression()
		}
		{
			p.SetState(5029)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(5030)
			p.T10_path_delay_expression()
		}
		{
			p.SetState(5031)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(5032)
			p.T0z_path_delay_expression()
		}
		{
			p.SetState(5033)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(5034)
			p.Tz1_path_delay_expression()
		}
		{
			p.SetState(5035)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(5036)
			p.T1z_path_delay_expression()
		}
		{
			p.SetState(5037)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(5038)
			p.Tz0_path_delay_expression()
		}
		p.SetState(5052)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserCOMMA {
			{
				p.SetState(5039)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(5040)
				p.T0x_path_delay_expression()
			}
			{
				p.SetState(5041)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(5042)
				p.Tx1_path_delay_expression()
			}
			{
				p.SetState(5043)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(5044)
				p.T1x_path_delay_expression()
			}
			{
				p.SetState(5045)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(5046)
				p.Tx0_path_delay_expression()
			}
			{
				p.SetState(5047)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(5048)
				p.Txz_path_delay_expression()
			}
			{
				p.SetState(5049)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(5050)
				p.Tzx_path_delay_expression()
			}

		}

	}

	return localctx
}

// IT_path_delay_expressionContext is an interface to support dynamic dispatch.
type IT_path_delay_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsT_path_delay_expressionContext differentiates from other interfaces.
	IsT_path_delay_expressionContext()
}

type T_path_delay_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyT_path_delay_expressionContext() *T_path_delay_expressionContext {
	var p = new(T_path_delay_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_t_path_delay_expression
	return p
}

func (*T_path_delay_expressionContext) IsT_path_delay_expressionContext() {}

func NewT_path_delay_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *T_path_delay_expressionContext {
	var p = new(T_path_delay_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_t_path_delay_expression

	return p
}

func (s *T_path_delay_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *T_path_delay_expressionContext) Constant_mintypmax_expression() IConstant_mintypmax_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_mintypmax_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_mintypmax_expressionContext)
}

func (s *T_path_delay_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *T_path_delay_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *T_path_delay_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterT_path_delay_expression(s)
	}
}

func (s *T_path_delay_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitT_path_delay_expression(s)
	}
}

func (p *SV2017Parser) T_path_delay_expression() (localctx IT_path_delay_expressionContext) {
	localctx = NewT_path_delay_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 726, SV2017ParserRULE_t_path_delay_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5056)
		p.Constant_mintypmax_expression()
	}

	return localctx
}

// ITrise_path_delay_expressionContext is an interface to support dynamic dispatch.
type ITrise_path_delay_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTrise_path_delay_expressionContext differentiates from other interfaces.
	IsTrise_path_delay_expressionContext()
}

type Trise_path_delay_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTrise_path_delay_expressionContext() *Trise_path_delay_expressionContext {
	var p = new(Trise_path_delay_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_trise_path_delay_expression
	return p
}

func (*Trise_path_delay_expressionContext) IsTrise_path_delay_expressionContext() {}

func NewTrise_path_delay_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Trise_path_delay_expressionContext {
	var p = new(Trise_path_delay_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_trise_path_delay_expression

	return p
}

func (s *Trise_path_delay_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Trise_path_delay_expressionContext) Constant_mintypmax_expression() IConstant_mintypmax_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_mintypmax_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_mintypmax_expressionContext)
}

func (s *Trise_path_delay_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Trise_path_delay_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Trise_path_delay_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterTrise_path_delay_expression(s)
	}
}

func (s *Trise_path_delay_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitTrise_path_delay_expression(s)
	}
}

func (p *SV2017Parser) Trise_path_delay_expression() (localctx ITrise_path_delay_expressionContext) {
	localctx = NewTrise_path_delay_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 728, SV2017ParserRULE_trise_path_delay_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5058)
		p.Constant_mintypmax_expression()
	}

	return localctx
}

// ITfall_path_delay_expressionContext is an interface to support dynamic dispatch.
type ITfall_path_delay_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTfall_path_delay_expressionContext differentiates from other interfaces.
	IsTfall_path_delay_expressionContext()
}

type Tfall_path_delay_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTfall_path_delay_expressionContext() *Tfall_path_delay_expressionContext {
	var p = new(Tfall_path_delay_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_tfall_path_delay_expression
	return p
}

func (*Tfall_path_delay_expressionContext) IsTfall_path_delay_expressionContext() {}

func NewTfall_path_delay_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tfall_path_delay_expressionContext {
	var p = new(Tfall_path_delay_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_tfall_path_delay_expression

	return p
}

func (s *Tfall_path_delay_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Tfall_path_delay_expressionContext) Constant_mintypmax_expression() IConstant_mintypmax_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_mintypmax_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_mintypmax_expressionContext)
}

func (s *Tfall_path_delay_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tfall_path_delay_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tfall_path_delay_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterTfall_path_delay_expression(s)
	}
}

func (s *Tfall_path_delay_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitTfall_path_delay_expression(s)
	}
}

func (p *SV2017Parser) Tfall_path_delay_expression() (localctx ITfall_path_delay_expressionContext) {
	localctx = NewTfall_path_delay_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 730, SV2017ParserRULE_tfall_path_delay_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5060)
		p.Constant_mintypmax_expression()
	}

	return localctx
}

// ITz_path_delay_expressionContext is an interface to support dynamic dispatch.
type ITz_path_delay_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTz_path_delay_expressionContext differentiates from other interfaces.
	IsTz_path_delay_expressionContext()
}

type Tz_path_delay_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTz_path_delay_expressionContext() *Tz_path_delay_expressionContext {
	var p = new(Tz_path_delay_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_tz_path_delay_expression
	return p
}

func (*Tz_path_delay_expressionContext) IsTz_path_delay_expressionContext() {}

func NewTz_path_delay_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tz_path_delay_expressionContext {
	var p = new(Tz_path_delay_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_tz_path_delay_expression

	return p
}

func (s *Tz_path_delay_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Tz_path_delay_expressionContext) Constant_mintypmax_expression() IConstant_mintypmax_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_mintypmax_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_mintypmax_expressionContext)
}

func (s *Tz_path_delay_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tz_path_delay_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tz_path_delay_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterTz_path_delay_expression(s)
	}
}

func (s *Tz_path_delay_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitTz_path_delay_expression(s)
	}
}

func (p *SV2017Parser) Tz_path_delay_expression() (localctx ITz_path_delay_expressionContext) {
	localctx = NewTz_path_delay_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 732, SV2017ParserRULE_tz_path_delay_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5062)
		p.Constant_mintypmax_expression()
	}

	return localctx
}

// IT01_path_delay_expressionContext is an interface to support dynamic dispatch.
type IT01_path_delay_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsT01_path_delay_expressionContext differentiates from other interfaces.
	IsT01_path_delay_expressionContext()
}

type T01_path_delay_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyT01_path_delay_expressionContext() *T01_path_delay_expressionContext {
	var p = new(T01_path_delay_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_t01_path_delay_expression
	return p
}

func (*T01_path_delay_expressionContext) IsT01_path_delay_expressionContext() {}

func NewT01_path_delay_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *T01_path_delay_expressionContext {
	var p = new(T01_path_delay_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_t01_path_delay_expression

	return p
}

func (s *T01_path_delay_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *T01_path_delay_expressionContext) Constant_mintypmax_expression() IConstant_mintypmax_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_mintypmax_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_mintypmax_expressionContext)
}

func (s *T01_path_delay_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *T01_path_delay_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *T01_path_delay_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterT01_path_delay_expression(s)
	}
}

func (s *T01_path_delay_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitT01_path_delay_expression(s)
	}
}

func (p *SV2017Parser) T01_path_delay_expression() (localctx IT01_path_delay_expressionContext) {
	localctx = NewT01_path_delay_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 734, SV2017ParserRULE_t01_path_delay_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5064)
		p.Constant_mintypmax_expression()
	}

	return localctx
}

// IT10_path_delay_expressionContext is an interface to support dynamic dispatch.
type IT10_path_delay_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsT10_path_delay_expressionContext differentiates from other interfaces.
	IsT10_path_delay_expressionContext()
}

type T10_path_delay_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyT10_path_delay_expressionContext() *T10_path_delay_expressionContext {
	var p = new(T10_path_delay_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_t10_path_delay_expression
	return p
}

func (*T10_path_delay_expressionContext) IsT10_path_delay_expressionContext() {}

func NewT10_path_delay_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *T10_path_delay_expressionContext {
	var p = new(T10_path_delay_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_t10_path_delay_expression

	return p
}

func (s *T10_path_delay_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *T10_path_delay_expressionContext) Constant_mintypmax_expression() IConstant_mintypmax_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_mintypmax_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_mintypmax_expressionContext)
}

func (s *T10_path_delay_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *T10_path_delay_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *T10_path_delay_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterT10_path_delay_expression(s)
	}
}

func (s *T10_path_delay_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitT10_path_delay_expression(s)
	}
}

func (p *SV2017Parser) T10_path_delay_expression() (localctx IT10_path_delay_expressionContext) {
	localctx = NewT10_path_delay_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 736, SV2017ParserRULE_t10_path_delay_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5066)
		p.Constant_mintypmax_expression()
	}

	return localctx
}

// IT0z_path_delay_expressionContext is an interface to support dynamic dispatch.
type IT0z_path_delay_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsT0z_path_delay_expressionContext differentiates from other interfaces.
	IsT0z_path_delay_expressionContext()
}

type T0z_path_delay_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyT0z_path_delay_expressionContext() *T0z_path_delay_expressionContext {
	var p = new(T0z_path_delay_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_t0z_path_delay_expression
	return p
}

func (*T0z_path_delay_expressionContext) IsT0z_path_delay_expressionContext() {}

func NewT0z_path_delay_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *T0z_path_delay_expressionContext {
	var p = new(T0z_path_delay_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_t0z_path_delay_expression

	return p
}

func (s *T0z_path_delay_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *T0z_path_delay_expressionContext) Constant_mintypmax_expression() IConstant_mintypmax_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_mintypmax_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_mintypmax_expressionContext)
}

func (s *T0z_path_delay_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *T0z_path_delay_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *T0z_path_delay_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterT0z_path_delay_expression(s)
	}
}

func (s *T0z_path_delay_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitT0z_path_delay_expression(s)
	}
}

func (p *SV2017Parser) T0z_path_delay_expression() (localctx IT0z_path_delay_expressionContext) {
	localctx = NewT0z_path_delay_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 738, SV2017ParserRULE_t0z_path_delay_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5068)
		p.Constant_mintypmax_expression()
	}

	return localctx
}

// ITz1_path_delay_expressionContext is an interface to support dynamic dispatch.
type ITz1_path_delay_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTz1_path_delay_expressionContext differentiates from other interfaces.
	IsTz1_path_delay_expressionContext()
}

type Tz1_path_delay_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTz1_path_delay_expressionContext() *Tz1_path_delay_expressionContext {
	var p = new(Tz1_path_delay_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_tz1_path_delay_expression
	return p
}

func (*Tz1_path_delay_expressionContext) IsTz1_path_delay_expressionContext() {}

func NewTz1_path_delay_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tz1_path_delay_expressionContext {
	var p = new(Tz1_path_delay_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_tz1_path_delay_expression

	return p
}

func (s *Tz1_path_delay_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Tz1_path_delay_expressionContext) Constant_mintypmax_expression() IConstant_mintypmax_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_mintypmax_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_mintypmax_expressionContext)
}

func (s *Tz1_path_delay_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tz1_path_delay_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tz1_path_delay_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterTz1_path_delay_expression(s)
	}
}

func (s *Tz1_path_delay_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitTz1_path_delay_expression(s)
	}
}

func (p *SV2017Parser) Tz1_path_delay_expression() (localctx ITz1_path_delay_expressionContext) {
	localctx = NewTz1_path_delay_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 740, SV2017ParserRULE_tz1_path_delay_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5070)
		p.Constant_mintypmax_expression()
	}

	return localctx
}

// IT1z_path_delay_expressionContext is an interface to support dynamic dispatch.
type IT1z_path_delay_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsT1z_path_delay_expressionContext differentiates from other interfaces.
	IsT1z_path_delay_expressionContext()
}

type T1z_path_delay_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyT1z_path_delay_expressionContext() *T1z_path_delay_expressionContext {
	var p = new(T1z_path_delay_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_t1z_path_delay_expression
	return p
}

func (*T1z_path_delay_expressionContext) IsT1z_path_delay_expressionContext() {}

func NewT1z_path_delay_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *T1z_path_delay_expressionContext {
	var p = new(T1z_path_delay_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_t1z_path_delay_expression

	return p
}

func (s *T1z_path_delay_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *T1z_path_delay_expressionContext) Constant_mintypmax_expression() IConstant_mintypmax_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_mintypmax_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_mintypmax_expressionContext)
}

func (s *T1z_path_delay_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *T1z_path_delay_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *T1z_path_delay_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterT1z_path_delay_expression(s)
	}
}

func (s *T1z_path_delay_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitT1z_path_delay_expression(s)
	}
}

func (p *SV2017Parser) T1z_path_delay_expression() (localctx IT1z_path_delay_expressionContext) {
	localctx = NewT1z_path_delay_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 742, SV2017ParserRULE_t1z_path_delay_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5072)
		p.Constant_mintypmax_expression()
	}

	return localctx
}

// ITz0_path_delay_expressionContext is an interface to support dynamic dispatch.
type ITz0_path_delay_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTz0_path_delay_expressionContext differentiates from other interfaces.
	IsTz0_path_delay_expressionContext()
}

type Tz0_path_delay_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTz0_path_delay_expressionContext() *Tz0_path_delay_expressionContext {
	var p = new(Tz0_path_delay_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_tz0_path_delay_expression
	return p
}

func (*Tz0_path_delay_expressionContext) IsTz0_path_delay_expressionContext() {}

func NewTz0_path_delay_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tz0_path_delay_expressionContext {
	var p = new(Tz0_path_delay_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_tz0_path_delay_expression

	return p
}

func (s *Tz0_path_delay_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Tz0_path_delay_expressionContext) Constant_mintypmax_expression() IConstant_mintypmax_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_mintypmax_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_mintypmax_expressionContext)
}

func (s *Tz0_path_delay_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tz0_path_delay_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tz0_path_delay_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterTz0_path_delay_expression(s)
	}
}

func (s *Tz0_path_delay_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitTz0_path_delay_expression(s)
	}
}

func (p *SV2017Parser) Tz0_path_delay_expression() (localctx ITz0_path_delay_expressionContext) {
	localctx = NewTz0_path_delay_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 744, SV2017ParserRULE_tz0_path_delay_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5074)
		p.Constant_mintypmax_expression()
	}

	return localctx
}

// IT0x_path_delay_expressionContext is an interface to support dynamic dispatch.
type IT0x_path_delay_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsT0x_path_delay_expressionContext differentiates from other interfaces.
	IsT0x_path_delay_expressionContext()
}

type T0x_path_delay_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyT0x_path_delay_expressionContext() *T0x_path_delay_expressionContext {
	var p = new(T0x_path_delay_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_t0x_path_delay_expression
	return p
}

func (*T0x_path_delay_expressionContext) IsT0x_path_delay_expressionContext() {}

func NewT0x_path_delay_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *T0x_path_delay_expressionContext {
	var p = new(T0x_path_delay_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_t0x_path_delay_expression

	return p
}

func (s *T0x_path_delay_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *T0x_path_delay_expressionContext) Constant_mintypmax_expression() IConstant_mintypmax_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_mintypmax_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_mintypmax_expressionContext)
}

func (s *T0x_path_delay_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *T0x_path_delay_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *T0x_path_delay_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterT0x_path_delay_expression(s)
	}
}

func (s *T0x_path_delay_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitT0x_path_delay_expression(s)
	}
}

func (p *SV2017Parser) T0x_path_delay_expression() (localctx IT0x_path_delay_expressionContext) {
	localctx = NewT0x_path_delay_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 746, SV2017ParserRULE_t0x_path_delay_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5076)
		p.Constant_mintypmax_expression()
	}

	return localctx
}

// ITx1_path_delay_expressionContext is an interface to support dynamic dispatch.
type ITx1_path_delay_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTx1_path_delay_expressionContext differentiates from other interfaces.
	IsTx1_path_delay_expressionContext()
}

type Tx1_path_delay_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTx1_path_delay_expressionContext() *Tx1_path_delay_expressionContext {
	var p = new(Tx1_path_delay_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_tx1_path_delay_expression
	return p
}

func (*Tx1_path_delay_expressionContext) IsTx1_path_delay_expressionContext() {}

func NewTx1_path_delay_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tx1_path_delay_expressionContext {
	var p = new(Tx1_path_delay_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_tx1_path_delay_expression

	return p
}

func (s *Tx1_path_delay_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Tx1_path_delay_expressionContext) Constant_mintypmax_expression() IConstant_mintypmax_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_mintypmax_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_mintypmax_expressionContext)
}

func (s *Tx1_path_delay_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tx1_path_delay_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tx1_path_delay_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterTx1_path_delay_expression(s)
	}
}

func (s *Tx1_path_delay_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitTx1_path_delay_expression(s)
	}
}

func (p *SV2017Parser) Tx1_path_delay_expression() (localctx ITx1_path_delay_expressionContext) {
	localctx = NewTx1_path_delay_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 748, SV2017ParserRULE_tx1_path_delay_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5078)
		p.Constant_mintypmax_expression()
	}

	return localctx
}

// IT1x_path_delay_expressionContext is an interface to support dynamic dispatch.
type IT1x_path_delay_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsT1x_path_delay_expressionContext differentiates from other interfaces.
	IsT1x_path_delay_expressionContext()
}

type T1x_path_delay_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyT1x_path_delay_expressionContext() *T1x_path_delay_expressionContext {
	var p = new(T1x_path_delay_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_t1x_path_delay_expression
	return p
}

func (*T1x_path_delay_expressionContext) IsT1x_path_delay_expressionContext() {}

func NewT1x_path_delay_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *T1x_path_delay_expressionContext {
	var p = new(T1x_path_delay_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_t1x_path_delay_expression

	return p
}

func (s *T1x_path_delay_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *T1x_path_delay_expressionContext) Constant_mintypmax_expression() IConstant_mintypmax_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_mintypmax_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_mintypmax_expressionContext)
}

func (s *T1x_path_delay_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *T1x_path_delay_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *T1x_path_delay_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterT1x_path_delay_expression(s)
	}
}

func (s *T1x_path_delay_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitT1x_path_delay_expression(s)
	}
}

func (p *SV2017Parser) T1x_path_delay_expression() (localctx IT1x_path_delay_expressionContext) {
	localctx = NewT1x_path_delay_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 750, SV2017ParserRULE_t1x_path_delay_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5080)
		p.Constant_mintypmax_expression()
	}

	return localctx
}

// ITx0_path_delay_expressionContext is an interface to support dynamic dispatch.
type ITx0_path_delay_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTx0_path_delay_expressionContext differentiates from other interfaces.
	IsTx0_path_delay_expressionContext()
}

type Tx0_path_delay_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTx0_path_delay_expressionContext() *Tx0_path_delay_expressionContext {
	var p = new(Tx0_path_delay_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_tx0_path_delay_expression
	return p
}

func (*Tx0_path_delay_expressionContext) IsTx0_path_delay_expressionContext() {}

func NewTx0_path_delay_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tx0_path_delay_expressionContext {
	var p = new(Tx0_path_delay_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_tx0_path_delay_expression

	return p
}

func (s *Tx0_path_delay_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Tx0_path_delay_expressionContext) Constant_mintypmax_expression() IConstant_mintypmax_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_mintypmax_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_mintypmax_expressionContext)
}

func (s *Tx0_path_delay_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tx0_path_delay_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tx0_path_delay_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterTx0_path_delay_expression(s)
	}
}

func (s *Tx0_path_delay_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitTx0_path_delay_expression(s)
	}
}

func (p *SV2017Parser) Tx0_path_delay_expression() (localctx ITx0_path_delay_expressionContext) {
	localctx = NewTx0_path_delay_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 752, SV2017ParserRULE_tx0_path_delay_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5082)
		p.Constant_mintypmax_expression()
	}

	return localctx
}

// ITxz_path_delay_expressionContext is an interface to support dynamic dispatch.
type ITxz_path_delay_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTxz_path_delay_expressionContext differentiates from other interfaces.
	IsTxz_path_delay_expressionContext()
}

type Txz_path_delay_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTxz_path_delay_expressionContext() *Txz_path_delay_expressionContext {
	var p = new(Txz_path_delay_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_txz_path_delay_expression
	return p
}

func (*Txz_path_delay_expressionContext) IsTxz_path_delay_expressionContext() {}

func NewTxz_path_delay_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Txz_path_delay_expressionContext {
	var p = new(Txz_path_delay_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_txz_path_delay_expression

	return p
}

func (s *Txz_path_delay_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Txz_path_delay_expressionContext) Constant_mintypmax_expression() IConstant_mintypmax_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_mintypmax_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_mintypmax_expressionContext)
}

func (s *Txz_path_delay_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Txz_path_delay_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Txz_path_delay_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterTxz_path_delay_expression(s)
	}
}

func (s *Txz_path_delay_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitTxz_path_delay_expression(s)
	}
}

func (p *SV2017Parser) Txz_path_delay_expression() (localctx ITxz_path_delay_expressionContext) {
	localctx = NewTxz_path_delay_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 754, SV2017ParserRULE_txz_path_delay_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5084)
		p.Constant_mintypmax_expression()
	}

	return localctx
}

// ITzx_path_delay_expressionContext is an interface to support dynamic dispatch.
type ITzx_path_delay_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTzx_path_delay_expressionContext differentiates from other interfaces.
	IsTzx_path_delay_expressionContext()
}

type Tzx_path_delay_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTzx_path_delay_expressionContext() *Tzx_path_delay_expressionContext {
	var p = new(Tzx_path_delay_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_tzx_path_delay_expression
	return p
}

func (*Tzx_path_delay_expressionContext) IsTzx_path_delay_expressionContext() {}

func NewTzx_path_delay_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tzx_path_delay_expressionContext {
	var p = new(Tzx_path_delay_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_tzx_path_delay_expression

	return p
}

func (s *Tzx_path_delay_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Tzx_path_delay_expressionContext) Constant_mintypmax_expression() IConstant_mintypmax_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_mintypmax_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_mintypmax_expressionContext)
}

func (s *Tzx_path_delay_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tzx_path_delay_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tzx_path_delay_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterTzx_path_delay_expression(s)
	}
}

func (s *Tzx_path_delay_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitTzx_path_delay_expression(s)
	}
}

func (p *SV2017Parser) Tzx_path_delay_expression() (localctx ITzx_path_delay_expressionContext) {
	localctx = NewTzx_path_delay_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 756, SV2017ParserRULE_tzx_path_delay_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5086)
		p.Constant_mintypmax_expression()
	}

	return localctx
}

// IParallel_path_descriptionContext is an interface to support dynamic dispatch.
type IParallel_path_descriptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParallel_path_descriptionContext differentiates from other interfaces.
	IsParallel_path_descriptionContext()
}

type Parallel_path_descriptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParallel_path_descriptionContext() *Parallel_path_descriptionContext {
	var p = new(Parallel_path_descriptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_parallel_path_description
	return p
}

func (*Parallel_path_descriptionContext) IsParallel_path_descriptionContext() {}

func NewParallel_path_descriptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Parallel_path_descriptionContext {
	var p = new(Parallel_path_descriptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_parallel_path_description

	return p
}

func (s *Parallel_path_descriptionContext) GetParser() antlr.Parser { return s.parser }

func (s *Parallel_path_descriptionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Parallel_path_descriptionContext) Specify_input_terminal_descriptor() ISpecify_input_terminal_descriptorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISpecify_input_terminal_descriptorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISpecify_input_terminal_descriptorContext)
}

func (s *Parallel_path_descriptionContext) Any_implication() IAny_implicationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_implicationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_implicationContext)
}

func (s *Parallel_path_descriptionContext) Specify_output_terminal_descriptor() ISpecify_output_terminal_descriptorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISpecify_output_terminal_descriptorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISpecify_output_terminal_descriptorContext)
}

func (s *Parallel_path_descriptionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Parallel_path_descriptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Parallel_path_descriptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Parallel_path_descriptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterParallel_path_description(s)
	}
}

func (s *Parallel_path_descriptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitParallel_path_description(s)
	}
}

func (p *SV2017Parser) Parallel_path_description() (localctx IParallel_path_descriptionContext) {
	localctx = NewParallel_path_descriptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 758, SV2017ParserRULE_parallel_path_description)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5088)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(5089)
		p.Specify_input_terminal_descriptor()
	}
	{
		p.SetState(5090)
		p.Any_implication()
	}
	{
		p.SetState(5091)
		p.Specify_output_terminal_descriptor()
	}
	{
		p.SetState(5092)
		p.Match(SV2017ParserRPAREN)
	}

	return localctx
}

// IFull_path_descriptionContext is an interface to support dynamic dispatch.
type IFull_path_descriptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFull_path_descriptionContext differentiates from other interfaces.
	IsFull_path_descriptionContext()
}

type Full_path_descriptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFull_path_descriptionContext() *Full_path_descriptionContext {
	var p = new(Full_path_descriptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_full_path_description
	return p
}

func (*Full_path_descriptionContext) IsFull_path_descriptionContext() {}

func NewFull_path_descriptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Full_path_descriptionContext {
	var p = new(Full_path_descriptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_full_path_description

	return p
}

func (s *Full_path_descriptionContext) GetParser() antlr.Parser { return s.parser }

func (s *Full_path_descriptionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Full_path_descriptionContext) List_of_path_inputs() IList_of_path_inputsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_path_inputsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_path_inputsContext)
}

func (s *Full_path_descriptionContext) PATH_FULL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserPATH_FULL, 0)
}

func (s *Full_path_descriptionContext) List_of_path_outputs() IList_of_path_outputsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_path_outputsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_path_outputsContext)
}

func (s *Full_path_descriptionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Full_path_descriptionContext) Polarity_operator() IPolarity_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPolarity_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPolarity_operatorContext)
}

func (s *Full_path_descriptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Full_path_descriptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Full_path_descriptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterFull_path_description(s)
	}
}

func (s *Full_path_descriptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitFull_path_description(s)
	}
}

func (p *SV2017Parser) Full_path_description() (localctx IFull_path_descriptionContext) {
	localctx = NewFull_path_descriptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 760, SV2017ParserRULE_full_path_description)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5094)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(5095)
		p.List_of_path_inputs()
	}
	p.SetState(5097)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserPLUS || _la == SV2017ParserMINUS {
		{
			p.SetState(5096)
			p.Polarity_operator()
		}

	}
	{
		p.SetState(5099)
		p.Match(SV2017ParserPATH_FULL)
	}
	{
		p.SetState(5100)
		p.List_of_path_outputs()
	}
	{
		p.SetState(5101)
		p.Match(SV2017ParserRPAREN)
	}

	return localctx
}

// IIdentifier_listContext is an interface to support dynamic dispatch.
type IIdentifier_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifier_listContext differentiates from other interfaces.
	IsIdentifier_listContext()
}

type Identifier_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifier_listContext() *Identifier_listContext {
	var p = new(Identifier_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_identifier_list
	return p
}

func (*Identifier_listContext) IsIdentifier_listContext() {}

func NewIdentifier_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Identifier_listContext {
	var p = new(Identifier_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_identifier_list

	return p
}

func (s *Identifier_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Identifier_listContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Identifier_listContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Identifier_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Identifier_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Identifier_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Identifier_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Identifier_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterIdentifier_list(s)
	}
}

func (s *Identifier_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitIdentifier_list(s)
	}
}

func (p *SV2017Parser) Identifier_list() (localctx IIdentifier_listContext) {
	localctx = NewIdentifier_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 762, SV2017ParserRULE_identifier_list)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5103)
		p.Identifier()
	}
	p.SetState(5108)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 595, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(5104)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(5105)
				p.Identifier()
			}

		}
		p.SetState(5110)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 595, p.GetParserRuleContext())
	}

	return localctx
}

// ISpecparam_declarationContext is an interface to support dynamic dispatch.
type ISpecparam_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSpecparam_declarationContext differentiates from other interfaces.
	IsSpecparam_declarationContext()
}

type Specparam_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySpecparam_declarationContext() *Specparam_declarationContext {
	var p = new(Specparam_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_specparam_declaration
	return p
}

func (*Specparam_declarationContext) IsSpecparam_declarationContext() {}

func NewSpecparam_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Specparam_declarationContext {
	var p = new(Specparam_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_specparam_declaration

	return p
}

func (s *Specparam_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Specparam_declarationContext) KW_SPECPARAM() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_SPECPARAM, 0)
}

func (s *Specparam_declarationContext) List_of_specparam_assignments() IList_of_specparam_assignmentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_specparam_assignmentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_specparam_assignmentsContext)
}

func (s *Specparam_declarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Specparam_declarationContext) Packed_dimension() IPacked_dimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPacked_dimensionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPacked_dimensionContext)
}

func (s *Specparam_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Specparam_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Specparam_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterSpecparam_declaration(s)
	}
}

func (s *Specparam_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitSpecparam_declaration(s)
	}
}

func (p *SV2017Parser) Specparam_declaration() (localctx ISpecparam_declarationContext) {
	localctx = NewSpecparam_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 764, SV2017ParserRULE_specparam_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5111)
		p.Match(SV2017ParserKW_SPECPARAM)
	}
	p.SetState(5113)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserLSQUARE_BR {
		{
			p.SetState(5112)
			p.Packed_dimension()
		}

	}
	{
		p.SetState(5115)
		p.List_of_specparam_assignments()
	}
	{
		p.SetState(5116)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IEdge_sensitive_path_declarationContext is an interface to support dynamic dispatch.
type IEdge_sensitive_path_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEdge_sensitive_path_declarationContext differentiates from other interfaces.
	IsEdge_sensitive_path_declarationContext()
}

type Edge_sensitive_path_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEdge_sensitive_path_declarationContext() *Edge_sensitive_path_declarationContext {
	var p = new(Edge_sensitive_path_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_edge_sensitive_path_declaration
	return p
}

func (*Edge_sensitive_path_declarationContext) IsEdge_sensitive_path_declarationContext() {}

func NewEdge_sensitive_path_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Edge_sensitive_path_declarationContext {
	var p = new(Edge_sensitive_path_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_edge_sensitive_path_declaration

	return p
}

func (s *Edge_sensitive_path_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Edge_sensitive_path_declarationContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserASSIGN, 0)
}

func (s *Edge_sensitive_path_declarationContext) Path_delay_value() IPath_delay_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPath_delay_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPath_delay_valueContext)
}

func (s *Edge_sensitive_path_declarationContext) Parallel_edge_sensitive_path_description() IParallel_edge_sensitive_path_descriptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParallel_edge_sensitive_path_descriptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParallel_edge_sensitive_path_descriptionContext)
}

func (s *Edge_sensitive_path_declarationContext) Full_edge_sensitive_path_description() IFull_edge_sensitive_path_descriptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_edge_sensitive_path_descriptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_edge_sensitive_path_descriptionContext)
}

func (s *Edge_sensitive_path_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Edge_sensitive_path_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Edge_sensitive_path_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterEdge_sensitive_path_declaration(s)
	}
}

func (s *Edge_sensitive_path_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitEdge_sensitive_path_declaration(s)
	}
}

func (p *SV2017Parser) Edge_sensitive_path_declaration() (localctx IEdge_sensitive_path_declarationContext) {
	localctx = NewEdge_sensitive_path_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 766, SV2017ParserRULE_edge_sensitive_path_declaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5120)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 597, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(5118)
			p.Parallel_edge_sensitive_path_description()
		}

	case 2:
		{
			p.SetState(5119)
			p.Full_edge_sensitive_path_description()
		}

	}
	{
		p.SetState(5122)
		p.Match(SV2017ParserASSIGN)
	}
	{
		p.SetState(5123)
		p.Path_delay_value()
	}

	return localctx
}

// IParallel_edge_sensitive_path_descriptionContext is an interface to support dynamic dispatch.
type IParallel_edge_sensitive_path_descriptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParallel_edge_sensitive_path_descriptionContext differentiates from other interfaces.
	IsParallel_edge_sensitive_path_descriptionContext()
}

type Parallel_edge_sensitive_path_descriptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParallel_edge_sensitive_path_descriptionContext() *Parallel_edge_sensitive_path_descriptionContext {
	var p = new(Parallel_edge_sensitive_path_descriptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_parallel_edge_sensitive_path_description
	return p
}

func (*Parallel_edge_sensitive_path_descriptionContext) IsParallel_edge_sensitive_path_descriptionContext() {
}

func NewParallel_edge_sensitive_path_descriptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Parallel_edge_sensitive_path_descriptionContext {
	var p = new(Parallel_edge_sensitive_path_descriptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_parallel_edge_sensitive_path_description

	return p
}

func (s *Parallel_edge_sensitive_path_descriptionContext) GetParser() antlr.Parser { return s.parser }

func (s *Parallel_edge_sensitive_path_descriptionContext) AllLPAREN() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserLPAREN)
}

func (s *Parallel_edge_sensitive_path_descriptionContext) LPAREN(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, i)
}

func (s *Parallel_edge_sensitive_path_descriptionContext) Specify_input_terminal_descriptor() ISpecify_input_terminal_descriptorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISpecify_input_terminal_descriptorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISpecify_input_terminal_descriptorContext)
}

func (s *Parallel_edge_sensitive_path_descriptionContext) Any_implication() IAny_implicationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_implicationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_implicationContext)
}

func (s *Parallel_edge_sensitive_path_descriptionContext) Specify_output_terminal_descriptor() ISpecify_output_terminal_descriptorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISpecify_output_terminal_descriptorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISpecify_output_terminal_descriptorContext)
}

func (s *Parallel_edge_sensitive_path_descriptionContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Parallel_edge_sensitive_path_descriptionContext) Data_source_expression() IData_source_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_source_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_source_expressionContext)
}

func (s *Parallel_edge_sensitive_path_descriptionContext) AllRPAREN() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserRPAREN)
}

func (s *Parallel_edge_sensitive_path_descriptionContext) RPAREN(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, i)
}

func (s *Parallel_edge_sensitive_path_descriptionContext) Edge_identifier() IEdge_identifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEdge_identifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEdge_identifierContext)
}

func (s *Parallel_edge_sensitive_path_descriptionContext) Polarity_operator() IPolarity_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPolarity_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPolarity_operatorContext)
}

func (s *Parallel_edge_sensitive_path_descriptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Parallel_edge_sensitive_path_descriptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Parallel_edge_sensitive_path_descriptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterParallel_edge_sensitive_path_description(s)
	}
}

func (s *Parallel_edge_sensitive_path_descriptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitParallel_edge_sensitive_path_description(s)
	}
}

func (p *SV2017Parser) Parallel_edge_sensitive_path_description() (localctx IParallel_edge_sensitive_path_descriptionContext) {
	localctx = NewParallel_edge_sensitive_path_descriptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 768, SV2017ParserRULE_parallel_edge_sensitive_path_description)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5125)
		p.Match(SV2017ParserLPAREN)
	}
	p.SetState(5127)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_EDGE || _la == SV2017ParserKW_NEGEDGE || _la == SV2017ParserKW_POSEDGE {
		{
			p.SetState(5126)
			p.Edge_identifier()
		}

	}
	{
		p.SetState(5129)
		p.Specify_input_terminal_descriptor()
	}
	{
		p.SetState(5130)
		p.Any_implication()
	}
	{
		p.SetState(5131)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(5132)
		p.Specify_output_terminal_descriptor()
	}
	p.SetState(5134)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserPLUS || _la == SV2017ParserMINUS {
		{
			p.SetState(5133)
			p.Polarity_operator()
		}

	}
	{
		p.SetState(5136)
		p.Match(SV2017ParserCOLON)
	}
	{
		p.SetState(5137)
		p.Data_source_expression()
	}
	{
		p.SetState(5138)
		p.Match(SV2017ParserRPAREN)
	}
	{
		p.SetState(5139)
		p.Match(SV2017ParserRPAREN)
	}

	return localctx
}

// IFull_edge_sensitive_path_descriptionContext is an interface to support dynamic dispatch.
type IFull_edge_sensitive_path_descriptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFull_edge_sensitive_path_descriptionContext differentiates from other interfaces.
	IsFull_edge_sensitive_path_descriptionContext()
}

type Full_edge_sensitive_path_descriptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFull_edge_sensitive_path_descriptionContext() *Full_edge_sensitive_path_descriptionContext {
	var p = new(Full_edge_sensitive_path_descriptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_full_edge_sensitive_path_description
	return p
}

func (*Full_edge_sensitive_path_descriptionContext) IsFull_edge_sensitive_path_descriptionContext() {}

func NewFull_edge_sensitive_path_descriptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Full_edge_sensitive_path_descriptionContext {
	var p = new(Full_edge_sensitive_path_descriptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_full_edge_sensitive_path_description

	return p
}

func (s *Full_edge_sensitive_path_descriptionContext) GetParser() antlr.Parser { return s.parser }

func (s *Full_edge_sensitive_path_descriptionContext) AllLPAREN() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserLPAREN)
}

func (s *Full_edge_sensitive_path_descriptionContext) LPAREN(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, i)
}

func (s *Full_edge_sensitive_path_descriptionContext) List_of_path_inputs() IList_of_path_inputsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_path_inputsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_path_inputsContext)
}

func (s *Full_edge_sensitive_path_descriptionContext) PATH_FULL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserPATH_FULL, 0)
}

func (s *Full_edge_sensitive_path_descriptionContext) List_of_path_outputs() IList_of_path_outputsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_path_outputsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_path_outputsContext)
}

func (s *Full_edge_sensitive_path_descriptionContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Full_edge_sensitive_path_descriptionContext) Data_source_expression() IData_source_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_source_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_source_expressionContext)
}

func (s *Full_edge_sensitive_path_descriptionContext) AllRPAREN() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserRPAREN)
}

func (s *Full_edge_sensitive_path_descriptionContext) RPAREN(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, i)
}

func (s *Full_edge_sensitive_path_descriptionContext) Edge_identifier() IEdge_identifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEdge_identifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEdge_identifierContext)
}

func (s *Full_edge_sensitive_path_descriptionContext) AllPolarity_operator() []IPolarity_operatorContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPolarity_operatorContext)(nil)).Elem())
	var tst = make([]IPolarity_operatorContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPolarity_operatorContext)
		}
	}

	return tst
}

func (s *Full_edge_sensitive_path_descriptionContext) Polarity_operator(i int) IPolarity_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPolarity_operatorContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPolarity_operatorContext)
}

func (s *Full_edge_sensitive_path_descriptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Full_edge_sensitive_path_descriptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Full_edge_sensitive_path_descriptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterFull_edge_sensitive_path_description(s)
	}
}

func (s *Full_edge_sensitive_path_descriptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitFull_edge_sensitive_path_description(s)
	}
}

func (p *SV2017Parser) Full_edge_sensitive_path_description() (localctx IFull_edge_sensitive_path_descriptionContext) {
	localctx = NewFull_edge_sensitive_path_descriptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 770, SV2017ParserRULE_full_edge_sensitive_path_description)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5141)
		p.Match(SV2017ParserLPAREN)
	}
	p.SetState(5143)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_EDGE || _la == SV2017ParserKW_NEGEDGE || _la == SV2017ParserKW_POSEDGE {
		{
			p.SetState(5142)
			p.Edge_identifier()
		}

	}
	{
		p.SetState(5145)
		p.List_of_path_inputs()
	}
	p.SetState(5147)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserPLUS || _la == SV2017ParserMINUS {
		{
			p.SetState(5146)
			p.Polarity_operator()
		}

	}
	{
		p.SetState(5149)
		p.Match(SV2017ParserPATH_FULL)
	}
	{
		p.SetState(5150)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(5151)
		p.List_of_path_outputs()
	}
	p.SetState(5153)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserPLUS || _la == SV2017ParserMINUS {
		{
			p.SetState(5152)
			p.Polarity_operator()
		}

	}
	{
		p.SetState(5155)
		p.Match(SV2017ParserCOLON)
	}
	{
		p.SetState(5156)
		p.Data_source_expression()
	}
	{
		p.SetState(5157)
		p.Match(SV2017ParserRPAREN)
	}
	{
		p.SetState(5158)
		p.Match(SV2017ParserRPAREN)
	}

	return localctx
}

// IData_source_expressionContext is an interface to support dynamic dispatch.
type IData_source_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsData_source_expressionContext differentiates from other interfaces.
	IsData_source_expressionContext()
}

type Data_source_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyData_source_expressionContext() *Data_source_expressionContext {
	var p = new(Data_source_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_data_source_expression
	return p
}

func (*Data_source_expressionContext) IsData_source_expressionContext() {}

func NewData_source_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Data_source_expressionContext {
	var p = new(Data_source_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_data_source_expression

	return p
}

func (s *Data_source_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Data_source_expressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Data_source_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Data_source_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Data_source_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterData_source_expression(s)
	}
}

func (s *Data_source_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitData_source_expression(s)
	}
}

func (p *SV2017Parser) Data_source_expression() (localctx IData_source_expressionContext) {
	localctx = NewData_source_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 772, SV2017ParserRULE_data_source_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5160)
		p.expression(0)
	}

	return localctx
}

// IData_declarationContext is an interface to support dynamic dispatch.
type IData_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsData_declarationContext differentiates from other interfaces.
	IsData_declarationContext()
}

type Data_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyData_declarationContext() *Data_declarationContext {
	var p = new(Data_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_data_declaration
	return p
}

func (*Data_declarationContext) IsData_declarationContext() {}

func NewData_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Data_declarationContext {
	var p = new(Data_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_data_declaration

	return p
}

func (s *Data_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Data_declarationContext) List_of_variable_decl_assignments() IList_of_variable_decl_assignmentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_variable_decl_assignmentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_variable_decl_assignmentsContext)
}

func (s *Data_declarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Data_declarationContext) KW_VAR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_VAR, 0)
}

func (s *Data_declarationContext) Data_type_or_implicit() IData_type_or_implicitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_or_implicitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_or_implicitContext)
}

func (s *Data_declarationContext) KW_CONST() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_CONST, 0)
}

func (s *Data_declarationContext) Lifetime() ILifetimeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILifetimeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILifetimeContext)
}

func (s *Data_declarationContext) Type_declaration() IType_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_declarationContext)
}

func (s *Data_declarationContext) Package_import_declaration() IPackage_import_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackage_import_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackage_import_declarationContext)
}

func (s *Data_declarationContext) Net_type_declaration() INet_type_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INet_type_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INet_type_declarationContext)
}

func (s *Data_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Data_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Data_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterData_declaration(s)
	}
}

func (s *Data_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitData_declaration(s)
	}
}

func (p *SV2017Parser) Data_declaration() (localctx IData_declarationContext) {
	localctx = NewData_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 774, SV2017ParserRULE_data_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5184)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_AUTOMATIC, SV2017ParserKW_BIT, SV2017ParserKW_BYTE, SV2017ParserKW_CHANDLE, SV2017ParserKW_CONST, SV2017ParserKW_ENUM, SV2017ParserKW_EVENT, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LOCAL, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_SAMPLE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_STATIC, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_UNION, SV2017ParserKW_UNSIGNED, SV2017ParserKW_VAR, SV2017ParserKW_VIRTUAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserLSQUARE_BR:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(5163)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_CONST {
			{
				p.SetState(5162)
				p.Match(SV2017ParserKW_CONST)
			}

		}
		p.SetState(5176)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SV2017ParserKW_VAR:
			{
				p.SetState(5165)
				p.Match(SV2017ParserKW_VAR)
			}
			p.SetState(5167)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SV2017ParserKW_AUTOMATIC || _la == SV2017ParserKW_STATIC {
				{
					p.SetState(5166)
					p.Lifetime()
				}

			}
			p.SetState(5170)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 605, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(5169)
					p.Data_type_or_implicit()
				}

			}

		case SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_AUTOMATIC, SV2017ParserKW_BIT, SV2017ParserKW_BYTE, SV2017ParserKW_CHANDLE, SV2017ParserKW_ENUM, SV2017ParserKW_EVENT, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LOCAL, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_SAMPLE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_STATIC, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_UNION, SV2017ParserKW_UNSIGNED, SV2017ParserKW_VIRTUAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserLSQUARE_BR:
			p.SetState(5173)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SV2017ParserKW_AUTOMATIC || _la == SV2017ParserKW_STATIC {
				{
					p.SetState(5172)
					p.Lifetime()
				}

			}
			{
				p.SetState(5175)
				p.Data_type_or_implicit()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(5178)
			p.List_of_variable_decl_assignments()
		}
		{
			p.SetState(5179)
			p.Match(SV2017ParserSEMI)
		}

	case SV2017ParserKW_TYPEDEF:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5181)
			p.Type_declaration()
		}

	case SV2017ParserKW_IMPORT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5182)
			p.Package_import_declaration()
		}

	case SV2017ParserKW_NETTYPE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5183)
			p.Net_type_declaration()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IModule_path_expressionContext is an interface to support dynamic dispatch.
type IModule_path_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModule_path_expressionContext differentiates from other interfaces.
	IsModule_path_expressionContext()
}

type Module_path_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModule_path_expressionContext() *Module_path_expressionContext {
	var p = new(Module_path_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_module_path_expression
	return p
}

func (*Module_path_expressionContext) IsModule_path_expressionContext() {}

func NewModule_path_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Module_path_expressionContext {
	var p = new(Module_path_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_module_path_expression

	return p
}

func (s *Module_path_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Module_path_expressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Module_path_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Module_path_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Module_path_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterModule_path_expression(s)
	}
}

func (s *Module_path_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitModule_path_expression(s)
	}
}

func (p *SV2017Parser) Module_path_expression() (localctx IModule_path_expressionContext) {
	localctx = NewModule_path_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 776, SV2017ParserRULE_module_path_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5186)
		p.expression(0)
	}

	return localctx
}

// IState_dependent_path_declarationContext is an interface to support dynamic dispatch.
type IState_dependent_path_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsState_dependent_path_declarationContext differentiates from other interfaces.
	IsState_dependent_path_declarationContext()
}

type State_dependent_path_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyState_dependent_path_declarationContext() *State_dependent_path_declarationContext {
	var p = new(State_dependent_path_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_state_dependent_path_declaration
	return p
}

func (*State_dependent_path_declarationContext) IsState_dependent_path_declarationContext() {}

func NewState_dependent_path_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *State_dependent_path_declarationContext {
	var p = new(State_dependent_path_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_state_dependent_path_declaration

	return p
}

func (s *State_dependent_path_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *State_dependent_path_declarationContext) KW_IF() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_IF, 0)
}

func (s *State_dependent_path_declarationContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *State_dependent_path_declarationContext) Module_path_expression() IModule_path_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModule_path_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModule_path_expressionContext)
}

func (s *State_dependent_path_declarationContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *State_dependent_path_declarationContext) Simple_path_declaration() ISimple_path_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimple_path_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimple_path_declarationContext)
}

func (s *State_dependent_path_declarationContext) Edge_sensitive_path_declaration() IEdge_sensitive_path_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEdge_sensitive_path_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEdge_sensitive_path_declarationContext)
}

func (s *State_dependent_path_declarationContext) KW_IFNONE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_IFNONE, 0)
}

func (s *State_dependent_path_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *State_dependent_path_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *State_dependent_path_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterState_dependent_path_declaration(s)
	}
}

func (s *State_dependent_path_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitState_dependent_path_declaration(s)
	}
}

func (p *SV2017Parser) State_dependent_path_declaration() (localctx IState_dependent_path_declarationContext) {
	localctx = NewState_dependent_path_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 778, SV2017ParserRULE_state_dependent_path_declaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5198)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_IF:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5188)
			p.Match(SV2017ParserKW_IF)
		}
		{
			p.SetState(5189)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(5190)
			p.Module_path_expression()
		}
		{
			p.SetState(5191)
			p.Match(SV2017ParserRPAREN)
		}
		p.SetState(5194)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 609, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(5192)
				p.Simple_path_declaration()
			}

		case 2:
			{
				p.SetState(5193)
				p.Edge_sensitive_path_declaration()
			}

		}

	case SV2017ParserKW_IFNONE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5196)
			p.Match(SV2017ParserKW_IFNONE)
		}
		{
			p.SetState(5197)
			p.Simple_path_declaration()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPackage_export_declarationContext is an interface to support dynamic dispatch.
type IPackage_export_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackage_export_declarationContext differentiates from other interfaces.
	IsPackage_export_declarationContext()
}

type Package_export_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackage_export_declarationContext() *Package_export_declarationContext {
	var p = new(Package_export_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_package_export_declaration
	return p
}

func (*Package_export_declarationContext) IsPackage_export_declarationContext() {}

func NewPackage_export_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Package_export_declarationContext {
	var p = new(Package_export_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_package_export_declaration

	return p
}

func (s *Package_export_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Package_export_declarationContext) KW_EXPORT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_EXPORT, 0)
}

func (s *Package_export_declarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Package_export_declarationContext) AllMUL() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserMUL)
}

func (s *Package_export_declarationContext) MUL(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserMUL, i)
}

func (s *Package_export_declarationContext) DOUBLE_COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOUBLE_COLON, 0)
}

func (s *Package_export_declarationContext) AllPackage_import_item() []IPackage_import_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPackage_import_itemContext)(nil)).Elem())
	var tst = make([]IPackage_import_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPackage_import_itemContext)
		}
	}

	return tst
}

func (s *Package_export_declarationContext) Package_import_item(i int) IPackage_import_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackage_import_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPackage_import_itemContext)
}

func (s *Package_export_declarationContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Package_export_declarationContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Package_export_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Package_export_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Package_export_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPackage_export_declaration(s)
	}
}

func (s *Package_export_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPackage_export_declaration(s)
	}
}

func (p *SV2017Parser) Package_export_declaration() (localctx IPackage_export_declarationContext) {
	localctx = NewPackage_export_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 780, SV2017ParserRULE_package_export_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5200)
		p.Match(SV2017ParserKW_EXPORT)
	}
	p.SetState(5212)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserMUL:
		{
			p.SetState(5201)
			p.Match(SV2017ParserMUL)
		}
		{
			p.SetState(5202)
			p.Match(SV2017ParserDOUBLE_COLON)
		}
		{
			p.SetState(5203)
			p.Match(SV2017ParserMUL)
		}

	case SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_SAMPLE, SV2017ParserKW_STD, SV2017ParserKW_TYPE_OPTION, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
		{
			p.SetState(5204)
			p.Package_import_item()
		}
		p.SetState(5209)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserCOMMA {
			{
				p.SetState(5205)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(5206)
				p.Package_import_item()
			}

			p.SetState(5211)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(5214)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IGenvar_declarationContext is an interface to support dynamic dispatch.
type IGenvar_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGenvar_declarationContext differentiates from other interfaces.
	IsGenvar_declarationContext()
}

type Genvar_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGenvar_declarationContext() *Genvar_declarationContext {
	var p = new(Genvar_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_genvar_declaration
	return p
}

func (*Genvar_declarationContext) IsGenvar_declarationContext() {}

func NewGenvar_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Genvar_declarationContext {
	var p = new(Genvar_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_genvar_declaration

	return p
}

func (s *Genvar_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Genvar_declarationContext) KW_GENVAR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_GENVAR, 0)
}

func (s *Genvar_declarationContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Genvar_declarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Genvar_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Genvar_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Genvar_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterGenvar_declaration(s)
	}
}

func (s *Genvar_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitGenvar_declaration(s)
	}
}

func (p *SV2017Parser) Genvar_declaration() (localctx IGenvar_declarationContext) {
	localctx = NewGenvar_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 782, SV2017ParserRULE_genvar_declaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5216)
		p.Match(SV2017ParserKW_GENVAR)
	}
	{
		p.SetState(5217)
		p.Identifier_list()
	}
	{
		p.SetState(5218)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// INet_declarationContext is an interface to support dynamic dispatch.
type INet_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNet_declarationContext differentiates from other interfaces.
	IsNet_declarationContext()
}

type Net_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNet_declarationContext() *Net_declarationContext {
	var p = new(Net_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_net_declaration
	return p
}

func (*Net_declarationContext) IsNet_declarationContext() {}

func NewNet_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Net_declarationContext {
	var p = new(Net_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_net_declaration

	return p
}

func (s *Net_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Net_declarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Net_declarationContext) KW_INTERCONNECT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_INTERCONNECT, 0)
}

func (s *Net_declarationContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Net_declarationContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Net_declarationContext) List_of_net_decl_assignments() IList_of_net_decl_assignmentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_net_decl_assignmentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_net_decl_assignmentsContext)
}

func (s *Net_declarationContext) Net_type() INet_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INet_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INet_typeContext)
}

func (s *Net_declarationContext) Implicit_data_type() IImplicit_data_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImplicit_data_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImplicit_data_typeContext)
}

func (s *Net_declarationContext) HASH() antlr.TerminalNode {
	return s.GetToken(SV2017ParserHASH, 0)
}

func (s *Net_declarationContext) Delay_value() IDelay_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelay_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelay_valueContext)
}

func (s *Net_declarationContext) AllUnpacked_dimension() []IUnpacked_dimensionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUnpacked_dimensionContext)(nil)).Elem())
	var tst = make([]IUnpacked_dimensionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUnpacked_dimensionContext)
		}
	}

	return tst
}

func (s *Net_declarationContext) Unpacked_dimension(i int) IUnpacked_dimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnpacked_dimensionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUnpacked_dimensionContext)
}

func (s *Net_declarationContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, 0)
}

func (s *Net_declarationContext) Drive_strength() IDrive_strengthContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrive_strengthContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrive_strengthContext)
}

func (s *Net_declarationContext) Charge_strength() ICharge_strengthContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharge_strengthContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharge_strengthContext)
}

func (s *Net_declarationContext) Data_type_or_implicit() IData_type_or_implicitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_or_implicitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_or_implicitContext)
}

func (s *Net_declarationContext) Delay3() IDelay3Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelay3Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelay3Context)
}

func (s *Net_declarationContext) Delay_control() IDelay_controlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelay_controlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelay_controlContext)
}

func (s *Net_declarationContext) KW_VECTORED() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_VECTORED, 0)
}

func (s *Net_declarationContext) KW_SCALARED() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_SCALARED, 0)
}

func (s *Net_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Net_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Net_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterNet_declaration(s)
	}
}

func (s *Net_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitNet_declaration(s)
	}
}

func (p *SV2017Parser) Net_declaration() (localctx INet_declarationContext) {
	localctx = NewNet_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 784, SV2017ParserRULE_net_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5267)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_INTERCONNECT:
		{
			p.SetState(5220)
			p.Match(SV2017ParserKW_INTERCONNECT)
		}
		p.SetState(5222)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_SIGNED || _la == SV2017ParserKW_UNSIGNED || _la == SV2017ParserLSQUARE_BR {
			{
				p.SetState(5221)
				p.Implicit_data_type()
			}

		}
		p.SetState(5226)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserHASH {
			{
				p.SetState(5224)
				p.Match(SV2017ParserHASH)
			}
			{
				p.SetState(5225)
				p.Delay_value()
			}

		}
		{
			p.SetState(5228)
			p.Identifier()
		}
		p.SetState(5232)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserLSQUARE_BR {
			{
				p.SetState(5229)
				p.Unpacked_dimension()
			}

			p.SetState(5234)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(5243)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserCOMMA {
			{
				p.SetState(5235)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(5236)
				p.Identifier()
			}
			p.SetState(5240)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SV2017ParserLSQUARE_BR {
				{
					p.SetState(5237)
					p.Unpacked_dimension()
				}

				p.SetState(5242)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}

	case SV2017ParserKW_NONE, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_SAMPLE, SV2017ParserKW_STD, SV2017ParserKW_SUPPLY0, SV2017ParserKW_SUPPLY1, SV2017ParserKW_TRI, SV2017ParserKW_TRI0, SV2017ParserKW_TRI1, SV2017ParserKW_TRIAND, SV2017ParserKW_TRIOR, SV2017ParserKW_TRIREG, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_UWIRE, SV2017ParserKW_WAND, SV2017ParserKW_WIRE, SV2017ParserKW_WOR, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
		p.SetState(5263)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SV2017ParserKW_NONE, SV2017ParserKW_SUPPLY0, SV2017ParserKW_SUPPLY1, SV2017ParserKW_TRI, SV2017ParserKW_TRI0, SV2017ParserKW_TRI1, SV2017ParserKW_TRIAND, SV2017ParserKW_TRIOR, SV2017ParserKW_TRIREG, SV2017ParserKW_UWIRE, SV2017ParserKW_WAND, SV2017ParserKW_WIRE, SV2017ParserKW_WOR:
			{
				p.SetState(5245)
				p.Net_type()
			}
			p.SetState(5248)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 618, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(5246)
					p.Drive_strength()
				}

			} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 618, p.GetParserRuleContext()) == 2 {
				{
					p.SetState(5247)
					p.Charge_strength()
				}

			}
			p.SetState(5251)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SV2017ParserKW_SCALARED || _la == SV2017ParserKW_VECTORED {
				{
					p.SetState(5250)
					_la = p.GetTokenStream().LA(1)

					if !(_la == SV2017ParserKW_SCALARED || _la == SV2017ParserKW_VECTORED) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			}
			p.SetState(5254)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 620, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(5253)
					p.Data_type_or_implicit()
				}

			}
			p.SetState(5257)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SV2017ParserHASH {
				{
					p.SetState(5256)
					p.Delay3()
				}

			}

		case SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_SAMPLE, SV2017ParserKW_STD, SV2017ParserKW_TYPE_OPTION, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
			{
				p.SetState(5259)
				p.Identifier()
			}
			p.SetState(5261)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SV2017ParserHASH {
				{
					p.SetState(5260)
					p.Delay_control()
				}

			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(5265)
			p.List_of_net_decl_assignments()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(5269)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IParameter_port_listContext is an interface to support dynamic dispatch.
type IParameter_port_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameter_port_listContext differentiates from other interfaces.
	IsParameter_port_listContext()
}

type Parameter_port_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameter_port_listContext() *Parameter_port_listContext {
	var p = new(Parameter_port_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_parameter_port_list
	return p
}

func (*Parameter_port_listContext) IsParameter_port_listContext() {}

func NewParameter_port_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Parameter_port_listContext {
	var p = new(Parameter_port_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_parameter_port_list

	return p
}

func (s *Parameter_port_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Parameter_port_listContext) HASH() antlr.TerminalNode {
	return s.GetToken(SV2017ParserHASH, 0)
}

func (s *Parameter_port_listContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Parameter_port_listContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Parameter_port_listContext) List_of_param_assignments() IList_of_param_assignmentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_param_assignmentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_param_assignmentsContext)
}

func (s *Parameter_port_listContext) AllParameter_port_declaration() []IParameter_port_declarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParameter_port_declarationContext)(nil)).Elem())
	var tst = make([]IParameter_port_declarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParameter_port_declarationContext)
		}
	}

	return tst
}

func (s *Parameter_port_listContext) Parameter_port_declaration(i int) IParameter_port_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameter_port_declarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParameter_port_declarationContext)
}

func (s *Parameter_port_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Parameter_port_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Parameter_port_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Parameter_port_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Parameter_port_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterParameter_port_list(s)
	}
}

func (s *Parameter_port_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitParameter_port_list(s)
	}
}

func (p *SV2017Parser) Parameter_port_list() (localctx IParameter_port_listContext) {
	localctx = NewParameter_port_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 786, SV2017ParserRULE_parameter_port_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5271)
		p.Match(SV2017ParserHASH)
	}
	{
		p.SetState(5272)
		p.Match(SV2017ParserLPAREN)
	}
	p.SetState(5284)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_DOLAR_ROOT || (((_la-35)&-(0x1f+1)) == 0 && ((1<<uint((_la-35)))&((1<<(SV2017ParserKW_DOLAR_UNIT-35))|(1<<(SV2017ParserKW_BIT-35))|(1<<(SV2017ParserKW_BYTE-35))|(1<<(SV2017ParserKW_CHANDLE-35)))) != 0) || _la == SV2017ParserKW_ENUM || _la == SV2017ParserKW_EVENT || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOCALPARAM-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-174)&-(0x1f+1)) == 0 && ((1<<uint((_la-174)))&((1<<(SV2017ParserKW_OPTION-174))|(1<<(SV2017ParserKW_PARAMETER-174))|(1<<(SV2017ParserKW_RANDOMIZE-174))|(1<<(SV2017ParserKW_REAL-174))|(1<<(SV2017ParserKW_REALTIME-174))|(1<<(SV2017ParserKW_REG-174)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_STRUCT-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNION-260))|(1<<(SV2017ParserKW_VIRTUAL-260)))) != 0) || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
		p.SetState(5275)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 625, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(5273)
				p.List_of_param_assignments()
			}

		case 2:
			{
				p.SetState(5274)
				p.Parameter_port_declaration()
			}

		}
		p.SetState(5281)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserCOMMA {
			{
				p.SetState(5277)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(5278)
				p.Parameter_port_declaration()
			}

			p.SetState(5283)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(5286)
		p.Match(SV2017ParserRPAREN)
	}

	return localctx
}

// IParameter_port_declarationContext is an interface to support dynamic dispatch.
type IParameter_port_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameter_port_declarationContext differentiates from other interfaces.
	IsParameter_port_declarationContext()
}

type Parameter_port_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameter_port_declarationContext() *Parameter_port_declarationContext {
	var p = new(Parameter_port_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_parameter_port_declaration
	return p
}

func (*Parameter_port_declarationContext) IsParameter_port_declarationContext() {}

func NewParameter_port_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Parameter_port_declarationContext {
	var p = new(Parameter_port_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_parameter_port_declaration

	return p
}

func (s *Parameter_port_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Parameter_port_declarationContext) CopyFrom(ctx *Parameter_port_declarationContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Parameter_port_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Parameter_port_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ParamSimpleContext struct {
	*Parameter_port_declarationContext
}

func NewParamSimpleContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ParamSimpleContext {
	var p = new(ParamSimpleContext)

	p.Parameter_port_declarationContext = NewEmptyParameter_port_declarationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Parameter_port_declarationContext))

	return p
}

func (s *ParamSimpleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParamSimpleContext) Parameter_declaration() IParameter_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameter_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameter_declarationContext)
}

func (s *ParamSimpleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterParamSimple(s)
	}
}

func (s *ParamSimpleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitParamSimple(s)
	}
}

type ParamLocalContext struct {
	*Parameter_port_declarationContext
}

func NewParamLocalContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ParamLocalContext {
	var p = new(ParamLocalContext)

	p.Parameter_port_declarationContext = NewEmptyParameter_port_declarationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Parameter_port_declarationContext))

	return p
}

func (s *ParamLocalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParamLocalContext) Local_parameter_declaration() ILocal_parameter_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILocal_parameter_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILocal_parameter_declarationContext)
}

func (s *ParamLocalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterParamLocal(s)
	}
}

func (s *ParamLocalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitParamLocal(s)
	}
}

type ParamPortTypeContext struct {
	*Parameter_port_declarationContext
}

func NewParamPortTypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ParamPortTypeContext {
	var p = new(ParamPortTypeContext)

	p.Parameter_port_declarationContext = NewEmptyParameter_port_declarationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Parameter_port_declarationContext))

	return p
}

func (s *ParamPortTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParamPortTypeContext) KW_TYPE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_TYPE, 0)
}

func (s *ParamPortTypeContext) List_of_type_assignments() IList_of_type_assignmentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_type_assignmentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_type_assignmentsContext)
}

func (s *ParamPortTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterParamPortType(s)
	}
}

func (s *ParamPortTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitParamPortType(s)
	}
}

type ParamAssignContext struct {
	*Parameter_port_declarationContext
}

func NewParamAssignContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ParamAssignContext {
	var p = new(ParamAssignContext)

	p.Parameter_port_declarationContext = NewEmptyParameter_port_declarationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Parameter_port_declarationContext))

	return p
}

func (s *ParamAssignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParamAssignContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *ParamAssignContext) List_of_param_assignments() IList_of_param_assignmentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_param_assignmentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_param_assignmentsContext)
}

func (s *ParamAssignContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterParamAssign(s)
	}
}

func (s *ParamAssignContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitParamAssign(s)
	}
}

func (p *SV2017Parser) Parameter_port_declaration() (localctx IParameter_port_declarationContext) {
	localctx = NewParameter_port_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 788, SV2017ParserRULE_parameter_port_declaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5295)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 628, p.GetParserRuleContext()) {
	case 1:
		localctx = NewParamPortTypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5288)
			p.Match(SV2017ParserKW_TYPE)
		}
		{
			p.SetState(5289)
			p.List_of_type_assignments()
		}

	case 2:
		localctx = NewParamSimpleContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5290)
			p.Parameter_declaration()
		}

	case 3:
		localctx = NewParamLocalContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5291)
			p.Local_parameter_declaration()
		}

	case 4:
		localctx = NewParamAssignContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5292)
			p.Data_type()
		}
		{
			p.SetState(5293)
			p.List_of_param_assignments()
		}

	}

	return localctx
}

// IList_of_port_declarations_ansi_itemContext is an interface to support dynamic dispatch.
type IList_of_port_declarations_ansi_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsList_of_port_declarations_ansi_itemContext differentiates from other interfaces.
	IsList_of_port_declarations_ansi_itemContext()
}

type List_of_port_declarations_ansi_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyList_of_port_declarations_ansi_itemContext() *List_of_port_declarations_ansi_itemContext {
	var p = new(List_of_port_declarations_ansi_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_list_of_port_declarations_ansi_item
	return p
}

func (*List_of_port_declarations_ansi_itemContext) IsList_of_port_declarations_ansi_itemContext() {}

func NewList_of_port_declarations_ansi_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *List_of_port_declarations_ansi_itemContext {
	var p = new(List_of_port_declarations_ansi_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_list_of_port_declarations_ansi_item

	return p
}

func (s *List_of_port_declarations_ansi_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *List_of_port_declarations_ansi_itemContext) Ansi_port_declaration() IAnsi_port_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnsi_port_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnsi_port_declarationContext)
}

func (s *List_of_port_declarations_ansi_itemContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *List_of_port_declarations_ansi_itemContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *List_of_port_declarations_ansi_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *List_of_port_declarations_ansi_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *List_of_port_declarations_ansi_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterList_of_port_declarations_ansi_item(s)
	}
}

func (s *List_of_port_declarations_ansi_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitList_of_port_declarations_ansi_item(s)
	}
}

func (p *SV2017Parser) List_of_port_declarations_ansi_item() (localctx IList_of_port_declarations_ansi_itemContext) {
	localctx = NewList_of_port_declarations_ansi_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 790, SV2017ParserRULE_list_of_port_declarations_ansi_item)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5300)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 629, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(5297)
				p.Attribute_instance()
			}

		}
		p.SetState(5302)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 629, p.GetParserRuleContext())
	}
	{
		p.SetState(5303)
		p.Ansi_port_declaration()
	}

	return localctx
}

// IList_of_port_declarationsContext is an interface to support dynamic dispatch.
type IList_of_port_declarationsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsList_of_port_declarationsContext differentiates from other interfaces.
	IsList_of_port_declarationsContext()
}

type List_of_port_declarationsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyList_of_port_declarationsContext() *List_of_port_declarationsContext {
	var p = new(List_of_port_declarationsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_list_of_port_declarations
	return p
}

func (*List_of_port_declarationsContext) IsList_of_port_declarationsContext() {}

func NewList_of_port_declarationsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *List_of_port_declarationsContext {
	var p = new(List_of_port_declarationsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_list_of_port_declarations

	return p
}

func (s *List_of_port_declarationsContext) GetParser() antlr.Parser { return s.parser }

func (s *List_of_port_declarationsContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *List_of_port_declarationsContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *List_of_port_declarationsContext) AllNonansi_port() []INonansi_portContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INonansi_portContext)(nil)).Elem())
	var tst = make([]INonansi_portContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INonansi_portContext)
		}
	}

	return tst
}

func (s *List_of_port_declarationsContext) Nonansi_port(i int) INonansi_portContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INonansi_portContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INonansi_portContext)
}

func (s *List_of_port_declarationsContext) AllList_of_port_declarations_ansi_item() []IList_of_port_declarations_ansi_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IList_of_port_declarations_ansi_itemContext)(nil)).Elem())
	var tst = make([]IList_of_port_declarations_ansi_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IList_of_port_declarations_ansi_itemContext)
		}
	}

	return tst
}

func (s *List_of_port_declarationsContext) List_of_port_declarations_ansi_item(i int) IList_of_port_declarations_ansi_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_port_declarations_ansi_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IList_of_port_declarations_ansi_itemContext)
}

func (s *List_of_port_declarationsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *List_of_port_declarationsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *List_of_port_declarationsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *List_of_port_declarationsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *List_of_port_declarationsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterList_of_port_declarations(s)
	}
}

func (s *List_of_port_declarationsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitList_of_port_declarations(s)
	}
}

func (p *SV2017Parser) List_of_port_declarations() (localctx IList_of_port_declarationsContext) {
	localctx = NewList_of_port_declarationsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 792, SV2017ParserRULE_list_of_port_declarations)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5305)
		p.Match(SV2017ParserLPAREN)
	}
	p.SetState(5332)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 635, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5306)
			p.Nonansi_port()
		}
		p.SetState(5313)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserCOMMA {
			{
				p.SetState(5307)
				p.Match(SV2017ParserCOMMA)
			}
			p.SetState(5309)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299))|(1<<(SV2017ParserLBRACE-299))|(1<<(SV2017ParserDOT-299)))) != 0) {
				{
					p.SetState(5308)
					p.Nonansi_port()
				}

			}

			p.SetState(5315)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 635, p.GetParserRuleContext()) == 2 {
		p.SetState(5320)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == SV2017ParserCOMMA {
			{
				p.SetState(5316)
				p.Match(SV2017ParserCOMMA)
			}
			p.SetState(5318)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299))|(1<<(SV2017ParserLBRACE-299))|(1<<(SV2017ParserDOT-299)))) != 0) {
				{
					p.SetState(5317)
					p.Nonansi_port()
				}

			}

			p.SetState(5322)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 635, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(5324)
			p.List_of_port_declarations_ansi_item()
		}
		p.SetState(5329)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserCOMMA {
			{
				p.SetState(5325)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(5326)
				p.List_of_port_declarations_ansi_item()
			}

			p.SetState(5331)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(5334)
		p.Match(SV2017ParserRPAREN)
	}

	return localctx
}

// INonansi_port_declarationContext is an interface to support dynamic dispatch.
type INonansi_port_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNonansi_port_declarationContext differentiates from other interfaces.
	IsNonansi_port_declarationContext()
}

type Nonansi_port_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNonansi_port_declarationContext() *Nonansi_port_declarationContext {
	var p = new(Nonansi_port_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_nonansi_port_declaration
	return p
}

func (*Nonansi_port_declarationContext) IsNonansi_port_declarationContext() {}

func NewNonansi_port_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Nonansi_port_declarationContext {
	var p = new(Nonansi_port_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_nonansi_port_declaration

	return p
}

func (s *Nonansi_port_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Nonansi_port_declarationContext) KW_INOUT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_INOUT, 0)
}

func (s *Nonansi_port_declarationContext) List_of_variable_identifiers() IList_of_variable_identifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_variable_identifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_variable_identifiersContext)
}

func (s *Nonansi_port_declarationContext) KW_INPUT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_INPUT, 0)
}

func (s *Nonansi_port_declarationContext) KW_OUTPUT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_OUTPUT, 0)
}

func (s *Nonansi_port_declarationContext) List_of_variable_port_identifiers() IList_of_variable_port_identifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_variable_port_identifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_variable_port_identifiersContext)
}

func (s *Nonansi_port_declarationContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Nonansi_port_declarationContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Nonansi_port_declarationContext) KW_REF() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_REF, 0)
}

func (s *Nonansi_port_declarationContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Nonansi_port_declarationContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Nonansi_port_declarationContext) Net_port_type() INet_port_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INet_port_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INet_port_typeContext)
}

func (s *Nonansi_port_declarationContext) Net_or_var_data_type() INet_or_var_data_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INet_or_var_data_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INet_or_var_data_typeContext)
}

func (s *Nonansi_port_declarationContext) DOT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOT, 0)
}

func (s *Nonansi_port_declarationContext) Var_data_type() IVar_data_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVar_data_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVar_data_typeContext)
}

func (s *Nonansi_port_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Nonansi_port_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Nonansi_port_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterNonansi_port_declaration(s)
	}
}

func (s *Nonansi_port_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitNonansi_port_declaration(s)
	}
}

func (p *SV2017Parser) Nonansi_port_declaration() (localctx INonansi_port_declarationContext) {
	localctx = NewNonansi_port_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 794, SV2017ParserRULE_nonansi_port_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5339)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 636, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(5336)
				p.Attribute_instance()
			}

		}
		p.SetState(5341)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 636, p.GetParserRuleContext())
	}
	p.SetState(5369)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_INOUT:
		{
			p.SetState(5342)
			p.Match(SV2017ParserKW_INOUT)
		}
		p.SetState(5344)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 637, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5343)
				p.Net_port_type()
			}

		}
		{
			p.SetState(5346)
			p.List_of_variable_identifiers()
		}

	case SV2017ParserKW_INPUT:
		{
			p.SetState(5347)
			p.Match(SV2017ParserKW_INPUT)
		}
		p.SetState(5349)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 638, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5348)
				p.Net_or_var_data_type()
			}

		}
		{
			p.SetState(5351)
			p.List_of_variable_identifiers()
		}

	case SV2017ParserKW_OUTPUT:
		{
			p.SetState(5352)
			p.Match(SV2017ParserKW_OUTPUT)
		}
		p.SetState(5354)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 639, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5353)
				p.Net_or_var_data_type()
			}

		}
		{
			p.SetState(5356)
			p.List_of_variable_port_identifiers()
		}

	case SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_SAMPLE, SV2017ParserKW_STD, SV2017ParserKW_TYPE_OPTION, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
		{
			p.SetState(5357)
			p.Identifier()
		}
		p.SetState(5360)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserDOT {
			{
				p.SetState(5358)
				p.Match(SV2017ParserDOT)
			}
			{
				p.SetState(5359)
				p.Identifier()
			}

		}
		{
			p.SetState(5362)
			p.List_of_variable_identifiers()
		}

	case SV2017ParserKW_REF:
		{
			p.SetState(5364)
			p.Match(SV2017ParserKW_REF)
		}
		p.SetState(5366)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 641, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5365)
				p.Var_data_type()
			}

		}
		{
			p.SetState(5368)
			p.List_of_variable_identifiers()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// INonansi_portContext is an interface to support dynamic dispatch.
type INonansi_portContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNonansi_portContext differentiates from other interfaces.
	IsNonansi_portContext()
}

type Nonansi_portContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNonansi_portContext() *Nonansi_portContext {
	var p = new(Nonansi_portContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_nonansi_port
	return p
}

func (*Nonansi_portContext) IsNonansi_portContext() {}

func NewNonansi_portContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Nonansi_portContext {
	var p = new(Nonansi_portContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_nonansi_port

	return p
}

func (s *Nonansi_portContext) GetParser() antlr.Parser { return s.parser }

func (s *Nonansi_portContext) Nonansi_port__expr() INonansi_port__exprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INonansi_port__exprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INonansi_port__exprContext)
}

func (s *Nonansi_portContext) DOT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOT, 0)
}

func (s *Nonansi_portContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Nonansi_portContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Nonansi_portContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Nonansi_portContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Nonansi_portContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Nonansi_portContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterNonansi_port(s)
	}
}

func (s *Nonansi_portContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitNonansi_port(s)
	}
}

func (p *SV2017Parser) Nonansi_port() (localctx INonansi_portContext) {
	localctx = NewNonansi_portContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 796, SV2017ParserRULE_nonansi_port)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5380)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_SAMPLE, SV2017ParserKW_STD, SV2017ParserKW_TYPE_OPTION, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserLBRACE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5371)
			p.Nonansi_port__expr()
		}

	case SV2017ParserDOT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5372)
			p.Match(SV2017ParserDOT)
		}
		{
			p.SetState(5373)
			p.Identifier()
		}
		{
			p.SetState(5374)
			p.Match(SV2017ParserLPAREN)
		}
		p.SetState(5376)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299))|(1<<(SV2017ParserLBRACE-299)))) != 0) {
			{
				p.SetState(5375)
				p.Nonansi_port__expr()
			}

		}
		{
			p.SetState(5378)
			p.Match(SV2017ParserRPAREN)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// INonansi_port__exprContext is an interface to support dynamic dispatch.
type INonansi_port__exprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNonansi_port__exprContext differentiates from other interfaces.
	IsNonansi_port__exprContext()
}

type Nonansi_port__exprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNonansi_port__exprContext() *Nonansi_port__exprContext {
	var p = new(Nonansi_port__exprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_nonansi_port__expr
	return p
}

func (*Nonansi_port__exprContext) IsNonansi_port__exprContext() {}

func NewNonansi_port__exprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Nonansi_port__exprContext {
	var p = new(Nonansi_port__exprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_nonansi_port__expr

	return p
}

func (s *Nonansi_port__exprContext) GetParser() antlr.Parser { return s.parser }

func (s *Nonansi_port__exprContext) AllIdentifier_doted_index_at_end() []IIdentifier_doted_index_at_endContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifier_doted_index_at_endContext)(nil)).Elem())
	var tst = make([]IIdentifier_doted_index_at_endContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifier_doted_index_at_endContext)
		}
	}

	return tst
}

func (s *Nonansi_port__exprContext) Identifier_doted_index_at_end(i int) IIdentifier_doted_index_at_endContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_doted_index_at_endContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_doted_index_at_endContext)
}

func (s *Nonansi_port__exprContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLBRACE, 0)
}

func (s *Nonansi_port__exprContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRBRACE, 0)
}

func (s *Nonansi_port__exprContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Nonansi_port__exprContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Nonansi_port__exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Nonansi_port__exprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Nonansi_port__exprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterNonansi_port__expr(s)
	}
}

func (s *Nonansi_port__exprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitNonansi_port__expr(s)
	}
}

func (p *SV2017Parser) Nonansi_port__expr() (localctx INonansi_port__exprContext) {
	localctx = NewNonansi_port__exprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 798, SV2017ParserRULE_nonansi_port__expr)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5394)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_SAMPLE, SV2017ParserKW_STD, SV2017ParserKW_TYPE_OPTION, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5382)
			p.Identifier_doted_index_at_end()
		}

	case SV2017ParserLBRACE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5383)
			p.Match(SV2017ParserLBRACE)
		}
		{
			p.SetState(5384)
			p.Identifier_doted_index_at_end()
		}
		p.SetState(5389)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserCOMMA {
			{
				p.SetState(5385)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(5386)
				p.Identifier_doted_index_at_end()
			}

			p.SetState(5391)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(5392)
			p.Match(SV2017ParserRBRACE)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPort_identifierContext is an interface to support dynamic dispatch.
type IPort_identifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPort_identifierContext differentiates from other interfaces.
	IsPort_identifierContext()
}

type Port_identifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPort_identifierContext() *Port_identifierContext {
	var p = new(Port_identifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_port_identifier
	return p
}

func (*Port_identifierContext) IsPort_identifierContext() {}

func NewPort_identifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Port_identifierContext {
	var p = new(Port_identifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_port_identifier

	return p
}

func (s *Port_identifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Port_identifierContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Port_identifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Port_identifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Port_identifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPort_identifier(s)
	}
}

func (s *Port_identifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPort_identifier(s)
	}
}

func (p *SV2017Parser) Port_identifier() (localctx IPort_identifierContext) {
	localctx = NewPort_identifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 800, SV2017ParserRULE_port_identifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5396)
		p.Identifier()
	}

	return localctx
}

// IAnsi_port_declarationContext is an interface to support dynamic dispatch.
type IAnsi_port_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnsi_port_declarationContext differentiates from other interfaces.
	IsAnsi_port_declarationContext()
}

type Ansi_port_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnsi_port_declarationContext() *Ansi_port_declarationContext {
	var p = new(Ansi_port_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_ansi_port_declaration
	return p
}

func (*Ansi_port_declarationContext) IsAnsi_port_declarationContext() {}

func NewAnsi_port_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ansi_port_declarationContext {
	var p = new(Ansi_port_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_ansi_port_declaration

	return p
}

func (s *Ansi_port_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Ansi_port_declarationContext) Port_identifier() IPort_identifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPort_identifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPort_identifierContext)
}

func (s *Ansi_port_declarationContext) Port_direction() IPort_directionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPort_directionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPort_directionContext)
}

func (s *Ansi_port_declarationContext) Net_or_var_data_type() INet_or_var_data_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INet_or_var_data_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INet_or_var_data_typeContext)
}

func (s *Ansi_port_declarationContext) AllVariable_dimension() []IVariable_dimensionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariable_dimensionContext)(nil)).Elem())
	var tst = make([]IVariable_dimensionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariable_dimensionContext)
		}
	}

	return tst
}

func (s *Ansi_port_declarationContext) Variable_dimension(i int) IVariable_dimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_dimensionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariable_dimensionContext)
}

func (s *Ansi_port_declarationContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserASSIGN, 0)
}

func (s *Ansi_port_declarationContext) Constant_expression() IConstant_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_expressionContext)
}

func (s *Ansi_port_declarationContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Ansi_port_declarationContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Ansi_port_declarationContext) KW_INTERFACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_INTERFACE, 0)
}

func (s *Ansi_port_declarationContext) DOT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOT, 0)
}

func (s *Ansi_port_declarationContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Ansi_port_declarationContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Ansi_port_declarationContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Ansi_port_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ansi_port_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Ansi_port_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterAnsi_port_declaration(s)
	}
}

func (s *Ansi_port_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitAnsi_port_declaration(s)
	}
}

func (p *SV2017Parser) Ansi_port_declaration() (localctx IAnsi_port_declarationContext) {
	localctx = NewAnsi_port_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 802, SV2017ParserRULE_ansi_port_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5435)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 655, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(5411)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 650, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5398)
				p.Port_direction()
			}
			p.SetState(5400)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 647, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(5399)
					p.Net_or_var_data_type()
				}

			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 650, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(5402)
				p.Net_or_var_data_type()
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 650, p.GetParserRuleContext()) == 3 {
			p.SetState(5405)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_SAMPLE, SV2017ParserKW_STD, SV2017ParserKW_TYPE_OPTION, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
				{
					p.SetState(5403)
					p.Identifier()
				}

			case SV2017ParserKW_INTERFACE:
				{
					p.SetState(5404)
					p.Match(SV2017ParserKW_INTERFACE)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}
			p.SetState(5409)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SV2017ParserDOT {
				{
					p.SetState(5407)
					p.Match(SV2017ParserDOT)
				}
				{
					p.SetState(5408)
					p.Identifier()
				}

			}

		}
		{
			p.SetState(5413)
			p.Port_identifier()
		}
		p.SetState(5417)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserLSQUARE_BR {
			{
				p.SetState(5414)
				p.Variable_dimension()
			}

			p.SetState(5419)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(5422)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserASSIGN {
			{
				p.SetState(5420)
				p.Match(SV2017ParserASSIGN)
			}
			{
				p.SetState(5421)
				p.Constant_expression()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(5425)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_INOUT || _la == SV2017ParserKW_INPUT || _la == SV2017ParserKW_OUTPUT || _la == SV2017ParserKW_REF {
			{
				p.SetState(5424)
				p.Port_direction()
			}

		}
		{
			p.SetState(5427)
			p.Match(SV2017ParserDOT)
		}
		{
			p.SetState(5428)
			p.Port_identifier()
		}
		{
			p.SetState(5429)
			p.Match(SV2017ParserLPAREN)
		}
		p.SetState(5431)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TAGGED-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserTIME_LITERAL-260)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(SV2017ParserANY_BASED_NUMBER-292))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-292))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-292))|(1<<(SV2017ParserFIXED_POINT_NUMBER-292))|(1<<(SV2017ParserUNSIGNED_NUMBER-292))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-292))|(1<<(SV2017ParserSTRING_LITERAL-292))|(1<<(SV2017ParserC_IDENTIFIER-292))|(1<<(SV2017ParserTICK_IDENTIFIER-292))|(1<<(SV2017ParserESCAPED_IDENTIFIER-292))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-292))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-292))|(1<<(SV2017ParserLPAREN-292))|(1<<(SV2017ParserLBRACE-292))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-292))|(1<<(SV2017ParserDOLAR-292))|(1<<(SV2017ParserNOT-292))|(1<<(SV2017ParserNEG-292))|(1<<(SV2017ParserNAND-292))|(1<<(SV2017ParserNOR-292)))) != 0) || (((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324))|(1<<(SV2017ParserPLUS-324)))) != 0) || (((_la-356)&-(0x1f+1)) == 0 && ((1<<uint((_la-356)))&((1<<(SV2017ParserMINUS-356))|(1<<(SV2017ParserAMPERSAND-356))|(1<<(SV2017ParserBAR-356))|(1<<(SV2017ParserINCR-356))|(1<<(SV2017ParserDECR-356)))) != 0) {
			{
				p.SetState(5430)
				p.expression(0)
			}

		}
		{
			p.SetState(5433)
			p.Match(SV2017ParserRPAREN)
		}

	}

	return localctx
}

// ISystem_timing_checkContext is an interface to support dynamic dispatch.
type ISystem_timing_checkContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSystem_timing_checkContext differentiates from other interfaces.
	IsSystem_timing_checkContext()
}

type System_timing_checkContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySystem_timing_checkContext() *System_timing_checkContext {
	var p = new(System_timing_checkContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_system_timing_check
	return p
}

func (*System_timing_checkContext) IsSystem_timing_checkContext() {}

func NewSystem_timing_checkContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *System_timing_checkContext {
	var p = new(System_timing_checkContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_system_timing_check

	return p
}

func (s *System_timing_checkContext) GetParser() antlr.Parser { return s.parser }

func (s *System_timing_checkContext) Dolar_setup_timing_check() IDolar_setup_timing_checkContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDolar_setup_timing_checkContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDolar_setup_timing_checkContext)
}

func (s *System_timing_checkContext) Dolar_hold_timing_check() IDolar_hold_timing_checkContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDolar_hold_timing_checkContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDolar_hold_timing_checkContext)
}

func (s *System_timing_checkContext) Dolar_setuphold_timing_check() IDolar_setuphold_timing_checkContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDolar_setuphold_timing_checkContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDolar_setuphold_timing_checkContext)
}

func (s *System_timing_checkContext) Dolar_recovery_timing_check() IDolar_recovery_timing_checkContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDolar_recovery_timing_checkContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDolar_recovery_timing_checkContext)
}

func (s *System_timing_checkContext) Dolar_removal_timing_check() IDolar_removal_timing_checkContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDolar_removal_timing_checkContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDolar_removal_timing_checkContext)
}

func (s *System_timing_checkContext) Dolar_recrem_timing_check() IDolar_recrem_timing_checkContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDolar_recrem_timing_checkContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDolar_recrem_timing_checkContext)
}

func (s *System_timing_checkContext) Dolar_skew_timing_check() IDolar_skew_timing_checkContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDolar_skew_timing_checkContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDolar_skew_timing_checkContext)
}

func (s *System_timing_checkContext) Dolar_timeskew_timing_check() IDolar_timeskew_timing_checkContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDolar_timeskew_timing_checkContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDolar_timeskew_timing_checkContext)
}

func (s *System_timing_checkContext) Dolar_fullskew_timing_check() IDolar_fullskew_timing_checkContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDolar_fullskew_timing_checkContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDolar_fullskew_timing_checkContext)
}

func (s *System_timing_checkContext) Dolar_period_timing_check() IDolar_period_timing_checkContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDolar_period_timing_checkContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDolar_period_timing_checkContext)
}

func (s *System_timing_checkContext) Dolar_width_timing_check() IDolar_width_timing_checkContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDolar_width_timing_checkContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDolar_width_timing_checkContext)
}

func (s *System_timing_checkContext) Dolar_nochange_timing_check() IDolar_nochange_timing_checkContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDolar_nochange_timing_checkContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDolar_nochange_timing_checkContext)
}

func (s *System_timing_checkContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *System_timing_checkContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *System_timing_checkContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterSystem_timing_check(s)
	}
}

func (s *System_timing_checkContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitSystem_timing_check(s)
	}
}

func (p *SV2017Parser) System_timing_check() (localctx ISystem_timing_checkContext) {
	localctx = NewSystem_timing_checkContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 804, SV2017ParserRULE_system_timing_check)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5449)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_DOLAR_SETUP:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5437)
			p.Dolar_setup_timing_check()
		}

	case SV2017ParserKW_DOLAR_HOLD:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5438)
			p.Dolar_hold_timing_check()
		}

	case SV2017ParserKW_DOLAR_SETUPHOLD:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5439)
			p.Dolar_setuphold_timing_check()
		}

	case SV2017ParserKW_DOLAR_RECOVERY:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5440)
			p.Dolar_recovery_timing_check()
		}

	case SV2017ParserKW_DOLAR_REMOVAL:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5441)
			p.Dolar_removal_timing_check()
		}

	case SV2017ParserKW_DOLAR_RECREM:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5442)
			p.Dolar_recrem_timing_check()
		}

	case SV2017ParserKW_DOLAR_SKEW:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5443)
			p.Dolar_skew_timing_check()
		}

	case SV2017ParserKW_DOLAR_TIMESKEW:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(5444)
			p.Dolar_timeskew_timing_check()
		}

	case SV2017ParserKW_DOLAR_FULLSKEW:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(5445)
			p.Dolar_fullskew_timing_check()
		}

	case SV2017ParserKW_DOLAR_PERIOD:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(5446)
			p.Dolar_period_timing_check()
		}

	case SV2017ParserKW_DOLAR_WIDTH:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(5447)
			p.Dolar_width_timing_check()
		}

	case SV2017ParserKW_DOLAR_NOCHANGE:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(5448)
			p.Dolar_nochange_timing_check()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDolar_setup_timing_checkContext is an interface to support dynamic dispatch.
type IDolar_setup_timing_checkContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDolar_setup_timing_checkContext differentiates from other interfaces.
	IsDolar_setup_timing_checkContext()
}

type Dolar_setup_timing_checkContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDolar_setup_timing_checkContext() *Dolar_setup_timing_checkContext {
	var p = new(Dolar_setup_timing_checkContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_dolar_setup_timing_check
	return p
}

func (*Dolar_setup_timing_checkContext) IsDolar_setup_timing_checkContext() {}

func NewDolar_setup_timing_checkContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dolar_setup_timing_checkContext {
	var p = new(Dolar_setup_timing_checkContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_dolar_setup_timing_check

	return p
}

func (s *Dolar_setup_timing_checkContext) GetParser() antlr.Parser { return s.parser }

func (s *Dolar_setup_timing_checkContext) KW_DOLAR_SETUP() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DOLAR_SETUP, 0)
}

func (s *Dolar_setup_timing_checkContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Dolar_setup_timing_checkContext) AllTiming_check_event() []ITiming_check_eventContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITiming_check_eventContext)(nil)).Elem())
	var tst = make([]ITiming_check_eventContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITiming_check_eventContext)
		}
	}

	return tst
}

func (s *Dolar_setup_timing_checkContext) Timing_check_event(i int) ITiming_check_eventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITiming_check_eventContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITiming_check_eventContext)
}

func (s *Dolar_setup_timing_checkContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Dolar_setup_timing_checkContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Dolar_setup_timing_checkContext) Timing_check_limit() ITiming_check_limitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITiming_check_limitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITiming_check_limitContext)
}

func (s *Dolar_setup_timing_checkContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Dolar_setup_timing_checkContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Dolar_setup_timing_checkContext) Notifier() INotifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INotifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INotifierContext)
}

func (s *Dolar_setup_timing_checkContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dolar_setup_timing_checkContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dolar_setup_timing_checkContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterDolar_setup_timing_check(s)
	}
}

func (s *Dolar_setup_timing_checkContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitDolar_setup_timing_check(s)
	}
}

func (p *SV2017Parser) Dolar_setup_timing_check() (localctx IDolar_setup_timing_checkContext) {
	localctx = NewDolar_setup_timing_checkContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 806, SV2017ParserRULE_dolar_setup_timing_check)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5451)
		p.Match(SV2017ParserKW_DOLAR_SETUP)
	}
	{
		p.SetState(5452)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(5453)
		p.Timing_check_event()
	}
	{
		p.SetState(5454)
		p.Match(SV2017ParserCOMMA)
	}
	{
		p.SetState(5455)
		p.Timing_check_event()
	}
	{
		p.SetState(5456)
		p.Match(SV2017ParserCOMMA)
	}
	{
		p.SetState(5457)
		p.Timing_check_limit()
	}
	p.SetState(5462)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserCOMMA {
		{
			p.SetState(5458)
			p.Match(SV2017ParserCOMMA)
		}
		p.SetState(5460)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
			{
				p.SetState(5459)
				p.Notifier()
			}

		}

	}
	{
		p.SetState(5464)
		p.Match(SV2017ParserRPAREN)
	}
	{
		p.SetState(5465)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IDolar_hold_timing_checkContext is an interface to support dynamic dispatch.
type IDolar_hold_timing_checkContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDolar_hold_timing_checkContext differentiates from other interfaces.
	IsDolar_hold_timing_checkContext()
}

type Dolar_hold_timing_checkContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDolar_hold_timing_checkContext() *Dolar_hold_timing_checkContext {
	var p = new(Dolar_hold_timing_checkContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_dolar_hold_timing_check
	return p
}

func (*Dolar_hold_timing_checkContext) IsDolar_hold_timing_checkContext() {}

func NewDolar_hold_timing_checkContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dolar_hold_timing_checkContext {
	var p = new(Dolar_hold_timing_checkContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_dolar_hold_timing_check

	return p
}

func (s *Dolar_hold_timing_checkContext) GetParser() antlr.Parser { return s.parser }

func (s *Dolar_hold_timing_checkContext) KW_DOLAR_HOLD() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DOLAR_HOLD, 0)
}

func (s *Dolar_hold_timing_checkContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Dolar_hold_timing_checkContext) AllTiming_check_event() []ITiming_check_eventContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITiming_check_eventContext)(nil)).Elem())
	var tst = make([]ITiming_check_eventContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITiming_check_eventContext)
		}
	}

	return tst
}

func (s *Dolar_hold_timing_checkContext) Timing_check_event(i int) ITiming_check_eventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITiming_check_eventContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITiming_check_eventContext)
}

func (s *Dolar_hold_timing_checkContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Dolar_hold_timing_checkContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Dolar_hold_timing_checkContext) Timing_check_limit() ITiming_check_limitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITiming_check_limitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITiming_check_limitContext)
}

func (s *Dolar_hold_timing_checkContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Dolar_hold_timing_checkContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Dolar_hold_timing_checkContext) Notifier() INotifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INotifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INotifierContext)
}

func (s *Dolar_hold_timing_checkContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dolar_hold_timing_checkContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dolar_hold_timing_checkContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterDolar_hold_timing_check(s)
	}
}

func (s *Dolar_hold_timing_checkContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitDolar_hold_timing_check(s)
	}
}

func (p *SV2017Parser) Dolar_hold_timing_check() (localctx IDolar_hold_timing_checkContext) {
	localctx = NewDolar_hold_timing_checkContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 808, SV2017ParserRULE_dolar_hold_timing_check)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5467)
		p.Match(SV2017ParserKW_DOLAR_HOLD)
	}
	{
		p.SetState(5468)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(5469)
		p.Timing_check_event()
	}
	{
		p.SetState(5470)
		p.Match(SV2017ParserCOMMA)
	}
	{
		p.SetState(5471)
		p.Timing_check_event()
	}
	{
		p.SetState(5472)
		p.Match(SV2017ParserCOMMA)
	}
	{
		p.SetState(5473)
		p.Timing_check_limit()
	}
	p.SetState(5478)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserCOMMA {
		{
			p.SetState(5474)
			p.Match(SV2017ParserCOMMA)
		}
		p.SetState(5476)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
			{
				p.SetState(5475)
				p.Notifier()
			}

		}

	}
	{
		p.SetState(5480)
		p.Match(SV2017ParserRPAREN)
	}
	{
		p.SetState(5481)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IDolar_setuphold_timing_checkContext is an interface to support dynamic dispatch.
type IDolar_setuphold_timing_checkContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDolar_setuphold_timing_checkContext differentiates from other interfaces.
	IsDolar_setuphold_timing_checkContext()
}

type Dolar_setuphold_timing_checkContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDolar_setuphold_timing_checkContext() *Dolar_setuphold_timing_checkContext {
	var p = new(Dolar_setuphold_timing_checkContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_dolar_setuphold_timing_check
	return p
}

func (*Dolar_setuphold_timing_checkContext) IsDolar_setuphold_timing_checkContext() {}

func NewDolar_setuphold_timing_checkContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dolar_setuphold_timing_checkContext {
	var p = new(Dolar_setuphold_timing_checkContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_dolar_setuphold_timing_check

	return p
}

func (s *Dolar_setuphold_timing_checkContext) GetParser() antlr.Parser { return s.parser }

func (s *Dolar_setuphold_timing_checkContext) KW_DOLAR_SETUPHOLD() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DOLAR_SETUPHOLD, 0)
}

func (s *Dolar_setuphold_timing_checkContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Dolar_setuphold_timing_checkContext) AllTiming_check_event() []ITiming_check_eventContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITiming_check_eventContext)(nil)).Elem())
	var tst = make([]ITiming_check_eventContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITiming_check_eventContext)
		}
	}

	return tst
}

func (s *Dolar_setuphold_timing_checkContext) Timing_check_event(i int) ITiming_check_eventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITiming_check_eventContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITiming_check_eventContext)
}

func (s *Dolar_setuphold_timing_checkContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Dolar_setuphold_timing_checkContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Dolar_setuphold_timing_checkContext) AllTiming_check_limit() []ITiming_check_limitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITiming_check_limitContext)(nil)).Elem())
	var tst = make([]ITiming_check_limitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITiming_check_limitContext)
		}
	}

	return tst
}

func (s *Dolar_setuphold_timing_checkContext) Timing_check_limit(i int) ITiming_check_limitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITiming_check_limitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITiming_check_limitContext)
}

func (s *Dolar_setuphold_timing_checkContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Dolar_setuphold_timing_checkContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Dolar_setuphold_timing_checkContext) Notifier() INotifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INotifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INotifierContext)
}

func (s *Dolar_setuphold_timing_checkContext) Timestamp_condition() ITimestamp_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITimestamp_conditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITimestamp_conditionContext)
}

func (s *Dolar_setuphold_timing_checkContext) Timecheck_condition() ITimecheck_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITimecheck_conditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITimecheck_conditionContext)
}

func (s *Dolar_setuphold_timing_checkContext) AllDelayed_reference() []IDelayed_referenceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDelayed_referenceContext)(nil)).Elem())
	var tst = make([]IDelayed_referenceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDelayed_referenceContext)
		}
	}

	return tst
}

func (s *Dolar_setuphold_timing_checkContext) Delayed_reference(i int) IDelayed_referenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelayed_referenceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDelayed_referenceContext)
}

func (s *Dolar_setuphold_timing_checkContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dolar_setuphold_timing_checkContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dolar_setuphold_timing_checkContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterDolar_setuphold_timing_check(s)
	}
}

func (s *Dolar_setuphold_timing_checkContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitDolar_setuphold_timing_check(s)
	}
}

func (p *SV2017Parser) Dolar_setuphold_timing_check() (localctx IDolar_setuphold_timing_checkContext) {
	localctx = NewDolar_setuphold_timing_checkContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 810, SV2017ParserRULE_dolar_setuphold_timing_check)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5483)
		p.Match(SV2017ParserKW_DOLAR_SETUPHOLD)
	}
	{
		p.SetState(5484)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(5485)
		p.Timing_check_event()
	}
	{
		p.SetState(5486)
		p.Match(SV2017ParserCOMMA)
	}
	{
		p.SetState(5487)
		p.Timing_check_event()
	}
	{
		p.SetState(5488)
		p.Match(SV2017ParserCOMMA)
	}
	{
		p.SetState(5489)
		p.Timing_check_limit()
	}
	{
		p.SetState(5490)
		p.Match(SV2017ParserCOMMA)
	}
	{
		p.SetState(5491)
		p.Timing_check_limit()
	}
	p.SetState(5520)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserCOMMA {
		{
			p.SetState(5492)
			p.Match(SV2017ParserCOMMA)
		}
		p.SetState(5494)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
			{
				p.SetState(5493)
				p.Notifier()
			}

		}
		p.SetState(5518)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserCOMMA {
			{
				p.SetState(5496)
				p.Match(SV2017ParserCOMMA)
			}
			p.SetState(5498)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TAGGED-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserTIME_LITERAL-260)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(SV2017ParserANY_BASED_NUMBER-292))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-292))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-292))|(1<<(SV2017ParserFIXED_POINT_NUMBER-292))|(1<<(SV2017ParserUNSIGNED_NUMBER-292))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-292))|(1<<(SV2017ParserSTRING_LITERAL-292))|(1<<(SV2017ParserC_IDENTIFIER-292))|(1<<(SV2017ParserTICK_IDENTIFIER-292))|(1<<(SV2017ParserESCAPED_IDENTIFIER-292))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-292))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-292))|(1<<(SV2017ParserLPAREN-292))|(1<<(SV2017ParserLBRACE-292))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-292))|(1<<(SV2017ParserDOLAR-292))|(1<<(SV2017ParserNOT-292))|(1<<(SV2017ParserNEG-292))|(1<<(SV2017ParserNAND-292))|(1<<(SV2017ParserNOR-292)))) != 0) || (((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324))|(1<<(SV2017ParserPLUS-324)))) != 0) || (((_la-356)&-(0x1f+1)) == 0 && ((1<<uint((_la-356)))&((1<<(SV2017ParserMINUS-356))|(1<<(SV2017ParserAMPERSAND-356))|(1<<(SV2017ParserBAR-356))|(1<<(SV2017ParserINCR-356))|(1<<(SV2017ParserDECR-356)))) != 0) {
				{
					p.SetState(5497)
					p.Timestamp_condition()
				}

			}
			p.SetState(5516)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SV2017ParserCOMMA {
				{
					p.SetState(5500)
					p.Match(SV2017ParserCOMMA)
				}
				p.SetState(5502)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TAGGED-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserTIME_LITERAL-260)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(SV2017ParserANY_BASED_NUMBER-292))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-292))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-292))|(1<<(SV2017ParserFIXED_POINT_NUMBER-292))|(1<<(SV2017ParserUNSIGNED_NUMBER-292))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-292))|(1<<(SV2017ParserSTRING_LITERAL-292))|(1<<(SV2017ParserC_IDENTIFIER-292))|(1<<(SV2017ParserTICK_IDENTIFIER-292))|(1<<(SV2017ParserESCAPED_IDENTIFIER-292))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-292))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-292))|(1<<(SV2017ParserLPAREN-292))|(1<<(SV2017ParserLBRACE-292))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-292))|(1<<(SV2017ParserDOLAR-292))|(1<<(SV2017ParserNOT-292))|(1<<(SV2017ParserNEG-292))|(1<<(SV2017ParserNAND-292))|(1<<(SV2017ParserNOR-292)))) != 0) || (((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324))|(1<<(SV2017ParserPLUS-324)))) != 0) || (((_la-356)&-(0x1f+1)) == 0 && ((1<<uint((_la-356)))&((1<<(SV2017ParserMINUS-356))|(1<<(SV2017ParserAMPERSAND-356))|(1<<(SV2017ParserBAR-356))|(1<<(SV2017ParserINCR-356))|(1<<(SV2017ParserDECR-356)))) != 0) {
					{
						p.SetState(5501)
						p.Timecheck_condition()
					}

				}
				p.SetState(5514)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == SV2017ParserCOMMA {
					{
						p.SetState(5504)
						p.Match(SV2017ParserCOMMA)
					}
					p.SetState(5506)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
						{
							p.SetState(5505)
							p.Delayed_reference()
						}

					}
					p.SetState(5512)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == SV2017ParserCOMMA {
						{
							p.SetState(5508)
							p.Match(SV2017ParserCOMMA)
						}
						p.SetState(5510)
						p.GetErrorHandler().Sync(p)
						_la = p.GetTokenStream().LA(1)

						if _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
							{
								p.SetState(5509)
								p.Delayed_reference()
							}

						}

					}

				}

			}

		}

	}
	{
		p.SetState(5522)
		p.Match(SV2017ParserRPAREN)
	}
	{
		p.SetState(5523)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IDolar_recovery_timing_checkContext is an interface to support dynamic dispatch.
type IDolar_recovery_timing_checkContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDolar_recovery_timing_checkContext differentiates from other interfaces.
	IsDolar_recovery_timing_checkContext()
}

type Dolar_recovery_timing_checkContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDolar_recovery_timing_checkContext() *Dolar_recovery_timing_checkContext {
	var p = new(Dolar_recovery_timing_checkContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_dolar_recovery_timing_check
	return p
}

func (*Dolar_recovery_timing_checkContext) IsDolar_recovery_timing_checkContext() {}

func NewDolar_recovery_timing_checkContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dolar_recovery_timing_checkContext {
	var p = new(Dolar_recovery_timing_checkContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_dolar_recovery_timing_check

	return p
}

func (s *Dolar_recovery_timing_checkContext) GetParser() antlr.Parser { return s.parser }

func (s *Dolar_recovery_timing_checkContext) KW_DOLAR_RECOVERY() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DOLAR_RECOVERY, 0)
}

func (s *Dolar_recovery_timing_checkContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Dolar_recovery_timing_checkContext) AllTiming_check_event() []ITiming_check_eventContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITiming_check_eventContext)(nil)).Elem())
	var tst = make([]ITiming_check_eventContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITiming_check_eventContext)
		}
	}

	return tst
}

func (s *Dolar_recovery_timing_checkContext) Timing_check_event(i int) ITiming_check_eventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITiming_check_eventContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITiming_check_eventContext)
}

func (s *Dolar_recovery_timing_checkContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Dolar_recovery_timing_checkContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Dolar_recovery_timing_checkContext) Timing_check_limit() ITiming_check_limitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITiming_check_limitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITiming_check_limitContext)
}

func (s *Dolar_recovery_timing_checkContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Dolar_recovery_timing_checkContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Dolar_recovery_timing_checkContext) Notifier() INotifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INotifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INotifierContext)
}

func (s *Dolar_recovery_timing_checkContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dolar_recovery_timing_checkContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dolar_recovery_timing_checkContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterDolar_recovery_timing_check(s)
	}
}

func (s *Dolar_recovery_timing_checkContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitDolar_recovery_timing_check(s)
	}
}

func (p *SV2017Parser) Dolar_recovery_timing_check() (localctx IDolar_recovery_timing_checkContext) {
	localctx = NewDolar_recovery_timing_checkContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 812, SV2017ParserRULE_dolar_recovery_timing_check)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5525)
		p.Match(SV2017ParserKW_DOLAR_RECOVERY)
	}
	{
		p.SetState(5526)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(5527)
		p.Timing_check_event()
	}
	{
		p.SetState(5528)
		p.Match(SV2017ParserCOMMA)
	}
	{
		p.SetState(5529)
		p.Timing_check_event()
	}
	{
		p.SetState(5530)
		p.Match(SV2017ParserCOMMA)
	}
	{
		p.SetState(5531)
		p.Timing_check_limit()
	}
	p.SetState(5536)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserCOMMA {
		{
			p.SetState(5532)
			p.Match(SV2017ParserCOMMA)
		}
		p.SetState(5534)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
			{
				p.SetState(5533)
				p.Notifier()
			}

		}

	}
	{
		p.SetState(5538)
		p.Match(SV2017ParserRPAREN)
	}
	{
		p.SetState(5539)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IDolar_removal_timing_checkContext is an interface to support dynamic dispatch.
type IDolar_removal_timing_checkContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDolar_removal_timing_checkContext differentiates from other interfaces.
	IsDolar_removal_timing_checkContext()
}

type Dolar_removal_timing_checkContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDolar_removal_timing_checkContext() *Dolar_removal_timing_checkContext {
	var p = new(Dolar_removal_timing_checkContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_dolar_removal_timing_check
	return p
}

func (*Dolar_removal_timing_checkContext) IsDolar_removal_timing_checkContext() {}

func NewDolar_removal_timing_checkContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dolar_removal_timing_checkContext {
	var p = new(Dolar_removal_timing_checkContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_dolar_removal_timing_check

	return p
}

func (s *Dolar_removal_timing_checkContext) GetParser() antlr.Parser { return s.parser }

func (s *Dolar_removal_timing_checkContext) KW_DOLAR_REMOVAL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DOLAR_REMOVAL, 0)
}

func (s *Dolar_removal_timing_checkContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Dolar_removal_timing_checkContext) AllTiming_check_event() []ITiming_check_eventContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITiming_check_eventContext)(nil)).Elem())
	var tst = make([]ITiming_check_eventContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITiming_check_eventContext)
		}
	}

	return tst
}

func (s *Dolar_removal_timing_checkContext) Timing_check_event(i int) ITiming_check_eventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITiming_check_eventContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITiming_check_eventContext)
}

func (s *Dolar_removal_timing_checkContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Dolar_removal_timing_checkContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Dolar_removal_timing_checkContext) Timing_check_limit() ITiming_check_limitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITiming_check_limitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITiming_check_limitContext)
}

func (s *Dolar_removal_timing_checkContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Dolar_removal_timing_checkContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Dolar_removal_timing_checkContext) Notifier() INotifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INotifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INotifierContext)
}

func (s *Dolar_removal_timing_checkContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dolar_removal_timing_checkContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dolar_removal_timing_checkContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterDolar_removal_timing_check(s)
	}
}

func (s *Dolar_removal_timing_checkContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitDolar_removal_timing_check(s)
	}
}

func (p *SV2017Parser) Dolar_removal_timing_check() (localctx IDolar_removal_timing_checkContext) {
	localctx = NewDolar_removal_timing_checkContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 814, SV2017ParserRULE_dolar_removal_timing_check)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5541)
		p.Match(SV2017ParserKW_DOLAR_REMOVAL)
	}
	{
		p.SetState(5542)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(5543)
		p.Timing_check_event()
	}
	{
		p.SetState(5544)
		p.Match(SV2017ParserCOMMA)
	}
	{
		p.SetState(5545)
		p.Timing_check_event()
	}
	{
		p.SetState(5546)
		p.Match(SV2017ParserCOMMA)
	}
	{
		p.SetState(5547)
		p.Timing_check_limit()
	}
	p.SetState(5552)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserCOMMA {
		{
			p.SetState(5548)
			p.Match(SV2017ParserCOMMA)
		}
		p.SetState(5550)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
			{
				p.SetState(5549)
				p.Notifier()
			}

		}

	}
	{
		p.SetState(5554)
		p.Match(SV2017ParserRPAREN)
	}
	{
		p.SetState(5555)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IDolar_recrem_timing_checkContext is an interface to support dynamic dispatch.
type IDolar_recrem_timing_checkContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDolar_recrem_timing_checkContext differentiates from other interfaces.
	IsDolar_recrem_timing_checkContext()
}

type Dolar_recrem_timing_checkContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDolar_recrem_timing_checkContext() *Dolar_recrem_timing_checkContext {
	var p = new(Dolar_recrem_timing_checkContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_dolar_recrem_timing_check
	return p
}

func (*Dolar_recrem_timing_checkContext) IsDolar_recrem_timing_checkContext() {}

func NewDolar_recrem_timing_checkContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dolar_recrem_timing_checkContext {
	var p = new(Dolar_recrem_timing_checkContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_dolar_recrem_timing_check

	return p
}

func (s *Dolar_recrem_timing_checkContext) GetParser() antlr.Parser { return s.parser }

func (s *Dolar_recrem_timing_checkContext) KW_DOLAR_RECREM() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DOLAR_RECREM, 0)
}

func (s *Dolar_recrem_timing_checkContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Dolar_recrem_timing_checkContext) AllTiming_check_event() []ITiming_check_eventContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITiming_check_eventContext)(nil)).Elem())
	var tst = make([]ITiming_check_eventContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITiming_check_eventContext)
		}
	}

	return tst
}

func (s *Dolar_recrem_timing_checkContext) Timing_check_event(i int) ITiming_check_eventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITiming_check_eventContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITiming_check_eventContext)
}

func (s *Dolar_recrem_timing_checkContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Dolar_recrem_timing_checkContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Dolar_recrem_timing_checkContext) AllTiming_check_limit() []ITiming_check_limitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITiming_check_limitContext)(nil)).Elem())
	var tst = make([]ITiming_check_limitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITiming_check_limitContext)
		}
	}

	return tst
}

func (s *Dolar_recrem_timing_checkContext) Timing_check_limit(i int) ITiming_check_limitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITiming_check_limitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITiming_check_limitContext)
}

func (s *Dolar_recrem_timing_checkContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Dolar_recrem_timing_checkContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Dolar_recrem_timing_checkContext) Notifier() INotifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INotifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INotifierContext)
}

func (s *Dolar_recrem_timing_checkContext) Timestamp_condition() ITimestamp_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITimestamp_conditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITimestamp_conditionContext)
}

func (s *Dolar_recrem_timing_checkContext) Timecheck_condition() ITimecheck_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITimecheck_conditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITimecheck_conditionContext)
}

func (s *Dolar_recrem_timing_checkContext) AllDelayed_reference() []IDelayed_referenceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDelayed_referenceContext)(nil)).Elem())
	var tst = make([]IDelayed_referenceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDelayed_referenceContext)
		}
	}

	return tst
}

func (s *Dolar_recrem_timing_checkContext) Delayed_reference(i int) IDelayed_referenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelayed_referenceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDelayed_referenceContext)
}

func (s *Dolar_recrem_timing_checkContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dolar_recrem_timing_checkContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dolar_recrem_timing_checkContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterDolar_recrem_timing_check(s)
	}
}

func (s *Dolar_recrem_timing_checkContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitDolar_recrem_timing_check(s)
	}
}

func (p *SV2017Parser) Dolar_recrem_timing_check() (localctx IDolar_recrem_timing_checkContext) {
	localctx = NewDolar_recrem_timing_checkContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 816, SV2017ParserRULE_dolar_recrem_timing_check)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5557)
		p.Match(SV2017ParserKW_DOLAR_RECREM)
	}
	{
		p.SetState(5558)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(5559)
		p.Timing_check_event()
	}
	{
		p.SetState(5560)
		p.Match(SV2017ParserCOMMA)
	}
	{
		p.SetState(5561)
		p.Timing_check_event()
	}
	{
		p.SetState(5562)
		p.Match(SV2017ParserCOMMA)
	}
	{
		p.SetState(5563)
		p.Timing_check_limit()
	}
	{
		p.SetState(5564)
		p.Match(SV2017ParserCOMMA)
	}
	{
		p.SetState(5565)
		p.Timing_check_limit()
	}
	p.SetState(5594)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserCOMMA {
		{
			p.SetState(5566)
			p.Match(SV2017ParserCOMMA)
		}
		p.SetState(5568)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
			{
				p.SetState(5567)
				p.Notifier()
			}

		}
		p.SetState(5592)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserCOMMA {
			{
				p.SetState(5570)
				p.Match(SV2017ParserCOMMA)
			}
			p.SetState(5572)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TAGGED-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserTIME_LITERAL-260)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(SV2017ParserANY_BASED_NUMBER-292))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-292))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-292))|(1<<(SV2017ParserFIXED_POINT_NUMBER-292))|(1<<(SV2017ParserUNSIGNED_NUMBER-292))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-292))|(1<<(SV2017ParserSTRING_LITERAL-292))|(1<<(SV2017ParserC_IDENTIFIER-292))|(1<<(SV2017ParserTICK_IDENTIFIER-292))|(1<<(SV2017ParserESCAPED_IDENTIFIER-292))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-292))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-292))|(1<<(SV2017ParserLPAREN-292))|(1<<(SV2017ParserLBRACE-292))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-292))|(1<<(SV2017ParserDOLAR-292))|(1<<(SV2017ParserNOT-292))|(1<<(SV2017ParserNEG-292))|(1<<(SV2017ParserNAND-292))|(1<<(SV2017ParserNOR-292)))) != 0) || (((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324))|(1<<(SV2017ParserPLUS-324)))) != 0) || (((_la-356)&-(0x1f+1)) == 0 && ((1<<uint((_la-356)))&((1<<(SV2017ParserMINUS-356))|(1<<(SV2017ParserAMPERSAND-356))|(1<<(SV2017ParserBAR-356))|(1<<(SV2017ParserINCR-356))|(1<<(SV2017ParserDECR-356)))) != 0) {
				{
					p.SetState(5571)
					p.Timestamp_condition()
				}

			}
			p.SetState(5590)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SV2017ParserCOMMA {
				{
					p.SetState(5574)
					p.Match(SV2017ParserCOMMA)
				}
				p.SetState(5576)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TAGGED-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserTIME_LITERAL-260)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(SV2017ParserANY_BASED_NUMBER-292))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-292))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-292))|(1<<(SV2017ParserFIXED_POINT_NUMBER-292))|(1<<(SV2017ParserUNSIGNED_NUMBER-292))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-292))|(1<<(SV2017ParserSTRING_LITERAL-292))|(1<<(SV2017ParserC_IDENTIFIER-292))|(1<<(SV2017ParserTICK_IDENTIFIER-292))|(1<<(SV2017ParserESCAPED_IDENTIFIER-292))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-292))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-292))|(1<<(SV2017ParserLPAREN-292))|(1<<(SV2017ParserLBRACE-292))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-292))|(1<<(SV2017ParserDOLAR-292))|(1<<(SV2017ParserNOT-292))|(1<<(SV2017ParserNEG-292))|(1<<(SV2017ParserNAND-292))|(1<<(SV2017ParserNOR-292)))) != 0) || (((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324))|(1<<(SV2017ParserPLUS-324)))) != 0) || (((_la-356)&-(0x1f+1)) == 0 && ((1<<uint((_la-356)))&((1<<(SV2017ParserMINUS-356))|(1<<(SV2017ParserAMPERSAND-356))|(1<<(SV2017ParserBAR-356))|(1<<(SV2017ParserINCR-356))|(1<<(SV2017ParserDECR-356)))) != 0) {
					{
						p.SetState(5575)
						p.Timecheck_condition()
					}

				}
				p.SetState(5588)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == SV2017ParserCOMMA {
					{
						p.SetState(5578)
						p.Match(SV2017ParserCOMMA)
					}
					p.SetState(5580)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
						{
							p.SetState(5579)
							p.Delayed_reference()
						}

					}
					p.SetState(5586)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == SV2017ParserCOMMA {
						{
							p.SetState(5582)
							p.Match(SV2017ParserCOMMA)
						}
						p.SetState(5584)
						p.GetErrorHandler().Sync(p)
						_la = p.GetTokenStream().LA(1)

						if _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
							{
								p.SetState(5583)
								p.Delayed_reference()
							}

						}

					}

				}

			}

		}

	}
	{
		p.SetState(5596)
		p.Match(SV2017ParserRPAREN)
	}
	{
		p.SetState(5597)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IDolar_skew_timing_checkContext is an interface to support dynamic dispatch.
type IDolar_skew_timing_checkContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDolar_skew_timing_checkContext differentiates from other interfaces.
	IsDolar_skew_timing_checkContext()
}

type Dolar_skew_timing_checkContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDolar_skew_timing_checkContext() *Dolar_skew_timing_checkContext {
	var p = new(Dolar_skew_timing_checkContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_dolar_skew_timing_check
	return p
}

func (*Dolar_skew_timing_checkContext) IsDolar_skew_timing_checkContext() {}

func NewDolar_skew_timing_checkContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dolar_skew_timing_checkContext {
	var p = new(Dolar_skew_timing_checkContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_dolar_skew_timing_check

	return p
}

func (s *Dolar_skew_timing_checkContext) GetParser() antlr.Parser { return s.parser }

func (s *Dolar_skew_timing_checkContext) KW_DOLAR_SKEW() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DOLAR_SKEW, 0)
}

func (s *Dolar_skew_timing_checkContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Dolar_skew_timing_checkContext) AllTiming_check_event() []ITiming_check_eventContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITiming_check_eventContext)(nil)).Elem())
	var tst = make([]ITiming_check_eventContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITiming_check_eventContext)
		}
	}

	return tst
}

func (s *Dolar_skew_timing_checkContext) Timing_check_event(i int) ITiming_check_eventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITiming_check_eventContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITiming_check_eventContext)
}

func (s *Dolar_skew_timing_checkContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Dolar_skew_timing_checkContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Dolar_skew_timing_checkContext) Timing_check_limit() ITiming_check_limitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITiming_check_limitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITiming_check_limitContext)
}

func (s *Dolar_skew_timing_checkContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Dolar_skew_timing_checkContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Dolar_skew_timing_checkContext) Notifier() INotifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INotifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INotifierContext)
}

func (s *Dolar_skew_timing_checkContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dolar_skew_timing_checkContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dolar_skew_timing_checkContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterDolar_skew_timing_check(s)
	}
}

func (s *Dolar_skew_timing_checkContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitDolar_skew_timing_check(s)
	}
}

func (p *SV2017Parser) Dolar_skew_timing_check() (localctx IDolar_skew_timing_checkContext) {
	localctx = NewDolar_skew_timing_checkContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 818, SV2017ParserRULE_dolar_skew_timing_check)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5599)
		p.Match(SV2017ParserKW_DOLAR_SKEW)
	}
	{
		p.SetState(5600)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(5601)
		p.Timing_check_event()
	}
	{
		p.SetState(5602)
		p.Match(SV2017ParserCOMMA)
	}
	{
		p.SetState(5603)
		p.Timing_check_event()
	}
	{
		p.SetState(5604)
		p.Match(SV2017ParserCOMMA)
	}
	{
		p.SetState(5605)
		p.Timing_check_limit()
	}
	p.SetState(5610)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserCOMMA {
		{
			p.SetState(5606)
			p.Match(SV2017ParserCOMMA)
		}
		p.SetState(5608)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
			{
				p.SetState(5607)
				p.Notifier()
			}

		}

	}
	{
		p.SetState(5612)
		p.Match(SV2017ParserRPAREN)
	}
	{
		p.SetState(5613)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IDolar_timeskew_timing_checkContext is an interface to support dynamic dispatch.
type IDolar_timeskew_timing_checkContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDolar_timeskew_timing_checkContext differentiates from other interfaces.
	IsDolar_timeskew_timing_checkContext()
}

type Dolar_timeskew_timing_checkContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDolar_timeskew_timing_checkContext() *Dolar_timeskew_timing_checkContext {
	var p = new(Dolar_timeskew_timing_checkContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_dolar_timeskew_timing_check
	return p
}

func (*Dolar_timeskew_timing_checkContext) IsDolar_timeskew_timing_checkContext() {}

func NewDolar_timeskew_timing_checkContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dolar_timeskew_timing_checkContext {
	var p = new(Dolar_timeskew_timing_checkContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_dolar_timeskew_timing_check

	return p
}

func (s *Dolar_timeskew_timing_checkContext) GetParser() antlr.Parser { return s.parser }

func (s *Dolar_timeskew_timing_checkContext) KW_DOLAR_TIMESKEW() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DOLAR_TIMESKEW, 0)
}

func (s *Dolar_timeskew_timing_checkContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Dolar_timeskew_timing_checkContext) AllTiming_check_event() []ITiming_check_eventContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITiming_check_eventContext)(nil)).Elem())
	var tst = make([]ITiming_check_eventContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITiming_check_eventContext)
		}
	}

	return tst
}

func (s *Dolar_timeskew_timing_checkContext) Timing_check_event(i int) ITiming_check_eventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITiming_check_eventContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITiming_check_eventContext)
}

func (s *Dolar_timeskew_timing_checkContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Dolar_timeskew_timing_checkContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Dolar_timeskew_timing_checkContext) Timing_check_limit() ITiming_check_limitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITiming_check_limitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITiming_check_limitContext)
}

func (s *Dolar_timeskew_timing_checkContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Dolar_timeskew_timing_checkContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Dolar_timeskew_timing_checkContext) Notifier() INotifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INotifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INotifierContext)
}

func (s *Dolar_timeskew_timing_checkContext) Event_based_flag() IEvent_based_flagContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEvent_based_flagContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEvent_based_flagContext)
}

func (s *Dolar_timeskew_timing_checkContext) Remain_active_flag() IRemain_active_flagContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRemain_active_flagContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRemain_active_flagContext)
}

func (s *Dolar_timeskew_timing_checkContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dolar_timeskew_timing_checkContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dolar_timeskew_timing_checkContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterDolar_timeskew_timing_check(s)
	}
}

func (s *Dolar_timeskew_timing_checkContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitDolar_timeskew_timing_check(s)
	}
}

func (p *SV2017Parser) Dolar_timeskew_timing_check() (localctx IDolar_timeskew_timing_checkContext) {
	localctx = NewDolar_timeskew_timing_checkContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 820, SV2017ParserRULE_dolar_timeskew_timing_check)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5615)
		p.Match(SV2017ParserKW_DOLAR_TIMESKEW)
	}
	{
		p.SetState(5616)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(5617)
		p.Timing_check_event()
	}
	{
		p.SetState(5618)
		p.Match(SV2017ParserCOMMA)
	}
	{
		p.SetState(5619)
		p.Timing_check_event()
	}
	{
		p.SetState(5620)
		p.Match(SV2017ParserCOMMA)
	}
	{
		p.SetState(5621)
		p.Timing_check_limit()
	}
	p.SetState(5638)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserCOMMA {
		{
			p.SetState(5622)
			p.Match(SV2017ParserCOMMA)
		}
		p.SetState(5624)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
			{
				p.SetState(5623)
				p.Notifier()
			}

		}
		p.SetState(5636)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserCOMMA {
			{
				p.SetState(5626)
				p.Match(SV2017ParserCOMMA)
			}
			p.SetState(5628)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TAGGED-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserTIME_LITERAL-260)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(SV2017ParserANY_BASED_NUMBER-292))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-292))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-292))|(1<<(SV2017ParserFIXED_POINT_NUMBER-292))|(1<<(SV2017ParserUNSIGNED_NUMBER-292))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-292))|(1<<(SV2017ParserSTRING_LITERAL-292))|(1<<(SV2017ParserC_IDENTIFIER-292))|(1<<(SV2017ParserTICK_IDENTIFIER-292))|(1<<(SV2017ParserESCAPED_IDENTIFIER-292))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-292))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-292))|(1<<(SV2017ParserLPAREN-292))|(1<<(SV2017ParserLBRACE-292))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-292))|(1<<(SV2017ParserDOLAR-292))|(1<<(SV2017ParserNOT-292))|(1<<(SV2017ParserNEG-292))|(1<<(SV2017ParserNAND-292))|(1<<(SV2017ParserNOR-292)))) != 0) || (((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324))|(1<<(SV2017ParserPLUS-324)))) != 0) || (((_la-356)&-(0x1f+1)) == 0 && ((1<<uint((_la-356)))&((1<<(SV2017ParserMINUS-356))|(1<<(SV2017ParserAMPERSAND-356))|(1<<(SV2017ParserBAR-356))|(1<<(SV2017ParserINCR-356))|(1<<(SV2017ParserDECR-356)))) != 0) {
				{
					p.SetState(5627)
					p.Event_based_flag()
				}

			}
			p.SetState(5634)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SV2017ParserCOMMA {
				{
					p.SetState(5630)
					p.Match(SV2017ParserCOMMA)
				}
				p.SetState(5632)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TAGGED-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserTIME_LITERAL-260)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(SV2017ParserANY_BASED_NUMBER-292))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-292))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-292))|(1<<(SV2017ParserFIXED_POINT_NUMBER-292))|(1<<(SV2017ParserUNSIGNED_NUMBER-292))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-292))|(1<<(SV2017ParserSTRING_LITERAL-292))|(1<<(SV2017ParserC_IDENTIFIER-292))|(1<<(SV2017ParserTICK_IDENTIFIER-292))|(1<<(SV2017ParserESCAPED_IDENTIFIER-292))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-292))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-292))|(1<<(SV2017ParserLPAREN-292))|(1<<(SV2017ParserLBRACE-292))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-292))|(1<<(SV2017ParserDOLAR-292))|(1<<(SV2017ParserNOT-292))|(1<<(SV2017ParserNEG-292))|(1<<(SV2017ParserNAND-292))|(1<<(SV2017ParserNOR-292)))) != 0) || (((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324))|(1<<(SV2017ParserPLUS-324)))) != 0) || (((_la-356)&-(0x1f+1)) == 0 && ((1<<uint((_la-356)))&((1<<(SV2017ParserMINUS-356))|(1<<(SV2017ParserAMPERSAND-356))|(1<<(SV2017ParserBAR-356))|(1<<(SV2017ParserINCR-356))|(1<<(SV2017ParserDECR-356)))) != 0) {
					{
						p.SetState(5631)
						p.Remain_active_flag()
					}

				}

			}

		}

	}
	{
		p.SetState(5640)
		p.Match(SV2017ParserRPAREN)
	}
	{
		p.SetState(5641)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IDolar_fullskew_timing_checkContext is an interface to support dynamic dispatch.
type IDolar_fullskew_timing_checkContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDolar_fullskew_timing_checkContext differentiates from other interfaces.
	IsDolar_fullskew_timing_checkContext()
}

type Dolar_fullskew_timing_checkContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDolar_fullskew_timing_checkContext() *Dolar_fullskew_timing_checkContext {
	var p = new(Dolar_fullskew_timing_checkContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_dolar_fullskew_timing_check
	return p
}

func (*Dolar_fullskew_timing_checkContext) IsDolar_fullskew_timing_checkContext() {}

func NewDolar_fullskew_timing_checkContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dolar_fullskew_timing_checkContext {
	var p = new(Dolar_fullskew_timing_checkContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_dolar_fullskew_timing_check

	return p
}

func (s *Dolar_fullskew_timing_checkContext) GetParser() antlr.Parser { return s.parser }

func (s *Dolar_fullskew_timing_checkContext) KW_DOLAR_FULLSKEW() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DOLAR_FULLSKEW, 0)
}

func (s *Dolar_fullskew_timing_checkContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Dolar_fullskew_timing_checkContext) AllTiming_check_event() []ITiming_check_eventContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITiming_check_eventContext)(nil)).Elem())
	var tst = make([]ITiming_check_eventContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITiming_check_eventContext)
		}
	}

	return tst
}

func (s *Dolar_fullskew_timing_checkContext) Timing_check_event(i int) ITiming_check_eventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITiming_check_eventContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITiming_check_eventContext)
}

func (s *Dolar_fullskew_timing_checkContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Dolar_fullskew_timing_checkContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Dolar_fullskew_timing_checkContext) AllTiming_check_limit() []ITiming_check_limitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITiming_check_limitContext)(nil)).Elem())
	var tst = make([]ITiming_check_limitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITiming_check_limitContext)
		}
	}

	return tst
}

func (s *Dolar_fullskew_timing_checkContext) Timing_check_limit(i int) ITiming_check_limitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITiming_check_limitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITiming_check_limitContext)
}

func (s *Dolar_fullskew_timing_checkContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Dolar_fullskew_timing_checkContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Dolar_fullskew_timing_checkContext) Notifier() INotifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INotifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INotifierContext)
}

func (s *Dolar_fullskew_timing_checkContext) Event_based_flag() IEvent_based_flagContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEvent_based_flagContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEvent_based_flagContext)
}

func (s *Dolar_fullskew_timing_checkContext) Remain_active_flag() IRemain_active_flagContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRemain_active_flagContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRemain_active_flagContext)
}

func (s *Dolar_fullskew_timing_checkContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dolar_fullskew_timing_checkContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dolar_fullskew_timing_checkContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterDolar_fullskew_timing_check(s)
	}
}

func (s *Dolar_fullskew_timing_checkContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitDolar_fullskew_timing_check(s)
	}
}

func (p *SV2017Parser) Dolar_fullskew_timing_check() (localctx IDolar_fullskew_timing_checkContext) {
	localctx = NewDolar_fullskew_timing_checkContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 822, SV2017ParserRULE_dolar_fullskew_timing_check)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5643)
		p.Match(SV2017ParserKW_DOLAR_FULLSKEW)
	}
	{
		p.SetState(5644)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(5645)
		p.Timing_check_event()
	}
	{
		p.SetState(5646)
		p.Match(SV2017ParserCOMMA)
	}
	{
		p.SetState(5647)
		p.Timing_check_event()
	}
	{
		p.SetState(5648)
		p.Match(SV2017ParserCOMMA)
	}
	{
		p.SetState(5649)
		p.Timing_check_limit()
	}
	{
		p.SetState(5650)
		p.Match(SV2017ParserCOMMA)
	}
	{
		p.SetState(5651)
		p.Timing_check_limit()
	}
	p.SetState(5668)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserCOMMA {
		{
			p.SetState(5652)
			p.Match(SV2017ParserCOMMA)
		}
		p.SetState(5654)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
			{
				p.SetState(5653)
				p.Notifier()
			}

		}
		p.SetState(5666)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserCOMMA {
			{
				p.SetState(5656)
				p.Match(SV2017ParserCOMMA)
			}
			p.SetState(5658)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TAGGED-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserTIME_LITERAL-260)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(SV2017ParserANY_BASED_NUMBER-292))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-292))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-292))|(1<<(SV2017ParserFIXED_POINT_NUMBER-292))|(1<<(SV2017ParserUNSIGNED_NUMBER-292))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-292))|(1<<(SV2017ParserSTRING_LITERAL-292))|(1<<(SV2017ParserC_IDENTIFIER-292))|(1<<(SV2017ParserTICK_IDENTIFIER-292))|(1<<(SV2017ParserESCAPED_IDENTIFIER-292))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-292))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-292))|(1<<(SV2017ParserLPAREN-292))|(1<<(SV2017ParserLBRACE-292))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-292))|(1<<(SV2017ParserDOLAR-292))|(1<<(SV2017ParserNOT-292))|(1<<(SV2017ParserNEG-292))|(1<<(SV2017ParserNAND-292))|(1<<(SV2017ParserNOR-292)))) != 0) || (((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324))|(1<<(SV2017ParserPLUS-324)))) != 0) || (((_la-356)&-(0x1f+1)) == 0 && ((1<<uint((_la-356)))&((1<<(SV2017ParserMINUS-356))|(1<<(SV2017ParserAMPERSAND-356))|(1<<(SV2017ParserBAR-356))|(1<<(SV2017ParserINCR-356))|(1<<(SV2017ParserDECR-356)))) != 0) {
				{
					p.SetState(5657)
					p.Event_based_flag()
				}

			}
			p.SetState(5664)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SV2017ParserCOMMA {
				{
					p.SetState(5660)
					p.Match(SV2017ParserCOMMA)
				}
				p.SetState(5662)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TAGGED-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserTIME_LITERAL-260)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(SV2017ParserANY_BASED_NUMBER-292))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-292))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-292))|(1<<(SV2017ParserFIXED_POINT_NUMBER-292))|(1<<(SV2017ParserUNSIGNED_NUMBER-292))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-292))|(1<<(SV2017ParserSTRING_LITERAL-292))|(1<<(SV2017ParserC_IDENTIFIER-292))|(1<<(SV2017ParserTICK_IDENTIFIER-292))|(1<<(SV2017ParserESCAPED_IDENTIFIER-292))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-292))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-292))|(1<<(SV2017ParserLPAREN-292))|(1<<(SV2017ParserLBRACE-292))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-292))|(1<<(SV2017ParserDOLAR-292))|(1<<(SV2017ParserNOT-292))|(1<<(SV2017ParserNEG-292))|(1<<(SV2017ParserNAND-292))|(1<<(SV2017ParserNOR-292)))) != 0) || (((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324))|(1<<(SV2017ParserPLUS-324)))) != 0) || (((_la-356)&-(0x1f+1)) == 0 && ((1<<uint((_la-356)))&((1<<(SV2017ParserMINUS-356))|(1<<(SV2017ParserAMPERSAND-356))|(1<<(SV2017ParserBAR-356))|(1<<(SV2017ParserINCR-356))|(1<<(SV2017ParserDECR-356)))) != 0) {
					{
						p.SetState(5661)
						p.Remain_active_flag()
					}

				}

			}

		}

	}
	{
		p.SetState(5670)
		p.Match(SV2017ParserRPAREN)
	}
	{
		p.SetState(5671)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IDolar_period_timing_checkContext is an interface to support dynamic dispatch.
type IDolar_period_timing_checkContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDolar_period_timing_checkContext differentiates from other interfaces.
	IsDolar_period_timing_checkContext()
}

type Dolar_period_timing_checkContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDolar_period_timing_checkContext() *Dolar_period_timing_checkContext {
	var p = new(Dolar_period_timing_checkContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_dolar_period_timing_check
	return p
}

func (*Dolar_period_timing_checkContext) IsDolar_period_timing_checkContext() {}

func NewDolar_period_timing_checkContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dolar_period_timing_checkContext {
	var p = new(Dolar_period_timing_checkContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_dolar_period_timing_check

	return p
}

func (s *Dolar_period_timing_checkContext) GetParser() antlr.Parser { return s.parser }

func (s *Dolar_period_timing_checkContext) KW_DOLAR_PERIOD() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DOLAR_PERIOD, 0)
}

func (s *Dolar_period_timing_checkContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Dolar_period_timing_checkContext) Controlled_reference_event() IControlled_reference_eventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControlled_reference_eventContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControlled_reference_eventContext)
}

func (s *Dolar_period_timing_checkContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Dolar_period_timing_checkContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Dolar_period_timing_checkContext) Timing_check_limit() ITiming_check_limitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITiming_check_limitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITiming_check_limitContext)
}

func (s *Dolar_period_timing_checkContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Dolar_period_timing_checkContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Dolar_period_timing_checkContext) Notifier() INotifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INotifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INotifierContext)
}

func (s *Dolar_period_timing_checkContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dolar_period_timing_checkContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dolar_period_timing_checkContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterDolar_period_timing_check(s)
	}
}

func (s *Dolar_period_timing_checkContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitDolar_period_timing_check(s)
	}
}

func (p *SV2017Parser) Dolar_period_timing_check() (localctx IDolar_period_timing_checkContext) {
	localctx = NewDolar_period_timing_checkContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 824, SV2017ParserRULE_dolar_period_timing_check)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5673)
		p.Match(SV2017ParserKW_DOLAR_PERIOD)
	}
	{
		p.SetState(5674)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(5675)
		p.Controlled_reference_event()
	}
	{
		p.SetState(5676)
		p.Match(SV2017ParserCOMMA)
	}
	{
		p.SetState(5677)
		p.Timing_check_limit()
	}
	p.SetState(5682)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserCOMMA {
		{
			p.SetState(5678)
			p.Match(SV2017ParserCOMMA)
		}
		p.SetState(5680)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
			{
				p.SetState(5679)
				p.Notifier()
			}

		}

	}
	{
		p.SetState(5684)
		p.Match(SV2017ParserRPAREN)
	}
	{
		p.SetState(5685)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IDolar_width_timing_checkContext is an interface to support dynamic dispatch.
type IDolar_width_timing_checkContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDolar_width_timing_checkContext differentiates from other interfaces.
	IsDolar_width_timing_checkContext()
}

type Dolar_width_timing_checkContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDolar_width_timing_checkContext() *Dolar_width_timing_checkContext {
	var p = new(Dolar_width_timing_checkContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_dolar_width_timing_check
	return p
}

func (*Dolar_width_timing_checkContext) IsDolar_width_timing_checkContext() {}

func NewDolar_width_timing_checkContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dolar_width_timing_checkContext {
	var p = new(Dolar_width_timing_checkContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_dolar_width_timing_check

	return p
}

func (s *Dolar_width_timing_checkContext) GetParser() antlr.Parser { return s.parser }

func (s *Dolar_width_timing_checkContext) KW_DOLAR_WIDTH() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DOLAR_WIDTH, 0)
}

func (s *Dolar_width_timing_checkContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Dolar_width_timing_checkContext) Controlled_reference_event() IControlled_reference_eventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControlled_reference_eventContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControlled_reference_eventContext)
}

func (s *Dolar_width_timing_checkContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Dolar_width_timing_checkContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Dolar_width_timing_checkContext) Timing_check_limit() ITiming_check_limitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITiming_check_limitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITiming_check_limitContext)
}

func (s *Dolar_width_timing_checkContext) Threshold() IThresholdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThresholdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IThresholdContext)
}

func (s *Dolar_width_timing_checkContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Dolar_width_timing_checkContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Dolar_width_timing_checkContext) Notifier() INotifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INotifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INotifierContext)
}

func (s *Dolar_width_timing_checkContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dolar_width_timing_checkContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dolar_width_timing_checkContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterDolar_width_timing_check(s)
	}
}

func (s *Dolar_width_timing_checkContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitDolar_width_timing_check(s)
	}
}

func (p *SV2017Parser) Dolar_width_timing_check() (localctx IDolar_width_timing_checkContext) {
	localctx = NewDolar_width_timing_checkContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 826, SV2017ParserRULE_dolar_width_timing_check)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5687)
		p.Match(SV2017ParserKW_DOLAR_WIDTH)
	}
	{
		p.SetState(5688)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(5689)
		p.Controlled_reference_event()
	}
	{
		p.SetState(5690)
		p.Match(SV2017ParserCOMMA)
	}
	{
		p.SetState(5691)
		p.Timing_check_limit()
	}
	{
		p.SetState(5692)
		p.Match(SV2017ParserCOMMA)
	}
	{
		p.SetState(5693)
		p.Threshold()
	}
	p.SetState(5698)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserCOMMA {
		{
			p.SetState(5694)
			p.Match(SV2017ParserCOMMA)
		}
		p.SetState(5696)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
			{
				p.SetState(5695)
				p.Notifier()
			}

		}

	}
	{
		p.SetState(5700)
		p.Match(SV2017ParserRPAREN)
	}
	{
		p.SetState(5701)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IDolar_nochange_timing_checkContext is an interface to support dynamic dispatch.
type IDolar_nochange_timing_checkContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDolar_nochange_timing_checkContext differentiates from other interfaces.
	IsDolar_nochange_timing_checkContext()
}

type Dolar_nochange_timing_checkContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDolar_nochange_timing_checkContext() *Dolar_nochange_timing_checkContext {
	var p = new(Dolar_nochange_timing_checkContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_dolar_nochange_timing_check
	return p
}

func (*Dolar_nochange_timing_checkContext) IsDolar_nochange_timing_checkContext() {}

func NewDolar_nochange_timing_checkContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dolar_nochange_timing_checkContext {
	var p = new(Dolar_nochange_timing_checkContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_dolar_nochange_timing_check

	return p
}

func (s *Dolar_nochange_timing_checkContext) GetParser() antlr.Parser { return s.parser }

func (s *Dolar_nochange_timing_checkContext) KW_DOLAR_NOCHANGE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DOLAR_NOCHANGE, 0)
}

func (s *Dolar_nochange_timing_checkContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Dolar_nochange_timing_checkContext) AllTiming_check_event() []ITiming_check_eventContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITiming_check_eventContext)(nil)).Elem())
	var tst = make([]ITiming_check_eventContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITiming_check_eventContext)
		}
	}

	return tst
}

func (s *Dolar_nochange_timing_checkContext) Timing_check_event(i int) ITiming_check_eventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITiming_check_eventContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITiming_check_eventContext)
}

func (s *Dolar_nochange_timing_checkContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Dolar_nochange_timing_checkContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Dolar_nochange_timing_checkContext) Start_edge_offset() IStart_edge_offsetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStart_edge_offsetContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStart_edge_offsetContext)
}

func (s *Dolar_nochange_timing_checkContext) End_edge_offset() IEnd_edge_offsetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnd_edge_offsetContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnd_edge_offsetContext)
}

func (s *Dolar_nochange_timing_checkContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Dolar_nochange_timing_checkContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Dolar_nochange_timing_checkContext) Notifier() INotifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INotifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INotifierContext)
}

func (s *Dolar_nochange_timing_checkContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dolar_nochange_timing_checkContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dolar_nochange_timing_checkContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterDolar_nochange_timing_check(s)
	}
}

func (s *Dolar_nochange_timing_checkContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitDolar_nochange_timing_check(s)
	}
}

func (p *SV2017Parser) Dolar_nochange_timing_check() (localctx IDolar_nochange_timing_checkContext) {
	localctx = NewDolar_nochange_timing_checkContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 828, SV2017ParserRULE_dolar_nochange_timing_check)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5703)
		p.Match(SV2017ParserKW_DOLAR_NOCHANGE)
	}
	{
		p.SetState(5704)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(5705)
		p.Timing_check_event()
	}
	{
		p.SetState(5706)
		p.Match(SV2017ParserCOMMA)
	}
	{
		p.SetState(5707)
		p.Timing_check_event()
	}
	{
		p.SetState(5708)
		p.Match(SV2017ParserCOMMA)
	}
	{
		p.SetState(5709)
		p.Start_edge_offset()
	}
	{
		p.SetState(5710)
		p.Match(SV2017ParserCOMMA)
	}
	{
		p.SetState(5711)
		p.End_edge_offset()
	}
	p.SetState(5716)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserCOMMA {
		{
			p.SetState(5712)
			p.Match(SV2017ParserCOMMA)
		}
		p.SetState(5714)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
			{
				p.SetState(5713)
				p.Notifier()
			}

		}

	}
	{
		p.SetState(5718)
		p.Match(SV2017ParserRPAREN)
	}
	{
		p.SetState(5719)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// ITimecheck_conditionContext is an interface to support dynamic dispatch.
type ITimecheck_conditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTimecheck_conditionContext differentiates from other interfaces.
	IsTimecheck_conditionContext()
}

type Timecheck_conditionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTimecheck_conditionContext() *Timecheck_conditionContext {
	var p = new(Timecheck_conditionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_timecheck_condition
	return p
}

func (*Timecheck_conditionContext) IsTimecheck_conditionContext() {}

func NewTimecheck_conditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Timecheck_conditionContext {
	var p = new(Timecheck_conditionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_timecheck_condition

	return p
}

func (s *Timecheck_conditionContext) GetParser() antlr.Parser { return s.parser }

func (s *Timecheck_conditionContext) Mintypmax_expression() IMintypmax_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMintypmax_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMintypmax_expressionContext)
}

func (s *Timecheck_conditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Timecheck_conditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Timecheck_conditionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterTimecheck_condition(s)
	}
}

func (s *Timecheck_conditionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitTimecheck_condition(s)
	}
}

func (p *SV2017Parser) Timecheck_condition() (localctx ITimecheck_conditionContext) {
	localctx = NewTimecheck_conditionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 830, SV2017ParserRULE_timecheck_condition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5721)
		p.Mintypmax_expression()
	}

	return localctx
}

// IControlled_reference_eventContext is an interface to support dynamic dispatch.
type IControlled_reference_eventContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsControlled_reference_eventContext differentiates from other interfaces.
	IsControlled_reference_eventContext()
}

type Controlled_reference_eventContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyControlled_reference_eventContext() *Controlled_reference_eventContext {
	var p = new(Controlled_reference_eventContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_controlled_reference_event
	return p
}

func (*Controlled_reference_eventContext) IsControlled_reference_eventContext() {}

func NewControlled_reference_eventContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Controlled_reference_eventContext {
	var p = new(Controlled_reference_eventContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_controlled_reference_event

	return p
}

func (s *Controlled_reference_eventContext) GetParser() antlr.Parser { return s.parser }

func (s *Controlled_reference_eventContext) Controlled_timing_check_event() IControlled_timing_check_eventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControlled_timing_check_eventContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControlled_timing_check_eventContext)
}

func (s *Controlled_reference_eventContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Controlled_reference_eventContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Controlled_reference_eventContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterControlled_reference_event(s)
	}
}

func (s *Controlled_reference_eventContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitControlled_reference_event(s)
	}
}

func (p *SV2017Parser) Controlled_reference_event() (localctx IControlled_reference_eventContext) {
	localctx = NewControlled_reference_eventContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 832, SV2017ParserRULE_controlled_reference_event)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5723)
		p.Controlled_timing_check_event()
	}

	return localctx
}

// IDelayed_referenceContext is an interface to support dynamic dispatch.
type IDelayed_referenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDelayed_referenceContext differentiates from other interfaces.
	IsDelayed_referenceContext()
}

type Delayed_referenceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDelayed_referenceContext() *Delayed_referenceContext {
	var p = new(Delayed_referenceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_delayed_reference
	return p
}

func (*Delayed_referenceContext) IsDelayed_referenceContext() {}

func NewDelayed_referenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Delayed_referenceContext {
	var p = new(Delayed_referenceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_delayed_reference

	return p
}

func (s *Delayed_referenceContext) GetParser() antlr.Parser { return s.parser }

func (s *Delayed_referenceContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Delayed_referenceContext) LSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLSQUARE_BR, 0)
}

func (s *Delayed_referenceContext) Constant_mintypmax_expression() IConstant_mintypmax_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_mintypmax_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_mintypmax_expressionContext)
}

func (s *Delayed_referenceContext) RSQUARE_BR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRSQUARE_BR, 0)
}

func (s *Delayed_referenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Delayed_referenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Delayed_referenceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterDelayed_reference(s)
	}
}

func (s *Delayed_referenceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitDelayed_reference(s)
	}
}

func (p *SV2017Parser) Delayed_reference() (localctx IDelayed_referenceContext) {
	localctx = NewDelayed_referenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 834, SV2017ParserRULE_delayed_reference)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5725)
		p.Identifier()
	}
	p.SetState(5730)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserLSQUARE_BR {
		{
			p.SetState(5726)
			p.Match(SV2017ParserLSQUARE_BR)
		}
		{
			p.SetState(5727)
			p.Constant_mintypmax_expression()
		}
		{
			p.SetState(5728)
			p.Match(SV2017ParserRSQUARE_BR)
		}

	}

	return localctx
}

// IEnd_edge_offsetContext is an interface to support dynamic dispatch.
type IEnd_edge_offsetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnd_edge_offsetContext differentiates from other interfaces.
	IsEnd_edge_offsetContext()
}

type End_edge_offsetContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnd_edge_offsetContext() *End_edge_offsetContext {
	var p = new(End_edge_offsetContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_end_edge_offset
	return p
}

func (*End_edge_offsetContext) IsEnd_edge_offsetContext() {}

func NewEnd_edge_offsetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *End_edge_offsetContext {
	var p = new(End_edge_offsetContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_end_edge_offset

	return p
}

func (s *End_edge_offsetContext) GetParser() antlr.Parser { return s.parser }

func (s *End_edge_offsetContext) Mintypmax_expression() IMintypmax_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMintypmax_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMintypmax_expressionContext)
}

func (s *End_edge_offsetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *End_edge_offsetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *End_edge_offsetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterEnd_edge_offset(s)
	}
}

func (s *End_edge_offsetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitEnd_edge_offset(s)
	}
}

func (p *SV2017Parser) End_edge_offset() (localctx IEnd_edge_offsetContext) {
	localctx = NewEnd_edge_offsetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 836, SV2017ParserRULE_end_edge_offset)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5732)
		p.Mintypmax_expression()
	}

	return localctx
}

// IEvent_based_flagContext is an interface to support dynamic dispatch.
type IEvent_based_flagContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEvent_based_flagContext differentiates from other interfaces.
	IsEvent_based_flagContext()
}

type Event_based_flagContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEvent_based_flagContext() *Event_based_flagContext {
	var p = new(Event_based_flagContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_event_based_flag
	return p
}

func (*Event_based_flagContext) IsEvent_based_flagContext() {}

func NewEvent_based_flagContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Event_based_flagContext {
	var p = new(Event_based_flagContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_event_based_flag

	return p
}

func (s *Event_based_flagContext) GetParser() antlr.Parser { return s.parser }

func (s *Event_based_flagContext) Constant_expression() IConstant_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_expressionContext)
}

func (s *Event_based_flagContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Event_based_flagContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Event_based_flagContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterEvent_based_flag(s)
	}
}

func (s *Event_based_flagContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitEvent_based_flag(s)
	}
}

func (p *SV2017Parser) Event_based_flag() (localctx IEvent_based_flagContext) {
	localctx = NewEvent_based_flagContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 838, SV2017ParserRULE_event_based_flag)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5734)
		p.Constant_expression()
	}

	return localctx
}

// INotifierContext is an interface to support dynamic dispatch.
type INotifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNotifierContext differentiates from other interfaces.
	IsNotifierContext()
}

type NotifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNotifierContext() *NotifierContext {
	var p = new(NotifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_notifier
	return p
}

func (*NotifierContext) IsNotifierContext() {}

func NewNotifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NotifierContext {
	var p = new(NotifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_notifier

	return p
}

func (s *NotifierContext) GetParser() antlr.Parser { return s.parser }

func (s *NotifierContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *NotifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NotifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NotifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterNotifier(s)
	}
}

func (s *NotifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitNotifier(s)
	}
}

func (p *SV2017Parser) Notifier() (localctx INotifierContext) {
	localctx = NewNotifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 840, SV2017ParserRULE_notifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5736)
		p.Identifier()
	}

	return localctx
}

// IRemain_active_flagContext is an interface to support dynamic dispatch.
type IRemain_active_flagContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRemain_active_flagContext differentiates from other interfaces.
	IsRemain_active_flagContext()
}

type Remain_active_flagContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRemain_active_flagContext() *Remain_active_flagContext {
	var p = new(Remain_active_flagContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_remain_active_flag
	return p
}

func (*Remain_active_flagContext) IsRemain_active_flagContext() {}

func NewRemain_active_flagContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Remain_active_flagContext {
	var p = new(Remain_active_flagContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_remain_active_flag

	return p
}

func (s *Remain_active_flagContext) GetParser() antlr.Parser { return s.parser }

func (s *Remain_active_flagContext) Constant_mintypmax_expression() IConstant_mintypmax_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_mintypmax_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_mintypmax_expressionContext)
}

func (s *Remain_active_flagContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Remain_active_flagContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Remain_active_flagContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterRemain_active_flag(s)
	}
}

func (s *Remain_active_flagContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitRemain_active_flag(s)
	}
}

func (p *SV2017Parser) Remain_active_flag() (localctx IRemain_active_flagContext) {
	localctx = NewRemain_active_flagContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 842, SV2017ParserRULE_remain_active_flag)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5738)
		p.Constant_mintypmax_expression()
	}

	return localctx
}

// ITimestamp_conditionContext is an interface to support dynamic dispatch.
type ITimestamp_conditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTimestamp_conditionContext differentiates from other interfaces.
	IsTimestamp_conditionContext()
}

type Timestamp_conditionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTimestamp_conditionContext() *Timestamp_conditionContext {
	var p = new(Timestamp_conditionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_timestamp_condition
	return p
}

func (*Timestamp_conditionContext) IsTimestamp_conditionContext() {}

func NewTimestamp_conditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Timestamp_conditionContext {
	var p = new(Timestamp_conditionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_timestamp_condition

	return p
}

func (s *Timestamp_conditionContext) GetParser() antlr.Parser { return s.parser }

func (s *Timestamp_conditionContext) Mintypmax_expression() IMintypmax_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMintypmax_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMintypmax_expressionContext)
}

func (s *Timestamp_conditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Timestamp_conditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Timestamp_conditionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterTimestamp_condition(s)
	}
}

func (s *Timestamp_conditionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitTimestamp_condition(s)
	}
}

func (p *SV2017Parser) Timestamp_condition() (localctx ITimestamp_conditionContext) {
	localctx = NewTimestamp_conditionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 844, SV2017ParserRULE_timestamp_condition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5740)
		p.Mintypmax_expression()
	}

	return localctx
}

// IStart_edge_offsetContext is an interface to support dynamic dispatch.
type IStart_edge_offsetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStart_edge_offsetContext differentiates from other interfaces.
	IsStart_edge_offsetContext()
}

type Start_edge_offsetContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStart_edge_offsetContext() *Start_edge_offsetContext {
	var p = new(Start_edge_offsetContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_start_edge_offset
	return p
}

func (*Start_edge_offsetContext) IsStart_edge_offsetContext() {}

func NewStart_edge_offsetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Start_edge_offsetContext {
	var p = new(Start_edge_offsetContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_start_edge_offset

	return p
}

func (s *Start_edge_offsetContext) GetParser() antlr.Parser { return s.parser }

func (s *Start_edge_offsetContext) Mintypmax_expression() IMintypmax_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMintypmax_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMintypmax_expressionContext)
}

func (s *Start_edge_offsetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Start_edge_offsetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Start_edge_offsetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterStart_edge_offset(s)
	}
}

func (s *Start_edge_offsetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitStart_edge_offset(s)
	}
}

func (p *SV2017Parser) Start_edge_offset() (localctx IStart_edge_offsetContext) {
	localctx = NewStart_edge_offsetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 846, SV2017ParserRULE_start_edge_offset)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5742)
		p.Mintypmax_expression()
	}

	return localctx
}

// IThresholdContext is an interface to support dynamic dispatch.
type IThresholdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsThresholdContext differentiates from other interfaces.
	IsThresholdContext()
}

type ThresholdContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyThresholdContext() *ThresholdContext {
	var p = new(ThresholdContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_threshold
	return p
}

func (*ThresholdContext) IsThresholdContext() {}

func NewThresholdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ThresholdContext {
	var p = new(ThresholdContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_threshold

	return p
}

func (s *ThresholdContext) GetParser() antlr.Parser { return s.parser }

func (s *ThresholdContext) Constant_expression() IConstant_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_expressionContext)
}

func (s *ThresholdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ThresholdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ThresholdContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterThreshold(s)
	}
}

func (s *ThresholdContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitThreshold(s)
	}
}

func (p *SV2017Parser) Threshold() (localctx IThresholdContext) {
	localctx = NewThresholdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 848, SV2017ParserRULE_threshold)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5744)
		p.Constant_expression()
	}

	return localctx
}

// ITiming_check_limitContext is an interface to support dynamic dispatch.
type ITiming_check_limitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTiming_check_limitContext differentiates from other interfaces.
	IsTiming_check_limitContext()
}

type Timing_check_limitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTiming_check_limitContext() *Timing_check_limitContext {
	var p = new(Timing_check_limitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_timing_check_limit
	return p
}

func (*Timing_check_limitContext) IsTiming_check_limitContext() {}

func NewTiming_check_limitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Timing_check_limitContext {
	var p = new(Timing_check_limitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_timing_check_limit

	return p
}

func (s *Timing_check_limitContext) GetParser() antlr.Parser { return s.parser }

func (s *Timing_check_limitContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Timing_check_limitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Timing_check_limitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Timing_check_limitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterTiming_check_limit(s)
	}
}

func (s *Timing_check_limitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitTiming_check_limit(s)
	}
}

func (p *SV2017Parser) Timing_check_limit() (localctx ITiming_check_limitContext) {
	localctx = NewTiming_check_limitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 850, SV2017ParserRULE_timing_check_limit)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5746)
		p.expression(0)
	}

	return localctx
}

// ITiming_check_eventContext is an interface to support dynamic dispatch.
type ITiming_check_eventContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTiming_check_eventContext differentiates from other interfaces.
	IsTiming_check_eventContext()
}

type Timing_check_eventContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTiming_check_eventContext() *Timing_check_eventContext {
	var p = new(Timing_check_eventContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_timing_check_event
	return p
}

func (*Timing_check_eventContext) IsTiming_check_eventContext() {}

func NewTiming_check_eventContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Timing_check_eventContext {
	var p = new(Timing_check_eventContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_timing_check_event

	return p
}

func (s *Timing_check_eventContext) GetParser() antlr.Parser { return s.parser }

func (s *Timing_check_eventContext) Specify_terminal_descriptor() ISpecify_terminal_descriptorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISpecify_terminal_descriptorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISpecify_terminal_descriptorContext)
}

func (s *Timing_check_eventContext) Timing_check_event_control() ITiming_check_event_controlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITiming_check_event_controlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITiming_check_event_controlContext)
}

func (s *Timing_check_eventContext) TRIPLE_AND() antlr.TerminalNode {
	return s.GetToken(SV2017ParserTRIPLE_AND, 0)
}

func (s *Timing_check_eventContext) Timing_check_condition() ITiming_check_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITiming_check_conditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITiming_check_conditionContext)
}

func (s *Timing_check_eventContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Timing_check_eventContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Timing_check_eventContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterTiming_check_event(s)
	}
}

func (s *Timing_check_eventContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitTiming_check_event(s)
	}
}

func (p *SV2017Parser) Timing_check_event() (localctx ITiming_check_eventContext) {
	localctx = NewTiming_check_eventContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 852, SV2017ParserRULE_timing_check_event)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5749)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_EDGE || _la == SV2017ParserKW_NEGEDGE || _la == SV2017ParserKW_POSEDGE || _la == SV2017ParserEDGE_CONTROL_SPECIFIER {
		{
			p.SetState(5748)
			p.Timing_check_event_control()
		}

	}
	{
		p.SetState(5751)
		p.Specify_terminal_descriptor()
	}
	p.SetState(5754)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserTRIPLE_AND {
		{
			p.SetState(5752)
			p.Match(SV2017ParserTRIPLE_AND)
		}
		{
			p.SetState(5753)
			p.Timing_check_condition()
		}

	}

	return localctx
}

// ITiming_check_conditionContext is an interface to support dynamic dispatch.
type ITiming_check_conditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTiming_check_conditionContext differentiates from other interfaces.
	IsTiming_check_conditionContext()
}

type Timing_check_conditionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTiming_check_conditionContext() *Timing_check_conditionContext {
	var p = new(Timing_check_conditionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_timing_check_condition
	return p
}

func (*Timing_check_conditionContext) IsTiming_check_conditionContext() {}

func NewTiming_check_conditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Timing_check_conditionContext {
	var p = new(Timing_check_conditionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_timing_check_condition

	return p
}

func (s *Timing_check_conditionContext) GetParser() antlr.Parser { return s.parser }

func (s *Timing_check_conditionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Timing_check_conditionContext) Scalar_timing_check_condition() IScalar_timing_check_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IScalar_timing_check_conditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IScalar_timing_check_conditionContext)
}

func (s *Timing_check_conditionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Timing_check_conditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Timing_check_conditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Timing_check_conditionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterTiming_check_condition(s)
	}
}

func (s *Timing_check_conditionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitTiming_check_condition(s)
	}
}

func (p *SV2017Parser) Timing_check_condition() (localctx ITiming_check_conditionContext) {
	localctx = NewTiming_check_conditionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 854, SV2017ParserRULE_timing_check_condition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5761)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 708, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5756)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(5757)
			p.Scalar_timing_check_condition()
		}
		{
			p.SetState(5758)
			p.Match(SV2017ParserRPAREN)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5760)
			p.Scalar_timing_check_condition()
		}

	}

	return localctx
}

// IScalar_timing_check_conditionContext is an interface to support dynamic dispatch.
type IScalar_timing_check_conditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsScalar_timing_check_conditionContext differentiates from other interfaces.
	IsScalar_timing_check_conditionContext()
}

type Scalar_timing_check_conditionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyScalar_timing_check_conditionContext() *Scalar_timing_check_conditionContext {
	var p = new(Scalar_timing_check_conditionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_scalar_timing_check_condition
	return p
}

func (*Scalar_timing_check_conditionContext) IsScalar_timing_check_conditionContext() {}

func NewScalar_timing_check_conditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Scalar_timing_check_conditionContext {
	var p = new(Scalar_timing_check_conditionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_scalar_timing_check_condition

	return p
}

func (s *Scalar_timing_check_conditionContext) GetParser() antlr.Parser { return s.parser }

func (s *Scalar_timing_check_conditionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Scalar_timing_check_conditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Scalar_timing_check_conditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Scalar_timing_check_conditionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterScalar_timing_check_condition(s)
	}
}

func (s *Scalar_timing_check_conditionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitScalar_timing_check_condition(s)
	}
}

func (p *SV2017Parser) Scalar_timing_check_condition() (localctx IScalar_timing_check_conditionContext) {
	localctx = NewScalar_timing_check_conditionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 856, SV2017ParserRULE_scalar_timing_check_condition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5763)
		p.expression(0)
	}

	return localctx
}

// IControlled_timing_check_eventContext is an interface to support dynamic dispatch.
type IControlled_timing_check_eventContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsControlled_timing_check_eventContext differentiates from other interfaces.
	IsControlled_timing_check_eventContext()
}

type Controlled_timing_check_eventContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyControlled_timing_check_eventContext() *Controlled_timing_check_eventContext {
	var p = new(Controlled_timing_check_eventContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_controlled_timing_check_event
	return p
}

func (*Controlled_timing_check_eventContext) IsControlled_timing_check_eventContext() {}

func NewControlled_timing_check_eventContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Controlled_timing_check_eventContext {
	var p = new(Controlled_timing_check_eventContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_controlled_timing_check_event

	return p
}

func (s *Controlled_timing_check_eventContext) GetParser() antlr.Parser { return s.parser }

func (s *Controlled_timing_check_eventContext) Timing_check_event_control() ITiming_check_event_controlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITiming_check_event_controlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITiming_check_event_controlContext)
}

func (s *Controlled_timing_check_eventContext) Specify_terminal_descriptor() ISpecify_terminal_descriptorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISpecify_terminal_descriptorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISpecify_terminal_descriptorContext)
}

func (s *Controlled_timing_check_eventContext) TRIPLE_AND() antlr.TerminalNode {
	return s.GetToken(SV2017ParserTRIPLE_AND, 0)
}

func (s *Controlled_timing_check_eventContext) Timing_check_condition() ITiming_check_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITiming_check_conditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITiming_check_conditionContext)
}

func (s *Controlled_timing_check_eventContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Controlled_timing_check_eventContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Controlled_timing_check_eventContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterControlled_timing_check_event(s)
	}
}

func (s *Controlled_timing_check_eventContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitControlled_timing_check_event(s)
	}
}

func (p *SV2017Parser) Controlled_timing_check_event() (localctx IControlled_timing_check_eventContext) {
	localctx = NewControlled_timing_check_eventContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 858, SV2017ParserRULE_controlled_timing_check_event)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5765)
		p.Timing_check_event_control()
	}
	{
		p.SetState(5766)
		p.Specify_terminal_descriptor()
	}
	p.SetState(5769)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserTRIPLE_AND {
		{
			p.SetState(5767)
			p.Match(SV2017ParserTRIPLE_AND)
		}
		{
			p.SetState(5768)
			p.Timing_check_condition()
		}

	}

	return localctx
}

// IFunction_data_type_or_implicitContext is an interface to support dynamic dispatch.
type IFunction_data_type_or_implicitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_data_type_or_implicitContext differentiates from other interfaces.
	IsFunction_data_type_or_implicitContext()
}

type Function_data_type_or_implicitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_data_type_or_implicitContext() *Function_data_type_or_implicitContext {
	var p = new(Function_data_type_or_implicitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_function_data_type_or_implicit
	return p
}

func (*Function_data_type_or_implicitContext) IsFunction_data_type_or_implicitContext() {}

func NewFunction_data_type_or_implicitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_data_type_or_implicitContext {
	var p = new(Function_data_type_or_implicitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_function_data_type_or_implicit

	return p
}

func (s *Function_data_type_or_implicitContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_data_type_or_implicitContext) Data_type_or_void() IData_type_or_voidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_or_voidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_or_voidContext)
}

func (s *Function_data_type_or_implicitContext) Implicit_data_type() IImplicit_data_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImplicit_data_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImplicit_data_typeContext)
}

func (s *Function_data_type_or_implicitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_data_type_or_implicitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_data_type_or_implicitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterFunction_data_type_or_implicit(s)
	}
}

func (s *Function_data_type_or_implicitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitFunction_data_type_or_implicit(s)
	}
}

func (p *SV2017Parser) Function_data_type_or_implicit() (localctx IFunction_data_type_or_implicitContext) {
	localctx = NewFunction_data_type_or_implicitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 860, SV2017ParserRULE_function_data_type_or_implicit)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5773)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_BIT, SV2017ParserKW_BYTE, SV2017ParserKW_CHANDLE, SV2017ParserKW_ENUM, SV2017ParserKW_EVENT, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LOCAL, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_SAMPLE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_UNION, SV2017ParserKW_VIRTUAL, SV2017ParserKW_VOID, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5771)
			p.Data_type_or_void()
		}

	case SV2017ParserKW_SIGNED, SV2017ParserKW_UNSIGNED, SV2017ParserLSQUARE_BR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5772)
			p.Implicit_data_type()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IExtern_tf_declarationContext is an interface to support dynamic dispatch.
type IExtern_tf_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExtern_tf_declarationContext differentiates from other interfaces.
	IsExtern_tf_declarationContext()
}

type Extern_tf_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExtern_tf_declarationContext() *Extern_tf_declarationContext {
	var p = new(Extern_tf_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_extern_tf_declaration
	return p
}

func (*Extern_tf_declarationContext) IsExtern_tf_declarationContext() {}

func NewExtern_tf_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Extern_tf_declarationContext {
	var p = new(Extern_tf_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_extern_tf_declaration

	return p
}

func (s *Extern_tf_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Extern_tf_declarationContext) KW_EXTERN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_EXTERN, 0)
}

func (s *Extern_tf_declarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Extern_tf_declarationContext) KW_FORKJOIN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_FORKJOIN, 0)
}

func (s *Extern_tf_declarationContext) Task_prototype() ITask_prototypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITask_prototypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITask_prototypeContext)
}

func (s *Extern_tf_declarationContext) Method_prototype() IMethod_prototypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMethod_prototypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMethod_prototypeContext)
}

func (s *Extern_tf_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Extern_tf_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Extern_tf_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterExtern_tf_declaration(s)
	}
}

func (s *Extern_tf_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitExtern_tf_declaration(s)
	}
}

func (p *SV2017Parser) Extern_tf_declaration() (localctx IExtern_tf_declarationContext) {
	localctx = NewExtern_tf_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 862, SV2017ParserRULE_extern_tf_declaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5775)
		p.Match(SV2017ParserKW_EXTERN)
	}
	p.SetState(5779)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_FORKJOIN:
		{
			p.SetState(5776)
			p.Match(SV2017ParserKW_FORKJOIN)
		}
		{
			p.SetState(5777)
			p.Task_prototype()
		}

	case SV2017ParserKW_FUNCTION, SV2017ParserKW_TASK:
		{
			p.SetState(5778)
			p.Method_prototype()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(5781)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IFunction_declarationContext is an interface to support dynamic dispatch.
type IFunction_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_declarationContext differentiates from other interfaces.
	IsFunction_declarationContext()
}

type Function_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_declarationContext() *Function_declarationContext {
	var p = new(Function_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_function_declaration
	return p
}

func (*Function_declarationContext) IsFunction_declarationContext() {}

func NewFunction_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_declarationContext {
	var p = new(Function_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_function_declaration

	return p
}

func (s *Function_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_declarationContext) KW_FUNCTION() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_FUNCTION, 0)
}

func (s *Function_declarationContext) Task_and_function_declaration_common() ITask_and_function_declaration_commonContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITask_and_function_declaration_commonContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITask_and_function_declaration_commonContext)
}

func (s *Function_declarationContext) KW_ENDFUNCTION() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ENDFUNCTION, 0)
}

func (s *Function_declarationContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Function_declarationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Function_declarationContext) Lifetime() ILifetimeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILifetimeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILifetimeContext)
}

func (s *Function_declarationContext) Function_data_type_or_implicit() IFunction_data_type_or_implicitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_data_type_or_implicitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_data_type_or_implicitContext)
}

func (s *Function_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterFunction_declaration(s)
	}
}

func (s *Function_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitFunction_declaration(s)
	}
}

func (p *SV2017Parser) Function_declaration() (localctx IFunction_declarationContext) {
	localctx = NewFunction_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 864, SV2017ParserRULE_function_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5783)
		p.Match(SV2017ParserKW_FUNCTION)
	}
	p.SetState(5785)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_AUTOMATIC || _la == SV2017ParserKW_STATIC {
		{
			p.SetState(5784)
			p.Lifetime()
		}

	}
	p.SetState(5788)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 713, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5787)
			p.Function_data_type_or_implicit()
		}

	}
	{
		p.SetState(5790)
		p.Task_and_function_declaration_common()
	}
	{
		p.SetState(5791)
		p.Match(SV2017ParserKW_ENDFUNCTION)
	}
	p.SetState(5795)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserCOLON:
		{
			p.SetState(5792)
			p.Match(SV2017ParserCOLON)
		}
		{
			p.SetState(5793)
			p.Identifier()
		}

	case SV2017ParserEOF, SV2017ParserTICK_TIMESCALE, SV2017ParserTICK_DEFAULT_NETTYPE, SV2017ParserTICK_INCLUDE, SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_FATAL, SV2017ParserKW_DOLAR_FULLSKEW, SV2017ParserKW_DOLAR_HOLD, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_NOCHANGE, SV2017ParserKW_DOLAR_PERIOD, SV2017ParserKW_DOLAR_RECOVERY, SV2017ParserKW_DOLAR_RECREM, SV2017ParserKW_DOLAR_REMOVAL, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_SETUP, SV2017ParserKW_DOLAR_SETUPHOLD, SV2017ParserKW_DOLAR_SKEW, SV2017ParserKW_DOLAR_TIMESKEW, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_DOLAR_WARNING, SV2017ParserKW_DOLAR_WIDTH, SV2017ParserKW_ALIAS, SV2017ParserKW_ALWAYS, SV2017ParserKW_ALWAYS_COMB, SV2017ParserKW_ALWAYS_FF, SV2017ParserKW_ALWAYS_LATCH, SV2017ParserKW_AND, SV2017ParserKW_ASSERT, SV2017ParserKW_ASSIGN, SV2017ParserKW_ASSUME, SV2017ParserKW_AUTOMATIC, SV2017ParserKW_BEGIN, SV2017ParserKW_BIND, SV2017ParserKW_BINS, SV2017ParserKW_BIT, SV2017ParserKW_BUF, SV2017ParserKW_BUFIF0, SV2017ParserKW_BUFIF1, SV2017ParserKW_BYTE, SV2017ParserKW_CASE, SV2017ParserKW_CHANDLE, SV2017ParserKW_CHECKER, SV2017ParserKW_CLASS, SV2017ParserKW_CLOCKING, SV2017ParserKW_CMOS, SV2017ParserKW_CONFIG, SV2017ParserKW_CONST, SV2017ParserKW_CONSTRAINT, SV2017ParserKW_COVER, SV2017ParserKW_COVERGROUP, SV2017ParserKW_DEFAULT, SV2017ParserKW_DEFPARAM, SV2017ParserKW_ELSE, SV2017ParserKW_END, SV2017ParserKW_ENDCASE, SV2017ParserKW_ENDCHECKER, SV2017ParserKW_ENDCLASS, SV2017ParserKW_ENDGENERATE, SV2017ParserKW_ENDINTERFACE, SV2017ParserKW_ENDMODULE, SV2017ParserKW_ENDPACKAGE, SV2017ParserKW_ENDPROGRAM, SV2017ParserKW_ENUM, SV2017ParserKW_EVENT, SV2017ParserKW_EXPORT, SV2017ParserKW_EXTERN, SV2017ParserKW_FINAL, SV2017ParserKW_FOR, SV2017ParserKW_FUNCTION, SV2017ParserKW_GENERATE, SV2017ParserKW_GENVAR, SV2017ParserKW_GLOBAL, SV2017ParserKW_IF, SV2017ParserKW_IGNORE_BINS, SV2017ParserKW_ILLEGAL_BINS, SV2017ParserKW_IMPORT, SV2017ParserKW_INITIAL, SV2017ParserKW_INOUT, SV2017ParserKW_INPUT, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_INTERCONNECT, SV2017ParserKW_INTERFACE, SV2017ParserKW_LET, SV2017ParserKW_LOCAL, SV2017ParserKW_LOCALPARAM, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_MACROMODULE, SV2017ParserKW_MODPORT, SV2017ParserKW_MODULE, SV2017ParserKW_NAND, SV2017ParserKW_NETTYPE, SV2017ParserKW_NMOS, SV2017ParserKW_NOR, SV2017ParserKW_NONE, SV2017ParserKW_NOT, SV2017ParserKW_NOTIF0, SV2017ParserKW_NOTIF1, SV2017ParserKW_NULL, SV2017ParserKW_OPTION, SV2017ParserKW_OR, SV2017ParserKW_OUTPUT, SV2017ParserKW_PACKAGE, SV2017ParserKW_PARAMETER, SV2017ParserKW_PMOS, SV2017ParserKW_PRIMITIVE, SV2017ParserKW_PROGRAM, SV2017ParserKW_PROPERTY, SV2017ParserKW_PROTECTED, SV2017ParserKW_PULLDOWN, SV2017ParserKW_PULLUP, SV2017ParserKW_PURE, SV2017ParserKW_RAND, SV2017ParserKW_RANDC, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_RCMOS, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REF, SV2017ParserKW_REG, SV2017ParserKW_RESTRICT, SV2017ParserKW_RNMOS, SV2017ParserKW_RPMOS, SV2017ParserKW_RTRAN, SV2017ParserKW_RTRANIF0, SV2017ParserKW_RTRANIF1, SV2017ParserKW_SAMPLE, SV2017ParserKW_SEQUENCE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_SPECIFY, SV2017ParserKW_SPECPARAM, SV2017ParserKW_STATIC, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_SUPPLY0, SV2017ParserKW_SUPPLY1, SV2017ParserKW_TAGGED, SV2017ParserKW_TASK, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TIMEPRECISION, SV2017ParserKW_TIMEUNIT, SV2017ParserKW_TRAN, SV2017ParserKW_TRANIF0, SV2017ParserKW_TRANIF1, SV2017ParserKW_TRI, SV2017ParserKW_TRI0, SV2017ParserKW_TRI1, SV2017ParserKW_TRIAND, SV2017ParserKW_TRIOR, SV2017ParserKW_TRIREG, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_TYPEDEF, SV2017ParserKW_UNION, SV2017ParserKW_UNSIGNED, SV2017ParserKW_UWIRE, SV2017ParserKW_VAR, SV2017ParserKW_VIRTUAL, SV2017ParserKW_WAND, SV2017ParserKW_WIRE, SV2017ParserKW_WOR, SV2017ParserKW_XNOR, SV2017ParserKW_XOR, SV2017ParserTIME_LITERAL, SV2017ParserANY_BASED_NUMBER, SV2017ParserBASED_NUMBER_WITH_SIZE, SV2017ParserREAL_NUMBER_WITH_EXP, SV2017ParserFIXED_POINT_NUMBER, SV2017ParserUNSIGNED_NUMBER, SV2017ParserUNBASED_UNSIZED_LITERAL, SV2017ParserSTRING_LITERAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSYSTEM_TF_IDENTIFIER, SV2017ParserSEMI, SV2017ParserLPAREN, SV2017ParserLSQUARE_BR, SV2017ParserLBRACE, SV2017ParserRBRACE, SV2017ParserAPOSTROPHE_LBRACE, SV2017ParserDOLAR, SV2017ParserNOT, SV2017ParserNEG, SV2017ParserNAND, SV2017ParserNOR, SV2017ParserXOR, SV2017ParserNXOR, SV2017ParserXORN, SV2017ParserDOT, SV2017ParserPLUS, SV2017ParserMINUS, SV2017ParserAMPERSAND, SV2017ParserBAR, SV2017ParserINCR, SV2017ParserDECR:

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITask_prototypeContext is an interface to support dynamic dispatch.
type ITask_prototypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTask_prototypeContext differentiates from other interfaces.
	IsTask_prototypeContext()
}

type Task_prototypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTask_prototypeContext() *Task_prototypeContext {
	var p = new(Task_prototypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_task_prototype
	return p
}

func (*Task_prototypeContext) IsTask_prototypeContext() {}

func NewTask_prototypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Task_prototypeContext {
	var p = new(Task_prototypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_task_prototype

	return p
}

func (s *Task_prototypeContext) GetParser() antlr.Parser { return s.parser }

func (s *Task_prototypeContext) KW_TASK() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_TASK, 0)
}

func (s *Task_prototypeContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Task_prototypeContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Task_prototypeContext) Tf_port_list() ITf_port_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITf_port_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITf_port_listContext)
}

func (s *Task_prototypeContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Task_prototypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Task_prototypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Task_prototypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterTask_prototype(s)
	}
}

func (s *Task_prototypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitTask_prototype(s)
	}
}

func (p *SV2017Parser) Task_prototype() (localctx ITask_prototypeContext) {
	localctx = NewTask_prototypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 866, SV2017ParserRULE_task_prototype)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5797)
		p.Match(SV2017ParserKW_TASK)
	}
	{
		p.SetState(5798)
		p.Identifier()
	}
	p.SetState(5803)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserLPAREN {
		{
			p.SetState(5799)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(5800)
			p.Tf_port_list()
		}
		{
			p.SetState(5801)
			p.Match(SV2017ParserRPAREN)
		}

	}

	return localctx
}

// IFunction_prototypeContext is an interface to support dynamic dispatch.
type IFunction_prototypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_prototypeContext differentiates from other interfaces.
	IsFunction_prototypeContext()
}

type Function_prototypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_prototypeContext() *Function_prototypeContext {
	var p = new(Function_prototypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_function_prototype
	return p
}

func (*Function_prototypeContext) IsFunction_prototypeContext() {}

func NewFunction_prototypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_prototypeContext {
	var p = new(Function_prototypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_function_prototype

	return p
}

func (s *Function_prototypeContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_prototypeContext) KW_FUNCTION() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_FUNCTION, 0)
}

func (s *Function_prototypeContext) Data_type_or_void() IData_type_or_voidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_or_voidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_or_voidContext)
}

func (s *Function_prototypeContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Function_prototypeContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Function_prototypeContext) Tf_port_list() ITf_port_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITf_port_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITf_port_listContext)
}

func (s *Function_prototypeContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Function_prototypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_prototypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_prototypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterFunction_prototype(s)
	}
}

func (s *Function_prototypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitFunction_prototype(s)
	}
}

func (p *SV2017Parser) Function_prototype() (localctx IFunction_prototypeContext) {
	localctx = NewFunction_prototypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 868, SV2017ParserRULE_function_prototype)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5805)
		p.Match(SV2017ParserKW_FUNCTION)
	}
	{
		p.SetState(5806)
		p.Data_type_or_void()
	}
	{
		p.SetState(5807)
		p.Identifier()
	}
	p.SetState(5812)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserLPAREN {
		{
			p.SetState(5808)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(5809)
			p.Tf_port_list()
		}
		{
			p.SetState(5810)
			p.Match(SV2017ParserRPAREN)
		}

	}

	return localctx
}

// IDpi_import_exportContext is an interface to support dynamic dispatch.
type IDpi_import_exportContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDpi_import_exportContext differentiates from other interfaces.
	IsDpi_import_exportContext()
}

type Dpi_import_exportContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDpi_import_exportContext() *Dpi_import_exportContext {
	var p = new(Dpi_import_exportContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_dpi_import_export
	return p
}

func (*Dpi_import_exportContext) IsDpi_import_exportContext() {}

func NewDpi_import_exportContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dpi_import_exportContext {
	var p = new(Dpi_import_exportContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_dpi_import_export

	return p
}

func (s *Dpi_import_exportContext) GetParser() antlr.Parser { return s.parser }

func (s *Dpi_import_exportContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Dpi_import_exportContext) KW_IMPORT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_IMPORT, 0)
}

func (s *Dpi_import_exportContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSTRING_LITERAL, 0)
}

func (s *Dpi_import_exportContext) KW_EXPORT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_EXPORT, 0)
}

func (s *Dpi_import_exportContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Dpi_import_exportContext) KW_FUNCTION() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_FUNCTION, 0)
}

func (s *Dpi_import_exportContext) KW_TASK() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_TASK, 0)
}

func (s *Dpi_import_exportContext) Function_prototype() IFunction_prototypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_prototypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_prototypeContext)
}

func (s *Dpi_import_exportContext) Task_prototype() ITask_prototypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITask_prototypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITask_prototypeContext)
}

func (s *Dpi_import_exportContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserASSIGN, 0)
}

func (s *Dpi_import_exportContext) C_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(SV2017ParserC_IDENTIFIER, 0)
}

func (s *Dpi_import_exportContext) ESCAPED_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(SV2017ParserESCAPED_IDENTIFIER, 0)
}

func (s *Dpi_import_exportContext) Dpi_function_import_property() IDpi_function_import_propertyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDpi_function_import_propertyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDpi_function_import_propertyContext)
}

func (s *Dpi_import_exportContext) Dpi_task_import_property() IDpi_task_import_propertyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDpi_task_import_propertyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDpi_task_import_propertyContext)
}

func (s *Dpi_import_exportContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dpi_import_exportContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dpi_import_exportContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterDpi_import_export(s)
	}
}

func (s *Dpi_import_exportContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitDpi_import_export(s)
	}
}

func (p *SV2017Parser) Dpi_import_export() (localctx IDpi_import_exportContext) {
	localctx = NewDpi_import_exportContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 870, SV2017ParserRULE_dpi_import_export)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5842)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_IMPORT:
		{
			p.SetState(5814)
			p.Match(SV2017ParserKW_IMPORT)
		}
		{
			p.SetState(5815)
			p.Match(SV2017ParserSTRING_LITERAL)
		}
		p.SetState(5832)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 721, p.GetParserRuleContext()) {
		case 1:
			p.SetState(5817)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SV2017ParserKW_CONTEXT || _la == SV2017ParserKW_PURE {
				{
					p.SetState(5816)
					p.Dpi_function_import_property()
				}

			}
			p.SetState(5821)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SV2017ParserC_IDENTIFIER || _la == SV2017ParserESCAPED_IDENTIFIER {
				{
					p.SetState(5819)
					_la = p.GetTokenStream().LA(1)

					if !(_la == SV2017ParserC_IDENTIFIER || _la == SV2017ParserESCAPED_IDENTIFIER) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(5820)
					p.Match(SV2017ParserASSIGN)
				}

			}
			{
				p.SetState(5823)
				p.Function_prototype()
			}

		case 2:
			p.SetState(5825)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SV2017ParserKW_CONTEXT {
				{
					p.SetState(5824)
					p.Dpi_task_import_property()
				}

			}
			p.SetState(5829)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SV2017ParserC_IDENTIFIER || _la == SV2017ParserESCAPED_IDENTIFIER {
				{
					p.SetState(5827)
					_la = p.GetTokenStream().LA(1)

					if !(_la == SV2017ParserC_IDENTIFIER || _la == SV2017ParserESCAPED_IDENTIFIER) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(5828)
					p.Match(SV2017ParserASSIGN)
				}

			}
			{
				p.SetState(5831)
				p.Task_prototype()
			}

		}

	case SV2017ParserKW_EXPORT:
		{
			p.SetState(5834)
			p.Match(SV2017ParserKW_EXPORT)
		}
		{
			p.SetState(5835)
			p.Match(SV2017ParserSTRING_LITERAL)
		}
		p.SetState(5838)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserC_IDENTIFIER || _la == SV2017ParserESCAPED_IDENTIFIER {
			{
				p.SetState(5836)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SV2017ParserC_IDENTIFIER || _la == SV2017ParserESCAPED_IDENTIFIER) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(5837)
				p.Match(SV2017ParserASSIGN)
			}

		}
		{
			p.SetState(5840)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SV2017ParserKW_FUNCTION || _la == SV2017ParserKW_TASK) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(5841)
			p.Identifier()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(5844)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IDpi_function_import_propertyContext is an interface to support dynamic dispatch.
type IDpi_function_import_propertyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDpi_function_import_propertyContext differentiates from other interfaces.
	IsDpi_function_import_propertyContext()
}

type Dpi_function_import_propertyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDpi_function_import_propertyContext() *Dpi_function_import_propertyContext {
	var p = new(Dpi_function_import_propertyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_dpi_function_import_property
	return p
}

func (*Dpi_function_import_propertyContext) IsDpi_function_import_propertyContext() {}

func NewDpi_function_import_propertyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dpi_function_import_propertyContext {
	var p = new(Dpi_function_import_propertyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_dpi_function_import_property

	return p
}

func (s *Dpi_function_import_propertyContext) GetParser() antlr.Parser { return s.parser }

func (s *Dpi_function_import_propertyContext) KW_CONTEXT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_CONTEXT, 0)
}

func (s *Dpi_function_import_propertyContext) KW_PURE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_PURE, 0)
}

func (s *Dpi_function_import_propertyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dpi_function_import_propertyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dpi_function_import_propertyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterDpi_function_import_property(s)
	}
}

func (s *Dpi_function_import_propertyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitDpi_function_import_property(s)
	}
}

func (p *SV2017Parser) Dpi_function_import_property() (localctx IDpi_function_import_propertyContext) {
	localctx = NewDpi_function_import_propertyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 872, SV2017ParserRULE_dpi_function_import_property)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5846)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserKW_CONTEXT || _la == SV2017ParserKW_PURE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IDpi_task_import_propertyContext is an interface to support dynamic dispatch.
type IDpi_task_import_propertyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDpi_task_import_propertyContext differentiates from other interfaces.
	IsDpi_task_import_propertyContext()
}

type Dpi_task_import_propertyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDpi_task_import_propertyContext() *Dpi_task_import_propertyContext {
	var p = new(Dpi_task_import_propertyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_dpi_task_import_property
	return p
}

func (*Dpi_task_import_propertyContext) IsDpi_task_import_propertyContext() {}

func NewDpi_task_import_propertyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dpi_task_import_propertyContext {
	var p = new(Dpi_task_import_propertyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_dpi_task_import_property

	return p
}

func (s *Dpi_task_import_propertyContext) GetParser() antlr.Parser { return s.parser }

func (s *Dpi_task_import_propertyContext) KW_CONTEXT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_CONTEXT, 0)
}

func (s *Dpi_task_import_propertyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dpi_task_import_propertyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dpi_task_import_propertyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterDpi_task_import_property(s)
	}
}

func (s *Dpi_task_import_propertyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitDpi_task_import_property(s)
	}
}

func (p *SV2017Parser) Dpi_task_import_property() (localctx IDpi_task_import_propertyContext) {
	localctx = NewDpi_task_import_propertyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 874, SV2017ParserRULE_dpi_task_import_property)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5848)
		p.Match(SV2017ParserKW_CONTEXT)
	}

	return localctx
}

// ITask_and_function_declaration_commonContext is an interface to support dynamic dispatch.
type ITask_and_function_declaration_commonContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTask_and_function_declaration_commonContext differentiates from other interfaces.
	IsTask_and_function_declaration_commonContext()
}

type Task_and_function_declaration_commonContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTask_and_function_declaration_commonContext() *Task_and_function_declaration_commonContext {
	var p = new(Task_and_function_declaration_commonContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_task_and_function_declaration_common
	return p
}

func (*Task_and_function_declaration_commonContext) IsTask_and_function_declaration_commonContext() {}

func NewTask_and_function_declaration_commonContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Task_and_function_declaration_commonContext {
	var p = new(Task_and_function_declaration_commonContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_task_and_function_declaration_common

	return p
}

func (s *Task_and_function_declaration_commonContext) GetParser() antlr.Parser { return s.parser }

func (s *Task_and_function_declaration_commonContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Task_and_function_declaration_commonContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Task_and_function_declaration_commonContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Task_and_function_declaration_commonContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Task_and_function_declaration_commonContext) Tf_port_list() ITf_port_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITf_port_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITf_port_listContext)
}

func (s *Task_and_function_declaration_commonContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Task_and_function_declaration_commonContext) DOT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOT, 0)
}

func (s *Task_and_function_declaration_commonContext) Class_scope() IClass_scopeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_scopeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_scopeContext)
}

func (s *Task_and_function_declaration_commonContext) AllStatement_or_null() []IStatement_or_nullContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatement_or_nullContext)(nil)).Elem())
	var tst = make([]IStatement_or_nullContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatement_or_nullContext)
		}
	}

	return tst
}

func (s *Task_and_function_declaration_commonContext) Statement_or_null(i int) IStatement_or_nullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_or_nullContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatement_or_nullContext)
}

func (s *Task_and_function_declaration_commonContext) AllTf_item_declaration() []ITf_item_declarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITf_item_declarationContext)(nil)).Elem())
	var tst = make([]ITf_item_declarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITf_item_declarationContext)
		}
	}

	return tst
}

func (s *Task_and_function_declaration_commonContext) Tf_item_declaration(i int) ITf_item_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITf_item_declarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITf_item_declarationContext)
}

func (s *Task_and_function_declaration_commonContext) AllBlock_item_declaration() []IBlock_item_declarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBlock_item_declarationContext)(nil)).Elem())
	var tst = make([]IBlock_item_declarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBlock_item_declarationContext)
		}
	}

	return tst
}

func (s *Task_and_function_declaration_commonContext) Block_item_declaration(i int) IBlock_item_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlock_item_declarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBlock_item_declarationContext)
}

func (s *Task_and_function_declaration_commonContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Task_and_function_declaration_commonContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Task_and_function_declaration_commonContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterTask_and_function_declaration_common(s)
	}
}

func (s *Task_and_function_declaration_commonContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitTask_and_function_declaration_common(s)
	}
}

func (p *SV2017Parser) Task_and_function_declaration_common() (localctx ITask_and_function_declaration_commonContext) {
	localctx = NewTask_and_function_declaration_commonContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 876, SV2017ParserRULE_task_and_function_declaration_common)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5854)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 724, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5850)
			p.Identifier()
		}
		{
			p.SetState(5851)
			p.Match(SV2017ParserDOT)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 724, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(5853)
			p.Class_scope()
		}

	}
	{
		p.SetState(5856)
		p.Identifier()
	}
	p.SetState(5874)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserSEMI:
		{
			p.SetState(5857)
			p.Match(SV2017ParserSEMI)
		}
		p.SetState(5861)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 725, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(5858)
					p.Tf_item_declaration()
				}

			}
			p.SetState(5863)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 725, p.GetParserRuleContext())
		}

	case SV2017ParserLPAREN:
		{
			p.SetState(5864)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(5865)
			p.Tf_port_list()
		}
		{
			p.SetState(5866)
			p.Match(SV2017ParserRPAREN)
		}
		{
			p.SetState(5867)
			p.Match(SV2017ParserSEMI)
		}
		p.SetState(5871)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 726, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(5868)
					p.Block_item_declaration()
				}

			}
			p.SetState(5873)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 726, p.GetParserRuleContext())
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(5879)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20))|(1<<(SV2017ParserKW_ASSERT-20))|(1<<(SV2017ParserKW_ASSIGN-20))|(1<<(SV2017ParserKW_ASSUME-20)))) != 0) || (((_la-52)&-(0x1f+1)) == 0 && ((1<<uint((_la-52)))&((1<<(SV2017ParserKW_BEGIN-52))|(1<<(SV2017ParserKW_BIT-52))|(1<<(SV2017ParserKW_BREAK-52))|(1<<(SV2017ParserKW_BYTE-52))|(1<<(SV2017ParserKW_CASE-52))|(1<<(SV2017ParserKW_CASEX-52))|(1<<(SV2017ParserKW_CASEZ-52))|(1<<(SV2017ParserKW_CONST-52))|(1<<(SV2017ParserKW_CONTINUE-52))|(1<<(SV2017ParserKW_COVER-52))|(1<<(SV2017ParserKW_DEASSIGN-52)))) != 0) || (((_la-84)&-(0x1f+1)) == 0 && ((1<<uint((_la-84)))&((1<<(SV2017ParserKW_DISABLE-84))|(1<<(SV2017ParserKW_DO-84))|(1<<(SV2017ParserKW_EXPECT-84)))) != 0) || (((_la-116)&-(0x1f+1)) == 0 && ((1<<uint((_la-116)))&((1<<(SV2017ParserKW_FOR-116))|(1<<(SV2017ParserKW_FORCE-116))|(1<<(SV2017ParserKW_FOREACH-116))|(1<<(SV2017ParserKW_FOREVER-116))|(1<<(SV2017ParserKW_FORK-116))|(1<<(SV2017ParserKW_IF-116))|(1<<(SV2017ParserKW_INT-116))|(1<<(SV2017ParserKW_INTEGER-116)))) != 0) || (((_la-152)&-(0x1f+1)) == 0 && ((1<<uint((_la-152)))&((1<<(SV2017ParserKW_LOCAL-152))|(1<<(SV2017ParserKW_LOGIC-152))|(1<<(SV2017ParserKW_LONGINT-152))|(1<<(SV2017ParserKW_NULL-152))|(1<<(SV2017ParserKW_OPTION-152))|(1<<(SV2017ParserKW_PRIORITY-152)))) != 0) || (((_la-196)&-(0x1f+1)) == 0 && ((1<<uint((_la-196)))&((1<<(SV2017ParserKW_RANDCASE-196))|(1<<(SV2017ParserKW_RANDOMIZE-196))|(1<<(SV2017ParserKW_RANDSEQUENCE-196))|(1<<(SV2017ParserKW_REAL-196))|(1<<(SV2017ParserKW_REALTIME-196))|(1<<(SV2017ParserKW_REG-196))|(1<<(SV2017ParserKW_RELEASE-196))|(1<<(SV2017ParserKW_REPEAT-196))|(1<<(SV2017ParserKW_RESTRICT-196))|(1<<(SV2017ParserKW_RETURN-196))|(1<<(SV2017ParserKW_SAMPLE-196))|(1<<(SV2017ParserKW_SHORTINT-196))|(1<<(SV2017ParserKW_SHORTREAL-196))|(1<<(SV2017ParserKW_SIGNED-196)))) != 0) || (((_la-232)&-(0x1f+1)) == 0 && ((1<<uint((_la-232)))&((1<<(SV2017ParserKW_STD-232))|(1<<(SV2017ParserKW_STRING-232))|(1<<(SV2017ParserKW_SUPER-232))|(1<<(SV2017ParserKW_THIS-232))|(1<<(SV2017ParserKW_TIME-232))|(1<<(SV2017ParserKW_TYPE-232))|(1<<(SV2017ParserKW_TYPE_OPTION-232)))) != 0) || (((_la-264)&-(0x1f+1)) == 0 && ((1<<uint((_la-264)))&((1<<(SV2017ParserKW_UNIQUE-264))|(1<<(SV2017ParserKW_UNIQUE0-264))|(1<<(SV2017ParserKW_UNSIGNED-264))|(1<<(SV2017ParserKW_VOID-264))|(1<<(SV2017ParserKW_WAIT-264))|(1<<(SV2017ParserKW_WAIT_ORDER-264))|(1<<(SV2017ParserKW_WHILE-264))|(1<<(SV2017ParserTIME_LITERAL-264))|(1<<(SV2017ParserANY_BASED_NUMBER-264))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-264))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-264))|(1<<(SV2017ParserFIXED_POINT_NUMBER-264)))) != 0) || (((_la-296)&-(0x1f+1)) == 0 && ((1<<uint((_la-296)))&((1<<(SV2017ParserUNSIGNED_NUMBER-296))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-296))|(1<<(SV2017ParserSTRING_LITERAL-296))|(1<<(SV2017ParserC_IDENTIFIER-296))|(1<<(SV2017ParserTICK_IDENTIFIER-296))|(1<<(SV2017ParserESCAPED_IDENTIFIER-296))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-296))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-296))|(1<<(SV2017ParserSEMI-296))|(1<<(SV2017ParserLPAREN-296))|(1<<(SV2017ParserLBRACE-296))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-296))|(1<<(SV2017ParserDOLAR-296)))) != 0) || (((_la-366)&-(0x1f+1)) == 0 && ((1<<uint((_la-366)))&((1<<(SV2017ParserARROW-366))|(1<<(SV2017ParserDOUBLE_RIGHT_ARROW-366))|(1<<(SV2017ParserINCR-366))|(1<<(SV2017ParserDECR-366))|(1<<(SV2017ParserAT-366))|(1<<(SV2017ParserHASH-366))|(1<<(SV2017ParserDOUBLE_HASH-366)))) != 0) {
		{
			p.SetState(5876)
			p.Statement_or_null()
		}

		p.SetState(5881)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITask_declarationContext is an interface to support dynamic dispatch.
type ITask_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTask_declarationContext differentiates from other interfaces.
	IsTask_declarationContext()
}

type Task_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTask_declarationContext() *Task_declarationContext {
	var p = new(Task_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_task_declaration
	return p
}

func (*Task_declarationContext) IsTask_declarationContext() {}

func NewTask_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Task_declarationContext {
	var p = new(Task_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_task_declaration

	return p
}

func (s *Task_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Task_declarationContext) KW_TASK() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_TASK, 0)
}

func (s *Task_declarationContext) Task_and_function_declaration_common() ITask_and_function_declaration_commonContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITask_and_function_declaration_commonContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITask_and_function_declaration_commonContext)
}

func (s *Task_declarationContext) KW_ENDTASK() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ENDTASK, 0)
}

func (s *Task_declarationContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Task_declarationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Task_declarationContext) Lifetime() ILifetimeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILifetimeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILifetimeContext)
}

func (s *Task_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Task_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Task_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterTask_declaration(s)
	}
}

func (s *Task_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitTask_declaration(s)
	}
}

func (p *SV2017Parser) Task_declaration() (localctx ITask_declarationContext) {
	localctx = NewTask_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 878, SV2017ParserRULE_task_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5882)
		p.Match(SV2017ParserKW_TASK)
	}
	p.SetState(5884)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_AUTOMATIC || _la == SV2017ParserKW_STATIC {
		{
			p.SetState(5883)
			p.Lifetime()
		}

	}
	{
		p.SetState(5886)
		p.Task_and_function_declaration_common()
	}
	{
		p.SetState(5887)
		p.Match(SV2017ParserKW_ENDTASK)
	}
	p.SetState(5891)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserCOLON:
		{
			p.SetState(5888)
			p.Match(SV2017ParserCOLON)
		}
		{
			p.SetState(5889)
			p.Identifier()
		}

	case SV2017ParserEOF, SV2017ParserTICK_TIMESCALE, SV2017ParserTICK_DEFAULT_NETTYPE, SV2017ParserTICK_INCLUDE, SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_FATAL, SV2017ParserKW_DOLAR_FULLSKEW, SV2017ParserKW_DOLAR_HOLD, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_NOCHANGE, SV2017ParserKW_DOLAR_PERIOD, SV2017ParserKW_DOLAR_RECOVERY, SV2017ParserKW_DOLAR_RECREM, SV2017ParserKW_DOLAR_REMOVAL, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_SETUP, SV2017ParserKW_DOLAR_SETUPHOLD, SV2017ParserKW_DOLAR_SKEW, SV2017ParserKW_DOLAR_TIMESKEW, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_DOLAR_WARNING, SV2017ParserKW_DOLAR_WIDTH, SV2017ParserKW_ALIAS, SV2017ParserKW_ALWAYS, SV2017ParserKW_ALWAYS_COMB, SV2017ParserKW_ALWAYS_FF, SV2017ParserKW_ALWAYS_LATCH, SV2017ParserKW_AND, SV2017ParserKW_ASSERT, SV2017ParserKW_ASSIGN, SV2017ParserKW_ASSUME, SV2017ParserKW_AUTOMATIC, SV2017ParserKW_BEGIN, SV2017ParserKW_BIND, SV2017ParserKW_BIT, SV2017ParserKW_BUF, SV2017ParserKW_BUFIF0, SV2017ParserKW_BUFIF1, SV2017ParserKW_BYTE, SV2017ParserKW_CASE, SV2017ParserKW_CHANDLE, SV2017ParserKW_CHECKER, SV2017ParserKW_CLASS, SV2017ParserKW_CLOCKING, SV2017ParserKW_CMOS, SV2017ParserKW_CONFIG, SV2017ParserKW_CONST, SV2017ParserKW_CONSTRAINT, SV2017ParserKW_COVER, SV2017ParserKW_COVERGROUP, SV2017ParserKW_DEFAULT, SV2017ParserKW_DEFPARAM, SV2017ParserKW_ELSE, SV2017ParserKW_END, SV2017ParserKW_ENDCASE, SV2017ParserKW_ENDCHECKER, SV2017ParserKW_ENDCLASS, SV2017ParserKW_ENDGENERATE, SV2017ParserKW_ENDINTERFACE, SV2017ParserKW_ENDMODULE, SV2017ParserKW_ENDPACKAGE, SV2017ParserKW_ENDPROGRAM, SV2017ParserKW_ENUM, SV2017ParserKW_EVENT, SV2017ParserKW_EXPORT, SV2017ParserKW_EXTERN, SV2017ParserKW_FINAL, SV2017ParserKW_FOR, SV2017ParserKW_FUNCTION, SV2017ParserKW_GENERATE, SV2017ParserKW_GENVAR, SV2017ParserKW_GLOBAL, SV2017ParserKW_IF, SV2017ParserKW_IMPORT, SV2017ParserKW_INITIAL, SV2017ParserKW_INOUT, SV2017ParserKW_INPUT, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_INTERCONNECT, SV2017ParserKW_INTERFACE, SV2017ParserKW_LET, SV2017ParserKW_LOCAL, SV2017ParserKW_LOCALPARAM, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_MACROMODULE, SV2017ParserKW_MODPORT, SV2017ParserKW_MODULE, SV2017ParserKW_NAND, SV2017ParserKW_NETTYPE, SV2017ParserKW_NMOS, SV2017ParserKW_NOR, SV2017ParserKW_NONE, SV2017ParserKW_NOT, SV2017ParserKW_NOTIF0, SV2017ParserKW_NOTIF1, SV2017ParserKW_NULL, SV2017ParserKW_OPTION, SV2017ParserKW_OR, SV2017ParserKW_OUTPUT, SV2017ParserKW_PACKAGE, SV2017ParserKW_PARAMETER, SV2017ParserKW_PMOS, SV2017ParserKW_PRIMITIVE, SV2017ParserKW_PROGRAM, SV2017ParserKW_PROPERTY, SV2017ParserKW_PROTECTED, SV2017ParserKW_PULLDOWN, SV2017ParserKW_PULLUP, SV2017ParserKW_PURE, SV2017ParserKW_RAND, SV2017ParserKW_RANDC, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_RCMOS, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REF, SV2017ParserKW_REG, SV2017ParserKW_RESTRICT, SV2017ParserKW_RNMOS, SV2017ParserKW_RPMOS, SV2017ParserKW_RTRAN, SV2017ParserKW_RTRANIF0, SV2017ParserKW_RTRANIF1, SV2017ParserKW_SAMPLE, SV2017ParserKW_SEQUENCE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_SPECIFY, SV2017ParserKW_SPECPARAM, SV2017ParserKW_STATIC, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_SUPPLY0, SV2017ParserKW_SUPPLY1, SV2017ParserKW_TAGGED, SV2017ParserKW_TASK, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TIMEPRECISION, SV2017ParserKW_TIMEUNIT, SV2017ParserKW_TRAN, SV2017ParserKW_TRANIF0, SV2017ParserKW_TRANIF1, SV2017ParserKW_TRI, SV2017ParserKW_TRI0, SV2017ParserKW_TRI1, SV2017ParserKW_TRIAND, SV2017ParserKW_TRIOR, SV2017ParserKW_TRIREG, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_TYPEDEF, SV2017ParserKW_UNION, SV2017ParserKW_UNSIGNED, SV2017ParserKW_UWIRE, SV2017ParserKW_VAR, SV2017ParserKW_VIRTUAL, SV2017ParserKW_WAND, SV2017ParserKW_WIRE, SV2017ParserKW_WOR, SV2017ParserKW_XNOR, SV2017ParserKW_XOR, SV2017ParserTIME_LITERAL, SV2017ParserANY_BASED_NUMBER, SV2017ParserBASED_NUMBER_WITH_SIZE, SV2017ParserREAL_NUMBER_WITH_EXP, SV2017ParserFIXED_POINT_NUMBER, SV2017ParserUNSIGNED_NUMBER, SV2017ParserUNBASED_UNSIZED_LITERAL, SV2017ParserSTRING_LITERAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSYSTEM_TF_IDENTIFIER, SV2017ParserSEMI, SV2017ParserLPAREN, SV2017ParserLSQUARE_BR, SV2017ParserLBRACE, SV2017ParserAPOSTROPHE_LBRACE, SV2017ParserDOLAR, SV2017ParserNOT, SV2017ParserNEG, SV2017ParserNAND, SV2017ParserNOR, SV2017ParserXOR, SV2017ParserNXOR, SV2017ParserXORN, SV2017ParserDOT, SV2017ParserPLUS, SV2017ParserMINUS, SV2017ParserAMPERSAND, SV2017ParserBAR, SV2017ParserINCR, SV2017ParserDECR:

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IMethod_prototypeContext is an interface to support dynamic dispatch.
type IMethod_prototypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMethod_prototypeContext differentiates from other interfaces.
	IsMethod_prototypeContext()
}

type Method_prototypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMethod_prototypeContext() *Method_prototypeContext {
	var p = new(Method_prototypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_method_prototype
	return p
}

func (*Method_prototypeContext) IsMethod_prototypeContext() {}

func NewMethod_prototypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Method_prototypeContext {
	var p = new(Method_prototypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_method_prototype

	return p
}

func (s *Method_prototypeContext) GetParser() antlr.Parser { return s.parser }

func (s *Method_prototypeContext) Task_prototype() ITask_prototypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITask_prototypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITask_prototypeContext)
}

func (s *Method_prototypeContext) Function_prototype() IFunction_prototypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_prototypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_prototypeContext)
}

func (s *Method_prototypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Method_prototypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Method_prototypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterMethod_prototype(s)
	}
}

func (s *Method_prototypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitMethod_prototype(s)
	}
}

func (p *SV2017Parser) Method_prototype() (localctx IMethod_prototypeContext) {
	localctx = NewMethod_prototypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 880, SV2017ParserRULE_method_prototype)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5895)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_TASK:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5893)
			p.Task_prototype()
		}

	case SV2017ParserKW_FUNCTION:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5894)
			p.Function_prototype()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IExtern_constraint_declarationContext is an interface to support dynamic dispatch.
type IExtern_constraint_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExtern_constraint_declarationContext differentiates from other interfaces.
	IsExtern_constraint_declarationContext()
}

type Extern_constraint_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExtern_constraint_declarationContext() *Extern_constraint_declarationContext {
	var p = new(Extern_constraint_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_extern_constraint_declaration
	return p
}

func (*Extern_constraint_declarationContext) IsExtern_constraint_declarationContext() {}

func NewExtern_constraint_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Extern_constraint_declarationContext {
	var p = new(Extern_constraint_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_extern_constraint_declaration

	return p
}

func (s *Extern_constraint_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Extern_constraint_declarationContext) KW_CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_CONSTRAINT, 0)
}

func (s *Extern_constraint_declarationContext) Class_scope() IClass_scopeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_scopeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_scopeContext)
}

func (s *Extern_constraint_declarationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Extern_constraint_declarationContext) Constraint_block() IConstraint_blockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstraint_blockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstraint_blockContext)
}

func (s *Extern_constraint_declarationContext) KW_STATIC() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_STATIC, 0)
}

func (s *Extern_constraint_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Extern_constraint_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Extern_constraint_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterExtern_constraint_declaration(s)
	}
}

func (s *Extern_constraint_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitExtern_constraint_declaration(s)
	}
}

func (p *SV2017Parser) Extern_constraint_declaration() (localctx IExtern_constraint_declarationContext) {
	localctx = NewExtern_constraint_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 882, SV2017ParserRULE_extern_constraint_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5898)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_STATIC {
		{
			p.SetState(5897)
			p.Match(SV2017ParserKW_STATIC)
		}

	}
	{
		p.SetState(5900)
		p.Match(SV2017ParserKW_CONSTRAINT)
	}
	{
		p.SetState(5901)
		p.Class_scope()
	}
	{
		p.SetState(5902)
		p.Identifier()
	}
	{
		p.SetState(5903)
		p.Constraint_block()
	}

	return localctx
}

// IConstraint_blockContext is an interface to support dynamic dispatch.
type IConstraint_blockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstraint_blockContext differentiates from other interfaces.
	IsConstraint_blockContext()
}

type Constraint_blockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstraint_blockContext() *Constraint_blockContext {
	var p = new(Constraint_blockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_constraint_block
	return p
}

func (*Constraint_blockContext) IsConstraint_blockContext() {}

func NewConstraint_blockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Constraint_blockContext {
	var p = new(Constraint_blockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_constraint_block

	return p
}

func (s *Constraint_blockContext) GetParser() antlr.Parser { return s.parser }

func (s *Constraint_blockContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLBRACE, 0)
}

func (s *Constraint_blockContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRBRACE, 0)
}

func (s *Constraint_blockContext) AllConstraint_block_item() []IConstraint_block_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConstraint_block_itemContext)(nil)).Elem())
	var tst = make([]IConstraint_block_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConstraint_block_itemContext)
		}
	}

	return tst
}

func (s *Constraint_blockContext) Constraint_block_item(i int) IConstraint_block_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstraint_block_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConstraint_block_itemContext)
}

func (s *Constraint_blockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Constraint_blockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Constraint_blockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterConstraint_block(s)
	}
}

func (s *Constraint_blockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitConstraint_block(s)
	}
}

func (p *SV2017Parser) Constraint_block() (localctx IConstraint_blockContext) {
	localctx = NewConstraint_blockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 884, SV2017ParserRULE_constraint_block)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5905)
		p.Match(SV2017ParserLBRACE)
	}
	p.SetState(5909)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56))|(1<<(SV2017ParserKW_DISABLE-56)))) != 0) || (((_la-118)&-(0x1f+1)) == 0 && ((1<<uint((_la-118)))&((1<<(SV2017ParserKW_FOREACH-118))|(1<<(SV2017ParserKW_IF-118))|(1<<(SV2017ParserKW_INT-118))|(1<<(SV2017ParserKW_INTEGER-118)))) != 0) || (((_la-152)&-(0x1f+1)) == 0 && ((1<<uint((_la-152)))&((1<<(SV2017ParserKW_LOCAL-152))|(1<<(SV2017ParserKW_LOGIC-152))|(1<<(SV2017ParserKW_LONGINT-152))|(1<<(SV2017ParserKW_NULL-152))|(1<<(SV2017ParserKW_OPTION-152)))) != 0) || (((_la-197)&-(0x1f+1)) == 0 && ((1<<uint((_la-197)))&((1<<(SV2017ParserKW_RANDOMIZE-197))|(1<<(SV2017ParserKW_REAL-197))|(1<<(SV2017ParserKW_REALTIME-197))|(1<<(SV2017ParserKW_REG-197))|(1<<(SV2017ParserKW_SAMPLE-197))|(1<<(SV2017ParserKW_SHORTINT-197))|(1<<(SV2017ParserKW_SHORTREAL-197))|(1<<(SV2017ParserKW_SIGNED-197))|(1<<(SV2017ParserKW_SOFT-197))|(1<<(SV2017ParserKW_SOLVE-197)))) != 0) || (((_la-232)&-(0x1f+1)) == 0 && ((1<<uint((_la-232)))&((1<<(SV2017ParserKW_STD-232))|(1<<(SV2017ParserKW_STRING-232))|(1<<(SV2017ParserKW_SUPER-232))|(1<<(SV2017ParserKW_TAGGED-232))|(1<<(SV2017ParserKW_THIS-232))|(1<<(SV2017ParserKW_TIME-232))|(1<<(SV2017ParserKW_TYPE-232))|(1<<(SV2017ParserKW_TYPE_OPTION-232)))) != 0) || (((_la-264)&-(0x1f+1)) == 0 && ((1<<uint((_la-264)))&((1<<(SV2017ParserKW_UNIQUE-264))|(1<<(SV2017ParserKW_UNSIGNED-264))|(1<<(SV2017ParserTIME_LITERAL-264))|(1<<(SV2017ParserANY_BASED_NUMBER-264))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-264))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-264))|(1<<(SV2017ParserFIXED_POINT_NUMBER-264)))) != 0) || (((_la-296)&-(0x1f+1)) == 0 && ((1<<uint((_la-296)))&((1<<(SV2017ParserUNSIGNED_NUMBER-296))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-296))|(1<<(SV2017ParserSTRING_LITERAL-296))|(1<<(SV2017ParserC_IDENTIFIER-296))|(1<<(SV2017ParserTICK_IDENTIFIER-296))|(1<<(SV2017ParserESCAPED_IDENTIFIER-296))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-296))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-296))|(1<<(SV2017ParserLPAREN-296))|(1<<(SV2017ParserLBRACE-296))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-296))|(1<<(SV2017ParserDOLAR-296))|(1<<(SV2017ParserNOT-296))|(1<<(SV2017ParserNEG-296))|(1<<(SV2017ParserNAND-296))|(1<<(SV2017ParserNOR-296))|(1<<(SV2017ParserXOR-296))|(1<<(SV2017ParserNXOR-296))|(1<<(SV2017ParserXORN-296)))) != 0) || (((_la-355)&-(0x1f+1)) == 0 && ((1<<uint((_la-355)))&((1<<(SV2017ParserPLUS-355))|(1<<(SV2017ParserMINUS-355))|(1<<(SV2017ParserAMPERSAND-355))|(1<<(SV2017ParserBAR-355))|(1<<(SV2017ParserINCR-355))|(1<<(SV2017ParserDECR-355)))) != 0) {
		{
			p.SetState(5906)
			p.Constraint_block_item()
		}

		p.SetState(5911)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(5912)
		p.Match(SV2017ParserRBRACE)
	}

	return localctx
}

// IChecker_port_listContext is an interface to support dynamic dispatch.
type IChecker_port_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChecker_port_listContext differentiates from other interfaces.
	IsChecker_port_listContext()
}

type Checker_port_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChecker_port_listContext() *Checker_port_listContext {
	var p = new(Checker_port_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_checker_port_list
	return p
}

func (*Checker_port_listContext) IsChecker_port_listContext() {}

func NewChecker_port_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Checker_port_listContext {
	var p = new(Checker_port_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_checker_port_list

	return p
}

func (s *Checker_port_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Checker_port_listContext) AllChecker_port_item() []IChecker_port_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IChecker_port_itemContext)(nil)).Elem())
	var tst = make([]IChecker_port_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IChecker_port_itemContext)
		}
	}

	return tst
}

func (s *Checker_port_listContext) Checker_port_item(i int) IChecker_port_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChecker_port_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IChecker_port_itemContext)
}

func (s *Checker_port_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Checker_port_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Checker_port_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Checker_port_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Checker_port_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterChecker_port_list(s)
	}
}

func (s *Checker_port_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitChecker_port_list(s)
	}
}

func (p *SV2017Parser) Checker_port_list() (localctx IChecker_port_listContext) {
	localctx = NewChecker_port_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 886, SV2017ParserRULE_checker_port_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5914)
		p.Checker_port_item()
	}
	p.SetState(5919)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserCOMMA {
		{
			p.SetState(5915)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(5916)
			p.Checker_port_item()
		}

		p.SetState(5921)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IChecker_port_itemContext is an interface to support dynamic dispatch.
type IChecker_port_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChecker_port_itemContext differentiates from other interfaces.
	IsChecker_port_itemContext()
}

type Checker_port_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChecker_port_itemContext() *Checker_port_itemContext {
	var p = new(Checker_port_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_checker_port_item
	return p
}

func (*Checker_port_itemContext) IsChecker_port_itemContext() {}

func NewChecker_port_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Checker_port_itemContext {
	var p = new(Checker_port_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_checker_port_item

	return p
}

func (s *Checker_port_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Checker_port_itemContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Checker_port_itemContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Checker_port_itemContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Checker_port_itemContext) Checker_port_direction() IChecker_port_directionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChecker_port_directionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChecker_port_directionContext)
}

func (s *Checker_port_itemContext) Property_formal_type() IProperty_formal_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProperty_formal_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProperty_formal_typeContext)
}

func (s *Checker_port_itemContext) AllVariable_dimension() []IVariable_dimensionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariable_dimensionContext)(nil)).Elem())
	var tst = make([]IVariable_dimensionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariable_dimensionContext)
		}
	}

	return tst
}

func (s *Checker_port_itemContext) Variable_dimension(i int) IVariable_dimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_dimensionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariable_dimensionContext)
}

func (s *Checker_port_itemContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserASSIGN, 0)
}

func (s *Checker_port_itemContext) Property_actual_arg() IProperty_actual_argContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProperty_actual_argContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProperty_actual_argContext)
}

func (s *Checker_port_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Checker_port_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Checker_port_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterChecker_port_item(s)
	}
}

func (s *Checker_port_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitChecker_port_item(s)
	}
}

func (p *SV2017Parser) Checker_port_item() (localctx IChecker_port_itemContext) {
	localctx = NewChecker_port_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 888, SV2017ParserRULE_checker_port_item)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5925)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 735, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(5922)
				p.Attribute_instance()
			}

		}
		p.SetState(5927)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 735, p.GetParserRuleContext())
	}
	p.SetState(5929)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_INPUT || _la == SV2017ParserKW_OUTPUT {
		{
			p.SetState(5928)
			p.Checker_port_direction()
		}

	}
	p.SetState(5932)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 737, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5931)
			p.Property_formal_type()
		}

	}
	{
		p.SetState(5934)
		p.Identifier()
	}
	p.SetState(5938)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserLSQUARE_BR {
		{
			p.SetState(5935)
			p.Variable_dimension()
		}

		p.SetState(5940)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(5943)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserASSIGN {
		{
			p.SetState(5941)
			p.Match(SV2017ParserASSIGN)
		}
		{
			p.SetState(5942)
			p.Property_actual_arg()
		}

	}

	return localctx
}

// IChecker_port_directionContext is an interface to support dynamic dispatch.
type IChecker_port_directionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChecker_port_directionContext differentiates from other interfaces.
	IsChecker_port_directionContext()
}

type Checker_port_directionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChecker_port_directionContext() *Checker_port_directionContext {
	var p = new(Checker_port_directionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_checker_port_direction
	return p
}

func (*Checker_port_directionContext) IsChecker_port_directionContext() {}

func NewChecker_port_directionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Checker_port_directionContext {
	var p = new(Checker_port_directionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_checker_port_direction

	return p
}

func (s *Checker_port_directionContext) GetParser() antlr.Parser { return s.parser }

func (s *Checker_port_directionContext) KW_INPUT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_INPUT, 0)
}

func (s *Checker_port_directionContext) KW_OUTPUT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_OUTPUT, 0)
}

func (s *Checker_port_directionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Checker_port_directionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Checker_port_directionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterChecker_port_direction(s)
	}
}

func (s *Checker_port_directionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitChecker_port_direction(s)
	}
}

func (p *SV2017Parser) Checker_port_direction() (localctx IChecker_port_directionContext) {
	localctx = NewChecker_port_directionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 890, SV2017ParserRULE_checker_port_direction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5945)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SV2017ParserKW_INPUT || _la == SV2017ParserKW_OUTPUT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IChecker_declarationContext is an interface to support dynamic dispatch.
type IChecker_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChecker_declarationContext differentiates from other interfaces.
	IsChecker_declarationContext()
}

type Checker_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChecker_declarationContext() *Checker_declarationContext {
	var p = new(Checker_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_checker_declaration
	return p
}

func (*Checker_declarationContext) IsChecker_declarationContext() {}

func NewChecker_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Checker_declarationContext {
	var p = new(Checker_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_checker_declaration

	return p
}

func (s *Checker_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Checker_declarationContext) KW_CHECKER() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_CHECKER, 0)
}

func (s *Checker_declarationContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Checker_declarationContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Checker_declarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Checker_declarationContext) KW_ENDCHECKER() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ENDCHECKER, 0)
}

func (s *Checker_declarationContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Checker_declarationContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Checker_declarationContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Checker_declarationContext) AllChecker_or_generate_item() []IChecker_or_generate_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IChecker_or_generate_itemContext)(nil)).Elem())
	var tst = make([]IChecker_or_generate_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IChecker_or_generate_itemContext)
		}
	}

	return tst
}

func (s *Checker_declarationContext) Checker_or_generate_item(i int) IChecker_or_generate_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChecker_or_generate_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IChecker_or_generate_itemContext)
}

func (s *Checker_declarationContext) Checker_port_list() IChecker_port_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChecker_port_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChecker_port_listContext)
}

func (s *Checker_declarationContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Checker_declarationContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Checker_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Checker_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Checker_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterChecker_declaration(s)
	}
}

func (s *Checker_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitChecker_declaration(s)
	}
}

func (p *SV2017Parser) Checker_declaration() (localctx IChecker_declarationContext) {
	localctx = NewChecker_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 892, SV2017ParserRULE_checker_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5947)
		p.Match(SV2017ParserKW_CHECKER)
	}
	{
		p.SetState(5948)
		p.Identifier()
	}
	p.SetState(5954)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserLPAREN {
		{
			p.SetState(5949)
			p.Match(SV2017ParserLPAREN)
		}
		p.SetState(5951)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_DOLAR_ROOT || (((_la-35)&-(0x1f+1)) == 0 && ((1<<uint((_la-35)))&((1<<(SV2017ParserKW_DOLAR_UNIT-35))|(1<<(SV2017ParserKW_BIT-35))|(1<<(SV2017ParserKW_BYTE-35))|(1<<(SV2017ParserKW_CHANDLE-35)))) != 0) || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(SV2017ParserKW_ENUM-107))|(1<<(SV2017ParserKW_EVENT-107))|(1<<(SV2017ParserKW_INPUT-107)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-174)&-(0x1f+1)) == 0 && ((1<<uint((_la-174)))&((1<<(SV2017ParserKW_OPTION-174))|(1<<(SV2017ParserKW_OUTPUT-174))|(1<<(SV2017ParserKW_PROPERTY-174))|(1<<(SV2017ParserKW_RANDOMIZE-174))|(1<<(SV2017ParserKW_REAL-174))|(1<<(SV2017ParserKW_REALTIME-174))|(1<<(SV2017ParserKW_REG-174)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SEQUENCE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_STRUCT-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserKW_UNTYPED-260))|(1<<(SV2017ParserKW_VIRTUAL-260)))) != 0) || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299))|(1<<(SV2017ParserLPAREN-299))|(1<<(SV2017ParserLSQUARE_BR-299)))) != 0) {
			{
				p.SetState(5950)
				p.Checker_port_list()
			}

		}
		{
			p.SetState(5953)
			p.Match(SV2017ParserRPAREN)
		}

	}
	{
		p.SetState(5956)
		p.Match(SV2017ParserSEMI)
	}
	p.SetState(5966)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_ALWAYS-20))|(1<<(SV2017ParserKW_ALWAYS_COMB-20))|(1<<(SV2017ParserKW_ALWAYS_FF-20))|(1<<(SV2017ParserKW_ALWAYS_LATCH-20))|(1<<(SV2017ParserKW_ASSERT-20))|(1<<(SV2017ParserKW_ASSIGN-20))|(1<<(SV2017ParserKW_ASSUME-20))|(1<<(SV2017ParserKW_AUTOMATIC-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CASE-56))|(1<<(SV2017ParserKW_CHANDLE-56))|(1<<(SV2017ParserKW_CHECKER-56))|(1<<(SV2017ParserKW_CLOCKING-56))|(1<<(SV2017ParserKW_CONST-56))|(1<<(SV2017ParserKW_COVER-56))|(1<<(SV2017ParserKW_COVERGROUP-56))|(1<<(SV2017ParserKW_DEFAULT-56)))) != 0) || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(SV2017ParserKW_ENUM-107))|(1<<(SV2017ParserKW_EVENT-107))|(1<<(SV2017ParserKW_FINAL-107))|(1<<(SV2017ParserKW_FOR-107))|(1<<(SV2017ParserKW_FUNCTION-107))|(1<<(SV2017ParserKW_GENERATE-107))|(1<<(SV2017ParserKW_GENVAR-107))|(1<<(SV2017ParserKW_GLOBAL-107))|(1<<(SV2017ParserKW_IF-107))|(1<<(SV2017ParserKW_IMPORT-107))|(1<<(SV2017ParserKW_INITIAL-107)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LET-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141))|(1<<(SV2017ParserKW_NETTYPE-141)))) != 0) || (((_la-174)&-(0x1f+1)) == 0 && ((1<<uint((_la-174)))&((1<<(SV2017ParserKW_OPTION-174))|(1<<(SV2017ParserKW_PROPERTY-174))|(1<<(SV2017ParserKW_RAND-174))|(1<<(SV2017ParserKW_RANDOMIZE-174))|(1<<(SV2017ParserKW_REAL-174))|(1<<(SV2017ParserKW_REALTIME-174))|(1<<(SV2017ParserKW_REG-174)))) != 0) || (((_la-207)&-(0x1f+1)) == 0 && ((1<<uint((_la-207)))&((1<<(SV2017ParserKW_RESTRICT-207))|(1<<(SV2017ParserKW_SAMPLE-207))|(1<<(SV2017ParserKW_SEQUENCE-207))|(1<<(SV2017ParserKW_SHORTINT-207))|(1<<(SV2017ParserKW_SHORTREAL-207))|(1<<(SV2017ParserKW_SIGNED-207))|(1<<(SV2017ParserKW_STATIC-207))|(1<<(SV2017ParserKW_STD-207))|(1<<(SV2017ParserKW_STRING-207))|(1<<(SV2017ParserKW_STRUCT-207))|(1<<(SV2017ParserKW_SUPER-207)))) != 0) || (((_la-246)&-(0x1f+1)) == 0 && ((1<<uint((_la-246)))&((1<<(SV2017ParserKW_THIS-246))|(1<<(SV2017ParserKW_TIME-246))|(1<<(SV2017ParserKW_TYPE-246))|(1<<(SV2017ParserKW_TYPE_OPTION-246))|(1<<(SV2017ParserKW_TYPEDEF-246))|(1<<(SV2017ParserKW_UNION-246))|(1<<(SV2017ParserKW_UNSIGNED-246))|(1<<(SV2017ParserKW_VAR-246))|(1<<(SV2017ParserKW_VIRTUAL-246)))) != 0) || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299))|(1<<(SV2017ParserSEMI-299))|(1<<(SV2017ParserLPAREN-299))|(1<<(SV2017ParserLSQUARE_BR-299)))) != 0) {
		p.SetState(5960)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 742, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(5957)
					p.Attribute_instance()
				}

			}
			p.SetState(5962)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 742, p.GetParserRuleContext())
		}
		{
			p.SetState(5963)
			p.Checker_or_generate_item()
		}

		p.SetState(5968)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(5969)
		p.Match(SV2017ParserKW_ENDCHECKER)
	}
	p.SetState(5973)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserCOLON:
		{
			p.SetState(5970)
			p.Match(SV2017ParserCOLON)
		}
		{
			p.SetState(5971)
			p.Identifier()
		}

	case SV2017ParserEOF, SV2017ParserTICK_TIMESCALE, SV2017ParserTICK_DEFAULT_NETTYPE, SV2017ParserTICK_INCLUDE, SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_FATAL, SV2017ParserKW_DOLAR_FULLSKEW, SV2017ParserKW_DOLAR_HOLD, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_NOCHANGE, SV2017ParserKW_DOLAR_PERIOD, SV2017ParserKW_DOLAR_RECOVERY, SV2017ParserKW_DOLAR_RECREM, SV2017ParserKW_DOLAR_REMOVAL, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_SETUP, SV2017ParserKW_DOLAR_SETUPHOLD, SV2017ParserKW_DOLAR_SKEW, SV2017ParserKW_DOLAR_TIMESKEW, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_DOLAR_WARNING, SV2017ParserKW_DOLAR_WIDTH, SV2017ParserKW_ALIAS, SV2017ParserKW_ALWAYS, SV2017ParserKW_ALWAYS_COMB, SV2017ParserKW_ALWAYS_FF, SV2017ParserKW_ALWAYS_LATCH, SV2017ParserKW_AND, SV2017ParserKW_ASSERT, SV2017ParserKW_ASSIGN, SV2017ParserKW_ASSUME, SV2017ParserKW_AUTOMATIC, SV2017ParserKW_BEGIN, SV2017ParserKW_BIND, SV2017ParserKW_BIT, SV2017ParserKW_BUF, SV2017ParserKW_BUFIF0, SV2017ParserKW_BUFIF1, SV2017ParserKW_BYTE, SV2017ParserKW_CASE, SV2017ParserKW_CHANDLE, SV2017ParserKW_CHECKER, SV2017ParserKW_CLASS, SV2017ParserKW_CLOCKING, SV2017ParserKW_CMOS, SV2017ParserKW_CONFIG, SV2017ParserKW_CONST, SV2017ParserKW_CONSTRAINT, SV2017ParserKW_COVER, SV2017ParserKW_COVERGROUP, SV2017ParserKW_DEFAULT, SV2017ParserKW_DEFPARAM, SV2017ParserKW_ELSE, SV2017ParserKW_END, SV2017ParserKW_ENDCASE, SV2017ParserKW_ENDCHECKER, SV2017ParserKW_ENDGENERATE, SV2017ParserKW_ENDINTERFACE, SV2017ParserKW_ENDMODULE, SV2017ParserKW_ENDPACKAGE, SV2017ParserKW_ENDPROGRAM, SV2017ParserKW_ENUM, SV2017ParserKW_EVENT, SV2017ParserKW_EXPORT, SV2017ParserKW_EXTERN, SV2017ParserKW_FINAL, SV2017ParserKW_FOR, SV2017ParserKW_FUNCTION, SV2017ParserKW_GENERATE, SV2017ParserKW_GENVAR, SV2017ParserKW_GLOBAL, SV2017ParserKW_IF, SV2017ParserKW_IMPORT, SV2017ParserKW_INITIAL, SV2017ParserKW_INOUT, SV2017ParserKW_INPUT, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_INTERCONNECT, SV2017ParserKW_INTERFACE, SV2017ParserKW_LET, SV2017ParserKW_LOCAL, SV2017ParserKW_LOCALPARAM, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_MACROMODULE, SV2017ParserKW_MODPORT, SV2017ParserKW_MODULE, SV2017ParserKW_NAND, SV2017ParserKW_NETTYPE, SV2017ParserKW_NMOS, SV2017ParserKW_NOR, SV2017ParserKW_NONE, SV2017ParserKW_NOT, SV2017ParserKW_NOTIF0, SV2017ParserKW_NOTIF1, SV2017ParserKW_NULL, SV2017ParserKW_OPTION, SV2017ParserKW_OR, SV2017ParserKW_OUTPUT, SV2017ParserKW_PACKAGE, SV2017ParserKW_PARAMETER, SV2017ParserKW_PMOS, SV2017ParserKW_PRIMITIVE, SV2017ParserKW_PROGRAM, SV2017ParserKW_PROPERTY, SV2017ParserKW_PULLDOWN, SV2017ParserKW_PULLUP, SV2017ParserKW_RAND, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_RCMOS, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REF, SV2017ParserKW_REG, SV2017ParserKW_RESTRICT, SV2017ParserKW_RNMOS, SV2017ParserKW_RPMOS, SV2017ParserKW_RTRAN, SV2017ParserKW_RTRANIF0, SV2017ParserKW_RTRANIF1, SV2017ParserKW_SAMPLE, SV2017ParserKW_SEQUENCE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_SPECIFY, SV2017ParserKW_SPECPARAM, SV2017ParserKW_STATIC, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_SUPPLY0, SV2017ParserKW_SUPPLY1, SV2017ParserKW_TAGGED, SV2017ParserKW_TASK, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TIMEPRECISION, SV2017ParserKW_TIMEUNIT, SV2017ParserKW_TRAN, SV2017ParserKW_TRANIF0, SV2017ParserKW_TRANIF1, SV2017ParserKW_TRI, SV2017ParserKW_TRI0, SV2017ParserKW_TRI1, SV2017ParserKW_TRIAND, SV2017ParserKW_TRIOR, SV2017ParserKW_TRIREG, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_TYPEDEF, SV2017ParserKW_UNION, SV2017ParserKW_UNSIGNED, SV2017ParserKW_UWIRE, SV2017ParserKW_VAR, SV2017ParserKW_VIRTUAL, SV2017ParserKW_WAND, SV2017ParserKW_WIRE, SV2017ParserKW_WOR, SV2017ParserKW_XNOR, SV2017ParserKW_XOR, SV2017ParserTIME_LITERAL, SV2017ParserANY_BASED_NUMBER, SV2017ParserBASED_NUMBER_WITH_SIZE, SV2017ParserREAL_NUMBER_WITH_EXP, SV2017ParserFIXED_POINT_NUMBER, SV2017ParserUNSIGNED_NUMBER, SV2017ParserUNBASED_UNSIZED_LITERAL, SV2017ParserSTRING_LITERAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSYSTEM_TF_IDENTIFIER, SV2017ParserSEMI, SV2017ParserLPAREN, SV2017ParserLSQUARE_BR, SV2017ParserLBRACE, SV2017ParserAPOSTROPHE_LBRACE, SV2017ParserDOLAR, SV2017ParserNOT, SV2017ParserNEG, SV2017ParserNAND, SV2017ParserNOR, SV2017ParserXOR, SV2017ParserNXOR, SV2017ParserXORN, SV2017ParserDOT, SV2017ParserPLUS, SV2017ParserMINUS, SV2017ParserAMPERSAND, SV2017ParserBAR, SV2017ParserINCR, SV2017ParserDECR:

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IClass_declarationContext is an interface to support dynamic dispatch.
type IClass_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClass_declarationContext differentiates from other interfaces.
	IsClass_declarationContext()
}

type Class_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClass_declarationContext() *Class_declarationContext {
	var p = new(Class_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_class_declaration
	return p
}

func (*Class_declarationContext) IsClass_declarationContext() {}

func NewClass_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Class_declarationContext {
	var p = new(Class_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_class_declaration

	return p
}

func (s *Class_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Class_declarationContext) KW_CLASS() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_CLASS, 0)
}

func (s *Class_declarationContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Class_declarationContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Class_declarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Class_declarationContext) KW_ENDCLASS() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ENDCLASS, 0)
}

func (s *Class_declarationContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Class_declarationContext) KW_VIRTUAL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_VIRTUAL, 0)
}

func (s *Class_declarationContext) Lifetime() ILifetimeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILifetimeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILifetimeContext)
}

func (s *Class_declarationContext) Parameter_port_list() IParameter_port_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameter_port_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameter_port_listContext)
}

func (s *Class_declarationContext) KW_EXTENDS() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_EXTENDS, 0)
}

func (s *Class_declarationContext) Class_type() IClass_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_typeContext)
}

func (s *Class_declarationContext) KW_IMPLEMENTS() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_IMPLEMENTS, 0)
}

func (s *Class_declarationContext) AllInterface_class_type() []IInterface_class_typeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInterface_class_typeContext)(nil)).Elem())
	var tst = make([]IInterface_class_typeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInterface_class_typeContext)
		}
	}

	return tst
}

func (s *Class_declarationContext) Interface_class_type(i int) IInterface_class_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterface_class_typeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInterface_class_typeContext)
}

func (s *Class_declarationContext) AllClass_item() []IClass_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IClass_itemContext)(nil)).Elem())
	var tst = make([]IClass_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IClass_itemContext)
		}
	}

	return tst
}

func (s *Class_declarationContext) Class_item(i int) IClass_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IClass_itemContext)
}

func (s *Class_declarationContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Class_declarationContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Class_declarationContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Class_declarationContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Class_declarationContext) List_of_arguments() IList_of_argumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_argumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_argumentsContext)
}

func (s *Class_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Class_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Class_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterClass_declaration(s)
	}
}

func (s *Class_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitClass_declaration(s)
	}
}

func (p *SV2017Parser) Class_declaration() (localctx IClass_declarationContext) {
	localctx = NewClass_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 894, SV2017ParserRULE_class_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5976)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_VIRTUAL {
		{
			p.SetState(5975)
			p.Match(SV2017ParserKW_VIRTUAL)
		}

	}
	{
		p.SetState(5978)
		p.Match(SV2017ParserKW_CLASS)
	}
	p.SetState(5980)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_AUTOMATIC || _la == SV2017ParserKW_STATIC {
		{
			p.SetState(5979)
			p.Lifetime()
		}

	}
	{
		p.SetState(5982)
		p.Identifier()
	}
	p.SetState(5984)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserHASH {
		{
			p.SetState(5983)
			p.Parameter_port_list()
		}

	}
	p.SetState(5995)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_EXTENDS {
		{
			p.SetState(5986)
			p.Match(SV2017ParserKW_EXTENDS)
		}
		{
			p.SetState(5987)
			p.Class_type()
		}
		p.SetState(5993)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserLPAREN {
			{
				p.SetState(5988)
				p.Match(SV2017ParserLPAREN)
			}
			p.SetState(5990)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TAGGED-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserTIME_LITERAL-260)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(SV2017ParserANY_BASED_NUMBER-292))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-292))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-292))|(1<<(SV2017ParserFIXED_POINT_NUMBER-292))|(1<<(SV2017ParserUNSIGNED_NUMBER-292))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-292))|(1<<(SV2017ParserSTRING_LITERAL-292))|(1<<(SV2017ParserC_IDENTIFIER-292))|(1<<(SV2017ParserTICK_IDENTIFIER-292))|(1<<(SV2017ParserESCAPED_IDENTIFIER-292))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-292))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-292))|(1<<(SV2017ParserLPAREN-292))|(1<<(SV2017ParserLBRACE-292))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-292))|(1<<(SV2017ParserDOLAR-292))|(1<<(SV2017ParserNOT-292))|(1<<(SV2017ParserNEG-292))|(1<<(SV2017ParserNAND-292))|(1<<(SV2017ParserNOR-292)))) != 0) || (((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324))|(1<<(SV2017ParserCOMMA-324))|(1<<(SV2017ParserDOT-324))|(1<<(SV2017ParserPLUS-324)))) != 0) || (((_la-356)&-(0x1f+1)) == 0 && ((1<<uint((_la-356)))&((1<<(SV2017ParserMINUS-356))|(1<<(SV2017ParserAMPERSAND-356))|(1<<(SV2017ParserBAR-356))|(1<<(SV2017ParserINCR-356))|(1<<(SV2017ParserDECR-356)))) != 0) {
				{
					p.SetState(5989)
					p.List_of_arguments()
				}

			}
			{
				p.SetState(5992)
				p.Match(SV2017ParserRPAREN)
			}

		}

	}
	p.SetState(6006)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_IMPLEMENTS {
		{
			p.SetState(5997)
			p.Match(SV2017ParserKW_IMPLEMENTS)
		}
		{
			p.SetState(5998)
			p.Interface_class_type()
		}
		p.SetState(6003)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserCOMMA {
			{
				p.SetState(5999)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(6000)
				p.Interface_class_type()
			}

			p.SetState(6005)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(6008)
		p.Match(SV2017ParserSEMI)
	}
	p.SetState(6012)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la-30)&-(0x1f+1)) == 0 && ((1<<uint((_la-30)))&((1<<(SV2017ParserKW_DOLAR_ROOT-30))|(1<<(SV2017ParserKW_DOLAR_UNIT-30))|(1<<(SV2017ParserKW_AUTOMATIC-30))|(1<<(SV2017ParserKW_BIT-30))|(1<<(SV2017ParserKW_BYTE-30)))) != 0) || (((_la-66)&-(0x1f+1)) == 0 && ((1<<uint((_la-66)))&((1<<(SV2017ParserKW_CHANDLE-66))|(1<<(SV2017ParserKW_CLASS-66))|(1<<(SV2017ParserKW_CONST-66))|(1<<(SV2017ParserKW_CONSTRAINT-66))|(1<<(SV2017ParserKW_COVERGROUP-66)))) != 0) || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(SV2017ParserKW_ENUM-107))|(1<<(SV2017ParserKW_EVENT-107))|(1<<(SV2017ParserKW_EXTERN-107))|(1<<(SV2017ParserKW_FUNCTION-107))|(1<<(SV2017ParserKW_IMPORT-107)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOCALPARAM-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141))|(1<<(SV2017ParserKW_NETTYPE-141)))) != 0) || (((_la-174)&-(0x1f+1)) == 0 && ((1<<uint((_la-174)))&((1<<(SV2017ParserKW_OPTION-174))|(1<<(SV2017ParserKW_PARAMETER-174))|(1<<(SV2017ParserKW_PROTECTED-174))|(1<<(SV2017ParserKW_PURE-174))|(1<<(SV2017ParserKW_RAND-174))|(1<<(SV2017ParserKW_RANDC-174))|(1<<(SV2017ParserKW_RANDOMIZE-174))|(1<<(SV2017ParserKW_REAL-174))|(1<<(SV2017ParserKW_REALTIME-174))|(1<<(SV2017ParserKW_REG-174)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STATIC-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_STRUCT-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TASK-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_TYPEDEF-260))|(1<<(SV2017ParserKW_UNION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserKW_VAR-260))|(1<<(SV2017ParserKW_VIRTUAL-260)))) != 0) || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299))|(1<<(SV2017ParserSEMI-299))|(1<<(SV2017ParserLPAREN-299))|(1<<(SV2017ParserLSQUARE_BR-299)))) != 0) {
		{
			p.SetState(6009)
			p.Class_item()
		}

		p.SetState(6014)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(6015)
		p.Match(SV2017ParserKW_ENDCLASS)
	}
	p.SetState(6019)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserCOLON:
		{
			p.SetState(6016)
			p.Match(SV2017ParserCOLON)
		}
		{
			p.SetState(6017)
			p.Identifier()
		}

	case SV2017ParserEOF, SV2017ParserTICK_TIMESCALE, SV2017ParserTICK_DEFAULT_NETTYPE, SV2017ParserTICK_INCLUDE, SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_FATAL, SV2017ParserKW_DOLAR_FULLSKEW, SV2017ParserKW_DOLAR_HOLD, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_NOCHANGE, SV2017ParserKW_DOLAR_PERIOD, SV2017ParserKW_DOLAR_RECOVERY, SV2017ParserKW_DOLAR_RECREM, SV2017ParserKW_DOLAR_REMOVAL, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_SETUP, SV2017ParserKW_DOLAR_SETUPHOLD, SV2017ParserKW_DOLAR_SKEW, SV2017ParserKW_DOLAR_TIMESKEW, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_DOLAR_WARNING, SV2017ParserKW_DOLAR_WIDTH, SV2017ParserKW_ALIAS, SV2017ParserKW_ALWAYS, SV2017ParserKW_ALWAYS_COMB, SV2017ParserKW_ALWAYS_FF, SV2017ParserKW_ALWAYS_LATCH, SV2017ParserKW_AND, SV2017ParserKW_ASSERT, SV2017ParserKW_ASSIGN, SV2017ParserKW_ASSUME, SV2017ParserKW_AUTOMATIC, SV2017ParserKW_BEGIN, SV2017ParserKW_BIND, SV2017ParserKW_BIT, SV2017ParserKW_BUF, SV2017ParserKW_BUFIF0, SV2017ParserKW_BUFIF1, SV2017ParserKW_BYTE, SV2017ParserKW_CASE, SV2017ParserKW_CHANDLE, SV2017ParserKW_CHECKER, SV2017ParserKW_CLASS, SV2017ParserKW_CLOCKING, SV2017ParserKW_CMOS, SV2017ParserKW_CONFIG, SV2017ParserKW_CONST, SV2017ParserKW_CONSTRAINT, SV2017ParserKW_COVER, SV2017ParserKW_COVERGROUP, SV2017ParserKW_DEFAULT, SV2017ParserKW_DEFPARAM, SV2017ParserKW_ELSE, SV2017ParserKW_END, SV2017ParserKW_ENDCASE, SV2017ParserKW_ENDCHECKER, SV2017ParserKW_ENDCLASS, SV2017ParserKW_ENDGENERATE, SV2017ParserKW_ENDINTERFACE, SV2017ParserKW_ENDMODULE, SV2017ParserKW_ENDPACKAGE, SV2017ParserKW_ENDPROGRAM, SV2017ParserKW_ENUM, SV2017ParserKW_EVENT, SV2017ParserKW_EXPORT, SV2017ParserKW_EXTERN, SV2017ParserKW_FINAL, SV2017ParserKW_FOR, SV2017ParserKW_FUNCTION, SV2017ParserKW_GENERATE, SV2017ParserKW_GENVAR, SV2017ParserKW_GLOBAL, SV2017ParserKW_IF, SV2017ParserKW_IMPORT, SV2017ParserKW_INITIAL, SV2017ParserKW_INOUT, SV2017ParserKW_INPUT, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_INTERCONNECT, SV2017ParserKW_INTERFACE, SV2017ParserKW_LET, SV2017ParserKW_LOCAL, SV2017ParserKW_LOCALPARAM, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_MACROMODULE, SV2017ParserKW_MODPORT, SV2017ParserKW_MODULE, SV2017ParserKW_NAND, SV2017ParserKW_NETTYPE, SV2017ParserKW_NMOS, SV2017ParserKW_NOR, SV2017ParserKW_NONE, SV2017ParserKW_NOT, SV2017ParserKW_NOTIF0, SV2017ParserKW_NOTIF1, SV2017ParserKW_NULL, SV2017ParserKW_OPTION, SV2017ParserKW_OR, SV2017ParserKW_OUTPUT, SV2017ParserKW_PACKAGE, SV2017ParserKW_PARAMETER, SV2017ParserKW_PMOS, SV2017ParserKW_PRIMITIVE, SV2017ParserKW_PROGRAM, SV2017ParserKW_PROPERTY, SV2017ParserKW_PROTECTED, SV2017ParserKW_PULLDOWN, SV2017ParserKW_PULLUP, SV2017ParserKW_PURE, SV2017ParserKW_RAND, SV2017ParserKW_RANDC, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_RCMOS, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REF, SV2017ParserKW_REG, SV2017ParserKW_RESTRICT, SV2017ParserKW_RNMOS, SV2017ParserKW_RPMOS, SV2017ParserKW_RTRAN, SV2017ParserKW_RTRANIF0, SV2017ParserKW_RTRANIF1, SV2017ParserKW_SAMPLE, SV2017ParserKW_SEQUENCE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_SPECIFY, SV2017ParserKW_SPECPARAM, SV2017ParserKW_STATIC, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_SUPPLY0, SV2017ParserKW_SUPPLY1, SV2017ParserKW_TAGGED, SV2017ParserKW_TASK, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TIMEPRECISION, SV2017ParserKW_TIMEUNIT, SV2017ParserKW_TRAN, SV2017ParserKW_TRANIF0, SV2017ParserKW_TRANIF1, SV2017ParserKW_TRI, SV2017ParserKW_TRI0, SV2017ParserKW_TRI1, SV2017ParserKW_TRIAND, SV2017ParserKW_TRIOR, SV2017ParserKW_TRIREG, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_TYPEDEF, SV2017ParserKW_UNION, SV2017ParserKW_UNSIGNED, SV2017ParserKW_UWIRE, SV2017ParserKW_VAR, SV2017ParserKW_VIRTUAL, SV2017ParserKW_WAND, SV2017ParserKW_WIRE, SV2017ParserKW_WOR, SV2017ParserKW_XNOR, SV2017ParserKW_XOR, SV2017ParserTIME_LITERAL, SV2017ParserANY_BASED_NUMBER, SV2017ParserBASED_NUMBER_WITH_SIZE, SV2017ParserREAL_NUMBER_WITH_EXP, SV2017ParserFIXED_POINT_NUMBER, SV2017ParserUNSIGNED_NUMBER, SV2017ParserUNBASED_UNSIZED_LITERAL, SV2017ParserSTRING_LITERAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSYSTEM_TF_IDENTIFIER, SV2017ParserSEMI, SV2017ParserLPAREN, SV2017ParserLSQUARE_BR, SV2017ParserLBRACE, SV2017ParserAPOSTROPHE_LBRACE, SV2017ParserDOLAR, SV2017ParserNOT, SV2017ParserNEG, SV2017ParserNAND, SV2017ParserNOR, SV2017ParserXOR, SV2017ParserNXOR, SV2017ParserXORN, SV2017ParserDOT, SV2017ParserPLUS, SV2017ParserMINUS, SV2017ParserAMPERSAND, SV2017ParserBAR, SV2017ParserINCR, SV2017ParserDECR:

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAlways_constructContext is an interface to support dynamic dispatch.
type IAlways_constructContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlways_constructContext differentiates from other interfaces.
	IsAlways_constructContext()
}

type Always_constructContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlways_constructContext() *Always_constructContext {
	var p = new(Always_constructContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_always_construct
	return p
}

func (*Always_constructContext) IsAlways_constructContext() {}

func NewAlways_constructContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Always_constructContext {
	var p = new(Always_constructContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_always_construct

	return p
}

func (s *Always_constructContext) GetParser() antlr.Parser { return s.parser }

func (s *Always_constructContext) Always_keyword() IAlways_keywordContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlways_keywordContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlways_keywordContext)
}

func (s *Always_constructContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *Always_constructContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Always_constructContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Always_constructContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterAlways_construct(s)
	}
}

func (s *Always_constructContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitAlways_construct(s)
	}
}

func (p *SV2017Parser) Always_construct() (localctx IAlways_constructContext) {
	localctx = NewAlways_constructContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 896, SV2017ParserRULE_always_construct)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6021)
		p.Always_keyword()
	}
	{
		p.SetState(6022)
		p.Statement()
	}

	return localctx
}

// IInterface_class_typeContext is an interface to support dynamic dispatch.
type IInterface_class_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInterface_class_typeContext differentiates from other interfaces.
	IsInterface_class_typeContext()
}

type Interface_class_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterface_class_typeContext() *Interface_class_typeContext {
	var p = new(Interface_class_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_interface_class_type
	return p
}

func (*Interface_class_typeContext) IsInterface_class_typeContext() {}

func NewInterface_class_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Interface_class_typeContext {
	var p = new(Interface_class_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_interface_class_type

	return p
}

func (s *Interface_class_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Interface_class_typeContext) Ps_identifier() IPs_identifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPs_identifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPs_identifierContext)
}

func (s *Interface_class_typeContext) Parameter_value_assignment() IParameter_value_assignmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameter_value_assignmentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameter_value_assignmentContext)
}

func (s *Interface_class_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Interface_class_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Interface_class_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterInterface_class_type(s)
	}
}

func (s *Interface_class_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitInterface_class_type(s)
	}
}

func (p *SV2017Parser) Interface_class_type() (localctx IInterface_class_typeContext) {
	localctx = NewInterface_class_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 898, SV2017ParserRULE_interface_class_type)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6024)
		p.Ps_identifier()
	}
	p.SetState(6026)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserHASH {
		{
			p.SetState(6025)
			p.Parameter_value_assignment()
		}

	}

	return localctx
}

// IInterface_class_declarationContext is an interface to support dynamic dispatch.
type IInterface_class_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInterface_class_declarationContext differentiates from other interfaces.
	IsInterface_class_declarationContext()
}

type Interface_class_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterface_class_declarationContext() *Interface_class_declarationContext {
	var p = new(Interface_class_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_interface_class_declaration
	return p
}

func (*Interface_class_declarationContext) IsInterface_class_declarationContext() {}

func NewInterface_class_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Interface_class_declarationContext {
	var p = new(Interface_class_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_interface_class_declaration

	return p
}

func (s *Interface_class_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Interface_class_declarationContext) KW_INTERFACE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_INTERFACE, 0)
}

func (s *Interface_class_declarationContext) KW_CLASS() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_CLASS, 0)
}

func (s *Interface_class_declarationContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Interface_class_declarationContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Interface_class_declarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Interface_class_declarationContext) KW_ENDCLASS() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ENDCLASS, 0)
}

func (s *Interface_class_declarationContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Interface_class_declarationContext) Parameter_port_list() IParameter_port_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameter_port_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameter_port_listContext)
}

func (s *Interface_class_declarationContext) KW_EXTENDS() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_EXTENDS, 0)
}

func (s *Interface_class_declarationContext) AllInterface_class_type() []IInterface_class_typeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInterface_class_typeContext)(nil)).Elem())
	var tst = make([]IInterface_class_typeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInterface_class_typeContext)
		}
	}

	return tst
}

func (s *Interface_class_declarationContext) Interface_class_type(i int) IInterface_class_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterface_class_typeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInterface_class_typeContext)
}

func (s *Interface_class_declarationContext) AllInterface_class_item() []IInterface_class_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInterface_class_itemContext)(nil)).Elem())
	var tst = make([]IInterface_class_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInterface_class_itemContext)
		}
	}

	return tst
}

func (s *Interface_class_declarationContext) Interface_class_item(i int) IInterface_class_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterface_class_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInterface_class_itemContext)
}

func (s *Interface_class_declarationContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Interface_class_declarationContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Interface_class_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Interface_class_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Interface_class_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterInterface_class_declaration(s)
	}
}

func (s *Interface_class_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitInterface_class_declaration(s)
	}
}

func (p *SV2017Parser) Interface_class_declaration() (localctx IInterface_class_declarationContext) {
	localctx = NewInterface_class_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 900, SV2017ParserRULE_interface_class_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6028)
		p.Match(SV2017ParserKW_INTERFACE)
	}
	{
		p.SetState(6029)
		p.Match(SV2017ParserKW_CLASS)
	}
	{
		p.SetState(6030)
		p.Identifier()
	}
	p.SetState(6032)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserHASH {
		{
			p.SetState(6031)
			p.Parameter_port_list()
		}

	}
	p.SetState(6043)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_EXTENDS {
		{
			p.SetState(6034)
			p.Match(SV2017ParserKW_EXTENDS)
		}
		{
			p.SetState(6035)
			p.Interface_class_type()
		}
		p.SetState(6040)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserCOMMA {
			{
				p.SetState(6036)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(6037)
				p.Interface_class_type()
			}

			p.SetState(6042)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(6045)
		p.Match(SV2017ParserSEMI)
	}
	p.SetState(6049)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserKW_LOCALPARAM || _la == SV2017ParserKW_PARAMETER || _la == SV2017ParserKW_PURE || _la == SV2017ParserKW_TYPEDEF || (((_la-301)&-(0x1f+1)) == 0 && ((1<<uint((_la-301)))&((1<<(SV2017ParserTICK_IDENTIFIER-301))|(1<<(SV2017ParserSEMI-301))|(1<<(SV2017ParserLPAREN-301)))) != 0) {
		{
			p.SetState(6046)
			p.Interface_class_item()
		}

		p.SetState(6051)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(6052)
		p.Match(SV2017ParserKW_ENDCLASS)
	}
	p.SetState(6056)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserCOLON:
		{
			p.SetState(6053)
			p.Match(SV2017ParserCOLON)
		}
		{
			p.SetState(6054)
			p.Identifier()
		}

	case SV2017ParserEOF, SV2017ParserTICK_TIMESCALE, SV2017ParserTICK_DEFAULT_NETTYPE, SV2017ParserTICK_INCLUDE, SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_FATAL, SV2017ParserKW_DOLAR_FULLSKEW, SV2017ParserKW_DOLAR_HOLD, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_NOCHANGE, SV2017ParserKW_DOLAR_PERIOD, SV2017ParserKW_DOLAR_RECOVERY, SV2017ParserKW_DOLAR_RECREM, SV2017ParserKW_DOLAR_REMOVAL, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_SETUP, SV2017ParserKW_DOLAR_SETUPHOLD, SV2017ParserKW_DOLAR_SKEW, SV2017ParserKW_DOLAR_TIMESKEW, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_DOLAR_WARNING, SV2017ParserKW_DOLAR_WIDTH, SV2017ParserKW_ALIAS, SV2017ParserKW_ALWAYS, SV2017ParserKW_ALWAYS_COMB, SV2017ParserKW_ALWAYS_FF, SV2017ParserKW_ALWAYS_LATCH, SV2017ParserKW_AND, SV2017ParserKW_ASSERT, SV2017ParserKW_ASSIGN, SV2017ParserKW_ASSUME, SV2017ParserKW_AUTOMATIC, SV2017ParserKW_BEGIN, SV2017ParserKW_BIND, SV2017ParserKW_BIT, SV2017ParserKW_BUF, SV2017ParserKW_BUFIF0, SV2017ParserKW_BUFIF1, SV2017ParserKW_BYTE, SV2017ParserKW_CASE, SV2017ParserKW_CHANDLE, SV2017ParserKW_CHECKER, SV2017ParserKW_CLASS, SV2017ParserKW_CLOCKING, SV2017ParserKW_CMOS, SV2017ParserKW_CONFIG, SV2017ParserKW_CONST, SV2017ParserKW_CONSTRAINT, SV2017ParserKW_COVER, SV2017ParserKW_COVERGROUP, SV2017ParserKW_DEFAULT, SV2017ParserKW_DEFPARAM, SV2017ParserKW_ELSE, SV2017ParserKW_END, SV2017ParserKW_ENDCASE, SV2017ParserKW_ENDCHECKER, SV2017ParserKW_ENDGENERATE, SV2017ParserKW_ENDINTERFACE, SV2017ParserKW_ENDMODULE, SV2017ParserKW_ENDPACKAGE, SV2017ParserKW_ENDPROGRAM, SV2017ParserKW_ENUM, SV2017ParserKW_EVENT, SV2017ParserKW_EXPORT, SV2017ParserKW_EXTERN, SV2017ParserKW_FINAL, SV2017ParserKW_FOR, SV2017ParserKW_FUNCTION, SV2017ParserKW_GENERATE, SV2017ParserKW_GENVAR, SV2017ParserKW_GLOBAL, SV2017ParserKW_IF, SV2017ParserKW_IMPORT, SV2017ParserKW_INITIAL, SV2017ParserKW_INOUT, SV2017ParserKW_INPUT, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_INTERCONNECT, SV2017ParserKW_INTERFACE, SV2017ParserKW_LET, SV2017ParserKW_LOCAL, SV2017ParserKW_LOCALPARAM, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_MACROMODULE, SV2017ParserKW_MODPORT, SV2017ParserKW_MODULE, SV2017ParserKW_NAND, SV2017ParserKW_NETTYPE, SV2017ParserKW_NMOS, SV2017ParserKW_NOR, SV2017ParserKW_NONE, SV2017ParserKW_NOT, SV2017ParserKW_NOTIF0, SV2017ParserKW_NOTIF1, SV2017ParserKW_NULL, SV2017ParserKW_OPTION, SV2017ParserKW_OR, SV2017ParserKW_OUTPUT, SV2017ParserKW_PACKAGE, SV2017ParserKW_PARAMETER, SV2017ParserKW_PMOS, SV2017ParserKW_PRIMITIVE, SV2017ParserKW_PROGRAM, SV2017ParserKW_PROPERTY, SV2017ParserKW_PULLDOWN, SV2017ParserKW_PULLUP, SV2017ParserKW_RAND, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_RCMOS, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REF, SV2017ParserKW_REG, SV2017ParserKW_RESTRICT, SV2017ParserKW_RNMOS, SV2017ParserKW_RPMOS, SV2017ParserKW_RTRAN, SV2017ParserKW_RTRANIF0, SV2017ParserKW_RTRANIF1, SV2017ParserKW_SAMPLE, SV2017ParserKW_SEQUENCE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_SPECIFY, SV2017ParserKW_SPECPARAM, SV2017ParserKW_STATIC, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_SUPPLY0, SV2017ParserKW_SUPPLY1, SV2017ParserKW_TAGGED, SV2017ParserKW_TASK, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TIMEPRECISION, SV2017ParserKW_TIMEUNIT, SV2017ParserKW_TRAN, SV2017ParserKW_TRANIF0, SV2017ParserKW_TRANIF1, SV2017ParserKW_TRI, SV2017ParserKW_TRI0, SV2017ParserKW_TRI1, SV2017ParserKW_TRIAND, SV2017ParserKW_TRIOR, SV2017ParserKW_TRIREG, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_TYPEDEF, SV2017ParserKW_UNION, SV2017ParserKW_UNSIGNED, SV2017ParserKW_UWIRE, SV2017ParserKW_VAR, SV2017ParserKW_VIRTUAL, SV2017ParserKW_WAND, SV2017ParserKW_WIRE, SV2017ParserKW_WOR, SV2017ParserKW_XNOR, SV2017ParserKW_XOR, SV2017ParserTIME_LITERAL, SV2017ParserANY_BASED_NUMBER, SV2017ParserBASED_NUMBER_WITH_SIZE, SV2017ParserREAL_NUMBER_WITH_EXP, SV2017ParserFIXED_POINT_NUMBER, SV2017ParserUNSIGNED_NUMBER, SV2017ParserUNBASED_UNSIZED_LITERAL, SV2017ParserSTRING_LITERAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSYSTEM_TF_IDENTIFIER, SV2017ParserSEMI, SV2017ParserLPAREN, SV2017ParserLSQUARE_BR, SV2017ParserLBRACE, SV2017ParserAPOSTROPHE_LBRACE, SV2017ParserDOLAR, SV2017ParserNOT, SV2017ParserNEG, SV2017ParserNAND, SV2017ParserNOR, SV2017ParserXOR, SV2017ParserNXOR, SV2017ParserXORN, SV2017ParserDOT, SV2017ParserPLUS, SV2017ParserMINUS, SV2017ParserAMPERSAND, SV2017ParserBAR, SV2017ParserINCR, SV2017ParserDECR:

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IInterface_class_itemContext is an interface to support dynamic dispatch.
type IInterface_class_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInterface_class_itemContext differentiates from other interfaces.
	IsInterface_class_itemContext()
}

type Interface_class_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterface_class_itemContext() *Interface_class_itemContext {
	var p = new(Interface_class_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_interface_class_item
	return p
}

func (*Interface_class_itemContext) IsInterface_class_itemContext() {}

func NewInterface_class_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Interface_class_itemContext {
	var p = new(Interface_class_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_interface_class_item

	return p
}

func (s *Interface_class_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Interface_class_itemContext) Type_declaration() IType_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_declarationContext)
}

func (s *Interface_class_itemContext) Interface_class_method() IInterface_class_methodContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterface_class_methodContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInterface_class_methodContext)
}

func (s *Interface_class_itemContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Interface_class_itemContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Interface_class_itemContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Interface_class_itemContext) Local_parameter_declaration() ILocal_parameter_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILocal_parameter_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILocal_parameter_declarationContext)
}

func (s *Interface_class_itemContext) Parameter_declaration() IParameter_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameter_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameter_declarationContext)
}

func (s *Interface_class_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Interface_class_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Interface_class_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterInterface_class_item(s)
	}
}

func (s *Interface_class_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitInterface_class_item(s)
	}
}

func (p *SV2017Parser) Interface_class_item() (localctx IInterface_class_itemContext) {
	localctx = NewInterface_class_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 902, SV2017ParserRULE_interface_class_item)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6071)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_TYPEDEF:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6058)
			p.Type_declaration()
		}

	case SV2017ParserKW_PURE, SV2017ParserTICK_IDENTIFIER, SV2017ParserLPAREN:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(6062)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserTICK_IDENTIFIER || _la == SV2017ParserLPAREN {
			{
				p.SetState(6059)
				p.Attribute_instance()
			}

			p.SetState(6064)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6065)
			p.Interface_class_method()
		}

	case SV2017ParserKW_LOCALPARAM, SV2017ParserKW_PARAMETER, SV2017ParserSEMI:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(6068)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SV2017ParserKW_LOCALPARAM:
			{
				p.SetState(6066)
				p.Local_parameter_declaration()
			}

		case SV2017ParserKW_PARAMETER:
			{
				p.SetState(6067)
				p.Parameter_declaration()
			}

		case SV2017ParserSEMI:

		default:
		}
		{
			p.SetState(6070)
			p.Match(SV2017ParserSEMI)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IInterface_class_methodContext is an interface to support dynamic dispatch.
type IInterface_class_methodContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInterface_class_methodContext differentiates from other interfaces.
	IsInterface_class_methodContext()
}

type Interface_class_methodContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterface_class_methodContext() *Interface_class_methodContext {
	var p = new(Interface_class_methodContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_interface_class_method
	return p
}

func (*Interface_class_methodContext) IsInterface_class_methodContext() {}

func NewInterface_class_methodContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Interface_class_methodContext {
	var p = new(Interface_class_methodContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_interface_class_method

	return p
}

func (s *Interface_class_methodContext) GetParser() antlr.Parser { return s.parser }

func (s *Interface_class_methodContext) KW_PURE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_PURE, 0)
}

func (s *Interface_class_methodContext) KW_VIRTUAL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_VIRTUAL, 0)
}

func (s *Interface_class_methodContext) Method_prototype() IMethod_prototypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMethod_prototypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMethod_prototypeContext)
}

func (s *Interface_class_methodContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Interface_class_methodContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Interface_class_methodContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Interface_class_methodContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterInterface_class_method(s)
	}
}

func (s *Interface_class_methodContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitInterface_class_method(s)
	}
}

func (p *SV2017Parser) Interface_class_method() (localctx IInterface_class_methodContext) {
	localctx = NewInterface_class_methodContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 904, SV2017ParserRULE_interface_class_method)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6073)
		p.Match(SV2017ParserKW_PURE)
	}
	{
		p.SetState(6074)
		p.Match(SV2017ParserKW_VIRTUAL)
	}
	{
		p.SetState(6075)
		p.Method_prototype()
	}
	{
		p.SetState(6076)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IPackage_declarationContext is an interface to support dynamic dispatch.
type IPackage_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackage_declarationContext differentiates from other interfaces.
	IsPackage_declarationContext()
}

type Package_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackage_declarationContext() *Package_declarationContext {
	var p = new(Package_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_package_declaration
	return p
}

func (*Package_declarationContext) IsPackage_declarationContext() {}

func NewPackage_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Package_declarationContext {
	var p = new(Package_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_package_declaration

	return p
}

func (s *Package_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Package_declarationContext) KW_PACKAGE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_PACKAGE, 0)
}

func (s *Package_declarationContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Package_declarationContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Package_declarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Package_declarationContext) KW_ENDPACKAGE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ENDPACKAGE, 0)
}

func (s *Package_declarationContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Package_declarationContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Package_declarationContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Package_declarationContext) Lifetime() ILifetimeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILifetimeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILifetimeContext)
}

func (s *Package_declarationContext) Timeunits_declaration() ITimeunits_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITimeunits_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITimeunits_declarationContext)
}

func (s *Package_declarationContext) AllPackage_item() []IPackage_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPackage_itemContext)(nil)).Elem())
	var tst = make([]IPackage_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPackage_itemContext)
		}
	}

	return tst
}

func (s *Package_declarationContext) Package_item(i int) IPackage_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackage_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPackage_itemContext)
}

func (s *Package_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Package_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Package_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPackage_declaration(s)
	}
}

func (s *Package_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPackage_declaration(s)
	}
}

func (p *SV2017Parser) Package_declaration() (localctx IPackage_declarationContext) {
	localctx = NewPackage_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 906, SV2017ParserRULE_package_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6081)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserTICK_IDENTIFIER || _la == SV2017ParserLPAREN {
		{
			p.SetState(6078)
			p.Attribute_instance()
		}

		p.SetState(6083)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(6084)
		p.Match(SV2017ParserKW_PACKAGE)
	}
	p.SetState(6086)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_AUTOMATIC || _la == SV2017ParserKW_STATIC {
		{
			p.SetState(6085)
			p.Lifetime()
		}

	}
	{
		p.SetState(6088)
		p.Identifier()
	}
	{
		p.SetState(6089)
		p.Match(SV2017ParserSEMI)
	}
	p.SetState(6091)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 766, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6090)
			p.Timeunits_declaration()
		}

	}
	p.SetState(6096)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la-30)&-(0x1f+1)) == 0 && ((1<<uint((_la-30)))&((1<<(SV2017ParserKW_DOLAR_ROOT-30))|(1<<(SV2017ParserKW_DOLAR_UNIT-30))|(1<<(SV2017ParserKW_AUTOMATIC-30))|(1<<(SV2017ParserKW_BIT-30))|(1<<(SV2017ParserKW_BYTE-30)))) != 0) || (((_la-66)&-(0x1f+1)) == 0 && ((1<<uint((_la-66)))&((1<<(SV2017ParserKW_CHANDLE-66))|(1<<(SV2017ParserKW_CHECKER-66))|(1<<(SV2017ParserKW_CLASS-66))|(1<<(SV2017ParserKW_CONST-66))|(1<<(SV2017ParserKW_CONSTRAINT-66))|(1<<(SV2017ParserKW_COVERGROUP-66)))) != 0) || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(SV2017ParserKW_ENUM-107))|(1<<(SV2017ParserKW_EVENT-107))|(1<<(SV2017ParserKW_EXPORT-107))|(1<<(SV2017ParserKW_FUNCTION-107))|(1<<(SV2017ParserKW_IMPORT-107)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_INTERCONNECT-141))|(1<<(SV2017ParserKW_INTERFACE-141))|(1<<(SV2017ParserKW_LET-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOCALPARAM-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141))|(1<<(SV2017ParserKW_NETTYPE-141))|(1<<(SV2017ParserKW_NONE-141)))) != 0) || (((_la-174)&-(0x1f+1)) == 0 && ((1<<uint((_la-174)))&((1<<(SV2017ParserKW_OPTION-174))|(1<<(SV2017ParserKW_PARAMETER-174))|(1<<(SV2017ParserKW_PROGRAM-174))|(1<<(SV2017ParserKW_PROPERTY-174))|(1<<(SV2017ParserKW_RANDOMIZE-174))|(1<<(SV2017ParserKW_REAL-174))|(1<<(SV2017ParserKW_REALTIME-174))|(1<<(SV2017ParserKW_REG-174)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SEQUENCE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STATIC-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_STRUCT-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_SUPPLY0-219))|(1<<(SV2017ParserKW_SUPPLY1-219))|(1<<(SV2017ParserKW_TASK-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219))|(1<<(SV2017ParserKW_TIMEPRECISION-219))|(1<<(SV2017ParserKW_TIMEUNIT-219)))) != 0) || (((_la-254)&-(0x1f+1)) == 0 && ((1<<uint((_la-254)))&((1<<(SV2017ParserKW_TRI-254))|(1<<(SV2017ParserKW_TRI0-254))|(1<<(SV2017ParserKW_TRI1-254))|(1<<(SV2017ParserKW_TRIAND-254))|(1<<(SV2017ParserKW_TRIOR-254))|(1<<(SV2017ParserKW_TRIREG-254))|(1<<(SV2017ParserKW_TYPE-254))|(1<<(SV2017ParserKW_TYPE_OPTION-254))|(1<<(SV2017ParserKW_TYPEDEF-254))|(1<<(SV2017ParserKW_UNION-254))|(1<<(SV2017ParserKW_UNSIGNED-254))|(1<<(SV2017ParserKW_UWIRE-254))|(1<<(SV2017ParserKW_VAR-254))|(1<<(SV2017ParserKW_VIRTUAL-254))|(1<<(SV2017ParserKW_WAND-254))|(1<<(SV2017ParserKW_WIRE-254)))) != 0) || (((_la-287)&-(0x1f+1)) == 0 && ((1<<uint((_la-287)))&((1<<(SV2017ParserKW_WOR-287))|(1<<(SV2017ParserC_IDENTIFIER-287))|(1<<(SV2017ParserTICK_IDENTIFIER-287))|(1<<(SV2017ParserESCAPED_IDENTIFIER-287))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-287))|(1<<(SV2017ParserSEMI-287))|(1<<(SV2017ParserLPAREN-287))|(1<<(SV2017ParserLSQUARE_BR-287)))) != 0) {
		{
			p.SetState(6093)
			p.Package_item()
		}

		p.SetState(6098)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(6099)
		p.Match(SV2017ParserKW_ENDPACKAGE)
	}
	p.SetState(6103)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserCOLON:
		{
			p.SetState(6100)
			p.Match(SV2017ParserCOLON)
		}
		{
			p.SetState(6101)
			p.Identifier()
		}

	case SV2017ParserEOF, SV2017ParserTICK_TIMESCALE, SV2017ParserTICK_DEFAULT_NETTYPE, SV2017ParserTICK_INCLUDE, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_AUTOMATIC, SV2017ParserKW_BIND, SV2017ParserKW_BIT, SV2017ParserKW_BYTE, SV2017ParserKW_CHANDLE, SV2017ParserKW_CHECKER, SV2017ParserKW_CLASS, SV2017ParserKW_CONFIG, SV2017ParserKW_CONST, SV2017ParserKW_CONSTRAINT, SV2017ParserKW_COVERGROUP, SV2017ParserKW_ENUM, SV2017ParserKW_EVENT, SV2017ParserKW_EXPORT, SV2017ParserKW_EXTERN, SV2017ParserKW_FUNCTION, SV2017ParserKW_IMPORT, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_INTERCONNECT, SV2017ParserKW_INTERFACE, SV2017ParserKW_LET, SV2017ParserKW_LOCAL, SV2017ParserKW_LOCALPARAM, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_MACROMODULE, SV2017ParserKW_MODULE, SV2017ParserKW_NETTYPE, SV2017ParserKW_NONE, SV2017ParserKW_OPTION, SV2017ParserKW_PACKAGE, SV2017ParserKW_PARAMETER, SV2017ParserKW_PRIMITIVE, SV2017ParserKW_PROGRAM, SV2017ParserKW_PROPERTY, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_SAMPLE, SV2017ParserKW_SEQUENCE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_STATIC, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_SUPPLY0, SV2017ParserKW_SUPPLY1, SV2017ParserKW_TASK, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TIMEPRECISION, SV2017ParserKW_TIMEUNIT, SV2017ParserKW_TRI, SV2017ParserKW_TRI0, SV2017ParserKW_TRI1, SV2017ParserKW_TRIAND, SV2017ParserKW_TRIOR, SV2017ParserKW_TRIREG, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_TYPEDEF, SV2017ParserKW_UNION, SV2017ParserKW_UNSIGNED, SV2017ParserKW_UWIRE, SV2017ParserKW_VAR, SV2017ParserKW_VIRTUAL, SV2017ParserKW_WAND, SV2017ParserKW_WIRE, SV2017ParserKW_WOR, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSEMI, SV2017ParserLPAREN, SV2017ParserLSQUARE_BR:

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPackage_itemContext is an interface to support dynamic dispatch.
type IPackage_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackage_itemContext differentiates from other interfaces.
	IsPackage_itemContext()
}

type Package_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackage_itemContext() *Package_itemContext {
	var p = new(Package_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_package_item
	return p
}

func (*Package_itemContext) IsPackage_itemContext() {}

func NewPackage_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Package_itemContext {
	var p = new(Package_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_package_item

	return p
}

func (s *Package_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Package_itemContext) Package_item_item() IPackage_item_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackage_item_itemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackage_item_itemContext)
}

func (s *Package_itemContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Package_itemContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Package_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Package_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Package_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPackage_item(s)
	}
}

func (s *Package_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPackage_item(s)
	}
}

func (p *SV2017Parser) Package_item() (localctx IPackage_itemContext) {
	localctx = NewPackage_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 908, SV2017ParserRULE_package_item)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6108)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 769, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(6105)
				p.Attribute_instance()
			}

		}
		p.SetState(6110)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 769, p.GetParserRuleContext())
	}
	{
		p.SetState(6111)
		p.Package_item_item()
	}

	return localctx
}

// IPackage_item_itemContext is an interface to support dynamic dispatch.
type IPackage_item_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackage_item_itemContext differentiates from other interfaces.
	IsPackage_item_itemContext()
}

type Package_item_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackage_item_itemContext() *Package_item_itemContext {
	var p = new(Package_item_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_package_item_item
	return p
}

func (*Package_item_itemContext) IsPackage_item_itemContext() {}

func NewPackage_item_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Package_item_itemContext {
	var p = new(Package_item_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_package_item_item

	return p
}

func (s *Package_item_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Package_item_itemContext) Net_declaration() INet_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INet_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INet_declarationContext)
}

func (s *Package_item_itemContext) Data_declaration() IData_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_declarationContext)
}

func (s *Package_item_itemContext) Task_declaration() ITask_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITask_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITask_declarationContext)
}

func (s *Package_item_itemContext) Function_declaration() IFunction_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_declarationContext)
}

func (s *Package_item_itemContext) Checker_declaration() IChecker_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChecker_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChecker_declarationContext)
}

func (s *Package_item_itemContext) Dpi_import_export() IDpi_import_exportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDpi_import_exportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDpi_import_exportContext)
}

func (s *Package_item_itemContext) Extern_constraint_declaration() IExtern_constraint_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExtern_constraint_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExtern_constraint_declarationContext)
}

func (s *Package_item_itemContext) Class_declaration() IClass_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_declarationContext)
}

func (s *Package_item_itemContext) Interface_class_declaration() IInterface_class_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterface_class_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInterface_class_declarationContext)
}

func (s *Package_item_itemContext) Class_constructor_declaration() IClass_constructor_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_constructor_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_constructor_declarationContext)
}

func (s *Package_item_itemContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Package_item_itemContext) Local_parameter_declaration() ILocal_parameter_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILocal_parameter_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILocal_parameter_declarationContext)
}

func (s *Package_item_itemContext) Parameter_declaration() IParameter_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameter_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameter_declarationContext)
}

func (s *Package_item_itemContext) Covergroup_declaration() ICovergroup_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICovergroup_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICovergroup_declarationContext)
}

func (s *Package_item_itemContext) Property_declaration() IProperty_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProperty_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProperty_declarationContext)
}

func (s *Package_item_itemContext) Sequence_declaration() ISequence_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISequence_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISequence_declarationContext)
}

func (s *Package_item_itemContext) Let_declaration() ILet_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILet_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILet_declarationContext)
}

func (s *Package_item_itemContext) Anonymous_program() IAnonymous_programContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnonymous_programContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnonymous_programContext)
}

func (s *Package_item_itemContext) Package_export_declaration() IPackage_export_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackage_export_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackage_export_declarationContext)
}

func (s *Package_item_itemContext) Timeunits_declaration() ITimeunits_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITimeunits_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITimeunits_declarationContext)
}

func (s *Package_item_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Package_item_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Package_item_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPackage_item_item(s)
	}
}

func (s *Package_item_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPackage_item_item(s)
	}
}

func (p *SV2017Parser) Package_item_item() (localctx IPackage_item_itemContext) {
	localctx = NewPackage_item_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 910, SV2017ParserRULE_package_item_item)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6135)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 771, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6113)
			p.Net_declaration()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6114)
			p.Data_declaration()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6115)
			p.Task_declaration()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6116)
			p.Function_declaration()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(6117)
			p.Checker_declaration()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(6118)
			p.Dpi_import_export()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(6119)
			p.Extern_constraint_declaration()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(6120)
			p.Class_declaration()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(6121)
			p.Interface_class_declaration()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(6122)
			p.Class_constructor_declaration()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		p.SetState(6125)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SV2017ParserKW_LOCALPARAM:
			{
				p.SetState(6123)
				p.Local_parameter_declaration()
			}

		case SV2017ParserKW_PARAMETER:
			{
				p.SetState(6124)
				p.Parameter_declaration()
			}

		case SV2017ParserSEMI:

		default:
		}
		{
			p.SetState(6127)
			p.Match(SV2017ParserSEMI)
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(6128)
			p.Covergroup_declaration()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(6129)
			p.Property_declaration()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(6130)
			p.Sequence_declaration()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(6131)
			p.Let_declaration()
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(6132)
			p.Anonymous_program()
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(6133)
			p.Package_export_declaration()
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(6134)
			p.Timeunits_declaration()
		}

	}

	return localctx
}

// IProgram_declarationContext is an interface to support dynamic dispatch.
type IProgram_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProgram_declarationContext differentiates from other interfaces.
	IsProgram_declarationContext()
}

type Program_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProgram_declarationContext() *Program_declarationContext {
	var p = new(Program_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_program_declaration
	return p
}

func (*Program_declarationContext) IsProgram_declarationContext() {}

func NewProgram_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Program_declarationContext {
	var p = new(Program_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_program_declaration

	return p
}

func (s *Program_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Program_declarationContext) KW_EXTERN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_EXTERN, 0)
}

func (s *Program_declarationContext) Program_header() IProgram_headerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProgram_headerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProgram_headerContext)
}

func (s *Program_declarationContext) KW_ENDPROGRAM() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ENDPROGRAM, 0)
}

func (s *Program_declarationContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Program_declarationContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Program_declarationContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Program_declarationContext) KW_PROGRAM() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_PROGRAM, 0)
}

func (s *Program_declarationContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Program_declarationContext) DOT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOT, 0)
}

func (s *Program_declarationContext) MUL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserMUL, 0)
}

func (s *Program_declarationContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Program_declarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Program_declarationContext) Timeunits_declaration() ITimeunits_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITimeunits_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITimeunits_declarationContext)
}

func (s *Program_declarationContext) AllProgram_item() []IProgram_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProgram_itemContext)(nil)).Elem())
	var tst = make([]IProgram_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProgram_itemContext)
		}
	}

	return tst
}

func (s *Program_declarationContext) Program_item(i int) IProgram_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProgram_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProgram_itemContext)
}

func (s *Program_declarationContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Program_declarationContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Program_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Program_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Program_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterProgram_declaration(s)
	}
}

func (s *Program_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitProgram_declaration(s)
	}
}

func (p *SV2017Parser) Program_declaration() (localctx IProgram_declarationContext) {
	localctx = NewProgram_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 912, SV2017ParserRULE_program_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6171)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_EXTERN:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6137)
			p.Match(SV2017ParserKW_EXTERN)
		}
		{
			p.SetState(6138)
			p.Program_header()
		}

	case SV2017ParserKW_PROGRAM, SV2017ParserTICK_IDENTIFIER, SV2017ParserLPAREN:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(6154)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 773, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(6139)
				p.Program_header()
			}

		case 2:
			p.SetState(6143)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SV2017ParserTICK_IDENTIFIER || _la == SV2017ParserLPAREN {
				{
					p.SetState(6140)
					p.Attribute_instance()
				}

				p.SetState(6145)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(6146)
				p.Match(SV2017ParserKW_PROGRAM)
			}
			{
				p.SetState(6147)
				p.Identifier()
			}
			{
				p.SetState(6148)
				p.Match(SV2017ParserLPAREN)
			}
			{
				p.SetState(6149)
				p.Match(SV2017ParserDOT)
			}
			{
				p.SetState(6150)
				p.Match(SV2017ParserMUL)
			}
			{
				p.SetState(6151)
				p.Match(SV2017ParserRPAREN)
			}
			{
				p.SetState(6152)
				p.Match(SV2017ParserSEMI)
			}

		}
		p.SetState(6157)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 774, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6156)
				p.Timeunits_declaration()
			}

		}
		p.SetState(6162)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_ASSERT-20))|(1<<(SV2017ParserKW_ASSIGN-20))|(1<<(SV2017ParserKW_ASSUME-20))|(1<<(SV2017ParserKW_AUTOMATIC-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CASE-56))|(1<<(SV2017ParserKW_CHANDLE-56))|(1<<(SV2017ParserKW_CHECKER-56))|(1<<(SV2017ParserKW_CLASS-56))|(1<<(SV2017ParserKW_CLOCKING-56))|(1<<(SV2017ParserKW_CONST-56))|(1<<(SV2017ParserKW_CONSTRAINT-56))|(1<<(SV2017ParserKW_COVER-56))|(1<<(SV2017ParserKW_COVERGROUP-56))|(1<<(SV2017ParserKW_DEFAULT-56)))) != 0) || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(SV2017ParserKW_ENUM-107))|(1<<(SV2017ParserKW_EVENT-107))|(1<<(SV2017ParserKW_EXPORT-107))|(1<<(SV2017ParserKW_FINAL-107))|(1<<(SV2017ParserKW_FOR-107))|(1<<(SV2017ParserKW_FUNCTION-107))|(1<<(SV2017ParserKW_GENERATE-107))|(1<<(SV2017ParserKW_GENVAR-107))|(1<<(SV2017ParserKW_GLOBAL-107))|(1<<(SV2017ParserKW_IF-107))|(1<<(SV2017ParserKW_IMPORT-107))|(1<<(SV2017ParserKW_INITIAL-107))|(1<<(SV2017ParserKW_INOUT-107))|(1<<(SV2017ParserKW_INPUT-107)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_INTERCONNECT-141))|(1<<(SV2017ParserKW_INTERFACE-141))|(1<<(SV2017ParserKW_LET-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOCALPARAM-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141))|(1<<(SV2017ParserKW_NETTYPE-141))|(1<<(SV2017ParserKW_NONE-141)))) != 0) || (((_la-174)&-(0x1f+1)) == 0 && ((1<<uint((_la-174)))&((1<<(SV2017ParserKW_OPTION-174))|(1<<(SV2017ParserKW_OUTPUT-174))|(1<<(SV2017ParserKW_PARAMETER-174))|(1<<(SV2017ParserKW_PROPERTY-174))|(1<<(SV2017ParserKW_RANDOMIZE-174))|(1<<(SV2017ParserKW_REAL-174))|(1<<(SV2017ParserKW_REALTIME-174))|(1<<(SV2017ParserKW_REF-174))|(1<<(SV2017ParserKW_REG-174)))) != 0) || (((_la-207)&-(0x1f+1)) == 0 && ((1<<uint((_la-207)))&((1<<(SV2017ParserKW_RESTRICT-207))|(1<<(SV2017ParserKW_SAMPLE-207))|(1<<(SV2017ParserKW_SEQUENCE-207))|(1<<(SV2017ParserKW_SHORTINT-207))|(1<<(SV2017ParserKW_SHORTREAL-207))|(1<<(SV2017ParserKW_SIGNED-207))|(1<<(SV2017ParserKW_STATIC-207))|(1<<(SV2017ParserKW_STD-207))|(1<<(SV2017ParserKW_STRING-207))|(1<<(SV2017ParserKW_STRUCT-207))|(1<<(SV2017ParserKW_SUPER-207)))) != 0) || (((_la-239)&-(0x1f+1)) == 0 && ((1<<uint((_la-239)))&((1<<(SV2017ParserKW_SUPPLY0-239))|(1<<(SV2017ParserKW_SUPPLY1-239))|(1<<(SV2017ParserKW_TASK-239))|(1<<(SV2017ParserKW_THIS-239))|(1<<(SV2017ParserKW_TIME-239))|(1<<(SV2017ParserKW_TIMEPRECISION-239))|(1<<(SV2017ParserKW_TIMEUNIT-239))|(1<<(SV2017ParserKW_TRI-239))|(1<<(SV2017ParserKW_TRI0-239))|(1<<(SV2017ParserKW_TRI1-239))|(1<<(SV2017ParserKW_TRIAND-239))|(1<<(SV2017ParserKW_TRIOR-239))|(1<<(SV2017ParserKW_TRIREG-239))|(1<<(SV2017ParserKW_TYPE-239))|(1<<(SV2017ParserKW_TYPE_OPTION-239))|(1<<(SV2017ParserKW_TYPEDEF-239))|(1<<(SV2017ParserKW_UNION-239))|(1<<(SV2017ParserKW_UNSIGNED-239)))) != 0) || (((_la-271)&-(0x1f+1)) == 0 && ((1<<uint((_la-271)))&((1<<(SV2017ParserKW_UWIRE-271))|(1<<(SV2017ParserKW_VAR-271))|(1<<(SV2017ParserKW_VIRTUAL-271))|(1<<(SV2017ParserKW_WAND-271))|(1<<(SV2017ParserKW_WIRE-271))|(1<<(SV2017ParserKW_WOR-271))|(1<<(SV2017ParserC_IDENTIFIER-271))|(1<<(SV2017ParserTICK_IDENTIFIER-271))|(1<<(SV2017ParserESCAPED_IDENTIFIER-271)))) != 0) || (((_la-303)&-(0x1f+1)) == 0 && ((1<<uint((_la-303)))&((1<<(SV2017ParserSIMPLE_IDENTIFIER-303))|(1<<(SV2017ParserSEMI-303))|(1<<(SV2017ParserLPAREN-303))|(1<<(SV2017ParserLSQUARE_BR-303)))) != 0) {
			{
				p.SetState(6159)
				p.Program_item()
			}

			p.SetState(6164)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

		{
			p.SetState(6165)
			p.Match(SV2017ParserKW_ENDPROGRAM)
		}
		p.SetState(6169)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SV2017ParserCOLON:
			{
				p.SetState(6166)
				p.Match(SV2017ParserCOLON)
			}
			{
				p.SetState(6167)
				p.Identifier()
			}

		case SV2017ParserEOF, SV2017ParserTICK_TIMESCALE, SV2017ParserTICK_DEFAULT_NETTYPE, SV2017ParserTICK_INCLUDE, SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_FATAL, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_DOLAR_WARNING, SV2017ParserKW_ALIAS, SV2017ParserKW_ALWAYS, SV2017ParserKW_ALWAYS_COMB, SV2017ParserKW_ALWAYS_FF, SV2017ParserKW_ALWAYS_LATCH, SV2017ParserKW_AND, SV2017ParserKW_ASSERT, SV2017ParserKW_ASSIGN, SV2017ParserKW_ASSUME, SV2017ParserKW_AUTOMATIC, SV2017ParserKW_BIND, SV2017ParserKW_BIT, SV2017ParserKW_BUF, SV2017ParserKW_BUFIF0, SV2017ParserKW_BUFIF1, SV2017ParserKW_BYTE, SV2017ParserKW_CASE, SV2017ParserKW_CHANDLE, SV2017ParserKW_CHECKER, SV2017ParserKW_CLASS, SV2017ParserKW_CLOCKING, SV2017ParserKW_CMOS, SV2017ParserKW_CONFIG, SV2017ParserKW_CONST, SV2017ParserKW_CONSTRAINT, SV2017ParserKW_COVER, SV2017ParserKW_COVERGROUP, SV2017ParserKW_DEFAULT, SV2017ParserKW_DEFPARAM, SV2017ParserKW_ENDINTERFACE, SV2017ParserKW_ENDMODULE, SV2017ParserKW_ENUM, SV2017ParserKW_EVENT, SV2017ParserKW_EXPORT, SV2017ParserKW_EXTERN, SV2017ParserKW_FINAL, SV2017ParserKW_FOR, SV2017ParserKW_FUNCTION, SV2017ParserKW_GENERATE, SV2017ParserKW_GENVAR, SV2017ParserKW_GLOBAL, SV2017ParserKW_IF, SV2017ParserKW_IMPORT, SV2017ParserKW_INITIAL, SV2017ParserKW_INOUT, SV2017ParserKW_INPUT, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_INTERCONNECT, SV2017ParserKW_INTERFACE, SV2017ParserKW_LET, SV2017ParserKW_LOCAL, SV2017ParserKW_LOCALPARAM, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_MACROMODULE, SV2017ParserKW_MODPORT, SV2017ParserKW_MODULE, SV2017ParserKW_NAND, SV2017ParserKW_NETTYPE, SV2017ParserKW_NMOS, SV2017ParserKW_NOR, SV2017ParserKW_NONE, SV2017ParserKW_NOT, SV2017ParserKW_NOTIF0, SV2017ParserKW_NOTIF1, SV2017ParserKW_OPTION, SV2017ParserKW_OR, SV2017ParserKW_OUTPUT, SV2017ParserKW_PACKAGE, SV2017ParserKW_PARAMETER, SV2017ParserKW_PMOS, SV2017ParserKW_PRIMITIVE, SV2017ParserKW_PROGRAM, SV2017ParserKW_PROPERTY, SV2017ParserKW_PULLDOWN, SV2017ParserKW_PULLUP, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_RCMOS, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REF, SV2017ParserKW_REG, SV2017ParserKW_RESTRICT, SV2017ParserKW_RNMOS, SV2017ParserKW_RPMOS, SV2017ParserKW_RTRAN, SV2017ParserKW_RTRANIF0, SV2017ParserKW_RTRANIF1, SV2017ParserKW_SAMPLE, SV2017ParserKW_SEQUENCE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_SPECIFY, SV2017ParserKW_SPECPARAM, SV2017ParserKW_STATIC, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_SUPPLY0, SV2017ParserKW_SUPPLY1, SV2017ParserKW_TASK, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TIMEPRECISION, SV2017ParserKW_TIMEUNIT, SV2017ParserKW_TRAN, SV2017ParserKW_TRANIF0, SV2017ParserKW_TRANIF1, SV2017ParserKW_TRI, SV2017ParserKW_TRI0, SV2017ParserKW_TRI1, SV2017ParserKW_TRIAND, SV2017ParserKW_TRIOR, SV2017ParserKW_TRIREG, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_TYPEDEF, SV2017ParserKW_UNION, SV2017ParserKW_UNSIGNED, SV2017ParserKW_UWIRE, SV2017ParserKW_VAR, SV2017ParserKW_VIRTUAL, SV2017ParserKW_WAND, SV2017ParserKW_WIRE, SV2017ParserKW_WOR, SV2017ParserKW_XNOR, SV2017ParserKW_XOR, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSEMI, SV2017ParserLPAREN, SV2017ParserLSQUARE_BR, SV2017ParserDOT:

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IProgram_headerContext is an interface to support dynamic dispatch.
type IProgram_headerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProgram_headerContext differentiates from other interfaces.
	IsProgram_headerContext()
}

type Program_headerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProgram_headerContext() *Program_headerContext {
	var p = new(Program_headerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_program_header
	return p
}

func (*Program_headerContext) IsProgram_headerContext() {}

func NewProgram_headerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Program_headerContext {
	var p = new(Program_headerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_program_header

	return p
}

func (s *Program_headerContext) GetParser() antlr.Parser { return s.parser }

func (s *Program_headerContext) KW_PROGRAM() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_PROGRAM, 0)
}

func (s *Program_headerContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Program_headerContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Program_headerContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Program_headerContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Program_headerContext) Lifetime() ILifetimeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILifetimeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILifetimeContext)
}

func (s *Program_headerContext) AllPackage_import_declaration() []IPackage_import_declarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPackage_import_declarationContext)(nil)).Elem())
	var tst = make([]IPackage_import_declarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPackage_import_declarationContext)
		}
	}

	return tst
}

func (s *Program_headerContext) Package_import_declaration(i int) IPackage_import_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackage_import_declarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPackage_import_declarationContext)
}

func (s *Program_headerContext) Parameter_port_list() IParameter_port_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameter_port_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameter_port_listContext)
}

func (s *Program_headerContext) List_of_port_declarations() IList_of_port_declarationsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_port_declarationsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_port_declarationsContext)
}

func (s *Program_headerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Program_headerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Program_headerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterProgram_header(s)
	}
}

func (s *Program_headerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitProgram_header(s)
	}
}

func (p *SV2017Parser) Program_header() (localctx IProgram_headerContext) {
	localctx = NewProgram_headerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 914, SV2017ParserRULE_program_header)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6176)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserTICK_IDENTIFIER || _la == SV2017ParserLPAREN {
		{
			p.SetState(6173)
			p.Attribute_instance()
		}

		p.SetState(6178)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(6179)
		p.Match(SV2017ParserKW_PROGRAM)
	}
	p.SetState(6181)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_AUTOMATIC || _la == SV2017ParserKW_STATIC {
		{
			p.SetState(6180)
			p.Lifetime()
		}

	}
	{
		p.SetState(6183)
		p.Identifier()
	}
	p.SetState(6187)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserKW_IMPORT {
		{
			p.SetState(6184)
			p.Package_import_declaration()
		}

		p.SetState(6189)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(6191)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserHASH {
		{
			p.SetState(6190)
			p.Parameter_port_list()
		}

	}
	p.SetState(6194)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserLPAREN {
		{
			p.SetState(6193)
			p.List_of_port_declarations()
		}

	}
	{
		p.SetState(6196)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IProgram_itemContext is an interface to support dynamic dispatch.
type IProgram_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProgram_itemContext differentiates from other interfaces.
	IsProgram_itemContext()
}

type Program_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProgram_itemContext() *Program_itemContext {
	var p = new(Program_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_program_item
	return p
}

func (*Program_itemContext) IsProgram_itemContext() {}

func NewProgram_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Program_itemContext {
	var p = new(Program_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_program_item

	return p
}

func (s *Program_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Program_itemContext) Nonansi_port_declaration() INonansi_port_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INonansi_port_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INonansi_port_declarationContext)
}

func (s *Program_itemContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Program_itemContext) Non_port_program_item() INon_port_program_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INon_port_program_itemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INon_port_program_itemContext)
}

func (s *Program_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Program_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Program_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterProgram_item(s)
	}
}

func (s *Program_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitProgram_item(s)
	}
}

func (p *SV2017Parser) Program_item() (localctx IProgram_itemContext) {
	localctx = NewProgram_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 916, SV2017ParserRULE_program_item)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6202)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 783, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6198)
			p.Nonansi_port_declaration()
		}
		{
			p.SetState(6199)
			p.Match(SV2017ParserSEMI)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6201)
			p.Non_port_program_item()
		}

	}

	return localctx
}

// INon_port_program_itemContext is an interface to support dynamic dispatch.
type INon_port_program_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNon_port_program_itemContext differentiates from other interfaces.
	IsNon_port_program_itemContext()
}

type Non_port_program_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNon_port_program_itemContext() *Non_port_program_itemContext {
	var p = new(Non_port_program_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_non_port_program_item
	return p
}

func (*Non_port_program_itemContext) IsNon_port_program_itemContext() {}

func NewNon_port_program_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Non_port_program_itemContext {
	var p = new(Non_port_program_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_non_port_program_item

	return p
}

func (s *Non_port_program_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Non_port_program_itemContext) Continuous_assign() IContinuous_assignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContinuous_assignContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IContinuous_assignContext)
}

func (s *Non_port_program_itemContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Non_port_program_itemContext) Net_declaration() INet_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INet_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INet_declarationContext)
}

func (s *Non_port_program_itemContext) Data_declaration() IData_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_declarationContext)
}

func (s *Non_port_program_itemContext) Task_declaration() ITask_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITask_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITask_declarationContext)
}

func (s *Non_port_program_itemContext) Function_declaration() IFunction_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_declarationContext)
}

func (s *Non_port_program_itemContext) Checker_declaration() IChecker_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChecker_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChecker_declarationContext)
}

func (s *Non_port_program_itemContext) Dpi_import_export() IDpi_import_exportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDpi_import_exportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDpi_import_exportContext)
}

func (s *Non_port_program_itemContext) Extern_constraint_declaration() IExtern_constraint_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExtern_constraint_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExtern_constraint_declarationContext)
}

func (s *Non_port_program_itemContext) Class_declaration() IClass_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_declarationContext)
}

func (s *Non_port_program_itemContext) Interface_class_declaration() IInterface_class_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterface_class_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInterface_class_declarationContext)
}

func (s *Non_port_program_itemContext) Class_constructor_declaration() IClass_constructor_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_constructor_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_constructor_declarationContext)
}

func (s *Non_port_program_itemContext) Covergroup_declaration() ICovergroup_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICovergroup_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICovergroup_declarationContext)
}

func (s *Non_port_program_itemContext) Property_declaration() IProperty_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProperty_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProperty_declarationContext)
}

func (s *Non_port_program_itemContext) Sequence_declaration() ISequence_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISequence_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISequence_declarationContext)
}

func (s *Non_port_program_itemContext) Let_declaration() ILet_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILet_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILet_declarationContext)
}

func (s *Non_port_program_itemContext) Genvar_declaration() IGenvar_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenvar_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenvar_declarationContext)
}

func (s *Non_port_program_itemContext) Clocking_declaration() IClocking_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClocking_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClocking_declarationContext)
}

func (s *Non_port_program_itemContext) Initial_construct() IInitial_constructContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitial_constructContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitial_constructContext)
}

func (s *Non_port_program_itemContext) Final_construct() IFinal_constructContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFinal_constructContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFinal_constructContext)
}

func (s *Non_port_program_itemContext) Concurrent_assertion_item() IConcurrent_assertion_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConcurrent_assertion_itemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConcurrent_assertion_itemContext)
}

func (s *Non_port_program_itemContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Non_port_program_itemContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Non_port_program_itemContext) Default_clocking_or_dissable_construct() IDefault_clocking_or_dissable_constructContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefault_clocking_or_dissable_constructContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefault_clocking_or_dissable_constructContext)
}

func (s *Non_port_program_itemContext) Local_parameter_declaration() ILocal_parameter_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILocal_parameter_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILocal_parameter_declarationContext)
}

func (s *Non_port_program_itemContext) Parameter_declaration() IParameter_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameter_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameter_declarationContext)
}

func (s *Non_port_program_itemContext) Timeunits_declaration() ITimeunits_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITimeunits_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITimeunits_declarationContext)
}

func (s *Non_port_program_itemContext) Program_generate_item() IProgram_generate_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProgram_generate_itemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProgram_generate_itemContext)
}

func (s *Non_port_program_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Non_port_program_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Non_port_program_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterNon_port_program_item(s)
	}
}

func (s *Non_port_program_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitNon_port_program_item(s)
	}
}

func (p *SV2017Parser) Non_port_program_item() (localctx INon_port_program_itemContext) {
	localctx = NewNon_port_program_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 918, SV2017ParserRULE_non_port_program_item)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(6240)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_ASSERT, SV2017ParserKW_ASSIGN, SV2017ParserKW_ASSUME, SV2017ParserKW_AUTOMATIC, SV2017ParserKW_BIT, SV2017ParserKW_BYTE, SV2017ParserKW_CHANDLE, SV2017ParserKW_CHECKER, SV2017ParserKW_CLASS, SV2017ParserKW_CLOCKING, SV2017ParserKW_CONST, SV2017ParserKW_CONSTRAINT, SV2017ParserKW_COVER, SV2017ParserKW_COVERGROUP, SV2017ParserKW_DEFAULT, SV2017ParserKW_ENUM, SV2017ParserKW_EVENT, SV2017ParserKW_EXPORT, SV2017ParserKW_FINAL, SV2017ParserKW_FUNCTION, SV2017ParserKW_GENVAR, SV2017ParserKW_GLOBAL, SV2017ParserKW_IMPORT, SV2017ParserKW_INITIAL, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_INTERCONNECT, SV2017ParserKW_INTERFACE, SV2017ParserKW_LET, SV2017ParserKW_LOCAL, SV2017ParserKW_LOCALPARAM, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_NETTYPE, SV2017ParserKW_NONE, SV2017ParserKW_OPTION, SV2017ParserKW_PARAMETER, SV2017ParserKW_PROPERTY, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_RESTRICT, SV2017ParserKW_SAMPLE, SV2017ParserKW_SEQUENCE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_STATIC, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_SUPPLY0, SV2017ParserKW_SUPPLY1, SV2017ParserKW_TASK, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TRI, SV2017ParserKW_TRI0, SV2017ParserKW_TRI1, SV2017ParserKW_TRIAND, SV2017ParserKW_TRIOR, SV2017ParserKW_TRIREG, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_TYPEDEF, SV2017ParserKW_UNION, SV2017ParserKW_UNSIGNED, SV2017ParserKW_UWIRE, SV2017ParserKW_VAR, SV2017ParserKW_VIRTUAL, SV2017ParserKW_WAND, SV2017ParserKW_WIRE, SV2017ParserKW_WOR, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSEMI, SV2017ParserLPAREN, SV2017ParserLSQUARE_BR:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(6207)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 784, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(6204)
					p.Attribute_instance()
				}

			}
			p.SetState(6209)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 784, p.GetParserRuleContext())
		}
		p.SetState(6236)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 786, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(6210)
				p.Continuous_assign()
			}

		case 2:
			p.SetState(6214)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case SV2017ParserKW_DEFAULT:
				{
					p.SetState(6211)
					p.Default_clocking_or_dissable_construct()
				}

			case SV2017ParserKW_LOCALPARAM:
				{
					p.SetState(6212)
					p.Local_parameter_declaration()
				}

			case SV2017ParserKW_PARAMETER:
				{
					p.SetState(6213)
					p.Parameter_declaration()
				}

			case SV2017ParserSEMI:

			default:
			}
			{
				p.SetState(6216)
				p.Match(SV2017ParserSEMI)
			}

		case 3:
			{
				p.SetState(6217)
				p.Net_declaration()
			}

		case 4:
			{
				p.SetState(6218)
				p.Data_declaration()
			}

		case 5:
			{
				p.SetState(6219)
				p.Task_declaration()
			}

		case 6:
			{
				p.SetState(6220)
				p.Function_declaration()
			}

		case 7:
			{
				p.SetState(6221)
				p.Checker_declaration()
			}

		case 8:
			{
				p.SetState(6222)
				p.Dpi_import_export()
			}

		case 9:
			{
				p.SetState(6223)
				p.Extern_constraint_declaration()
			}

		case 10:
			{
				p.SetState(6224)
				p.Class_declaration()
			}

		case 11:
			{
				p.SetState(6225)
				p.Interface_class_declaration()
			}

		case 12:
			{
				p.SetState(6226)
				p.Class_constructor_declaration()
			}

		case 13:
			{
				p.SetState(6227)
				p.Covergroup_declaration()
			}

		case 14:
			{
				p.SetState(6228)
				p.Property_declaration()
			}

		case 15:
			{
				p.SetState(6229)
				p.Sequence_declaration()
			}

		case 16:
			{
				p.SetState(6230)
				p.Let_declaration()
			}

		case 17:
			{
				p.SetState(6231)
				p.Genvar_declaration()
			}

		case 18:
			{
				p.SetState(6232)
				p.Clocking_declaration()
			}

		case 19:
			{
				p.SetState(6233)
				p.Initial_construct()
			}

		case 20:
			{
				p.SetState(6234)
				p.Final_construct()
			}

		case 21:
			{
				p.SetState(6235)
				p.Concurrent_assertion_item()
			}

		}

	case SV2017ParserKW_TIMEPRECISION, SV2017ParserKW_TIMEUNIT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6238)
			p.Timeunits_declaration()
		}

	case SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_FATAL, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_WARNING, SV2017ParserKW_CASE, SV2017ParserKW_FOR, SV2017ParserKW_GENERATE, SV2017ParserKW_IF:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6239)
			p.Program_generate_item()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAnonymous_programContext is an interface to support dynamic dispatch.
type IAnonymous_programContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnonymous_programContext differentiates from other interfaces.
	IsAnonymous_programContext()
}

type Anonymous_programContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnonymous_programContext() *Anonymous_programContext {
	var p = new(Anonymous_programContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_anonymous_program
	return p
}

func (*Anonymous_programContext) IsAnonymous_programContext() {}

func NewAnonymous_programContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Anonymous_programContext {
	var p = new(Anonymous_programContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_anonymous_program

	return p
}

func (s *Anonymous_programContext) GetParser() antlr.Parser { return s.parser }

func (s *Anonymous_programContext) KW_PROGRAM() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_PROGRAM, 0)
}

func (s *Anonymous_programContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Anonymous_programContext) KW_ENDPROGRAM() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ENDPROGRAM, 0)
}

func (s *Anonymous_programContext) AllAnonymous_program_item() []IAnonymous_program_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAnonymous_program_itemContext)(nil)).Elem())
	var tst = make([]IAnonymous_program_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAnonymous_program_itemContext)
		}
	}

	return tst
}

func (s *Anonymous_programContext) Anonymous_program_item(i int) IAnonymous_program_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnonymous_program_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAnonymous_program_itemContext)
}

func (s *Anonymous_programContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Anonymous_programContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Anonymous_programContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterAnonymous_program(s)
	}
}

func (s *Anonymous_programContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitAnonymous_program(s)
	}
}

func (p *SV2017Parser) Anonymous_program() (localctx IAnonymous_programContext) {
	localctx = NewAnonymous_programContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 920, SV2017ParserRULE_anonymous_program)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6242)
		p.Match(SV2017ParserKW_PROGRAM)
	}
	{
		p.SetState(6243)
		p.Match(SV2017ParserSEMI)
	}
	p.SetState(6247)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserKW_CLASS || _la == SV2017ParserKW_COVERGROUP || _la == SV2017ParserKW_FUNCTION || _la == SV2017ParserKW_INTERFACE || _la == SV2017ParserKW_TASK || _la == SV2017ParserKW_VIRTUAL || _la == SV2017ParserSEMI {
		{
			p.SetState(6244)
			p.Anonymous_program_item()
		}

		p.SetState(6249)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(6250)
		p.Match(SV2017ParserKW_ENDPROGRAM)
	}

	return localctx
}

// IAnonymous_program_itemContext is an interface to support dynamic dispatch.
type IAnonymous_program_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnonymous_program_itemContext differentiates from other interfaces.
	IsAnonymous_program_itemContext()
}

type Anonymous_program_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnonymous_program_itemContext() *Anonymous_program_itemContext {
	var p = new(Anonymous_program_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_anonymous_program_item
	return p
}

func (*Anonymous_program_itemContext) IsAnonymous_program_itemContext() {}

func NewAnonymous_program_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Anonymous_program_itemContext {
	var p = new(Anonymous_program_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_anonymous_program_item

	return p
}

func (s *Anonymous_program_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Anonymous_program_itemContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Anonymous_program_itemContext) Task_declaration() ITask_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITask_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITask_declarationContext)
}

func (s *Anonymous_program_itemContext) Function_declaration() IFunction_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_declarationContext)
}

func (s *Anonymous_program_itemContext) Class_declaration() IClass_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_declarationContext)
}

func (s *Anonymous_program_itemContext) Interface_class_declaration() IInterface_class_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterface_class_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInterface_class_declarationContext)
}

func (s *Anonymous_program_itemContext) Covergroup_declaration() ICovergroup_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICovergroup_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICovergroup_declarationContext)
}

func (s *Anonymous_program_itemContext) Class_constructor_declaration() IClass_constructor_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_constructor_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_constructor_declarationContext)
}

func (s *Anonymous_program_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Anonymous_program_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Anonymous_program_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterAnonymous_program_item(s)
	}
}

func (s *Anonymous_program_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitAnonymous_program_item(s)
	}
}

func (p *SV2017Parser) Anonymous_program_item() (localctx IAnonymous_program_itemContext) {
	localctx = NewAnonymous_program_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 922, SV2017ParserRULE_anonymous_program_item)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6259)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 789, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6252)
			p.Match(SV2017ParserSEMI)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6253)
			p.Task_declaration()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6254)
			p.Function_declaration()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6255)
			p.Class_declaration()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(6256)
			p.Interface_class_declaration()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(6257)
			p.Covergroup_declaration()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(6258)
			p.Class_constructor_declaration()
		}

	}

	return localctx
}

// ISequence_declarationContext is an interface to support dynamic dispatch.
type ISequence_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSequence_declarationContext differentiates from other interfaces.
	IsSequence_declarationContext()
}

type Sequence_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySequence_declarationContext() *Sequence_declarationContext {
	var p = new(Sequence_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_sequence_declaration
	return p
}

func (*Sequence_declarationContext) IsSequence_declarationContext() {}

func NewSequence_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sequence_declarationContext {
	var p = new(Sequence_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_sequence_declaration

	return p
}

func (s *Sequence_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Sequence_declarationContext) KW_SEQUENCE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_SEQUENCE, 0)
}

func (s *Sequence_declarationContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Sequence_declarationContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Sequence_declarationContext) AllSEMI() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserSEMI)
}

func (s *Sequence_declarationContext) SEMI(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, i)
}

func (s *Sequence_declarationContext) Sequence_expr() ISequence_exprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISequence_exprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISequence_exprContext)
}

func (s *Sequence_declarationContext) KW_ENDSEQUENCE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ENDSEQUENCE, 0)
}

func (s *Sequence_declarationContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Sequence_declarationContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Sequence_declarationContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Sequence_declarationContext) AllAssertion_variable_declaration() []IAssertion_variable_declarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAssertion_variable_declarationContext)(nil)).Elem())
	var tst = make([]IAssertion_variable_declarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAssertion_variable_declarationContext)
		}
	}

	return tst
}

func (s *Sequence_declarationContext) Assertion_variable_declaration(i int) IAssertion_variable_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssertion_variable_declarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAssertion_variable_declarationContext)
}

func (s *Sequence_declarationContext) Sequence_port_list() ISequence_port_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISequence_port_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISequence_port_listContext)
}

func (s *Sequence_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sequence_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sequence_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterSequence_declaration(s)
	}
}

func (s *Sequence_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitSequence_declaration(s)
	}
}

func (p *SV2017Parser) Sequence_declaration() (localctx ISequence_declarationContext) {
	localctx = NewSequence_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 924, SV2017ParserRULE_sequence_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6261)
		p.Match(SV2017ParserKW_SEQUENCE)
	}
	{
		p.SetState(6262)
		p.Identifier()
	}
	p.SetState(6268)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserLPAREN {
		{
			p.SetState(6263)
			p.Match(SV2017ParserLPAREN)
		}
		p.SetState(6265)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_DOLAR_ROOT || (((_la-35)&-(0x1f+1)) == 0 && ((1<<uint((_la-35)))&((1<<(SV2017ParserKW_DOLAR_UNIT-35))|(1<<(SV2017ParserKW_BIT-35))|(1<<(SV2017ParserKW_BYTE-35))|(1<<(SV2017ParserKW_CHANDLE-35)))) != 0) || _la == SV2017ParserKW_ENUM || _la == SV2017ParserKW_EVENT || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-174)&-(0x1f+1)) == 0 && ((1<<uint((_la-174)))&((1<<(SV2017ParserKW_OPTION-174))|(1<<(SV2017ParserKW_RANDOMIZE-174))|(1<<(SV2017ParserKW_REAL-174))|(1<<(SV2017ParserKW_REALTIME-174))|(1<<(SV2017ParserKW_REG-174)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SEQUENCE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_STRUCT-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserKW_UNTYPED-260))|(1<<(SV2017ParserKW_VIRTUAL-260)))) != 0) || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299))|(1<<(SV2017ParserLPAREN-299))|(1<<(SV2017ParserLSQUARE_BR-299)))) != 0) {
			{
				p.SetState(6264)
				p.Sequence_port_list()
			}

		}
		{
			p.SetState(6267)
			p.Match(SV2017ParserRPAREN)
		}

	}
	{
		p.SetState(6270)
		p.Match(SV2017ParserSEMI)
	}
	p.SetState(6274)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 792, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(6271)
				p.Assertion_variable_declaration()
			}

		}
		p.SetState(6276)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 792, p.GetParserRuleContext())
	}
	{
		p.SetState(6277)
		p.sequence_expr(0)
	}
	p.SetState(6279)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserSEMI {
		{
			p.SetState(6278)
			p.Match(SV2017ParserSEMI)
		}

	}
	{
		p.SetState(6281)
		p.Match(SV2017ParserKW_ENDSEQUENCE)
	}
	p.SetState(6285)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserCOLON:
		{
			p.SetState(6282)
			p.Match(SV2017ParserCOLON)
		}
		{
			p.SetState(6283)
			p.Identifier()
		}

	case SV2017ParserEOF, SV2017ParserTICK_TIMESCALE, SV2017ParserTICK_DEFAULT_NETTYPE, SV2017ParserTICK_INCLUDE, SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_FATAL, SV2017ParserKW_DOLAR_FULLSKEW, SV2017ParserKW_DOLAR_HOLD, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_NOCHANGE, SV2017ParserKW_DOLAR_PERIOD, SV2017ParserKW_DOLAR_RECOVERY, SV2017ParserKW_DOLAR_RECREM, SV2017ParserKW_DOLAR_REMOVAL, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_SETUP, SV2017ParserKW_DOLAR_SETUPHOLD, SV2017ParserKW_DOLAR_SKEW, SV2017ParserKW_DOLAR_TIMESKEW, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_DOLAR_WARNING, SV2017ParserKW_DOLAR_WIDTH, SV2017ParserKW_ALIAS, SV2017ParserKW_ALWAYS, SV2017ParserKW_ALWAYS_COMB, SV2017ParserKW_ALWAYS_FF, SV2017ParserKW_ALWAYS_LATCH, SV2017ParserKW_AND, SV2017ParserKW_ASSERT, SV2017ParserKW_ASSIGN, SV2017ParserKW_ASSUME, SV2017ParserKW_AUTOMATIC, SV2017ParserKW_BEGIN, SV2017ParserKW_BIND, SV2017ParserKW_BIT, SV2017ParserKW_BUF, SV2017ParserKW_BUFIF0, SV2017ParserKW_BUFIF1, SV2017ParserKW_BYTE, SV2017ParserKW_CASE, SV2017ParserKW_CHANDLE, SV2017ParserKW_CHECKER, SV2017ParserKW_CLASS, SV2017ParserKW_CLOCKING, SV2017ParserKW_CMOS, SV2017ParserKW_CONFIG, SV2017ParserKW_CONST, SV2017ParserKW_CONSTRAINT, SV2017ParserKW_COVER, SV2017ParserKW_COVERGROUP, SV2017ParserKW_DEFAULT, SV2017ParserKW_DEFPARAM, SV2017ParserKW_ELSE, SV2017ParserKW_END, SV2017ParserKW_ENDCASE, SV2017ParserKW_ENDCHECKER, SV2017ParserKW_ENDCLOCKING, SV2017ParserKW_ENDGENERATE, SV2017ParserKW_ENDINTERFACE, SV2017ParserKW_ENDMODULE, SV2017ParserKW_ENDPACKAGE, SV2017ParserKW_ENDPROGRAM, SV2017ParserKW_ENUM, SV2017ParserKW_EVENT, SV2017ParserKW_EXPORT, SV2017ParserKW_EXTERN, SV2017ParserKW_FINAL, SV2017ParserKW_FOR, SV2017ParserKW_FUNCTION, SV2017ParserKW_GENERATE, SV2017ParserKW_GENVAR, SV2017ParserKW_GLOBAL, SV2017ParserKW_IF, SV2017ParserKW_IMPORT, SV2017ParserKW_INITIAL, SV2017ParserKW_INOUT, SV2017ParserKW_INPUT, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_INTERCONNECT, SV2017ParserKW_INTERFACE, SV2017ParserKW_LET, SV2017ParserKW_LOCAL, SV2017ParserKW_LOCALPARAM, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_MACROMODULE, SV2017ParserKW_MODPORT, SV2017ParserKW_MODULE, SV2017ParserKW_NAND, SV2017ParserKW_NETTYPE, SV2017ParserKW_NMOS, SV2017ParserKW_NOR, SV2017ParserKW_NONE, SV2017ParserKW_NOT, SV2017ParserKW_NOTIF0, SV2017ParserKW_NOTIF1, SV2017ParserKW_NULL, SV2017ParserKW_OPTION, SV2017ParserKW_OR, SV2017ParserKW_OUTPUT, SV2017ParserKW_PACKAGE, SV2017ParserKW_PARAMETER, SV2017ParserKW_PMOS, SV2017ParserKW_PRIMITIVE, SV2017ParserKW_PROGRAM, SV2017ParserKW_PROPERTY, SV2017ParserKW_PULLDOWN, SV2017ParserKW_PULLUP, SV2017ParserKW_RAND, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_RCMOS, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REF, SV2017ParserKW_REG, SV2017ParserKW_RESTRICT, SV2017ParserKW_RNMOS, SV2017ParserKW_RPMOS, SV2017ParserKW_RTRAN, SV2017ParserKW_RTRANIF0, SV2017ParserKW_RTRANIF1, SV2017ParserKW_SAMPLE, SV2017ParserKW_SEQUENCE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_SPECIFY, SV2017ParserKW_SPECPARAM, SV2017ParserKW_STATIC, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_SUPPLY0, SV2017ParserKW_SUPPLY1, SV2017ParserKW_TAGGED, SV2017ParserKW_TASK, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TIMEPRECISION, SV2017ParserKW_TIMEUNIT, SV2017ParserKW_TRAN, SV2017ParserKW_TRANIF0, SV2017ParserKW_TRANIF1, SV2017ParserKW_TRI, SV2017ParserKW_TRI0, SV2017ParserKW_TRI1, SV2017ParserKW_TRIAND, SV2017ParserKW_TRIOR, SV2017ParserKW_TRIREG, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_TYPEDEF, SV2017ParserKW_UNION, SV2017ParserKW_UNSIGNED, SV2017ParserKW_UWIRE, SV2017ParserKW_VAR, SV2017ParserKW_VIRTUAL, SV2017ParserKW_WAND, SV2017ParserKW_WIRE, SV2017ParserKW_WOR, SV2017ParserKW_XNOR, SV2017ParserKW_XOR, SV2017ParserTIME_LITERAL, SV2017ParserANY_BASED_NUMBER, SV2017ParserBASED_NUMBER_WITH_SIZE, SV2017ParserREAL_NUMBER_WITH_EXP, SV2017ParserFIXED_POINT_NUMBER, SV2017ParserUNSIGNED_NUMBER, SV2017ParserUNBASED_UNSIZED_LITERAL, SV2017ParserSTRING_LITERAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSYSTEM_TF_IDENTIFIER, SV2017ParserSEMI, SV2017ParserLPAREN, SV2017ParserLSQUARE_BR, SV2017ParserLBRACE, SV2017ParserAPOSTROPHE_LBRACE, SV2017ParserDOLAR, SV2017ParserNOT, SV2017ParserNEG, SV2017ParserNAND, SV2017ParserNOR, SV2017ParserXOR, SV2017ParserNXOR, SV2017ParserXORN, SV2017ParserDOT, SV2017ParserPLUS, SV2017ParserMINUS, SV2017ParserAMPERSAND, SV2017ParserBAR, SV2017ParserINCR, SV2017ParserDECR:

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISequence_port_listContext is an interface to support dynamic dispatch.
type ISequence_port_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSequence_port_listContext differentiates from other interfaces.
	IsSequence_port_listContext()
}

type Sequence_port_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySequence_port_listContext() *Sequence_port_listContext {
	var p = new(Sequence_port_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_sequence_port_list
	return p
}

func (*Sequence_port_listContext) IsSequence_port_listContext() {}

func NewSequence_port_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sequence_port_listContext {
	var p = new(Sequence_port_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_sequence_port_list

	return p
}

func (s *Sequence_port_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Sequence_port_listContext) AllSequence_port_item() []ISequence_port_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISequence_port_itemContext)(nil)).Elem())
	var tst = make([]ISequence_port_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISequence_port_itemContext)
		}
	}

	return tst
}

func (s *Sequence_port_listContext) Sequence_port_item(i int) ISequence_port_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISequence_port_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISequence_port_itemContext)
}

func (s *Sequence_port_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Sequence_port_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Sequence_port_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sequence_port_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sequence_port_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterSequence_port_list(s)
	}
}

func (s *Sequence_port_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitSequence_port_list(s)
	}
}

func (p *SV2017Parser) Sequence_port_list() (localctx ISequence_port_listContext) {
	localctx = NewSequence_port_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 926, SV2017ParserRULE_sequence_port_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6287)
		p.Sequence_port_item()
	}
	p.SetState(6292)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserCOMMA {
		{
			p.SetState(6288)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(6289)
			p.Sequence_port_item()
		}

		p.SetState(6294)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISequence_port_itemContext is an interface to support dynamic dispatch.
type ISequence_port_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSequence_port_itemContext differentiates from other interfaces.
	IsSequence_port_itemContext()
}

type Sequence_port_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySequence_port_itemContext() *Sequence_port_itemContext {
	var p = new(Sequence_port_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_sequence_port_item
	return p
}

func (*Sequence_port_itemContext) IsSequence_port_itemContext() {}

func NewSequence_port_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sequence_port_itemContext {
	var p = new(Sequence_port_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_sequence_port_item

	return p
}

func (s *Sequence_port_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Sequence_port_itemContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Sequence_port_itemContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Sequence_port_itemContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Sequence_port_itemContext) KW_LOCAL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_LOCAL, 0)
}

func (s *Sequence_port_itemContext) Sequence_formal_type() ISequence_formal_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISequence_formal_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISequence_formal_typeContext)
}

func (s *Sequence_port_itemContext) AllVariable_dimension() []IVariable_dimensionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariable_dimensionContext)(nil)).Elem())
	var tst = make([]IVariable_dimensionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariable_dimensionContext)
		}
	}

	return tst
}

func (s *Sequence_port_itemContext) Variable_dimension(i int) IVariable_dimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_dimensionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariable_dimensionContext)
}

func (s *Sequence_port_itemContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserASSIGN, 0)
}

func (s *Sequence_port_itemContext) Sequence_actual_arg() ISequence_actual_argContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISequence_actual_argContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISequence_actual_argContext)
}

func (s *Sequence_port_itemContext) Sequence_lvar_port_direction() ISequence_lvar_port_directionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISequence_lvar_port_directionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISequence_lvar_port_directionContext)
}

func (s *Sequence_port_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sequence_port_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sequence_port_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterSequence_port_item(s)
	}
}

func (s *Sequence_port_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitSequence_port_item(s)
	}
}

func (p *SV2017Parser) Sequence_port_item() (localctx ISequence_port_itemContext) {
	localctx = NewSequence_port_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 928, SV2017ParserRULE_sequence_port_item)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6298)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 796, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(6295)
				p.Attribute_instance()
			}

		}
		p.SetState(6300)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 796, p.GetParserRuleContext())
	}
	p.SetState(6305)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 798, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6301)
			p.Match(SV2017ParserKW_LOCAL)
		}
		p.SetState(6303)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_INOUT || _la == SV2017ParserKW_INPUT || _la == SV2017ParserKW_OUTPUT {
			{
				p.SetState(6302)
				p.Sequence_lvar_port_direction()
			}

		}

	}
	p.SetState(6308)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 799, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6307)
			p.Sequence_formal_type()
		}

	}
	{
		p.SetState(6310)
		p.Identifier()
	}
	p.SetState(6314)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserLSQUARE_BR {
		{
			p.SetState(6311)
			p.Variable_dimension()
		}

		p.SetState(6316)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(6319)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserASSIGN {
		{
			p.SetState(6317)
			p.Match(SV2017ParserASSIGN)
		}
		{
			p.SetState(6318)
			p.Sequence_actual_arg()
		}

	}

	return localctx
}

// IProperty_declarationContext is an interface to support dynamic dispatch.
type IProperty_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProperty_declarationContext differentiates from other interfaces.
	IsProperty_declarationContext()
}

type Property_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProperty_declarationContext() *Property_declarationContext {
	var p = new(Property_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_property_declaration
	return p
}

func (*Property_declarationContext) IsProperty_declarationContext() {}

func NewProperty_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Property_declarationContext {
	var p = new(Property_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_property_declaration

	return p
}

func (s *Property_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Property_declarationContext) KW_PROPERTY() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_PROPERTY, 0)
}

func (s *Property_declarationContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Property_declarationContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Property_declarationContext) AllSEMI() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserSEMI)
}

func (s *Property_declarationContext) SEMI(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, i)
}

func (s *Property_declarationContext) Property_spec() IProperty_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProperty_specContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProperty_specContext)
}

func (s *Property_declarationContext) KW_ENDPROPERTY() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ENDPROPERTY, 0)
}

func (s *Property_declarationContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Property_declarationContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Property_declarationContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Property_declarationContext) AllAssertion_variable_declaration() []IAssertion_variable_declarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAssertion_variable_declarationContext)(nil)).Elem())
	var tst = make([]IAssertion_variable_declarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAssertion_variable_declarationContext)
		}
	}

	return tst
}

func (s *Property_declarationContext) Assertion_variable_declaration(i int) IAssertion_variable_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssertion_variable_declarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAssertion_variable_declarationContext)
}

func (s *Property_declarationContext) Property_port_list() IProperty_port_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProperty_port_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProperty_port_listContext)
}

func (s *Property_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Property_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Property_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterProperty_declaration(s)
	}
}

func (s *Property_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitProperty_declaration(s)
	}
}

func (p *SV2017Parser) Property_declaration() (localctx IProperty_declarationContext) {
	localctx = NewProperty_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 930, SV2017ParserRULE_property_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6321)
		p.Match(SV2017ParserKW_PROPERTY)
	}
	{
		p.SetState(6322)
		p.Identifier()
	}
	p.SetState(6328)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserLPAREN {
		{
			p.SetState(6323)
			p.Match(SV2017ParserLPAREN)
		}
		p.SetState(6325)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_DOLAR_ROOT || (((_la-35)&-(0x1f+1)) == 0 && ((1<<uint((_la-35)))&((1<<(SV2017ParserKW_DOLAR_UNIT-35))|(1<<(SV2017ParserKW_BIT-35))|(1<<(SV2017ParserKW_BYTE-35))|(1<<(SV2017ParserKW_CHANDLE-35)))) != 0) || _la == SV2017ParserKW_ENUM || _la == SV2017ParserKW_EVENT || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-174)&-(0x1f+1)) == 0 && ((1<<uint((_la-174)))&((1<<(SV2017ParserKW_OPTION-174))|(1<<(SV2017ParserKW_PROPERTY-174))|(1<<(SV2017ParserKW_RANDOMIZE-174))|(1<<(SV2017ParserKW_REAL-174))|(1<<(SV2017ParserKW_REALTIME-174))|(1<<(SV2017ParserKW_REG-174)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SEQUENCE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_STRUCT-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserKW_UNTYPED-260))|(1<<(SV2017ParserKW_VIRTUAL-260)))) != 0) || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299))|(1<<(SV2017ParserLPAREN-299))|(1<<(SV2017ParserLSQUARE_BR-299)))) != 0) {
			{
				p.SetState(6324)
				p.Property_port_list()
			}

		}
		{
			p.SetState(6327)
			p.Match(SV2017ParserRPAREN)
		}

	}
	{
		p.SetState(6330)
		p.Match(SV2017ParserSEMI)
	}
	p.SetState(6334)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 804, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(6331)
				p.Assertion_variable_declaration()
			}

		}
		p.SetState(6336)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 804, p.GetParserRuleContext())
	}
	{
		p.SetState(6337)
		p.Property_spec()
	}
	p.SetState(6339)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserSEMI {
		{
			p.SetState(6338)
			p.Match(SV2017ParserSEMI)
		}

	}
	{
		p.SetState(6341)
		p.Match(SV2017ParserKW_ENDPROPERTY)
	}
	p.SetState(6345)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserCOLON:
		{
			p.SetState(6342)
			p.Match(SV2017ParserCOLON)
		}
		{
			p.SetState(6343)
			p.Identifier()
		}

	case SV2017ParserEOF, SV2017ParserTICK_TIMESCALE, SV2017ParserTICK_DEFAULT_NETTYPE, SV2017ParserTICK_INCLUDE, SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_FATAL, SV2017ParserKW_DOLAR_FULLSKEW, SV2017ParserKW_DOLAR_HOLD, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_NOCHANGE, SV2017ParserKW_DOLAR_PERIOD, SV2017ParserKW_DOLAR_RECOVERY, SV2017ParserKW_DOLAR_RECREM, SV2017ParserKW_DOLAR_REMOVAL, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_SETUP, SV2017ParserKW_DOLAR_SETUPHOLD, SV2017ParserKW_DOLAR_SKEW, SV2017ParserKW_DOLAR_TIMESKEW, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_DOLAR_WARNING, SV2017ParserKW_DOLAR_WIDTH, SV2017ParserKW_ALIAS, SV2017ParserKW_ALWAYS, SV2017ParserKW_ALWAYS_COMB, SV2017ParserKW_ALWAYS_FF, SV2017ParserKW_ALWAYS_LATCH, SV2017ParserKW_AND, SV2017ParserKW_ASSERT, SV2017ParserKW_ASSIGN, SV2017ParserKW_ASSUME, SV2017ParserKW_AUTOMATIC, SV2017ParserKW_BEGIN, SV2017ParserKW_BIND, SV2017ParserKW_BIT, SV2017ParserKW_BUF, SV2017ParserKW_BUFIF0, SV2017ParserKW_BUFIF1, SV2017ParserKW_BYTE, SV2017ParserKW_CASE, SV2017ParserKW_CHANDLE, SV2017ParserKW_CHECKER, SV2017ParserKW_CLASS, SV2017ParserKW_CLOCKING, SV2017ParserKW_CMOS, SV2017ParserKW_CONFIG, SV2017ParserKW_CONST, SV2017ParserKW_CONSTRAINT, SV2017ParserKW_COVER, SV2017ParserKW_COVERGROUP, SV2017ParserKW_DEFAULT, SV2017ParserKW_DEFPARAM, SV2017ParserKW_ELSE, SV2017ParserKW_END, SV2017ParserKW_ENDCASE, SV2017ParserKW_ENDCHECKER, SV2017ParserKW_ENDCLOCKING, SV2017ParserKW_ENDGENERATE, SV2017ParserKW_ENDINTERFACE, SV2017ParserKW_ENDMODULE, SV2017ParserKW_ENDPACKAGE, SV2017ParserKW_ENDPROGRAM, SV2017ParserKW_ENUM, SV2017ParserKW_EVENT, SV2017ParserKW_EXPORT, SV2017ParserKW_EXTERN, SV2017ParserKW_FINAL, SV2017ParserKW_FOR, SV2017ParserKW_FUNCTION, SV2017ParserKW_GENERATE, SV2017ParserKW_GENVAR, SV2017ParserKW_GLOBAL, SV2017ParserKW_IF, SV2017ParserKW_IMPORT, SV2017ParserKW_INITIAL, SV2017ParserKW_INOUT, SV2017ParserKW_INPUT, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_INTERCONNECT, SV2017ParserKW_INTERFACE, SV2017ParserKW_LET, SV2017ParserKW_LOCAL, SV2017ParserKW_LOCALPARAM, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_MACROMODULE, SV2017ParserKW_MODPORT, SV2017ParserKW_MODULE, SV2017ParserKW_NAND, SV2017ParserKW_NETTYPE, SV2017ParserKW_NMOS, SV2017ParserKW_NOR, SV2017ParserKW_NONE, SV2017ParserKW_NOT, SV2017ParserKW_NOTIF0, SV2017ParserKW_NOTIF1, SV2017ParserKW_NULL, SV2017ParserKW_OPTION, SV2017ParserKW_OR, SV2017ParserKW_OUTPUT, SV2017ParserKW_PACKAGE, SV2017ParserKW_PARAMETER, SV2017ParserKW_PMOS, SV2017ParserKW_PRIMITIVE, SV2017ParserKW_PROGRAM, SV2017ParserKW_PROPERTY, SV2017ParserKW_PULLDOWN, SV2017ParserKW_PULLUP, SV2017ParserKW_RAND, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_RCMOS, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REF, SV2017ParserKW_REG, SV2017ParserKW_RESTRICT, SV2017ParserKW_RNMOS, SV2017ParserKW_RPMOS, SV2017ParserKW_RTRAN, SV2017ParserKW_RTRANIF0, SV2017ParserKW_RTRANIF1, SV2017ParserKW_SAMPLE, SV2017ParserKW_SEQUENCE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_SPECIFY, SV2017ParserKW_SPECPARAM, SV2017ParserKW_STATIC, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_SUPPLY0, SV2017ParserKW_SUPPLY1, SV2017ParserKW_TAGGED, SV2017ParserKW_TASK, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TIMEPRECISION, SV2017ParserKW_TIMEUNIT, SV2017ParserKW_TRAN, SV2017ParserKW_TRANIF0, SV2017ParserKW_TRANIF1, SV2017ParserKW_TRI, SV2017ParserKW_TRI0, SV2017ParserKW_TRI1, SV2017ParserKW_TRIAND, SV2017ParserKW_TRIOR, SV2017ParserKW_TRIREG, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_TYPEDEF, SV2017ParserKW_UNION, SV2017ParserKW_UNSIGNED, SV2017ParserKW_UWIRE, SV2017ParserKW_VAR, SV2017ParserKW_VIRTUAL, SV2017ParserKW_WAND, SV2017ParserKW_WIRE, SV2017ParserKW_WOR, SV2017ParserKW_XNOR, SV2017ParserKW_XOR, SV2017ParserTIME_LITERAL, SV2017ParserANY_BASED_NUMBER, SV2017ParserBASED_NUMBER_WITH_SIZE, SV2017ParserREAL_NUMBER_WITH_EXP, SV2017ParserFIXED_POINT_NUMBER, SV2017ParserUNSIGNED_NUMBER, SV2017ParserUNBASED_UNSIZED_LITERAL, SV2017ParserSTRING_LITERAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSYSTEM_TF_IDENTIFIER, SV2017ParserSEMI, SV2017ParserLPAREN, SV2017ParserLSQUARE_BR, SV2017ParserLBRACE, SV2017ParserAPOSTROPHE_LBRACE, SV2017ParserDOLAR, SV2017ParserNOT, SV2017ParserNEG, SV2017ParserNAND, SV2017ParserNOR, SV2017ParserXOR, SV2017ParserNXOR, SV2017ParserXORN, SV2017ParserDOT, SV2017ParserPLUS, SV2017ParserMINUS, SV2017ParserAMPERSAND, SV2017ParserBAR, SV2017ParserINCR, SV2017ParserDECR:

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IProperty_port_listContext is an interface to support dynamic dispatch.
type IProperty_port_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProperty_port_listContext differentiates from other interfaces.
	IsProperty_port_listContext()
}

type Property_port_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProperty_port_listContext() *Property_port_listContext {
	var p = new(Property_port_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_property_port_list
	return p
}

func (*Property_port_listContext) IsProperty_port_listContext() {}

func NewProperty_port_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Property_port_listContext {
	var p = new(Property_port_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_property_port_list

	return p
}

func (s *Property_port_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Property_port_listContext) AllProperty_port_item() []IProperty_port_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProperty_port_itemContext)(nil)).Elem())
	var tst = make([]IProperty_port_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProperty_port_itemContext)
		}
	}

	return tst
}

func (s *Property_port_listContext) Property_port_item(i int) IProperty_port_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProperty_port_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProperty_port_itemContext)
}

func (s *Property_port_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Property_port_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Property_port_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Property_port_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Property_port_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterProperty_port_list(s)
	}
}

func (s *Property_port_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitProperty_port_list(s)
	}
}

func (p *SV2017Parser) Property_port_list() (localctx IProperty_port_listContext) {
	localctx = NewProperty_port_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 932, SV2017ParserRULE_property_port_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6347)
		p.Property_port_item()
	}
	p.SetState(6352)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserCOMMA {
		{
			p.SetState(6348)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(6349)
			p.Property_port_item()
		}

		p.SetState(6354)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IProperty_port_itemContext is an interface to support dynamic dispatch.
type IProperty_port_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProperty_port_itemContext differentiates from other interfaces.
	IsProperty_port_itemContext()
}

type Property_port_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProperty_port_itemContext() *Property_port_itemContext {
	var p = new(Property_port_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_property_port_item
	return p
}

func (*Property_port_itemContext) IsProperty_port_itemContext() {}

func NewProperty_port_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Property_port_itemContext {
	var p = new(Property_port_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_property_port_item

	return p
}

func (s *Property_port_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Property_port_itemContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Property_port_itemContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Property_port_itemContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Property_port_itemContext) KW_LOCAL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_LOCAL, 0)
}

func (s *Property_port_itemContext) Property_formal_type() IProperty_formal_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProperty_formal_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProperty_formal_typeContext)
}

func (s *Property_port_itemContext) AllVariable_dimension() []IVariable_dimensionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariable_dimensionContext)(nil)).Elem())
	var tst = make([]IVariable_dimensionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariable_dimensionContext)
		}
	}

	return tst
}

func (s *Property_port_itemContext) Variable_dimension(i int) IVariable_dimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_dimensionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariable_dimensionContext)
}

func (s *Property_port_itemContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserASSIGN, 0)
}

func (s *Property_port_itemContext) Property_actual_arg() IProperty_actual_argContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProperty_actual_argContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProperty_actual_argContext)
}

func (s *Property_port_itemContext) KW_INPUT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_INPUT, 0)
}

func (s *Property_port_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Property_port_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Property_port_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterProperty_port_item(s)
	}
}

func (s *Property_port_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitProperty_port_item(s)
	}
}

func (p *SV2017Parser) Property_port_item() (localctx IProperty_port_itemContext) {
	localctx = NewProperty_port_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 934, SV2017ParserRULE_property_port_item)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6358)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 808, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(6355)
				p.Attribute_instance()
			}

		}
		p.SetState(6360)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 808, p.GetParserRuleContext())
	}
	p.SetState(6365)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 810, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6361)
			p.Match(SV2017ParserKW_LOCAL)
		}
		p.SetState(6363)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_INPUT {
			{
				p.SetState(6362)
				p.Match(SV2017ParserKW_INPUT)
			}

		}

	}
	p.SetState(6368)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 811, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6367)
			p.Property_formal_type()
		}

	}
	{
		p.SetState(6370)
		p.Identifier()
	}
	p.SetState(6374)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserLSQUARE_BR {
		{
			p.SetState(6371)
			p.Variable_dimension()
		}

		p.SetState(6376)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(6379)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserASSIGN {
		{
			p.SetState(6377)
			p.Match(SV2017ParserASSIGN)
		}
		{
			p.SetState(6378)
			p.Property_actual_arg()
		}

	}

	return localctx
}

// IContinuous_assignContext is an interface to support dynamic dispatch.
type IContinuous_assignContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsContinuous_assignContext differentiates from other interfaces.
	IsContinuous_assignContext()
}

type Continuous_assignContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContinuous_assignContext() *Continuous_assignContext {
	var p = new(Continuous_assignContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_continuous_assign
	return p
}

func (*Continuous_assignContext) IsContinuous_assignContext() {}

func NewContinuous_assignContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Continuous_assignContext {
	var p = new(Continuous_assignContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_continuous_assign

	return p
}

func (s *Continuous_assignContext) GetParser() antlr.Parser { return s.parser }

func (s *Continuous_assignContext) KW_ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ASSIGN, 0)
}

func (s *Continuous_assignContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Continuous_assignContext) List_of_variable_assignments() IList_of_variable_assignmentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_variable_assignmentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_variable_assignmentsContext)
}

func (s *Continuous_assignContext) Delay_control() IDelay_controlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelay_controlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelay_controlContext)
}

func (s *Continuous_assignContext) Drive_strength() IDrive_strengthContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrive_strengthContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrive_strengthContext)
}

func (s *Continuous_assignContext) Delay3() IDelay3Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelay3Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelay3Context)
}

func (s *Continuous_assignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Continuous_assignContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Continuous_assignContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterContinuous_assign(s)
	}
}

func (s *Continuous_assignContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitContinuous_assign(s)
	}
}

func (p *SV2017Parser) Continuous_assign() (localctx IContinuous_assignContext) {
	localctx = NewContinuous_assignContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 936, SV2017ParserRULE_continuous_assign)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6381)
		p.Match(SV2017ParserKW_ASSIGN)
	}
	p.SetState(6392)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 816, p.GetParserRuleContext()) {
	case 1:
		p.SetState(6383)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserLPAREN {
			{
				p.SetState(6382)
				p.Drive_strength()
			}

		}
		p.SetState(6386)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserHASH {
			{
				p.SetState(6385)
				p.Delay3()
			}

		}
		{
			p.SetState(6388)
			p.List_of_variable_assignments()
		}

	case 2:
		{
			p.SetState(6389)
			p.Delay_control()
		}
		{
			p.SetState(6390)
			p.List_of_variable_assignments()
		}

	}
	{
		p.SetState(6394)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IChecker_or_generate_itemContext is an interface to support dynamic dispatch.
type IChecker_or_generate_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChecker_or_generate_itemContext differentiates from other interfaces.
	IsChecker_or_generate_itemContext()
}

type Checker_or_generate_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChecker_or_generate_itemContext() *Checker_or_generate_itemContext {
	var p = new(Checker_or_generate_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_checker_or_generate_item
	return p
}

func (*Checker_or_generate_itemContext) IsChecker_or_generate_itemContext() {}

func NewChecker_or_generate_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Checker_or_generate_itemContext {
	var p = new(Checker_or_generate_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_checker_or_generate_item

	return p
}

func (s *Checker_or_generate_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Checker_or_generate_itemContext) Data_declaration() IData_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_declarationContext)
}

func (s *Checker_or_generate_itemContext) KW_RAND() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_RAND, 0)
}

func (s *Checker_or_generate_itemContext) Function_declaration() IFunction_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_declarationContext)
}

func (s *Checker_or_generate_itemContext) Checker_declaration() IChecker_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChecker_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChecker_declarationContext)
}

func (s *Checker_or_generate_itemContext) Property_declaration() IProperty_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProperty_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProperty_declarationContext)
}

func (s *Checker_or_generate_itemContext) Sequence_declaration() ISequence_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISequence_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISequence_declarationContext)
}

func (s *Checker_or_generate_itemContext) Let_declaration() ILet_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILet_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILet_declarationContext)
}

func (s *Checker_or_generate_itemContext) Covergroup_declaration() ICovergroup_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICovergroup_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICovergroup_declarationContext)
}

func (s *Checker_or_generate_itemContext) Genvar_declaration() IGenvar_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenvar_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenvar_declarationContext)
}

func (s *Checker_or_generate_itemContext) Clocking_declaration() IClocking_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClocking_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClocking_declarationContext)
}

func (s *Checker_or_generate_itemContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Checker_or_generate_itemContext) Default_clocking_or_dissable_construct() IDefault_clocking_or_dissable_constructContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefault_clocking_or_dissable_constructContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefault_clocking_or_dissable_constructContext)
}

func (s *Checker_or_generate_itemContext) Initial_construct() IInitial_constructContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitial_constructContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitial_constructContext)
}

func (s *Checker_or_generate_itemContext) Always_construct() IAlways_constructContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlways_constructContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlways_constructContext)
}

func (s *Checker_or_generate_itemContext) Final_construct() IFinal_constructContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFinal_constructContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFinal_constructContext)
}

func (s *Checker_or_generate_itemContext) Assertion_item() IAssertion_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssertion_itemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssertion_itemContext)
}

func (s *Checker_or_generate_itemContext) Continuous_assign() IContinuous_assignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContinuous_assignContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IContinuous_assignContext)
}

func (s *Checker_or_generate_itemContext) Program_generate_item() IProgram_generate_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProgram_generate_itemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProgram_generate_itemContext)
}

func (s *Checker_or_generate_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Checker_or_generate_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Checker_or_generate_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterChecker_or_generate_item(s)
	}
}

func (s *Checker_or_generate_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitChecker_or_generate_item(s)
	}
}

func (p *SV2017Parser) Checker_or_generate_item() (localctx IChecker_or_generate_itemContext) {
	localctx = NewChecker_or_generate_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 938, SV2017ParserRULE_checker_or_generate_item)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6418)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 819, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(6397)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_RAND {
			{
				p.SetState(6396)
				p.Match(SV2017ParserKW_RAND)
			}

		}
		{
			p.SetState(6399)
			p.Data_declaration()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6400)
			p.Function_declaration()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6401)
			p.Checker_declaration()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6402)
			p.Property_declaration()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(6403)
			p.Sequence_declaration()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(6404)
			p.Let_declaration()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(6405)
			p.Covergroup_declaration()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(6406)
			p.Genvar_declaration()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(6407)
			p.Clocking_declaration()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		p.SetState(6409)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_DEFAULT {
			{
				p.SetState(6408)
				p.Default_clocking_or_dissable_construct()
			}

		}
		{
			p.SetState(6411)
			p.Match(SV2017ParserSEMI)
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(6412)
			p.Initial_construct()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(6413)
			p.Always_construct()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(6414)
			p.Final_construct()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(6415)
			p.Assertion_item()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(6416)
			p.Continuous_assign()
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(6417)
			p.Program_generate_item()
		}

	}

	return localctx
}

// IConstraint_prototypeContext is an interface to support dynamic dispatch.
type IConstraint_prototypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstraint_prototypeContext differentiates from other interfaces.
	IsConstraint_prototypeContext()
}

type Constraint_prototypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstraint_prototypeContext() *Constraint_prototypeContext {
	var p = new(Constraint_prototypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_constraint_prototype
	return p
}

func (*Constraint_prototypeContext) IsConstraint_prototypeContext() {}

func NewConstraint_prototypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Constraint_prototypeContext {
	var p = new(Constraint_prototypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_constraint_prototype

	return p
}

func (s *Constraint_prototypeContext) GetParser() antlr.Parser { return s.parser }

func (s *Constraint_prototypeContext) KW_CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_CONSTRAINT, 0)
}

func (s *Constraint_prototypeContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Constraint_prototypeContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Constraint_prototypeContext) Constraint_prototype_qualifier() IConstraint_prototype_qualifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstraint_prototype_qualifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstraint_prototype_qualifierContext)
}

func (s *Constraint_prototypeContext) KW_STATIC() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_STATIC, 0)
}

func (s *Constraint_prototypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Constraint_prototypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Constraint_prototypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterConstraint_prototype(s)
	}
}

func (s *Constraint_prototypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitConstraint_prototype(s)
	}
}

func (p *SV2017Parser) Constraint_prototype() (localctx IConstraint_prototypeContext) {
	localctx = NewConstraint_prototypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 940, SV2017ParserRULE_constraint_prototype)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6421)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_EXTERN || _la == SV2017ParserKW_PURE {
		{
			p.SetState(6420)
			p.Constraint_prototype_qualifier()
		}

	}
	p.SetState(6424)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_STATIC {
		{
			p.SetState(6423)
			p.Match(SV2017ParserKW_STATIC)
		}

	}
	{
		p.SetState(6426)
		p.Match(SV2017ParserKW_CONSTRAINT)
	}
	{
		p.SetState(6427)
		p.Identifier()
	}
	{
		p.SetState(6428)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IClass_constraintContext is an interface to support dynamic dispatch.
type IClass_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClass_constraintContext differentiates from other interfaces.
	IsClass_constraintContext()
}

type Class_constraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClass_constraintContext() *Class_constraintContext {
	var p = new(Class_constraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_class_constraint
	return p
}

func (*Class_constraintContext) IsClass_constraintContext() {}

func NewClass_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Class_constraintContext {
	var p = new(Class_constraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_class_constraint

	return p
}

func (s *Class_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Class_constraintContext) Constraint_prototype() IConstraint_prototypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstraint_prototypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstraint_prototypeContext)
}

func (s *Class_constraintContext) Constraint_declaration() IConstraint_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstraint_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstraint_declarationContext)
}

func (s *Class_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Class_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Class_constraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterClass_constraint(s)
	}
}

func (s *Class_constraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitClass_constraint(s)
	}
}

func (p *SV2017Parser) Class_constraint() (localctx IClass_constraintContext) {
	localctx = NewClass_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 942, SV2017ParserRULE_class_constraint)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6432)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 822, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6430)
			p.Constraint_prototype()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6431)
			p.Constraint_declaration()
		}

	}

	return localctx
}

// IConstraint_declarationContext is an interface to support dynamic dispatch.
type IConstraint_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstraint_declarationContext differentiates from other interfaces.
	IsConstraint_declarationContext()
}

type Constraint_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstraint_declarationContext() *Constraint_declarationContext {
	var p = new(Constraint_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_constraint_declaration
	return p
}

func (*Constraint_declarationContext) IsConstraint_declarationContext() {}

func NewConstraint_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Constraint_declarationContext {
	var p = new(Constraint_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_constraint_declaration

	return p
}

func (s *Constraint_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Constraint_declarationContext) KW_CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_CONSTRAINT, 0)
}

func (s *Constraint_declarationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Constraint_declarationContext) Constraint_block() IConstraint_blockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstraint_blockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstraint_blockContext)
}

func (s *Constraint_declarationContext) KW_STATIC() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_STATIC, 0)
}

func (s *Constraint_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Constraint_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Constraint_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterConstraint_declaration(s)
	}
}

func (s *Constraint_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitConstraint_declaration(s)
	}
}

func (p *SV2017Parser) Constraint_declaration() (localctx IConstraint_declarationContext) {
	localctx = NewConstraint_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 944, SV2017ParserRULE_constraint_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6435)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_STATIC {
		{
			p.SetState(6434)
			p.Match(SV2017ParserKW_STATIC)
		}

	}
	{
		p.SetState(6437)
		p.Match(SV2017ParserKW_CONSTRAINT)
	}
	{
		p.SetState(6438)
		p.Identifier()
	}
	{
		p.SetState(6439)
		p.Constraint_block()
	}

	return localctx
}

// IClass_constructor_declarationContext is an interface to support dynamic dispatch.
type IClass_constructor_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClass_constructor_declarationContext differentiates from other interfaces.
	IsClass_constructor_declarationContext()
}

type Class_constructor_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClass_constructor_declarationContext() *Class_constructor_declarationContext {
	var p = new(Class_constructor_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_class_constructor_declaration
	return p
}

func (*Class_constructor_declarationContext) IsClass_constructor_declarationContext() {}

func NewClass_constructor_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Class_constructor_declarationContext {
	var p = new(Class_constructor_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_class_constructor_declaration

	return p
}

func (s *Class_constructor_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Class_constructor_declarationContext) KW_FUNCTION() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_FUNCTION, 0)
}

func (s *Class_constructor_declarationContext) AllKW_NEW() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserKW_NEW)
}

func (s *Class_constructor_declarationContext) KW_NEW(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_NEW, i)
}

func (s *Class_constructor_declarationContext) AllSEMI() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserSEMI)
}

func (s *Class_constructor_declarationContext) SEMI(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, i)
}

func (s *Class_constructor_declarationContext) KW_ENDFUNCTION() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ENDFUNCTION, 0)
}

func (s *Class_constructor_declarationContext) Class_scope() IClass_scopeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_scopeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_scopeContext)
}

func (s *Class_constructor_declarationContext) AllLPAREN() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserLPAREN)
}

func (s *Class_constructor_declarationContext) LPAREN(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, i)
}

func (s *Class_constructor_declarationContext) Tf_port_list() ITf_port_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITf_port_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITf_port_listContext)
}

func (s *Class_constructor_declarationContext) AllRPAREN() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserRPAREN)
}

func (s *Class_constructor_declarationContext) RPAREN(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, i)
}

func (s *Class_constructor_declarationContext) AllBlock_item_declaration() []IBlock_item_declarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBlock_item_declarationContext)(nil)).Elem())
	var tst = make([]IBlock_item_declarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBlock_item_declarationContext)
		}
	}

	return tst
}

func (s *Class_constructor_declarationContext) Block_item_declaration(i int) IBlock_item_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlock_item_declarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBlock_item_declarationContext)
}

func (s *Class_constructor_declarationContext) KW_SUPER() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_SUPER, 0)
}

func (s *Class_constructor_declarationContext) DOT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOT, 0)
}

func (s *Class_constructor_declarationContext) AllStatement_or_null() []IStatement_or_nullContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatement_or_nullContext)(nil)).Elem())
	var tst = make([]IStatement_or_nullContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatement_or_nullContext)
		}
	}

	return tst
}

func (s *Class_constructor_declarationContext) Statement_or_null(i int) IStatement_or_nullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_or_nullContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatement_or_nullContext)
}

func (s *Class_constructor_declarationContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Class_constructor_declarationContext) List_of_arguments() IList_of_argumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_argumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_argumentsContext)
}

func (s *Class_constructor_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Class_constructor_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Class_constructor_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterClass_constructor_declaration(s)
	}
}

func (s *Class_constructor_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitClass_constructor_declaration(s)
	}
}

func (p *SV2017Parser) Class_constructor_declaration() (localctx IClass_constructor_declarationContext) {
	localctx = NewClass_constructor_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 946, SV2017ParserRULE_class_constructor_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6441)
		p.Match(SV2017ParserKW_FUNCTION)
	}
	p.SetState(6443)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_DOLAR_UNIT || _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
		{
			p.SetState(6442)
			p.Class_scope()
		}

	}
	{
		p.SetState(6445)
		p.Match(SV2017ParserKW_NEW)
	}
	p.SetState(6450)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserLPAREN {
		{
			p.SetState(6446)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(6447)
			p.Tf_port_list()
		}
		{
			p.SetState(6448)
			p.Match(SV2017ParserRPAREN)
		}

	}
	{
		p.SetState(6452)
		p.Match(SV2017ParserSEMI)
	}
	p.SetState(6456)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 826, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(6453)
				p.Block_item_declaration()
			}

		}
		p.SetState(6458)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 826, p.GetParserRuleContext())
	}
	p.SetState(6470)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 829, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6459)
			p.Match(SV2017ParserKW_SUPER)
		}
		{
			p.SetState(6460)
			p.Match(SV2017ParserDOT)
		}
		{
			p.SetState(6461)
			p.Match(SV2017ParserKW_NEW)
		}
		p.SetState(6467)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserLPAREN {
			{
				p.SetState(6462)
				p.Match(SV2017ParserLPAREN)
			}
			p.SetState(6464)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TAGGED-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserTIME_LITERAL-260)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(SV2017ParserANY_BASED_NUMBER-292))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-292))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-292))|(1<<(SV2017ParserFIXED_POINT_NUMBER-292))|(1<<(SV2017ParserUNSIGNED_NUMBER-292))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-292))|(1<<(SV2017ParserSTRING_LITERAL-292))|(1<<(SV2017ParserC_IDENTIFIER-292))|(1<<(SV2017ParserTICK_IDENTIFIER-292))|(1<<(SV2017ParserESCAPED_IDENTIFIER-292))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-292))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-292))|(1<<(SV2017ParserLPAREN-292))|(1<<(SV2017ParserLBRACE-292))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-292))|(1<<(SV2017ParserDOLAR-292))|(1<<(SV2017ParserNOT-292))|(1<<(SV2017ParserNEG-292))|(1<<(SV2017ParserNAND-292))|(1<<(SV2017ParserNOR-292)))) != 0) || (((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324))|(1<<(SV2017ParserCOMMA-324))|(1<<(SV2017ParserDOT-324))|(1<<(SV2017ParserPLUS-324)))) != 0) || (((_la-356)&-(0x1f+1)) == 0 && ((1<<uint((_la-356)))&((1<<(SV2017ParserMINUS-356))|(1<<(SV2017ParserAMPERSAND-356))|(1<<(SV2017ParserBAR-356))|(1<<(SV2017ParserINCR-356))|(1<<(SV2017ParserDECR-356)))) != 0) {
				{
					p.SetState(6463)
					p.List_of_arguments()
				}

			}
			{
				p.SetState(6466)
				p.Match(SV2017ParserRPAREN)
			}

		}
		{
			p.SetState(6469)
			p.Match(SV2017ParserSEMI)
		}

	}
	p.SetState(6475)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20))|(1<<(SV2017ParserKW_ASSERT-20))|(1<<(SV2017ParserKW_ASSIGN-20))|(1<<(SV2017ParserKW_ASSUME-20)))) != 0) || (((_la-52)&-(0x1f+1)) == 0 && ((1<<uint((_la-52)))&((1<<(SV2017ParserKW_BEGIN-52))|(1<<(SV2017ParserKW_BIT-52))|(1<<(SV2017ParserKW_BREAK-52))|(1<<(SV2017ParserKW_BYTE-52))|(1<<(SV2017ParserKW_CASE-52))|(1<<(SV2017ParserKW_CASEX-52))|(1<<(SV2017ParserKW_CASEZ-52))|(1<<(SV2017ParserKW_CONST-52))|(1<<(SV2017ParserKW_CONTINUE-52))|(1<<(SV2017ParserKW_COVER-52))|(1<<(SV2017ParserKW_DEASSIGN-52)))) != 0) || (((_la-84)&-(0x1f+1)) == 0 && ((1<<uint((_la-84)))&((1<<(SV2017ParserKW_DISABLE-84))|(1<<(SV2017ParserKW_DO-84))|(1<<(SV2017ParserKW_EXPECT-84)))) != 0) || (((_la-116)&-(0x1f+1)) == 0 && ((1<<uint((_la-116)))&((1<<(SV2017ParserKW_FOR-116))|(1<<(SV2017ParserKW_FORCE-116))|(1<<(SV2017ParserKW_FOREACH-116))|(1<<(SV2017ParserKW_FOREVER-116))|(1<<(SV2017ParserKW_FORK-116))|(1<<(SV2017ParserKW_IF-116))|(1<<(SV2017ParserKW_INT-116))|(1<<(SV2017ParserKW_INTEGER-116)))) != 0) || (((_la-152)&-(0x1f+1)) == 0 && ((1<<uint((_la-152)))&((1<<(SV2017ParserKW_LOCAL-152))|(1<<(SV2017ParserKW_LOGIC-152))|(1<<(SV2017ParserKW_LONGINT-152))|(1<<(SV2017ParserKW_NULL-152))|(1<<(SV2017ParserKW_OPTION-152))|(1<<(SV2017ParserKW_PRIORITY-152)))) != 0) || (((_la-196)&-(0x1f+1)) == 0 && ((1<<uint((_la-196)))&((1<<(SV2017ParserKW_RANDCASE-196))|(1<<(SV2017ParserKW_RANDOMIZE-196))|(1<<(SV2017ParserKW_RANDSEQUENCE-196))|(1<<(SV2017ParserKW_REAL-196))|(1<<(SV2017ParserKW_REALTIME-196))|(1<<(SV2017ParserKW_REG-196))|(1<<(SV2017ParserKW_RELEASE-196))|(1<<(SV2017ParserKW_REPEAT-196))|(1<<(SV2017ParserKW_RESTRICT-196))|(1<<(SV2017ParserKW_RETURN-196))|(1<<(SV2017ParserKW_SAMPLE-196))|(1<<(SV2017ParserKW_SHORTINT-196))|(1<<(SV2017ParserKW_SHORTREAL-196))|(1<<(SV2017ParserKW_SIGNED-196)))) != 0) || (((_la-232)&-(0x1f+1)) == 0 && ((1<<uint((_la-232)))&((1<<(SV2017ParserKW_STD-232))|(1<<(SV2017ParserKW_STRING-232))|(1<<(SV2017ParserKW_SUPER-232))|(1<<(SV2017ParserKW_THIS-232))|(1<<(SV2017ParserKW_TIME-232))|(1<<(SV2017ParserKW_TYPE-232))|(1<<(SV2017ParserKW_TYPE_OPTION-232)))) != 0) || (((_la-264)&-(0x1f+1)) == 0 && ((1<<uint((_la-264)))&((1<<(SV2017ParserKW_UNIQUE-264))|(1<<(SV2017ParserKW_UNIQUE0-264))|(1<<(SV2017ParserKW_UNSIGNED-264))|(1<<(SV2017ParserKW_VOID-264))|(1<<(SV2017ParserKW_WAIT-264))|(1<<(SV2017ParserKW_WAIT_ORDER-264))|(1<<(SV2017ParserKW_WHILE-264))|(1<<(SV2017ParserTIME_LITERAL-264))|(1<<(SV2017ParserANY_BASED_NUMBER-264))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-264))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-264))|(1<<(SV2017ParserFIXED_POINT_NUMBER-264)))) != 0) || (((_la-296)&-(0x1f+1)) == 0 && ((1<<uint((_la-296)))&((1<<(SV2017ParserUNSIGNED_NUMBER-296))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-296))|(1<<(SV2017ParserSTRING_LITERAL-296))|(1<<(SV2017ParserC_IDENTIFIER-296))|(1<<(SV2017ParserTICK_IDENTIFIER-296))|(1<<(SV2017ParserESCAPED_IDENTIFIER-296))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-296))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-296))|(1<<(SV2017ParserSEMI-296))|(1<<(SV2017ParserLPAREN-296))|(1<<(SV2017ParserLBRACE-296))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-296))|(1<<(SV2017ParserDOLAR-296)))) != 0) || (((_la-366)&-(0x1f+1)) == 0 && ((1<<uint((_la-366)))&((1<<(SV2017ParserARROW-366))|(1<<(SV2017ParserDOUBLE_RIGHT_ARROW-366))|(1<<(SV2017ParserINCR-366))|(1<<(SV2017ParserDECR-366))|(1<<(SV2017ParserAT-366))|(1<<(SV2017ParserHASH-366))|(1<<(SV2017ParserDOUBLE_HASH-366)))) != 0) {
		{
			p.SetState(6472)
			p.Statement_or_null()
		}

		p.SetState(6477)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(6478)
		p.Match(SV2017ParserKW_ENDFUNCTION)
	}
	p.SetState(6481)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserCOLON {
		{
			p.SetState(6479)
			p.Match(SV2017ParserCOLON)
		}
		{
			p.SetState(6480)
			p.Match(SV2017ParserKW_NEW)
		}

	}

	return localctx
}

// IClass_propertyContext is an interface to support dynamic dispatch.
type IClass_propertyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClass_propertyContext differentiates from other interfaces.
	IsClass_propertyContext()
}

type Class_propertyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClass_propertyContext() *Class_propertyContext {
	var p = new(Class_propertyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_class_property
	return p
}

func (*Class_propertyContext) IsClass_propertyContext() {}

func NewClass_propertyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Class_propertyContext {
	var p = new(Class_propertyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_class_property

	return p
}

func (s *Class_propertyContext) GetParser() antlr.Parser { return s.parser }

func (s *Class_propertyContext) KW_CONST() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_CONST, 0)
}

func (s *Class_propertyContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Class_propertyContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Class_propertyContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Class_propertyContext) AllClass_item_qualifier() []IClass_item_qualifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IClass_item_qualifierContext)(nil)).Elem())
	var tst = make([]IClass_item_qualifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IClass_item_qualifierContext)
		}
	}

	return tst
}

func (s *Class_propertyContext) Class_item_qualifier(i int) IClass_item_qualifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_item_qualifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IClass_item_qualifierContext)
}

func (s *Class_propertyContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserASSIGN, 0)
}

func (s *Class_propertyContext) Constant_expression() IConstant_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_expressionContext)
}

func (s *Class_propertyContext) Data_declaration() IData_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_declarationContext)
}

func (s *Class_propertyContext) AllProperty_qualifier() []IProperty_qualifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProperty_qualifierContext)(nil)).Elem())
	var tst = make([]IProperty_qualifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProperty_qualifierContext)
		}
	}

	return tst
}

func (s *Class_propertyContext) Property_qualifier(i int) IProperty_qualifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProperty_qualifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProperty_qualifierContext)
}

func (s *Class_propertyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Class_propertyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Class_propertyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterClass_property(s)
	}
}

func (s *Class_propertyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitClass_property(s)
	}
}

func (p *SV2017Parser) Class_property() (localctx IClass_propertyContext) {
	localctx = NewClass_propertyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 948, SV2017ParserRULE_class_property)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(6505)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 835, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6483)
			p.Match(SV2017ParserKW_CONST)
		}
		p.SetState(6487)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 832, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(6484)
					p.Class_item_qualifier()
				}

			}
			p.SetState(6489)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 832, p.GetParserRuleContext())
		}
		{
			p.SetState(6490)
			p.Data_type()
		}
		{
			p.SetState(6491)
			p.Identifier()
		}
		p.SetState(6494)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserASSIGN {
			{
				p.SetState(6492)
				p.Match(SV2017ParserASSIGN)
			}
			{
				p.SetState(6493)
				p.Constant_expression()
			}

		}
		{
			p.SetState(6496)
			p.Match(SV2017ParserSEMI)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(6501)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 834, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(6498)
					p.Property_qualifier()
				}

			}
			p.SetState(6503)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 834, p.GetParserRuleContext())
		}
		{
			p.SetState(6504)
			p.Data_declaration()
		}

	}

	return localctx
}

// IClass_methodContext is an interface to support dynamic dispatch.
type IClass_methodContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClass_methodContext differentiates from other interfaces.
	IsClass_methodContext()
}

type Class_methodContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClass_methodContext() *Class_methodContext {
	var p = new(Class_methodContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_class_method
	return p
}

func (*Class_methodContext) IsClass_methodContext() {}

func NewClass_methodContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Class_methodContext {
	var p = new(Class_methodContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_class_method

	return p
}

func (s *Class_methodContext) GetParser() antlr.Parser { return s.parser }

func (s *Class_methodContext) KW_PURE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_PURE, 0)
}

func (s *Class_methodContext) KW_VIRTUAL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_VIRTUAL, 0)
}

func (s *Class_methodContext) Method_prototype() IMethod_prototypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMethod_prototypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMethod_prototypeContext)
}

func (s *Class_methodContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Class_methodContext) AllClass_item_qualifier() []IClass_item_qualifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IClass_item_qualifierContext)(nil)).Elem())
	var tst = make([]IClass_item_qualifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IClass_item_qualifierContext)
		}
	}

	return tst
}

func (s *Class_methodContext) Class_item_qualifier(i int) IClass_item_qualifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_item_qualifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IClass_item_qualifierContext)
}

func (s *Class_methodContext) KW_EXTERN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_EXTERN, 0)
}

func (s *Class_methodContext) Class_constructor_prototype() IClass_constructor_prototypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_constructor_prototypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_constructor_prototypeContext)
}

func (s *Class_methodContext) AllMethod_qualifier() []IMethod_qualifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMethod_qualifierContext)(nil)).Elem())
	var tst = make([]IMethod_qualifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMethod_qualifierContext)
		}
	}

	return tst
}

func (s *Class_methodContext) Method_qualifier(i int) IMethod_qualifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMethod_qualifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMethod_qualifierContext)
}

func (s *Class_methodContext) Task_declaration() ITask_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITask_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITask_declarationContext)
}

func (s *Class_methodContext) Function_declaration() IFunction_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_declarationContext)
}

func (s *Class_methodContext) Class_constructor_declaration() IClass_constructor_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_constructor_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_constructor_declarationContext)
}

func (s *Class_methodContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Class_methodContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Class_methodContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterClass_method(s)
	}
}

func (s *Class_methodContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitClass_method(s)
	}
}

func (p *SV2017Parser) Class_method() (localctx IClass_methodContext) {
	localctx = NewClass_methodContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 950, SV2017ParserRULE_class_method)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6542)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 841, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6507)
			p.Match(SV2017ParserKW_PURE)
		}
		{
			p.SetState(6508)
			p.Match(SV2017ParserKW_VIRTUAL)
		}
		p.SetState(6512)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserKW_LOCAL || _la == SV2017ParserKW_PROTECTED || _la == SV2017ParserKW_STATIC {
			{
				p.SetState(6509)
				p.Class_item_qualifier()
			}

			p.SetState(6514)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6515)
			p.Method_prototype()
		}
		{
			p.SetState(6516)
			p.Match(SV2017ParserSEMI)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6518)
			p.Match(SV2017ParserKW_EXTERN)
		}
		p.SetState(6522)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserKW_LOCAL || _la == SV2017ParserKW_PROTECTED || _la == SV2017ParserKW_PURE || _la == SV2017ParserKW_STATIC || _la == SV2017ParserKW_VIRTUAL {
			{
				p.SetState(6519)
				p.Method_qualifier()
			}

			p.SetState(6524)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(6529)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 838, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(6525)
				p.Method_prototype()
			}
			{
				p.SetState(6526)
				p.Match(SV2017ParserSEMI)
			}

		case 2:
			{
				p.SetState(6528)
				p.Class_constructor_prototype()
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(6534)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserKW_LOCAL || _la == SV2017ParserKW_PROTECTED || _la == SV2017ParserKW_PURE || _la == SV2017ParserKW_STATIC || _la == SV2017ParserKW_VIRTUAL {
			{
				p.SetState(6531)
				p.Method_qualifier()
			}

			p.SetState(6536)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(6540)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 840, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(6537)
				p.Task_declaration()
			}

		case 2:
			{
				p.SetState(6538)
				p.Function_declaration()
			}

		case 3:
			{
				p.SetState(6539)
				p.Class_constructor_declaration()
			}

		}

	}

	return localctx
}

// IClass_constructor_prototypeContext is an interface to support dynamic dispatch.
type IClass_constructor_prototypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClass_constructor_prototypeContext differentiates from other interfaces.
	IsClass_constructor_prototypeContext()
}

type Class_constructor_prototypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClass_constructor_prototypeContext() *Class_constructor_prototypeContext {
	var p = new(Class_constructor_prototypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_class_constructor_prototype
	return p
}

func (*Class_constructor_prototypeContext) IsClass_constructor_prototypeContext() {}

func NewClass_constructor_prototypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Class_constructor_prototypeContext {
	var p = new(Class_constructor_prototypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_class_constructor_prototype

	return p
}

func (s *Class_constructor_prototypeContext) GetParser() antlr.Parser { return s.parser }

func (s *Class_constructor_prototypeContext) KW_FUNCTION() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_FUNCTION, 0)
}

func (s *Class_constructor_prototypeContext) KW_NEW() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_NEW, 0)
}

func (s *Class_constructor_prototypeContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Class_constructor_prototypeContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Class_constructor_prototypeContext) Tf_port_list() ITf_port_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITf_port_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITf_port_listContext)
}

func (s *Class_constructor_prototypeContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Class_constructor_prototypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Class_constructor_prototypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Class_constructor_prototypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterClass_constructor_prototype(s)
	}
}

func (s *Class_constructor_prototypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitClass_constructor_prototype(s)
	}
}

func (p *SV2017Parser) Class_constructor_prototype() (localctx IClass_constructor_prototypeContext) {
	localctx = NewClass_constructor_prototypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 952, SV2017ParserRULE_class_constructor_prototype)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6544)
		p.Match(SV2017ParserKW_FUNCTION)
	}
	{
		p.SetState(6545)
		p.Match(SV2017ParserKW_NEW)
	}
	p.SetState(6550)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserLPAREN {
		{
			p.SetState(6546)
			p.Match(SV2017ParserLPAREN)
		}
		{
			p.SetState(6547)
			p.Tf_port_list()
		}
		{
			p.SetState(6548)
			p.Match(SV2017ParserRPAREN)
		}

	}
	{
		p.SetState(6552)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IClass_itemContext is an interface to support dynamic dispatch.
type IClass_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClass_itemContext differentiates from other interfaces.
	IsClass_itemContext()
}

type Class_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClass_itemContext() *Class_itemContext {
	var p = new(Class_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_class_item
	return p
}

func (*Class_itemContext) IsClass_itemContext() {}

func NewClass_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Class_itemContext {
	var p = new(Class_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_class_item

	return p
}

func (s *Class_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Class_itemContext) Class_property() IClass_propertyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_propertyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_propertyContext)
}

func (s *Class_itemContext) Class_method() IClass_methodContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_methodContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_methodContext)
}

func (s *Class_itemContext) Class_constraint() IClass_constraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_constraintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_constraintContext)
}

func (s *Class_itemContext) Class_declaration() IClass_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_declarationContext)
}

func (s *Class_itemContext) Covergroup_declaration() ICovergroup_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICovergroup_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICovergroup_declarationContext)
}

func (s *Class_itemContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Class_itemContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Class_itemContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Class_itemContext) Local_parameter_declaration() ILocal_parameter_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILocal_parameter_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILocal_parameter_declarationContext)
}

func (s *Class_itemContext) Parameter_declaration() IParameter_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameter_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameter_declarationContext)
}

func (s *Class_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Class_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Class_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterClass_item(s)
	}
}

func (s *Class_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitClass_item(s)
	}
}

func (p *SV2017Parser) Class_item() (localctx IClass_itemContext) {
	localctx = NewClass_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 954, SV2017ParserRULE_class_item)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(6572)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_AUTOMATIC, SV2017ParserKW_BIT, SV2017ParserKW_BYTE, SV2017ParserKW_CHANDLE, SV2017ParserKW_CLASS, SV2017ParserKW_CONST, SV2017ParserKW_CONSTRAINT, SV2017ParserKW_COVERGROUP, SV2017ParserKW_ENUM, SV2017ParserKW_EVENT, SV2017ParserKW_EXTERN, SV2017ParserKW_FUNCTION, SV2017ParserKW_IMPORT, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LOCAL, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_NETTYPE, SV2017ParserKW_OPTION, SV2017ParserKW_PROTECTED, SV2017ParserKW_PURE, SV2017ParserKW_RAND, SV2017ParserKW_RANDC, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_SAMPLE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_STATIC, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_TASK, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_TYPEDEF, SV2017ParserKW_UNION, SV2017ParserKW_UNSIGNED, SV2017ParserKW_VAR, SV2017ParserKW_VIRTUAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserLPAREN, SV2017ParserLSQUARE_BR:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(6557)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 843, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(6554)
					p.Attribute_instance()
				}

			}
			p.SetState(6559)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 843, p.GetParserRuleContext())
		}
		p.SetState(6565)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 844, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(6560)
				p.Class_property()
			}

		case 2:
			{
				p.SetState(6561)
				p.Class_method()
			}

		case 3:
			{
				p.SetState(6562)
				p.Class_constraint()
			}

		case 4:
			{
				p.SetState(6563)
				p.Class_declaration()
			}

		case 5:
			{
				p.SetState(6564)
				p.Covergroup_declaration()
			}

		}

	case SV2017ParserKW_LOCALPARAM, SV2017ParserKW_PARAMETER, SV2017ParserSEMI:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(6569)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SV2017ParserKW_LOCALPARAM:
			{
				p.SetState(6567)
				p.Local_parameter_declaration()
			}

		case SV2017ParserKW_PARAMETER:
			{
				p.SetState(6568)
				p.Parameter_declaration()
			}

		case SV2017ParserSEMI:

		default:
		}
		{
			p.SetState(6571)
			p.Match(SV2017ParserSEMI)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IParameter_overrideContext is an interface to support dynamic dispatch.
type IParameter_overrideContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameter_overrideContext differentiates from other interfaces.
	IsParameter_overrideContext()
}

type Parameter_overrideContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameter_overrideContext() *Parameter_overrideContext {
	var p = new(Parameter_overrideContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_parameter_override
	return p
}

func (*Parameter_overrideContext) IsParameter_overrideContext() {}

func NewParameter_overrideContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Parameter_overrideContext {
	var p = new(Parameter_overrideContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_parameter_override

	return p
}

func (s *Parameter_overrideContext) GetParser() antlr.Parser { return s.parser }

func (s *Parameter_overrideContext) KW_DEFPARAM() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DEFPARAM, 0)
}

func (s *Parameter_overrideContext) List_of_defparam_assignments() IList_of_defparam_assignmentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_defparam_assignmentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_defparam_assignmentsContext)
}

func (s *Parameter_overrideContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Parameter_overrideContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Parameter_overrideContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Parameter_overrideContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterParameter_override(s)
	}
}

func (s *Parameter_overrideContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitParameter_override(s)
	}
}

func (p *SV2017Parser) Parameter_override() (localctx IParameter_overrideContext) {
	localctx = NewParameter_overrideContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 956, SV2017ParserRULE_parameter_override)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6574)
		p.Match(SV2017ParserKW_DEFPARAM)
	}
	{
		p.SetState(6575)
		p.List_of_defparam_assignments()
	}
	{
		p.SetState(6576)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IGate_instantiationContext is an interface to support dynamic dispatch.
type IGate_instantiationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGate_instantiationContext differentiates from other interfaces.
	IsGate_instantiationContext()
}

type Gate_instantiationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGate_instantiationContext() *Gate_instantiationContext {
	var p = new(Gate_instantiationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_gate_instantiation
	return p
}

func (*Gate_instantiationContext) IsGate_instantiationContext() {}

func NewGate_instantiationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Gate_instantiationContext {
	var p = new(Gate_instantiationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_gate_instantiation

	return p
}

func (s *Gate_instantiationContext) GetParser() antlr.Parser { return s.parser }

func (s *Gate_instantiationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Gate_instantiationContext) AllPull_gate_instance() []IPull_gate_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPull_gate_instanceContext)(nil)).Elem())
	var tst = make([]IPull_gate_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPull_gate_instanceContext)
		}
	}

	return tst
}

func (s *Gate_instantiationContext) Pull_gate_instance(i int) IPull_gate_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPull_gate_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPull_gate_instanceContext)
}

func (s *Gate_instantiationContext) AllEnable_gate_or_mos_switch_or_cmos_switch_instance() []IEnable_gate_or_mos_switch_or_cmos_switch_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEnable_gate_or_mos_switch_or_cmos_switch_instanceContext)(nil)).Elem())
	var tst = make([]IEnable_gate_or_mos_switch_or_cmos_switch_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEnable_gate_or_mos_switch_or_cmos_switch_instanceContext)
		}
	}

	return tst
}

func (s *Gate_instantiationContext) Enable_gate_or_mos_switch_or_cmos_switch_instance(i int) IEnable_gate_or_mos_switch_or_cmos_switch_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnable_gate_or_mos_switch_or_cmos_switch_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEnable_gate_or_mos_switch_or_cmos_switch_instanceContext)
}

func (s *Gate_instantiationContext) Enable_gatetype() IEnable_gatetypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnable_gatetypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnable_gatetypeContext)
}

func (s *Gate_instantiationContext) N_input_gatetype() IN_input_gatetypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IN_input_gatetypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IN_input_gatetypeContext)
}

func (s *Gate_instantiationContext) AllN_input_gate_instance() []IN_input_gate_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IN_input_gate_instanceContext)(nil)).Elem())
	var tst = make([]IN_input_gate_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IN_input_gate_instanceContext)
		}
	}

	return tst
}

func (s *Gate_instantiationContext) N_input_gate_instance(i int) IN_input_gate_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IN_input_gate_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IN_input_gate_instanceContext)
}

func (s *Gate_instantiationContext) N_output_gatetype() IN_output_gatetypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IN_output_gatetypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IN_output_gatetypeContext)
}

func (s *Gate_instantiationContext) AllN_output_gate_instance() []IN_output_gate_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IN_output_gate_instanceContext)(nil)).Elem())
	var tst = make([]IN_output_gate_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IN_output_gate_instanceContext)
		}
	}

	return tst
}

func (s *Gate_instantiationContext) N_output_gate_instance(i int) IN_output_gate_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IN_output_gate_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IN_output_gate_instanceContext)
}

func (s *Gate_instantiationContext) Pass_en_switchtype() IPass_en_switchtypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPass_en_switchtypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPass_en_switchtypeContext)
}

func (s *Gate_instantiationContext) AllPass_enable_switch_instance() []IPass_enable_switch_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPass_enable_switch_instanceContext)(nil)).Elem())
	var tst = make([]IPass_enable_switch_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPass_enable_switch_instanceContext)
		}
	}

	return tst
}

func (s *Gate_instantiationContext) Pass_enable_switch_instance(i int) IPass_enable_switch_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPass_enable_switch_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPass_enable_switch_instanceContext)
}

func (s *Gate_instantiationContext) Pass_switchtype() IPass_switchtypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPass_switchtypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPass_switchtypeContext)
}

func (s *Gate_instantiationContext) AllPass_switch_instance() []IPass_switch_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPass_switch_instanceContext)(nil)).Elem())
	var tst = make([]IPass_switch_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPass_switch_instanceContext)
		}
	}

	return tst
}

func (s *Gate_instantiationContext) Pass_switch_instance(i int) IPass_switch_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPass_switch_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPass_switch_instanceContext)
}

func (s *Gate_instantiationContext) KW_PULLDOWN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_PULLDOWN, 0)
}

func (s *Gate_instantiationContext) KW_PULLUP() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_PULLUP, 0)
}

func (s *Gate_instantiationContext) Cmos_switchtype() ICmos_switchtypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICmos_switchtypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICmos_switchtypeContext)
}

func (s *Gate_instantiationContext) Mos_switchtype() IMos_switchtypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMos_switchtypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMos_switchtypeContext)
}

func (s *Gate_instantiationContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Gate_instantiationContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Gate_instantiationContext) Delay3() IDelay3Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelay3Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelay3Context)
}

func (s *Gate_instantiationContext) Drive_strength() IDrive_strengthContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrive_strengthContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrive_strengthContext)
}

func (s *Gate_instantiationContext) Delay2() IDelay2Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelay2Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelay2Context)
}

func (s *Gate_instantiationContext) Pulldown_strength() IPulldown_strengthContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPulldown_strengthContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPulldown_strengthContext)
}

func (s *Gate_instantiationContext) Pullup_strength() IPullup_strengthContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPullup_strengthContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPullup_strengthContext)
}

func (s *Gate_instantiationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Gate_instantiationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Gate_instantiationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterGate_instantiation(s)
	}
}

func (s *Gate_instantiationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitGate_instantiation(s)
	}
}

func (p *SV2017Parser) Gate_instantiation() (localctx IGate_instantiationContext) {
	localctx = NewGate_instantiationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 958, SV2017ParserRULE_gate_instantiation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6677)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_PULLDOWN, SV2017ParserKW_PULLUP:
		p.SetState(6586)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SV2017ParserKW_PULLDOWN:
			{
				p.SetState(6578)
				p.Match(SV2017ParserKW_PULLDOWN)
			}
			p.SetState(6580)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 847, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(6579)
					p.Pulldown_strength()
				}

			}

		case SV2017ParserKW_PULLUP:
			{
				p.SetState(6582)
				p.Match(SV2017ParserKW_PULLUP)
			}
			p.SetState(6584)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 848, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(6583)
					p.Pullup_strength()
				}

			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(6588)
			p.Pull_gate_instance()
		}
		p.SetState(6593)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserCOMMA {
			{
				p.SetState(6589)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(6590)
				p.Pull_gate_instance()
			}

			p.SetState(6595)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case SV2017ParserKW_CMOS, SV2017ParserKW_NMOS, SV2017ParserKW_PMOS, SV2017ParserKW_RCMOS, SV2017ParserKW_RNMOS, SV2017ParserKW_RPMOS:
		p.SetState(6598)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SV2017ParserKW_CMOS, SV2017ParserKW_RCMOS:
			{
				p.SetState(6596)
				p.Cmos_switchtype()
			}

		case SV2017ParserKW_NMOS, SV2017ParserKW_PMOS, SV2017ParserKW_RNMOS, SV2017ParserKW_RPMOS:
			{
				p.SetState(6597)
				p.Mos_switchtype()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(6601)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserHASH {
			{
				p.SetState(6600)
				p.Delay3()
			}

		}
		{
			p.SetState(6603)
			p.Enable_gate_or_mos_switch_or_cmos_switch_instance()
		}
		p.SetState(6608)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserCOMMA {
			{
				p.SetState(6604)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(6605)
				p.Enable_gate_or_mos_switch_or_cmos_switch_instance()
			}

			p.SetState(6610)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case SV2017ParserKW_BUFIF0, SV2017ParserKW_BUFIF1, SV2017ParserKW_NOTIF0, SV2017ParserKW_NOTIF1:
		{
			p.SetState(6611)
			p.Enable_gatetype()
		}
		p.SetState(6613)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 854, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6612)
				p.Drive_strength()
			}

		}
		p.SetState(6616)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserHASH {
			{
				p.SetState(6615)
				p.Delay3()
			}

		}
		{
			p.SetState(6618)
			p.Enable_gate_or_mos_switch_or_cmos_switch_instance()
		}
		p.SetState(6623)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserCOMMA {
			{
				p.SetState(6619)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(6620)
				p.Enable_gate_or_mos_switch_or_cmos_switch_instance()
			}

			p.SetState(6625)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case SV2017ParserKW_AND, SV2017ParserKW_NAND, SV2017ParserKW_NOR, SV2017ParserKW_OR, SV2017ParserKW_XNOR, SV2017ParserKW_XOR:
		{
			p.SetState(6626)
			p.N_input_gatetype()
		}
		p.SetState(6628)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 857, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6627)
				p.Drive_strength()
			}

		}
		p.SetState(6631)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserHASH {
			{
				p.SetState(6630)
				p.Delay2()
			}

		}
		{
			p.SetState(6633)
			p.N_input_gate_instance()
		}
		p.SetState(6638)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserCOMMA {
			{
				p.SetState(6634)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(6635)
				p.N_input_gate_instance()
			}

			p.SetState(6640)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case SV2017ParserKW_BUF, SV2017ParserKW_NOT:
		{
			p.SetState(6641)
			p.N_output_gatetype()
		}
		p.SetState(6643)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 860, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6642)
				p.Drive_strength()
			}

		}
		p.SetState(6646)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserHASH {
			{
				p.SetState(6645)
				p.Delay2()
			}

		}
		{
			p.SetState(6648)
			p.N_output_gate_instance()
		}
		p.SetState(6653)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserCOMMA {
			{
				p.SetState(6649)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(6650)
				p.N_output_gate_instance()
			}

			p.SetState(6655)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case SV2017ParserKW_RTRANIF0, SV2017ParserKW_RTRANIF1, SV2017ParserKW_TRANIF0, SV2017ParserKW_TRANIF1:
		{
			p.SetState(6656)
			p.Pass_en_switchtype()
		}
		p.SetState(6658)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserHASH {
			{
				p.SetState(6657)
				p.Delay2()
			}

		}
		{
			p.SetState(6660)
			p.Pass_enable_switch_instance()
		}
		p.SetState(6665)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserCOMMA {
			{
				p.SetState(6661)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(6662)
				p.Pass_enable_switch_instance()
			}

			p.SetState(6667)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case SV2017ParserKW_RTRAN, SV2017ParserKW_TRAN:
		{
			p.SetState(6668)
			p.Pass_switchtype()
		}
		{
			p.SetState(6669)
			p.Pass_switch_instance()
		}
		p.SetState(6674)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserCOMMA {
			{
				p.SetState(6670)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(6671)
				p.Pass_switch_instance()
			}

			p.SetState(6676)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(6679)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IEnable_gate_or_mos_switch_or_cmos_switch_instanceContext is an interface to support dynamic dispatch.
type IEnable_gate_or_mos_switch_or_cmos_switch_instanceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnable_gate_or_mos_switch_or_cmos_switch_instanceContext differentiates from other interfaces.
	IsEnable_gate_or_mos_switch_or_cmos_switch_instanceContext()
}

type Enable_gate_or_mos_switch_or_cmos_switch_instanceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnable_gate_or_mos_switch_or_cmos_switch_instanceContext() *Enable_gate_or_mos_switch_or_cmos_switch_instanceContext {
	var p = new(Enable_gate_or_mos_switch_or_cmos_switch_instanceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_enable_gate_or_mos_switch_or_cmos_switch_instance
	return p
}

func (*Enable_gate_or_mos_switch_or_cmos_switch_instanceContext) IsEnable_gate_or_mos_switch_or_cmos_switch_instanceContext() {
}

func NewEnable_gate_or_mos_switch_or_cmos_switch_instanceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Enable_gate_or_mos_switch_or_cmos_switch_instanceContext {
	var p = new(Enable_gate_or_mos_switch_or_cmos_switch_instanceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_enable_gate_or_mos_switch_or_cmos_switch_instance

	return p
}

func (s *Enable_gate_or_mos_switch_or_cmos_switch_instanceContext) GetParser() antlr.Parser {
	return s.parser
}

func (s *Enable_gate_or_mos_switch_or_cmos_switch_instanceContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Enable_gate_or_mos_switch_or_cmos_switch_instanceContext) Output_terminal() IOutput_terminalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOutput_terminalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOutput_terminalContext)
}

func (s *Enable_gate_or_mos_switch_or_cmos_switch_instanceContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Enable_gate_or_mos_switch_or_cmos_switch_instanceContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Enable_gate_or_mos_switch_or_cmos_switch_instanceContext) Input_terminal() IInput_terminalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInput_terminalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInput_terminalContext)
}

func (s *Enable_gate_or_mos_switch_or_cmos_switch_instanceContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Enable_gate_or_mos_switch_or_cmos_switch_instanceContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Enable_gate_or_mos_switch_or_cmos_switch_instanceContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Enable_gate_or_mos_switch_or_cmos_switch_instanceContext) Name_of_instance() IName_of_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_of_instanceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_of_instanceContext)
}

func (s *Enable_gate_or_mos_switch_or_cmos_switch_instanceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Enable_gate_or_mos_switch_or_cmos_switch_instanceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Enable_gate_or_mos_switch_or_cmos_switch_instanceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterEnable_gate_or_mos_switch_or_cmos_switch_instance(s)
	}
}

func (s *Enable_gate_or_mos_switch_or_cmos_switch_instanceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitEnable_gate_or_mos_switch_or_cmos_switch_instance(s)
	}
}

func (p *SV2017Parser) Enable_gate_or_mos_switch_or_cmos_switch_instance() (localctx IEnable_gate_or_mos_switch_or_cmos_switch_instanceContext) {
	localctx = NewEnable_gate_or_mos_switch_or_cmos_switch_instanceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 960, SV2017ParserRULE_enable_gate_or_mos_switch_or_cmos_switch_instance)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6682)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
		{
			p.SetState(6681)
			p.Name_of_instance()
		}

	}
	{
		p.SetState(6684)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(6685)
		p.Output_terminal()
	}
	{
		p.SetState(6686)
		p.Match(SV2017ParserCOMMA)
	}
	{
		p.SetState(6687)
		p.Input_terminal()
	}
	{
		p.SetState(6688)
		p.Match(SV2017ParserCOMMA)
	}
	{
		p.SetState(6689)
		p.expression(0)
	}
	p.SetState(6692)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserCOMMA {
		{
			p.SetState(6690)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(6691)
			p.expression(0)
		}

	}
	{
		p.SetState(6694)
		p.Match(SV2017ParserRPAREN)
	}

	return localctx
}

// IN_input_gate_instanceContext is an interface to support dynamic dispatch.
type IN_input_gate_instanceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsN_input_gate_instanceContext differentiates from other interfaces.
	IsN_input_gate_instanceContext()
}

type N_input_gate_instanceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyN_input_gate_instanceContext() *N_input_gate_instanceContext {
	var p = new(N_input_gate_instanceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_n_input_gate_instance
	return p
}

func (*N_input_gate_instanceContext) IsN_input_gate_instanceContext() {}

func NewN_input_gate_instanceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *N_input_gate_instanceContext {
	var p = new(N_input_gate_instanceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_n_input_gate_instance

	return p
}

func (s *N_input_gate_instanceContext) GetParser() antlr.Parser { return s.parser }

func (s *N_input_gate_instanceContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *N_input_gate_instanceContext) Output_terminal() IOutput_terminalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOutput_terminalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOutput_terminalContext)
}

func (s *N_input_gate_instanceContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *N_input_gate_instanceContext) Name_of_instance() IName_of_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_of_instanceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_of_instanceContext)
}

func (s *N_input_gate_instanceContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *N_input_gate_instanceContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *N_input_gate_instanceContext) AllInput_terminal() []IInput_terminalContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInput_terminalContext)(nil)).Elem())
	var tst = make([]IInput_terminalContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInput_terminalContext)
		}
	}

	return tst
}

func (s *N_input_gate_instanceContext) Input_terminal(i int) IInput_terminalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInput_terminalContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInput_terminalContext)
}

func (s *N_input_gate_instanceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *N_input_gate_instanceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *N_input_gate_instanceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterN_input_gate_instance(s)
	}
}

func (s *N_input_gate_instanceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitN_input_gate_instance(s)
	}
}

func (p *SV2017Parser) N_input_gate_instance() (localctx IN_input_gate_instanceContext) {
	localctx = NewN_input_gate_instanceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 962, SV2017ParserRULE_n_input_gate_instance)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6697)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
		{
			p.SetState(6696)
			p.Name_of_instance()
		}

	}
	{
		p.SetState(6699)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(6700)
		p.Output_terminal()
	}
	p.SetState(6703)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == SV2017ParserCOMMA {
		{
			p.SetState(6701)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(6702)
			p.Input_terminal()
		}

		p.SetState(6705)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(6707)
		p.Match(SV2017ParserRPAREN)
	}

	return localctx
}

// IN_output_gate_instanceContext is an interface to support dynamic dispatch.
type IN_output_gate_instanceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsN_output_gate_instanceContext differentiates from other interfaces.
	IsN_output_gate_instanceContext()
}

type N_output_gate_instanceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyN_output_gate_instanceContext() *N_output_gate_instanceContext {
	var p = new(N_output_gate_instanceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_n_output_gate_instance
	return p
}

func (*N_output_gate_instanceContext) IsN_output_gate_instanceContext() {}

func NewN_output_gate_instanceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *N_output_gate_instanceContext {
	var p = new(N_output_gate_instanceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_n_output_gate_instance

	return p
}

func (s *N_output_gate_instanceContext) GetParser() antlr.Parser { return s.parser }

func (s *N_output_gate_instanceContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *N_output_gate_instanceContext) AllOutput_terminal() []IOutput_terminalContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOutput_terminalContext)(nil)).Elem())
	var tst = make([]IOutput_terminalContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOutput_terminalContext)
		}
	}

	return tst
}

func (s *N_output_gate_instanceContext) Output_terminal(i int) IOutput_terminalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOutput_terminalContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOutput_terminalContext)
}

func (s *N_output_gate_instanceContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *N_output_gate_instanceContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *N_output_gate_instanceContext) Input_terminal() IInput_terminalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInput_terminalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInput_terminalContext)
}

func (s *N_output_gate_instanceContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *N_output_gate_instanceContext) Name_of_instance() IName_of_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_of_instanceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_of_instanceContext)
}

func (s *N_output_gate_instanceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *N_output_gate_instanceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *N_output_gate_instanceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterN_output_gate_instance(s)
	}
}

func (s *N_output_gate_instanceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitN_output_gate_instance(s)
	}
}

func (p *SV2017Parser) N_output_gate_instance() (localctx IN_output_gate_instanceContext) {
	localctx = NewN_output_gate_instanceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 964, SV2017ParserRULE_n_output_gate_instance)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6710)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
		{
			p.SetState(6709)
			p.Name_of_instance()
		}

	}
	{
		p.SetState(6712)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(6713)
		p.Output_terminal()
	}
	p.SetState(6718)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 872, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(6714)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(6715)
				p.Output_terminal()
			}

		}
		p.SetState(6720)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 872, p.GetParserRuleContext())
	}
	{
		p.SetState(6721)
		p.Match(SV2017ParserCOMMA)
	}
	{
		p.SetState(6722)
		p.Input_terminal()
	}
	{
		p.SetState(6723)
		p.Match(SV2017ParserRPAREN)
	}

	return localctx
}

// IPass_switch_instanceContext is an interface to support dynamic dispatch.
type IPass_switch_instanceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPass_switch_instanceContext differentiates from other interfaces.
	IsPass_switch_instanceContext()
}

type Pass_switch_instanceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPass_switch_instanceContext() *Pass_switch_instanceContext {
	var p = new(Pass_switch_instanceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_pass_switch_instance
	return p
}

func (*Pass_switch_instanceContext) IsPass_switch_instanceContext() {}

func NewPass_switch_instanceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pass_switch_instanceContext {
	var p = new(Pass_switch_instanceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_pass_switch_instance

	return p
}

func (s *Pass_switch_instanceContext) GetParser() antlr.Parser { return s.parser }

func (s *Pass_switch_instanceContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Pass_switch_instanceContext) AllInout_terminal() []IInout_terminalContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInout_terminalContext)(nil)).Elem())
	var tst = make([]IInout_terminalContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInout_terminalContext)
		}
	}

	return tst
}

func (s *Pass_switch_instanceContext) Inout_terminal(i int) IInout_terminalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInout_terminalContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInout_terminalContext)
}

func (s *Pass_switch_instanceContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, 0)
}

func (s *Pass_switch_instanceContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Pass_switch_instanceContext) Name_of_instance() IName_of_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_of_instanceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_of_instanceContext)
}

func (s *Pass_switch_instanceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pass_switch_instanceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pass_switch_instanceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPass_switch_instance(s)
	}
}

func (s *Pass_switch_instanceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPass_switch_instance(s)
	}
}

func (p *SV2017Parser) Pass_switch_instance() (localctx IPass_switch_instanceContext) {
	localctx = NewPass_switch_instanceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 966, SV2017ParserRULE_pass_switch_instance)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6726)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
		{
			p.SetState(6725)
			p.Name_of_instance()
		}

	}
	{
		p.SetState(6728)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(6729)
		p.Inout_terminal()
	}
	{
		p.SetState(6730)
		p.Match(SV2017ParserCOMMA)
	}
	{
		p.SetState(6731)
		p.Inout_terminal()
	}
	{
		p.SetState(6732)
		p.Match(SV2017ParserRPAREN)
	}

	return localctx
}

// IPass_enable_switch_instanceContext is an interface to support dynamic dispatch.
type IPass_enable_switch_instanceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPass_enable_switch_instanceContext differentiates from other interfaces.
	IsPass_enable_switch_instanceContext()
}

type Pass_enable_switch_instanceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPass_enable_switch_instanceContext() *Pass_enable_switch_instanceContext {
	var p = new(Pass_enable_switch_instanceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_pass_enable_switch_instance
	return p
}

func (*Pass_enable_switch_instanceContext) IsPass_enable_switch_instanceContext() {}

func NewPass_enable_switch_instanceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pass_enable_switch_instanceContext {
	var p = new(Pass_enable_switch_instanceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_pass_enable_switch_instance

	return p
}

func (s *Pass_enable_switch_instanceContext) GetParser() antlr.Parser { return s.parser }

func (s *Pass_enable_switch_instanceContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Pass_enable_switch_instanceContext) AllInout_terminal() []IInout_terminalContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInout_terminalContext)(nil)).Elem())
	var tst = make([]IInout_terminalContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInout_terminalContext)
		}
	}

	return tst
}

func (s *Pass_enable_switch_instanceContext) Inout_terminal(i int) IInout_terminalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInout_terminalContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInout_terminalContext)
}

func (s *Pass_enable_switch_instanceContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Pass_enable_switch_instanceContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Pass_enable_switch_instanceContext) Enable_terminal() IEnable_terminalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnable_terminalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnable_terminalContext)
}

func (s *Pass_enable_switch_instanceContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Pass_enable_switch_instanceContext) Name_of_instance() IName_of_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_of_instanceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_of_instanceContext)
}

func (s *Pass_enable_switch_instanceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pass_enable_switch_instanceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pass_enable_switch_instanceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPass_enable_switch_instance(s)
	}
}

func (s *Pass_enable_switch_instanceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPass_enable_switch_instance(s)
	}
}

func (p *SV2017Parser) Pass_enable_switch_instance() (localctx IPass_enable_switch_instanceContext) {
	localctx = NewPass_enable_switch_instanceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 968, SV2017ParserRULE_pass_enable_switch_instance)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6735)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
		{
			p.SetState(6734)
			p.Name_of_instance()
		}

	}
	{
		p.SetState(6737)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(6738)
		p.Inout_terminal()
	}
	{
		p.SetState(6739)
		p.Match(SV2017ParserCOMMA)
	}
	{
		p.SetState(6740)
		p.Inout_terminal()
	}
	{
		p.SetState(6741)
		p.Match(SV2017ParserCOMMA)
	}
	{
		p.SetState(6742)
		p.Enable_terminal()
	}
	{
		p.SetState(6743)
		p.Match(SV2017ParserRPAREN)
	}

	return localctx
}

// IPull_gate_instanceContext is an interface to support dynamic dispatch.
type IPull_gate_instanceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPull_gate_instanceContext differentiates from other interfaces.
	IsPull_gate_instanceContext()
}

type Pull_gate_instanceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPull_gate_instanceContext() *Pull_gate_instanceContext {
	var p = new(Pull_gate_instanceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_pull_gate_instance
	return p
}

func (*Pull_gate_instanceContext) IsPull_gate_instanceContext() {}

func NewPull_gate_instanceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pull_gate_instanceContext {
	var p = new(Pull_gate_instanceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_pull_gate_instance

	return p
}

func (s *Pull_gate_instanceContext) GetParser() antlr.Parser { return s.parser }

func (s *Pull_gate_instanceContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Pull_gate_instanceContext) Output_terminal() IOutput_terminalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOutput_terminalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOutput_terminalContext)
}

func (s *Pull_gate_instanceContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Pull_gate_instanceContext) Name_of_instance() IName_of_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_of_instanceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_of_instanceContext)
}

func (s *Pull_gate_instanceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pull_gate_instanceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pull_gate_instanceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPull_gate_instance(s)
	}
}

func (s *Pull_gate_instanceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPull_gate_instance(s)
	}
}

func (p *SV2017Parser) Pull_gate_instance() (localctx IPull_gate_instanceContext) {
	localctx = NewPull_gate_instanceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 970, SV2017ParserRULE_pull_gate_instance)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6746)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
		{
			p.SetState(6745)
			p.Name_of_instance()
		}

	}
	{
		p.SetState(6748)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(6749)
		p.Output_terminal()
	}
	{
		p.SetState(6750)
		p.Match(SV2017ParserRPAREN)
	}

	return localctx
}

// IPulldown_strengthContext is an interface to support dynamic dispatch.
type IPulldown_strengthContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPulldown_strengthContext differentiates from other interfaces.
	IsPulldown_strengthContext()
}

type Pulldown_strengthContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPulldown_strengthContext() *Pulldown_strengthContext {
	var p = new(Pulldown_strengthContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_pulldown_strength
	return p
}

func (*Pulldown_strengthContext) IsPulldown_strengthContext() {}

func NewPulldown_strengthContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pulldown_strengthContext {
	var p = new(Pulldown_strengthContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_pulldown_strength

	return p
}

func (s *Pulldown_strengthContext) GetParser() antlr.Parser { return s.parser }

func (s *Pulldown_strengthContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Pulldown_strengthContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Pulldown_strengthContext) Strength0() IStrength0Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrength0Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStrength0Context)
}

func (s *Pulldown_strengthContext) Strength1() IStrength1Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrength1Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStrength1Context)
}

func (s *Pulldown_strengthContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, 0)
}

func (s *Pulldown_strengthContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pulldown_strengthContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pulldown_strengthContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPulldown_strength(s)
	}
}

func (s *Pulldown_strengthContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPulldown_strength(s)
	}
}

func (p *SV2017Parser) Pulldown_strength() (localctx IPulldown_strengthContext) {
	localctx = NewPulldown_strengthContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 972, SV2017ParserRULE_pulldown_strength)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6752)
		p.Match(SV2017ParserLPAREN)
	}
	p.SetState(6762)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_PULL0, SV2017ParserKW_STRONG0, SV2017ParserKW_SUPPLY0, SV2017ParserKW_WEAK0:
		{
			p.SetState(6753)
			p.Strength0()
		}
		p.SetState(6756)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserCOMMA {
			{
				p.SetState(6754)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(6755)
				p.Strength1()
			}

		}

	case SV2017ParserKW_PULL1, SV2017ParserKW_STRONG1, SV2017ParserKW_SUPPLY1, SV2017ParserKW_WEAK1:
		{
			p.SetState(6758)
			p.Strength1()
		}
		{
			p.SetState(6759)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(6760)
			p.Strength0()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(6764)
		p.Match(SV2017ParserRPAREN)
	}

	return localctx
}

// IPullup_strengthContext is an interface to support dynamic dispatch.
type IPullup_strengthContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPullup_strengthContext differentiates from other interfaces.
	IsPullup_strengthContext()
}

type Pullup_strengthContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPullup_strengthContext() *Pullup_strengthContext {
	var p = new(Pullup_strengthContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_pullup_strength
	return p
}

func (*Pullup_strengthContext) IsPullup_strengthContext() {}

func NewPullup_strengthContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pullup_strengthContext {
	var p = new(Pullup_strengthContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_pullup_strength

	return p
}

func (s *Pullup_strengthContext) GetParser() antlr.Parser { return s.parser }

func (s *Pullup_strengthContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Pullup_strengthContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Pullup_strengthContext) Strength0() IStrength0Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrength0Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStrength0Context)
}

func (s *Pullup_strengthContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, 0)
}

func (s *Pullup_strengthContext) Strength1() IStrength1Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrength1Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStrength1Context)
}

func (s *Pullup_strengthContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pullup_strengthContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pullup_strengthContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterPullup_strength(s)
	}
}

func (s *Pullup_strengthContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitPullup_strength(s)
	}
}

func (p *SV2017Parser) Pullup_strength() (localctx IPullup_strengthContext) {
	localctx = NewPullup_strengthContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 974, SV2017ParserRULE_pullup_strength)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6766)
		p.Match(SV2017ParserLPAREN)
	}
	p.SetState(6776)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_PULL0, SV2017ParserKW_STRONG0, SV2017ParserKW_SUPPLY0, SV2017ParserKW_WEAK0:
		{
			p.SetState(6767)
			p.Strength0()
		}
		{
			p.SetState(6768)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(6769)
			p.Strength1()
		}

	case SV2017ParserKW_PULL1, SV2017ParserKW_STRONG1, SV2017ParserKW_SUPPLY1, SV2017ParserKW_WEAK1:
		{
			p.SetState(6771)
			p.Strength1()
		}
		p.SetState(6774)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserCOMMA {
			{
				p.SetState(6772)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(6773)
				p.Strength0()
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(6778)
		p.Match(SV2017ParserRPAREN)
	}

	return localctx
}

// IEnable_terminalContext is an interface to support dynamic dispatch.
type IEnable_terminalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnable_terminalContext differentiates from other interfaces.
	IsEnable_terminalContext()
}

type Enable_terminalContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnable_terminalContext() *Enable_terminalContext {
	var p = new(Enable_terminalContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_enable_terminal
	return p
}

func (*Enable_terminalContext) IsEnable_terminalContext() {}

func NewEnable_terminalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Enable_terminalContext {
	var p = new(Enable_terminalContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_enable_terminal

	return p
}

func (s *Enable_terminalContext) GetParser() antlr.Parser { return s.parser }

func (s *Enable_terminalContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Enable_terminalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Enable_terminalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Enable_terminalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterEnable_terminal(s)
	}
}

func (s *Enable_terminalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitEnable_terminal(s)
	}
}

func (p *SV2017Parser) Enable_terminal() (localctx IEnable_terminalContext) {
	localctx = NewEnable_terminalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 976, SV2017ParserRULE_enable_terminal)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6780)
		p.expression(0)
	}

	return localctx
}

// IInout_terminalContext is an interface to support dynamic dispatch.
type IInout_terminalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInout_terminalContext differentiates from other interfaces.
	IsInout_terminalContext()
}

type Inout_terminalContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInout_terminalContext() *Inout_terminalContext {
	var p = new(Inout_terminalContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_inout_terminal
	return p
}

func (*Inout_terminalContext) IsInout_terminalContext() {}

func NewInout_terminalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Inout_terminalContext {
	var p = new(Inout_terminalContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_inout_terminal

	return p
}

func (s *Inout_terminalContext) GetParser() antlr.Parser { return s.parser }

func (s *Inout_terminalContext) Net_lvalue() INet_lvalueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INet_lvalueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INet_lvalueContext)
}

func (s *Inout_terminalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Inout_terminalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Inout_terminalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterInout_terminal(s)
	}
}

func (s *Inout_terminalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitInout_terminal(s)
	}
}

func (p *SV2017Parser) Inout_terminal() (localctx IInout_terminalContext) {
	localctx = NewInout_terminalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 978, SV2017ParserRULE_inout_terminal)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6782)
		p.Net_lvalue()
	}

	return localctx
}

// IInput_terminalContext is an interface to support dynamic dispatch.
type IInput_terminalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInput_terminalContext differentiates from other interfaces.
	IsInput_terminalContext()
}

type Input_terminalContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInput_terminalContext() *Input_terminalContext {
	var p = new(Input_terminalContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_input_terminal
	return p
}

func (*Input_terminalContext) IsInput_terminalContext() {}

func NewInput_terminalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Input_terminalContext {
	var p = new(Input_terminalContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_input_terminal

	return p
}

func (s *Input_terminalContext) GetParser() antlr.Parser { return s.parser }

func (s *Input_terminalContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Input_terminalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Input_terminalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Input_terminalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterInput_terminal(s)
	}
}

func (s *Input_terminalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitInput_terminal(s)
	}
}

func (p *SV2017Parser) Input_terminal() (localctx IInput_terminalContext) {
	localctx = NewInput_terminalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 980, SV2017ParserRULE_input_terminal)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6784)
		p.expression(0)
	}

	return localctx
}

// IOutput_terminalContext is an interface to support dynamic dispatch.
type IOutput_terminalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOutput_terminalContext differentiates from other interfaces.
	IsOutput_terminalContext()
}

type Output_terminalContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOutput_terminalContext() *Output_terminalContext {
	var p = new(Output_terminalContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_output_terminal
	return p
}

func (*Output_terminalContext) IsOutput_terminalContext() {}

func NewOutput_terminalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Output_terminalContext {
	var p = new(Output_terminalContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_output_terminal

	return p
}

func (s *Output_terminalContext) GetParser() antlr.Parser { return s.parser }

func (s *Output_terminalContext) Net_lvalue() INet_lvalueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INet_lvalueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INet_lvalueContext)
}

func (s *Output_terminalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Output_terminalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Output_terminalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterOutput_terminal(s)
	}
}

func (s *Output_terminalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitOutput_terminal(s)
	}
}

func (p *SV2017Parser) Output_terminal() (localctx IOutput_terminalContext) {
	localctx = NewOutput_terminalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 982, SV2017ParserRULE_output_terminal)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6786)
		p.Net_lvalue()
	}

	return localctx
}

// IUdp_instantiationContext is an interface to support dynamic dispatch.
type IUdp_instantiationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUdp_instantiationContext differentiates from other interfaces.
	IsUdp_instantiationContext()
}

type Udp_instantiationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUdp_instantiationContext() *Udp_instantiationContext {
	var p = new(Udp_instantiationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_udp_instantiation
	return p
}

func (*Udp_instantiationContext) IsUdp_instantiationContext() {}

func NewUdp_instantiationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Udp_instantiationContext {
	var p = new(Udp_instantiationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_udp_instantiation

	return p
}

func (s *Udp_instantiationContext) GetParser() antlr.Parser { return s.parser }

func (s *Udp_instantiationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Udp_instantiationContext) Udp_instance_body() IUdp_instance_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUdp_instance_bodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUdp_instance_bodyContext)
}

func (s *Udp_instantiationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Udp_instantiationContext) Drive_strength() IDrive_strengthContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrive_strengthContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrive_strengthContext)
}

func (s *Udp_instantiationContext) Delay2() IDelay2Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelay2Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelay2Context)
}

func (s *Udp_instantiationContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Udp_instantiationContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Udp_instantiationContext) AllUdp_instance() []IUdp_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUdp_instanceContext)(nil)).Elem())
	var tst = make([]IUdp_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUdp_instanceContext)
		}
	}

	return tst
}

func (s *Udp_instantiationContext) Udp_instance(i int) IUdp_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUdp_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUdp_instanceContext)
}

func (s *Udp_instantiationContext) Name_of_instance() IName_of_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_of_instanceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_of_instanceContext)
}

func (s *Udp_instantiationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Udp_instantiationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Udp_instantiationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterUdp_instantiation(s)
	}
}

func (s *Udp_instantiationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitUdp_instantiation(s)
	}
}

func (p *SV2017Parser) Udp_instantiation() (localctx IUdp_instantiationContext) {
	localctx = NewUdp_instantiationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 984, SV2017ParserRULE_udp_instantiation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6788)
		p.Identifier()
	}
	p.SetState(6800)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 883, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6789)
			p.Drive_strength()
		}
		p.SetState(6791)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserHASH {
			{
				p.SetState(6790)
				p.Delay2()
			}

		}
		p.SetState(6794)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
			{
				p.SetState(6793)
				p.Name_of_instance()
			}

		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 883, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(6796)
			p.Delay2()
		}
		p.SetState(6798)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
			{
				p.SetState(6797)
				p.Name_of_instance()
			}

		}

	}
	{
		p.SetState(6802)
		p.Udp_instance_body()
	}
	p.SetState(6807)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserCOMMA {
		{
			p.SetState(6803)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(6804)
			p.Udp_instance()
		}

		p.SetState(6809)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(6810)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IUdp_instanceContext is an interface to support dynamic dispatch.
type IUdp_instanceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUdp_instanceContext differentiates from other interfaces.
	IsUdp_instanceContext()
}

type Udp_instanceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUdp_instanceContext() *Udp_instanceContext {
	var p = new(Udp_instanceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_udp_instance
	return p
}

func (*Udp_instanceContext) IsUdp_instanceContext() {}

func NewUdp_instanceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Udp_instanceContext {
	var p = new(Udp_instanceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_udp_instance

	return p
}

func (s *Udp_instanceContext) GetParser() antlr.Parser { return s.parser }

func (s *Udp_instanceContext) Udp_instance_body() IUdp_instance_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUdp_instance_bodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUdp_instance_bodyContext)
}

func (s *Udp_instanceContext) Name_of_instance() IName_of_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_of_instanceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_of_instanceContext)
}

func (s *Udp_instanceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Udp_instanceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Udp_instanceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterUdp_instance(s)
	}
}

func (s *Udp_instanceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitUdp_instance(s)
	}
}

func (p *SV2017Parser) Udp_instance() (localctx IUdp_instanceContext) {
	localctx = NewUdp_instanceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 986, SV2017ParserRULE_udp_instance)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6813)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
		{
			p.SetState(6812)
			p.Name_of_instance()
		}

	}
	{
		p.SetState(6815)
		p.Udp_instance_body()
	}

	return localctx
}

// IUdp_instance_bodyContext is an interface to support dynamic dispatch.
type IUdp_instance_bodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUdp_instance_bodyContext differentiates from other interfaces.
	IsUdp_instance_bodyContext()
}

type Udp_instance_bodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUdp_instance_bodyContext() *Udp_instance_bodyContext {
	var p = new(Udp_instance_bodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_udp_instance_body
	return p
}

func (*Udp_instance_bodyContext) IsUdp_instance_bodyContext() {}

func NewUdp_instance_bodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Udp_instance_bodyContext {
	var p = new(Udp_instance_bodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_udp_instance_body

	return p
}

func (s *Udp_instance_bodyContext) GetParser() antlr.Parser { return s.parser }

func (s *Udp_instance_bodyContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Udp_instance_bodyContext) Output_terminal() IOutput_terminalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOutput_terminalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOutput_terminalContext)
}

func (s *Udp_instance_bodyContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Udp_instance_bodyContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Udp_instance_bodyContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Udp_instance_bodyContext) AllInput_terminal() []IInput_terminalContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInput_terminalContext)(nil)).Elem())
	var tst = make([]IInput_terminalContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInput_terminalContext)
		}
	}

	return tst
}

func (s *Udp_instance_bodyContext) Input_terminal(i int) IInput_terminalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInput_terminalContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInput_terminalContext)
}

func (s *Udp_instance_bodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Udp_instance_bodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Udp_instance_bodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterUdp_instance_body(s)
	}
}

func (s *Udp_instance_bodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitUdp_instance_body(s)
	}
}

func (p *SV2017Parser) Udp_instance_body() (localctx IUdp_instance_bodyContext) {
	localctx = NewUdp_instance_bodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 988, SV2017ParserRULE_udp_instance_body)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6817)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(6818)
		p.Output_terminal()
	}
	p.SetState(6821)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == SV2017ParserCOMMA {
		{
			p.SetState(6819)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(6820)
			p.Input_terminal()
		}

		p.SetState(6823)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(6825)
		p.Match(SV2017ParserRPAREN)
	}

	return localctx
}

// IModule_or_interface_or_program_or_udp_instantiationContext is an interface to support dynamic dispatch.
type IModule_or_interface_or_program_or_udp_instantiationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModule_or_interface_or_program_or_udp_instantiationContext differentiates from other interfaces.
	IsModule_or_interface_or_program_or_udp_instantiationContext()
}

type Module_or_interface_or_program_or_udp_instantiationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModule_or_interface_or_program_or_udp_instantiationContext() *Module_or_interface_or_program_or_udp_instantiationContext {
	var p = new(Module_or_interface_or_program_or_udp_instantiationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_module_or_interface_or_program_or_udp_instantiation
	return p
}

func (*Module_or_interface_or_program_or_udp_instantiationContext) IsModule_or_interface_or_program_or_udp_instantiationContext() {
}

func NewModule_or_interface_or_program_or_udp_instantiationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Module_or_interface_or_program_or_udp_instantiationContext {
	var p = new(Module_or_interface_or_program_or_udp_instantiationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_module_or_interface_or_program_or_udp_instantiation

	return p
}

func (s *Module_or_interface_or_program_or_udp_instantiationContext) GetParser() antlr.Parser {
	return s.parser
}

func (s *Module_or_interface_or_program_or_udp_instantiationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Module_or_interface_or_program_or_udp_instantiationContext) AllHierarchical_instance() []IHierarchical_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IHierarchical_instanceContext)(nil)).Elem())
	var tst = make([]IHierarchical_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IHierarchical_instanceContext)
		}
	}

	return tst
}

func (s *Module_or_interface_or_program_or_udp_instantiationContext) Hierarchical_instance(i int) IHierarchical_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHierarchical_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IHierarchical_instanceContext)
}

func (s *Module_or_interface_or_program_or_udp_instantiationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Module_or_interface_or_program_or_udp_instantiationContext) Parameter_value_assignment() IParameter_value_assignmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameter_value_assignmentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameter_value_assignmentContext)
}

func (s *Module_or_interface_or_program_or_udp_instantiationContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Module_or_interface_or_program_or_udp_instantiationContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Module_or_interface_or_program_or_udp_instantiationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Module_or_interface_or_program_or_udp_instantiationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Module_or_interface_or_program_or_udp_instantiationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterModule_or_interface_or_program_or_udp_instantiation(s)
	}
}

func (s *Module_or_interface_or_program_or_udp_instantiationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitModule_or_interface_or_program_or_udp_instantiation(s)
	}
}

func (p *SV2017Parser) Module_or_interface_or_program_or_udp_instantiation() (localctx IModule_or_interface_or_program_or_udp_instantiationContext) {
	localctx = NewModule_or_interface_or_program_or_udp_instantiationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 990, SV2017ParserRULE_module_or_interface_or_program_or_udp_instantiation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6827)
		p.Identifier()
	}
	p.SetState(6829)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserHASH {
		{
			p.SetState(6828)
			p.Parameter_value_assignment()
		}

	}
	{
		p.SetState(6831)
		p.Hierarchical_instance()
	}
	p.SetState(6836)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserCOMMA {
		{
			p.SetState(6832)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(6833)
			p.Hierarchical_instance()
		}

		p.SetState(6838)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(6839)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IHierarchical_instanceContext is an interface to support dynamic dispatch.
type IHierarchical_instanceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHierarchical_instanceContext differentiates from other interfaces.
	IsHierarchical_instanceContext()
}

type Hierarchical_instanceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHierarchical_instanceContext() *Hierarchical_instanceContext {
	var p = new(Hierarchical_instanceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_hierarchical_instance
	return p
}

func (*Hierarchical_instanceContext) IsHierarchical_instanceContext() {}

func NewHierarchical_instanceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Hierarchical_instanceContext {
	var p = new(Hierarchical_instanceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_hierarchical_instance

	return p
}

func (s *Hierarchical_instanceContext) GetParser() antlr.Parser { return s.parser }

func (s *Hierarchical_instanceContext) Name_of_instance() IName_of_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_of_instanceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_of_instanceContext)
}

func (s *Hierarchical_instanceContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Hierarchical_instanceContext) List_of_port_connections() IList_of_port_connectionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_port_connectionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_port_connectionsContext)
}

func (s *Hierarchical_instanceContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Hierarchical_instanceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Hierarchical_instanceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Hierarchical_instanceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterHierarchical_instance(s)
	}
}

func (s *Hierarchical_instanceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitHierarchical_instance(s)
	}
}

func (p *SV2017Parser) Hierarchical_instance() (localctx IHierarchical_instanceContext) {
	localctx = NewHierarchical_instanceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 992, SV2017ParserRULE_hierarchical_instance)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6841)
		p.Name_of_instance()
	}
	{
		p.SetState(6842)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(6843)
		p.List_of_port_connections()
	}
	{
		p.SetState(6844)
		p.Match(SV2017ParserRPAREN)
	}

	return localctx
}

// IList_of_port_connectionsContext is an interface to support dynamic dispatch.
type IList_of_port_connectionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsList_of_port_connectionsContext differentiates from other interfaces.
	IsList_of_port_connectionsContext()
}

type List_of_port_connectionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyList_of_port_connectionsContext() *List_of_port_connectionsContext {
	var p = new(List_of_port_connectionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_list_of_port_connections
	return p
}

func (*List_of_port_connectionsContext) IsList_of_port_connectionsContext() {}

func NewList_of_port_connectionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *List_of_port_connectionsContext {
	var p = new(List_of_port_connectionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_list_of_port_connections

	return p
}

func (s *List_of_port_connectionsContext) GetParser() antlr.Parser { return s.parser }

func (s *List_of_port_connectionsContext) AllOrdered_port_connection() []IOrdered_port_connectionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOrdered_port_connectionContext)(nil)).Elem())
	var tst = make([]IOrdered_port_connectionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOrdered_port_connectionContext)
		}
	}

	return tst
}

func (s *List_of_port_connectionsContext) Ordered_port_connection(i int) IOrdered_port_connectionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrdered_port_connectionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOrdered_port_connectionContext)
}

func (s *List_of_port_connectionsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *List_of_port_connectionsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *List_of_port_connectionsContext) AllNamed_port_connection() []INamed_port_connectionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INamed_port_connectionContext)(nil)).Elem())
	var tst = make([]INamed_port_connectionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INamed_port_connectionContext)
		}
	}

	return tst
}

func (s *List_of_port_connectionsContext) Named_port_connection(i int) INamed_port_connectionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamed_port_connectionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INamed_port_connectionContext)
}

func (s *List_of_port_connectionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *List_of_port_connectionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *List_of_port_connectionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterList_of_port_connections(s)
	}
}

func (s *List_of_port_connectionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitList_of_port_connections(s)
	}
}

func (p *SV2017Parser) List_of_port_connections() (localctx IList_of_port_connectionsContext) {
	localctx = NewList_of_port_connectionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 994, SV2017ParserRULE_list_of_port_connections)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6862)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 891, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6846)
			p.Ordered_port_connection()
		}
		p.SetState(6851)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserCOMMA {
			{
				p.SetState(6847)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(6848)
				p.Ordered_port_connection()
			}

			p.SetState(6853)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6854)
			p.Named_port_connection()
		}
		p.SetState(6859)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserCOMMA {
			{
				p.SetState(6855)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(6856)
				p.Named_port_connection()
			}

			p.SetState(6861)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// IOrdered_port_connectionContext is an interface to support dynamic dispatch.
type IOrdered_port_connectionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOrdered_port_connectionContext differentiates from other interfaces.
	IsOrdered_port_connectionContext()
}

type Ordered_port_connectionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrdered_port_connectionContext() *Ordered_port_connectionContext {
	var p = new(Ordered_port_connectionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_ordered_port_connection
	return p
}

func (*Ordered_port_connectionContext) IsOrdered_port_connectionContext() {}

func NewOrdered_port_connectionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ordered_port_connectionContext {
	var p = new(Ordered_port_connectionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_ordered_port_connection

	return p
}

func (s *Ordered_port_connectionContext) GetParser() antlr.Parser { return s.parser }

func (s *Ordered_port_connectionContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Ordered_port_connectionContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Ordered_port_connectionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Ordered_port_connectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ordered_port_connectionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Ordered_port_connectionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterOrdered_port_connection(s)
	}
}

func (s *Ordered_port_connectionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitOrdered_port_connection(s)
	}
}

func (p *SV2017Parser) Ordered_port_connection() (localctx IOrdered_port_connectionContext) {
	localctx = NewOrdered_port_connectionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 996, SV2017ParserRULE_ordered_port_connection)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6867)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 892, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(6864)
				p.Attribute_instance()
			}

		}
		p.SetState(6869)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 892, p.GetParserRuleContext())
	}
	p.SetState(6871)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TAGGED-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserTIME_LITERAL-260)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(SV2017ParserANY_BASED_NUMBER-292))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-292))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-292))|(1<<(SV2017ParserFIXED_POINT_NUMBER-292))|(1<<(SV2017ParserUNSIGNED_NUMBER-292))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-292))|(1<<(SV2017ParserSTRING_LITERAL-292))|(1<<(SV2017ParserC_IDENTIFIER-292))|(1<<(SV2017ParserTICK_IDENTIFIER-292))|(1<<(SV2017ParserESCAPED_IDENTIFIER-292))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-292))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-292))|(1<<(SV2017ParserLPAREN-292))|(1<<(SV2017ParserLBRACE-292))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-292))|(1<<(SV2017ParserDOLAR-292))|(1<<(SV2017ParserNOT-292))|(1<<(SV2017ParserNEG-292))|(1<<(SV2017ParserNAND-292))|(1<<(SV2017ParserNOR-292)))) != 0) || (((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324))|(1<<(SV2017ParserPLUS-324)))) != 0) || (((_la-356)&-(0x1f+1)) == 0 && ((1<<uint((_la-356)))&((1<<(SV2017ParserMINUS-356))|(1<<(SV2017ParserAMPERSAND-356))|(1<<(SV2017ParserBAR-356))|(1<<(SV2017ParserINCR-356))|(1<<(SV2017ParserDECR-356)))) != 0) {
		{
			p.SetState(6870)
			p.expression(0)
		}

	}

	return localctx
}

// INamed_port_connectionContext is an interface to support dynamic dispatch.
type INamed_port_connectionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNamed_port_connectionContext differentiates from other interfaces.
	IsNamed_port_connectionContext()
}

type Named_port_connectionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamed_port_connectionContext() *Named_port_connectionContext {
	var p = new(Named_port_connectionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_named_port_connection
	return p
}

func (*Named_port_connectionContext) IsNamed_port_connectionContext() {}

func NewNamed_port_connectionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Named_port_connectionContext {
	var p = new(Named_port_connectionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_named_port_connection

	return p
}

func (s *Named_port_connectionContext) GetParser() antlr.Parser { return s.parser }

func (s *Named_port_connectionContext) DOT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOT, 0)
}

func (s *Named_port_connectionContext) MUL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserMUL, 0)
}

func (s *Named_port_connectionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Named_port_connectionContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *Named_port_connectionContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *Named_port_connectionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Named_port_connectionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Named_port_connectionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Named_port_connectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Named_port_connectionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Named_port_connectionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterNamed_port_connection(s)
	}
}

func (s *Named_port_connectionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitNamed_port_connection(s)
	}
}

func (p *SV2017Parser) Named_port_connection() (localctx INamed_port_connectionContext) {
	localctx = NewNamed_port_connectionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 998, SV2017ParserRULE_named_port_connection)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6876)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserTICK_IDENTIFIER || _la == SV2017ParserLPAREN {
		{
			p.SetState(6873)
			p.Attribute_instance()
		}

		p.SetState(6878)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(6879)
		p.Match(SV2017ParserDOT)
	}
	p.SetState(6889)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserMUL:
		{
			p.SetState(6880)
			p.Match(SV2017ParserMUL)
		}

	case SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_SAMPLE, SV2017ParserKW_STD, SV2017ParserKW_TYPE_OPTION, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
		{
			p.SetState(6881)
			p.Identifier()
		}
		p.SetState(6887)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserLPAREN {
			{
				p.SetState(6882)
				p.Match(SV2017ParserLPAREN)
			}
			p.SetState(6884)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TAGGED-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserTIME_LITERAL-260)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(SV2017ParserANY_BASED_NUMBER-292))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-292))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-292))|(1<<(SV2017ParserFIXED_POINT_NUMBER-292))|(1<<(SV2017ParserUNSIGNED_NUMBER-292))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-292))|(1<<(SV2017ParserSTRING_LITERAL-292))|(1<<(SV2017ParserC_IDENTIFIER-292))|(1<<(SV2017ParserTICK_IDENTIFIER-292))|(1<<(SV2017ParserESCAPED_IDENTIFIER-292))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-292))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-292))|(1<<(SV2017ParserLPAREN-292))|(1<<(SV2017ParserLBRACE-292))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-292))|(1<<(SV2017ParserDOLAR-292))|(1<<(SV2017ParserNOT-292))|(1<<(SV2017ParserNEG-292))|(1<<(SV2017ParserNAND-292))|(1<<(SV2017ParserNOR-292)))) != 0) || (((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324))|(1<<(SV2017ParserPLUS-324)))) != 0) || (((_la-356)&-(0x1f+1)) == 0 && ((1<<uint((_la-356)))&((1<<(SV2017ParserMINUS-356))|(1<<(SV2017ParserAMPERSAND-356))|(1<<(SV2017ParserBAR-356))|(1<<(SV2017ParserINCR-356))|(1<<(SV2017ParserDECR-356)))) != 0) {
				{
					p.SetState(6883)
					p.expression(0)
				}

			}
			{
				p.SetState(6886)
				p.Match(SV2017ParserRPAREN)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBind_directiveContext is an interface to support dynamic dispatch.
type IBind_directiveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBind_directiveContext differentiates from other interfaces.
	IsBind_directiveContext()
}

type Bind_directiveContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBind_directiveContext() *Bind_directiveContext {
	var p = new(Bind_directiveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_bind_directive
	return p
}

func (*Bind_directiveContext) IsBind_directiveContext() {}

func NewBind_directiveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bind_directiveContext {
	var p = new(Bind_directiveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_bind_directive

	return p
}

func (s *Bind_directiveContext) GetParser() antlr.Parser { return s.parser }

func (s *Bind_directiveContext) KW_BIND() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_BIND, 0)
}

func (s *Bind_directiveContext) Bind_instantiation() IBind_instantiationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBind_instantiationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBind_instantiationContext)
}

func (s *Bind_directiveContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Bind_directiveContext) Bind_target_instance() IBind_target_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBind_target_instanceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBind_target_instanceContext)
}

func (s *Bind_directiveContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Bind_directiveContext) Bind_target_instance_list() IBind_target_instance_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBind_target_instance_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBind_target_instance_listContext)
}

func (s *Bind_directiveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bind_directiveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bind_directiveContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterBind_directive(s)
	}
}

func (s *Bind_directiveContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitBind_directive(s)
	}
}

func (p *SV2017Parser) Bind_directive() (localctx IBind_directiveContext) {
	localctx = NewBind_directiveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1000, SV2017ParserRULE_bind_directive)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6891)
		p.Match(SV2017ParserKW_BIND)
	}
	p.SetState(6898)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 899, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(6892)
			p.Identifier()
		}
		p.SetState(6895)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserCOLON {
			{
				p.SetState(6893)
				p.Match(SV2017ParserCOLON)
			}
			{
				p.SetState(6894)
				p.Bind_target_instance_list()
			}

		}

	case 2:
		{
			p.SetState(6897)
			p.Bind_target_instance()
		}

	}
	{
		p.SetState(6900)
		p.Bind_instantiation()
	}

	return localctx
}

// IBind_target_instanceContext is an interface to support dynamic dispatch.
type IBind_target_instanceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBind_target_instanceContext differentiates from other interfaces.
	IsBind_target_instanceContext()
}

type Bind_target_instanceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBind_target_instanceContext() *Bind_target_instanceContext {
	var p = new(Bind_target_instanceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_bind_target_instance
	return p
}

func (*Bind_target_instanceContext) IsBind_target_instanceContext() {}

func NewBind_target_instanceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bind_target_instanceContext {
	var p = new(Bind_target_instanceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_bind_target_instance

	return p
}

func (s *Bind_target_instanceContext) GetParser() antlr.Parser { return s.parser }

func (s *Bind_target_instanceContext) Hierarchical_identifier() IHierarchical_identifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHierarchical_identifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHierarchical_identifierContext)
}

func (s *Bind_target_instanceContext) AllBit_select() []IBit_selectContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBit_selectContext)(nil)).Elem())
	var tst = make([]IBit_selectContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBit_selectContext)
		}
	}

	return tst
}

func (s *Bind_target_instanceContext) Bit_select(i int) IBit_selectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBit_selectContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBit_selectContext)
}

func (s *Bind_target_instanceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bind_target_instanceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bind_target_instanceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterBind_target_instance(s)
	}
}

func (s *Bind_target_instanceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitBind_target_instance(s)
	}
}

func (p *SV2017Parser) Bind_target_instance() (localctx IBind_target_instanceContext) {
	localctx = NewBind_target_instanceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1002, SV2017ParserRULE_bind_target_instance)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6902)
		p.Hierarchical_identifier()
	}
	p.SetState(6906)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserLSQUARE_BR {
		{
			p.SetState(6903)
			p.Bit_select()
		}

		p.SetState(6908)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IBind_target_instance_listContext is an interface to support dynamic dispatch.
type IBind_target_instance_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBind_target_instance_listContext differentiates from other interfaces.
	IsBind_target_instance_listContext()
}

type Bind_target_instance_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBind_target_instance_listContext() *Bind_target_instance_listContext {
	var p = new(Bind_target_instance_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_bind_target_instance_list
	return p
}

func (*Bind_target_instance_listContext) IsBind_target_instance_listContext() {}

func NewBind_target_instance_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bind_target_instance_listContext {
	var p = new(Bind_target_instance_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_bind_target_instance_list

	return p
}

func (s *Bind_target_instance_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Bind_target_instance_listContext) AllBind_target_instance() []IBind_target_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBind_target_instanceContext)(nil)).Elem())
	var tst = make([]IBind_target_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBind_target_instanceContext)
		}
	}

	return tst
}

func (s *Bind_target_instance_listContext) Bind_target_instance(i int) IBind_target_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBind_target_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBind_target_instanceContext)
}

func (s *Bind_target_instance_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Bind_target_instance_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Bind_target_instance_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bind_target_instance_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bind_target_instance_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterBind_target_instance_list(s)
	}
}

func (s *Bind_target_instance_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitBind_target_instance_list(s)
	}
}

func (p *SV2017Parser) Bind_target_instance_list() (localctx IBind_target_instance_listContext) {
	localctx = NewBind_target_instance_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1004, SV2017ParserRULE_bind_target_instance_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6909)
		p.Bind_target_instance()
	}
	p.SetState(6914)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserCOMMA {
		{
			p.SetState(6910)
			p.Match(SV2017ParserCOMMA)
		}
		{
			p.SetState(6911)
			p.Bind_target_instance()
		}

		p.SetState(6916)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IBind_instantiationContext is an interface to support dynamic dispatch.
type IBind_instantiationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBind_instantiationContext differentiates from other interfaces.
	IsBind_instantiationContext()
}

type Bind_instantiationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBind_instantiationContext() *Bind_instantiationContext {
	var p = new(Bind_instantiationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_bind_instantiation
	return p
}

func (*Bind_instantiationContext) IsBind_instantiationContext() {}

func NewBind_instantiationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bind_instantiationContext {
	var p = new(Bind_instantiationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_bind_instantiation

	return p
}

func (s *Bind_instantiationContext) GetParser() antlr.Parser { return s.parser }

func (s *Bind_instantiationContext) Module_or_interface_or_program_or_udp_instantiation() IModule_or_interface_or_program_or_udp_instantiationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModule_or_interface_or_program_or_udp_instantiationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModule_or_interface_or_program_or_udp_instantiationContext)
}

func (s *Bind_instantiationContext) Checker_instantiation() IChecker_instantiationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChecker_instantiationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChecker_instantiationContext)
}

func (s *Bind_instantiationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bind_instantiationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bind_instantiationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterBind_instantiation(s)
	}
}

func (s *Bind_instantiationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitBind_instantiation(s)
	}
}

func (p *SV2017Parser) Bind_instantiation() (localctx IBind_instantiationContext) {
	localctx = NewBind_instantiationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1006, SV2017ParserRULE_bind_instantiation)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6919)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 902, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6917)
			p.Module_or_interface_or_program_or_udp_instantiation()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6918)
			p.Checker_instantiation()
		}

	}

	return localctx
}

// IConfig_declarationContext is an interface to support dynamic dispatch.
type IConfig_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConfig_declarationContext differentiates from other interfaces.
	IsConfig_declarationContext()
}

type Config_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConfig_declarationContext() *Config_declarationContext {
	var p = new(Config_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_config_declaration
	return p
}

func (*Config_declarationContext) IsConfig_declarationContext() {}

func NewConfig_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Config_declarationContext {
	var p = new(Config_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_config_declaration

	return p
}

func (s *Config_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Config_declarationContext) KW_CONFIG() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_CONFIG, 0)
}

func (s *Config_declarationContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Config_declarationContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Config_declarationContext) AllSEMI() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserSEMI)
}

func (s *Config_declarationContext) SEMI(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, i)
}

func (s *Config_declarationContext) Design_statement() IDesign_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDesign_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDesign_statementContext)
}

func (s *Config_declarationContext) KW_ENDCONFIG() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ENDCONFIG, 0)
}

func (s *Config_declarationContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Config_declarationContext) AllLocal_parameter_declaration() []ILocal_parameter_declarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILocal_parameter_declarationContext)(nil)).Elem())
	var tst = make([]ILocal_parameter_declarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILocal_parameter_declarationContext)
		}
	}

	return tst
}

func (s *Config_declarationContext) Local_parameter_declaration(i int) ILocal_parameter_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILocal_parameter_declarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILocal_parameter_declarationContext)
}

func (s *Config_declarationContext) AllConfig_rule_statement() []IConfig_rule_statementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConfig_rule_statementContext)(nil)).Elem())
	var tst = make([]IConfig_rule_statementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConfig_rule_statementContext)
		}
	}

	return tst
}

func (s *Config_declarationContext) Config_rule_statement(i int) IConfig_rule_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConfig_rule_statementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConfig_rule_statementContext)
}

func (s *Config_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Config_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Config_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterConfig_declaration(s)
	}
}

func (s *Config_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitConfig_declaration(s)
	}
}

func (p *SV2017Parser) Config_declaration() (localctx IConfig_declarationContext) {
	localctx = NewConfig_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1008, SV2017ParserRULE_config_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6921)
		p.Match(SV2017ParserKW_CONFIG)
	}
	{
		p.SetState(6922)
		p.Identifier()
	}
	{
		p.SetState(6923)
		p.Match(SV2017ParserSEMI)
	}
	p.SetState(6929)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserKW_LOCALPARAM {
		{
			p.SetState(6924)
			p.Local_parameter_declaration()
		}
		{
			p.SetState(6925)
			p.Match(SV2017ParserSEMI)
		}

		p.SetState(6931)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(6932)
		p.Design_statement()
	}
	p.SetState(6936)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserKW_CELL || _la == SV2017ParserKW_DEFAULT || _la == SV2017ParserKW_INSTANCE {
		{
			p.SetState(6933)
			p.Config_rule_statement()
		}

		p.SetState(6938)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(6939)
		p.Match(SV2017ParserKW_ENDCONFIG)
	}
	p.SetState(6943)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserCOLON:
		{
			p.SetState(6940)
			p.Match(SV2017ParserCOLON)
		}
		{
			p.SetState(6941)
			p.Identifier()
		}

	case SV2017ParserEOF, SV2017ParserTICK_TIMESCALE, SV2017ParserTICK_DEFAULT_NETTYPE, SV2017ParserTICK_INCLUDE, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_AUTOMATIC, SV2017ParserKW_BIND, SV2017ParserKW_BIT, SV2017ParserKW_BYTE, SV2017ParserKW_CHANDLE, SV2017ParserKW_CHECKER, SV2017ParserKW_CLASS, SV2017ParserKW_CONFIG, SV2017ParserKW_CONST, SV2017ParserKW_CONSTRAINT, SV2017ParserKW_COVERGROUP, SV2017ParserKW_ENUM, SV2017ParserKW_EVENT, SV2017ParserKW_EXPORT, SV2017ParserKW_EXTERN, SV2017ParserKW_FUNCTION, SV2017ParserKW_IMPORT, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_INTERCONNECT, SV2017ParserKW_INTERFACE, SV2017ParserKW_LET, SV2017ParserKW_LOCAL, SV2017ParserKW_LOCALPARAM, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_MACROMODULE, SV2017ParserKW_MODULE, SV2017ParserKW_NETTYPE, SV2017ParserKW_NONE, SV2017ParserKW_OPTION, SV2017ParserKW_PACKAGE, SV2017ParserKW_PARAMETER, SV2017ParserKW_PRIMITIVE, SV2017ParserKW_PROGRAM, SV2017ParserKW_PROPERTY, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_SAMPLE, SV2017ParserKW_SEQUENCE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_STATIC, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_SUPPLY0, SV2017ParserKW_SUPPLY1, SV2017ParserKW_TASK, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TIMEPRECISION, SV2017ParserKW_TIMEUNIT, SV2017ParserKW_TRI, SV2017ParserKW_TRI0, SV2017ParserKW_TRI1, SV2017ParserKW_TRIAND, SV2017ParserKW_TRIOR, SV2017ParserKW_TRIREG, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_TYPEDEF, SV2017ParserKW_UNION, SV2017ParserKW_UNSIGNED, SV2017ParserKW_UWIRE, SV2017ParserKW_VAR, SV2017ParserKW_VIRTUAL, SV2017ParserKW_WAND, SV2017ParserKW_WIRE, SV2017ParserKW_WOR, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSEMI, SV2017ParserLPAREN, SV2017ParserLSQUARE_BR:

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDesign_statementContext is an interface to support dynamic dispatch.
type IDesign_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDesign_statementContext differentiates from other interfaces.
	IsDesign_statementContext()
}

type Design_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDesign_statementContext() *Design_statementContext {
	var p = new(Design_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_design_statement
	return p
}

func (*Design_statementContext) IsDesign_statementContext() {}

func NewDesign_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Design_statementContext {
	var p = new(Design_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_design_statement

	return p
}

func (s *Design_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Design_statementContext) KW_DESIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DESIGN, 0)
}

func (s *Design_statementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Design_statementContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Design_statementContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Design_statementContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserDOT)
}

func (s *Design_statementContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOT, i)
}

func (s *Design_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Design_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Design_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterDesign_statement(s)
	}
}

func (s *Design_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitDesign_statement(s)
	}
}

func (p *SV2017Parser) Design_statement() (localctx IDesign_statementContext) {
	localctx = NewDesign_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1010, SV2017ParserRULE_design_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6945)
		p.Match(SV2017ParserKW_DESIGN)
	}
	p.SetState(6954)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
		p.SetState(6949)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 906, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6946)
				p.Identifier()
			}
			{
				p.SetState(6947)
				p.Match(SV2017ParserDOT)
			}

		}
		{
			p.SetState(6951)
			p.Identifier()
		}

		p.SetState(6956)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(6957)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IConfig_rule_statementContext is an interface to support dynamic dispatch.
type IConfig_rule_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConfig_rule_statementContext differentiates from other interfaces.
	IsConfig_rule_statementContext()
}

type Config_rule_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConfig_rule_statementContext() *Config_rule_statementContext {
	var p = new(Config_rule_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_config_rule_statement
	return p
}

func (*Config_rule_statementContext) IsConfig_rule_statementContext() {}

func NewConfig_rule_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Config_rule_statementContext {
	var p = new(Config_rule_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_config_rule_statement

	return p
}

func (s *Config_rule_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Config_rule_statementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Config_rule_statementContext) KW_DEFAULT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DEFAULT, 0)
}

func (s *Config_rule_statementContext) Liblist_clause() ILiblist_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILiblist_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILiblist_clauseContext)
}

func (s *Config_rule_statementContext) Inst_clause() IInst_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInst_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInst_clauseContext)
}

func (s *Config_rule_statementContext) Cell_clause() ICell_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICell_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICell_clauseContext)
}

func (s *Config_rule_statementContext) Use_clause() IUse_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUse_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUse_clauseContext)
}

func (s *Config_rule_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Config_rule_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Config_rule_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterConfig_rule_statement(s)
	}
}

func (s *Config_rule_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitConfig_rule_statement(s)
	}
}

func (p *SV2017Parser) Config_rule_statement() (localctx IConfig_rule_statementContext) {
	localctx = NewConfig_rule_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1012, SV2017ParserRULE_config_rule_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6969)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_DEFAULT:
		{
			p.SetState(6959)
			p.Match(SV2017ParserKW_DEFAULT)
		}
		{
			p.SetState(6960)
			p.Liblist_clause()
		}

	case SV2017ParserKW_CELL, SV2017ParserKW_INSTANCE:
		p.SetState(6963)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SV2017ParserKW_INSTANCE:
			{
				p.SetState(6961)
				p.Inst_clause()
			}

		case SV2017ParserKW_CELL:
			{
				p.SetState(6962)
				p.Cell_clause()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(6967)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SV2017ParserKW_LIBLIST:
			{
				p.SetState(6965)
				p.Liblist_clause()
			}

		case SV2017ParserKW_USE:
			{
				p.SetState(6966)
				p.Use_clause()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(6971)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// IInst_clauseContext is an interface to support dynamic dispatch.
type IInst_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInst_clauseContext differentiates from other interfaces.
	IsInst_clauseContext()
}

type Inst_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInst_clauseContext() *Inst_clauseContext {
	var p = new(Inst_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_inst_clause
	return p
}

func (*Inst_clauseContext) IsInst_clauseContext() {}

func NewInst_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Inst_clauseContext {
	var p = new(Inst_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_inst_clause

	return p
}

func (s *Inst_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Inst_clauseContext) KW_INSTANCE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_INSTANCE, 0)
}

func (s *Inst_clauseContext) Inst_name() IInst_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInst_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInst_nameContext)
}

func (s *Inst_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Inst_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Inst_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterInst_clause(s)
	}
}

func (s *Inst_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitInst_clause(s)
	}
}

func (p *SV2017Parser) Inst_clause() (localctx IInst_clauseContext) {
	localctx = NewInst_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1014, SV2017ParserRULE_inst_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6973)
		p.Match(SV2017ParserKW_INSTANCE)
	}
	{
		p.SetState(6974)
		p.Inst_name()
	}

	return localctx
}

// IInst_nameContext is an interface to support dynamic dispatch.
type IInst_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInst_nameContext differentiates from other interfaces.
	IsInst_nameContext()
}

type Inst_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInst_nameContext() *Inst_nameContext {
	var p = new(Inst_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_inst_name
	return p
}

func (*Inst_nameContext) IsInst_nameContext() {}

func NewInst_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Inst_nameContext {
	var p = new(Inst_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_inst_name

	return p
}

func (s *Inst_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Inst_nameContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Inst_nameContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Inst_nameContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserDOT)
}

func (s *Inst_nameContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOT, i)
}

func (s *Inst_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Inst_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Inst_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterInst_name(s)
	}
}

func (s *Inst_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitInst_name(s)
	}
}

func (p *SV2017Parser) Inst_name() (localctx IInst_nameContext) {
	localctx = NewInst_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1016, SV2017ParserRULE_inst_name)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6976)
		p.Identifier()
	}
	p.SetState(6981)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserDOT {
		{
			p.SetState(6977)
			p.Match(SV2017ParserDOT)
		}
		{
			p.SetState(6978)
			p.Identifier()
		}

		p.SetState(6983)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ICell_clauseContext is an interface to support dynamic dispatch.
type ICell_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCell_clauseContext differentiates from other interfaces.
	IsCell_clauseContext()
}

type Cell_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCell_clauseContext() *Cell_clauseContext {
	var p = new(Cell_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_cell_clause
	return p
}

func (*Cell_clauseContext) IsCell_clauseContext() {}

func NewCell_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cell_clauseContext {
	var p = new(Cell_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_cell_clause

	return p
}

func (s *Cell_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Cell_clauseContext) KW_CELL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_CELL, 0)
}

func (s *Cell_clauseContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Cell_clauseContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Cell_clauseContext) DOT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOT, 0)
}

func (s *Cell_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cell_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Cell_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCell_clause(s)
	}
}

func (s *Cell_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCell_clause(s)
	}
}

func (p *SV2017Parser) Cell_clause() (localctx ICell_clauseContext) {
	localctx = NewCell_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1018, SV2017ParserRULE_cell_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6984)
		p.Match(SV2017ParserKW_CELL)
	}
	p.SetState(6988)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 912, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6985)
			p.Identifier()
		}
		{
			p.SetState(6986)
			p.Match(SV2017ParserDOT)
		}

	}
	{
		p.SetState(6990)
		p.Identifier()
	}

	return localctx
}

// ILiblist_clauseContext is an interface to support dynamic dispatch.
type ILiblist_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLiblist_clauseContext differentiates from other interfaces.
	IsLiblist_clauseContext()
}

type Liblist_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiblist_clauseContext() *Liblist_clauseContext {
	var p = new(Liblist_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_liblist_clause
	return p
}

func (*Liblist_clauseContext) IsLiblist_clauseContext() {}

func NewLiblist_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Liblist_clauseContext {
	var p = new(Liblist_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_liblist_clause

	return p
}

func (s *Liblist_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Liblist_clauseContext) KW_LIBLIST() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_LIBLIST, 0)
}

func (s *Liblist_clauseContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Liblist_clauseContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Liblist_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Liblist_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Liblist_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterLiblist_clause(s)
	}
}

func (s *Liblist_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitLiblist_clause(s)
	}
}

func (p *SV2017Parser) Liblist_clause() (localctx ILiblist_clauseContext) {
	localctx = NewLiblist_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1020, SV2017ParserRULE_liblist_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6992)
		p.Match(SV2017ParserKW_LIBLIST)
	}
	p.SetState(6996)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
		{
			p.SetState(6993)
			p.Identifier()
		}

		p.SetState(6998)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IUse_clauseContext is an interface to support dynamic dispatch.
type IUse_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUse_clauseContext differentiates from other interfaces.
	IsUse_clauseContext()
}

type Use_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUse_clauseContext() *Use_clauseContext {
	var p = new(Use_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_use_clause
	return p
}

func (*Use_clauseContext) IsUse_clauseContext() {}

func NewUse_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Use_clauseContext {
	var p = new(Use_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_use_clause

	return p
}

func (s *Use_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Use_clauseContext) KW_USE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_USE, 0)
}

func (s *Use_clauseContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Use_clauseContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Use_clauseContext) AllNamed_parameter_assignment() []INamed_parameter_assignmentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INamed_parameter_assignmentContext)(nil)).Elem())
	var tst = make([]INamed_parameter_assignmentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INamed_parameter_assignmentContext)
		}
	}

	return tst
}

func (s *Use_clauseContext) Named_parameter_assignment(i int) INamed_parameter_assignmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamed_parameter_assignmentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INamed_parameter_assignmentContext)
}

func (s *Use_clauseContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Use_clauseContext) KW_CONFIG() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_CONFIG, 0)
}

func (s *Use_clauseContext) DOT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserDOT, 0)
}

func (s *Use_clauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Use_clauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Use_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Use_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Use_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterUse_clause(s)
	}
}

func (s *Use_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitUse_clause(s)
	}
}

func (p *SV2017Parser) Use_clause() (localctx IUse_clauseContext) {
	localctx = NewUse_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1022, SV2017ParserRULE_use_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6999)
		p.Match(SV2017ParserKW_USE)
	}
	p.SetState(7024)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_SAMPLE, SV2017ParserKW_STD, SV2017ParserKW_TYPE_OPTION, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
		p.SetState(7003)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 914, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(7000)
				p.Identifier()
			}
			{
				p.SetState(7001)
				p.Match(SV2017ParserDOT)
			}

		}
		{
			p.SetState(7005)
			p.Identifier()
		}
		p.SetState(7014)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserDOT {
			{
				p.SetState(7006)
				p.Named_parameter_assignment()
			}
			p.SetState(7011)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SV2017ParserCOMMA {
				{
					p.SetState(7007)
					p.Match(SV2017ParserCOMMA)
				}
				{
					p.SetState(7008)
					p.Named_parameter_assignment()
				}

				p.SetState(7013)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}

	case SV2017ParserDOT:
		{
			p.SetState(7016)
			p.Named_parameter_assignment()
		}
		p.SetState(7021)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserCOMMA {
			{
				p.SetState(7017)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(7018)
				p.Named_parameter_assignment()
			}

			p.SetState(7023)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(7028)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserCOLON {
		{
			p.SetState(7026)
			p.Match(SV2017ParserCOLON)
		}
		{
			p.SetState(7027)
			p.Match(SV2017ParserKW_CONFIG)
		}

	}

	return localctx
}

// INet_aliasContext is an interface to support dynamic dispatch.
type INet_aliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNet_aliasContext differentiates from other interfaces.
	IsNet_aliasContext()
}

type Net_aliasContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNet_aliasContext() *Net_aliasContext {
	var p = new(Net_aliasContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_net_alias
	return p
}

func (*Net_aliasContext) IsNet_aliasContext() {}

func NewNet_aliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Net_aliasContext {
	var p = new(Net_aliasContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_net_alias

	return p
}

func (s *Net_aliasContext) GetParser() antlr.Parser { return s.parser }

func (s *Net_aliasContext) KW_ALIAS() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ALIAS, 0)
}

func (s *Net_aliasContext) AllNet_lvalue() []INet_lvalueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INet_lvalueContext)(nil)).Elem())
	var tst = make([]INet_lvalueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INet_lvalueContext)
		}
	}

	return tst
}

func (s *Net_aliasContext) Net_lvalue(i int) INet_lvalueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INet_lvalueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INet_lvalueContext)
}

func (s *Net_aliasContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Net_aliasContext) AllASSIGN() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserASSIGN)
}

func (s *Net_aliasContext) ASSIGN(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserASSIGN, i)
}

func (s *Net_aliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Net_aliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Net_aliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterNet_alias(s)
	}
}

func (s *Net_aliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitNet_alias(s)
	}
}

func (p *SV2017Parser) Net_alias() (localctx INet_aliasContext) {
	localctx = NewNet_aliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1024, SV2017ParserRULE_net_alias)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7030)
		p.Match(SV2017ParserKW_ALIAS)
	}
	{
		p.SetState(7031)
		p.Net_lvalue()
	}
	p.SetState(7034)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == SV2017ParserASSIGN {
		{
			p.SetState(7032)
			p.Match(SV2017ParserASSIGN)
		}
		{
			p.SetState(7033)
			p.Net_lvalue()
		}

		p.SetState(7036)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(7038)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// ISpecify_blockContext is an interface to support dynamic dispatch.
type ISpecify_blockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSpecify_blockContext differentiates from other interfaces.
	IsSpecify_blockContext()
}

type Specify_blockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySpecify_blockContext() *Specify_blockContext {
	var p = new(Specify_blockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_specify_block
	return p
}

func (*Specify_blockContext) IsSpecify_blockContext() {}

func NewSpecify_blockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Specify_blockContext {
	var p = new(Specify_blockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_specify_block

	return p
}

func (s *Specify_blockContext) GetParser() antlr.Parser { return s.parser }

func (s *Specify_blockContext) KW_SPECIFY() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_SPECIFY, 0)
}

func (s *Specify_blockContext) KW_ENDSPECIFY() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ENDSPECIFY, 0)
}

func (s *Specify_blockContext) AllSpecify_item() []ISpecify_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISpecify_itemContext)(nil)).Elem())
	var tst = make([]ISpecify_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISpecify_itemContext)
		}
	}

	return tst
}

func (s *Specify_blockContext) Specify_item(i int) ISpecify_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISpecify_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISpecify_itemContext)
}

func (s *Specify_blockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Specify_blockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Specify_blockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterSpecify_block(s)
	}
}

func (s *Specify_blockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitSpecify_block(s)
	}
}

func (p *SV2017Parser) Specify_block() (localctx ISpecify_blockContext) {
	localctx = NewSpecify_blockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1026, SV2017ParserRULE_specify_block)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7040)
		p.Match(SV2017ParserKW_SPECIFY)
	}
	p.SetState(7044)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la-22)&-(0x1f+1)) == 0 && ((1<<uint((_la-22)))&((1<<(SV2017ParserKW_DOLAR_FULLSKEW-22))|(1<<(SV2017ParserKW_DOLAR_HOLD-22))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-22))|(1<<(SV2017ParserKW_DOLAR_PERIOD-22))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-22))|(1<<(SV2017ParserKW_DOLAR_RECREM-22))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-22))|(1<<(SV2017ParserKW_DOLAR_SETUP-22))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-22))|(1<<(SV2017ParserKW_DOLAR_SKEW-22))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-22))|(1<<(SV2017ParserKW_DOLAR_WIDTH-22)))) != 0) || _la == SV2017ParserKW_IF || _la == SV2017ParserKW_IFNONE || (((_la-169)&-(0x1f+1)) == 0 && ((1<<uint((_la-169)))&((1<<(SV2017ParserKW_NOSHOWCANCELLED-169))|(1<<(SV2017ParserKW_PULSESTYLE_ONDETECT-169))|(1<<(SV2017ParserKW_PULSESTYLE_ONEVENT-169)))) != 0) || _la == SV2017ParserKW_SHOWCANCELLED || _la == SV2017ParserKW_SPECPARAM || _la == SV2017ParserLPAREN {
		{
			p.SetState(7041)
			p.Specify_item()
		}

		p.SetState(7046)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(7047)
		p.Match(SV2017ParserKW_ENDSPECIFY)
	}

	return localctx
}

// IGenerate_regionContext is an interface to support dynamic dispatch.
type IGenerate_regionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGenerate_regionContext differentiates from other interfaces.
	IsGenerate_regionContext()
}

type Generate_regionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGenerate_regionContext() *Generate_regionContext {
	var p = new(Generate_regionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_generate_region
	return p
}

func (*Generate_regionContext) IsGenerate_regionContext() {}

func NewGenerate_regionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Generate_regionContext {
	var p = new(Generate_regionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_generate_region

	return p
}

func (s *Generate_regionContext) GetParser() antlr.Parser { return s.parser }

func (s *Generate_regionContext) KW_GENERATE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_GENERATE, 0)
}

func (s *Generate_regionContext) KW_ENDGENERATE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ENDGENERATE, 0)
}

func (s *Generate_regionContext) AllGenerate_item() []IGenerate_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IGenerate_itemContext)(nil)).Elem())
	var tst = make([]IGenerate_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IGenerate_itemContext)
		}
	}

	return tst
}

func (s *Generate_regionContext) Generate_item(i int) IGenerate_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenerate_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IGenerate_itemContext)
}

func (s *Generate_regionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Generate_regionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Generate_regionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterGenerate_region(s)
	}
}

func (s *Generate_regionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitGenerate_region(s)
	}
}

func (p *SV2017Parser) Generate_region() (localctx IGenerate_regionContext) {
	localctx = NewGenerate_regionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1028, SV2017ParserRULE_generate_region)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7049)
		p.Match(SV2017ParserKW_GENERATE)
	}
	p.SetState(7053)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_ALIAS-20))|(1<<(SV2017ParserKW_ALWAYS-20))|(1<<(SV2017ParserKW_ALWAYS_COMB-20))|(1<<(SV2017ParserKW_ALWAYS_FF-20))|(1<<(SV2017ParserKW_ALWAYS_LATCH-20))|(1<<(SV2017ParserKW_AND-20))|(1<<(SV2017ParserKW_ASSERT-20))|(1<<(SV2017ParserKW_ASSIGN-20))|(1<<(SV2017ParserKW_ASSUME-20))|(1<<(SV2017ParserKW_AUTOMATIC-20)))) != 0) || (((_la-52)&-(0x1f+1)) == 0 && ((1<<uint((_la-52)))&((1<<(SV2017ParserKW_BEGIN-52))|(1<<(SV2017ParserKW_BIND-52))|(1<<(SV2017ParserKW_BIT-52))|(1<<(SV2017ParserKW_BUF-52))|(1<<(SV2017ParserKW_BUFIF0-52))|(1<<(SV2017ParserKW_BUFIF1-52))|(1<<(SV2017ParserKW_BYTE-52))|(1<<(SV2017ParserKW_CASE-52))|(1<<(SV2017ParserKW_CHANDLE-52))|(1<<(SV2017ParserKW_CHECKER-52))|(1<<(SV2017ParserKW_CLASS-52))|(1<<(SV2017ParserKW_CLOCKING-52))|(1<<(SV2017ParserKW_CMOS-52))|(1<<(SV2017ParserKW_CONST-52))|(1<<(SV2017ParserKW_CONSTRAINT-52))|(1<<(SV2017ParserKW_COVER-52))|(1<<(SV2017ParserKW_COVERGROUP-52))|(1<<(SV2017ParserKW_DEFAULT-52))|(1<<(SV2017ParserKW_DEFPARAM-52)))) != 0) || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(SV2017ParserKW_ENUM-107))|(1<<(SV2017ParserKW_EVENT-107))|(1<<(SV2017ParserKW_EXPORT-107))|(1<<(SV2017ParserKW_EXTERN-107))|(1<<(SV2017ParserKW_FINAL-107))|(1<<(SV2017ParserKW_FOR-107))|(1<<(SV2017ParserKW_FUNCTION-107))|(1<<(SV2017ParserKW_GENERATE-107))|(1<<(SV2017ParserKW_GENVAR-107))|(1<<(SV2017ParserKW_GLOBAL-107))|(1<<(SV2017ParserKW_IF-107))|(1<<(SV2017ParserKW_IMPORT-107))|(1<<(SV2017ParserKW_INITIAL-107)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_INTERCONNECT-141))|(1<<(SV2017ParserKW_INTERFACE-141))|(1<<(SV2017ParserKW_LET-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOCALPARAM-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141))|(1<<(SV2017ParserKW_NAND-141))|(1<<(SV2017ParserKW_NETTYPE-141))|(1<<(SV2017ParserKW_NMOS-141))|(1<<(SV2017ParserKW_NOR-141))|(1<<(SV2017ParserKW_NONE-141))|(1<<(SV2017ParserKW_NOT-141))|(1<<(SV2017ParserKW_NOTIF0-141))|(1<<(SV2017ParserKW_NOTIF1-141)))) != 0) || (((_la-174)&-(0x1f+1)) == 0 && ((1<<uint((_la-174)))&((1<<(SV2017ParserKW_OPTION-174))|(1<<(SV2017ParserKW_OR-174))|(1<<(SV2017ParserKW_PARAMETER-174))|(1<<(SV2017ParserKW_PMOS-174))|(1<<(SV2017ParserKW_PROPERTY-174))|(1<<(SV2017ParserKW_PULLDOWN-174))|(1<<(SV2017ParserKW_PULLUP-174))|(1<<(SV2017ParserKW_RAND-174))|(1<<(SV2017ParserKW_RANDOMIZE-174))|(1<<(SV2017ParserKW_RCMOS-174))|(1<<(SV2017ParserKW_REAL-174))|(1<<(SV2017ParserKW_REALTIME-174))|(1<<(SV2017ParserKW_REG-174)))) != 0) || (((_la-207)&-(0x1f+1)) == 0 && ((1<<uint((_la-207)))&((1<<(SV2017ParserKW_RESTRICT-207))|(1<<(SV2017ParserKW_RNMOS-207))|(1<<(SV2017ParserKW_RPMOS-207))|(1<<(SV2017ParserKW_RTRAN-207))|(1<<(SV2017ParserKW_RTRANIF0-207))|(1<<(SV2017ParserKW_RTRANIF1-207))|(1<<(SV2017ParserKW_SAMPLE-207))|(1<<(SV2017ParserKW_SEQUENCE-207))|(1<<(SV2017ParserKW_SHORTINT-207))|(1<<(SV2017ParserKW_SHORTREAL-207))|(1<<(SV2017ParserKW_SIGNED-207))|(1<<(SV2017ParserKW_STATIC-207))|(1<<(SV2017ParserKW_STD-207))|(1<<(SV2017ParserKW_STRING-207))|(1<<(SV2017ParserKW_STRUCT-207))|(1<<(SV2017ParserKW_SUPER-207)))) != 0) || (((_la-239)&-(0x1f+1)) == 0 && ((1<<uint((_la-239)))&((1<<(SV2017ParserKW_SUPPLY0-239))|(1<<(SV2017ParserKW_SUPPLY1-239))|(1<<(SV2017ParserKW_TASK-239))|(1<<(SV2017ParserKW_THIS-239))|(1<<(SV2017ParserKW_TIME-239))|(1<<(SV2017ParserKW_TRAN-239))|(1<<(SV2017ParserKW_TRANIF0-239))|(1<<(SV2017ParserKW_TRANIF1-239))|(1<<(SV2017ParserKW_TRI-239))|(1<<(SV2017ParserKW_TRI0-239))|(1<<(SV2017ParserKW_TRI1-239))|(1<<(SV2017ParserKW_TRIAND-239))|(1<<(SV2017ParserKW_TRIOR-239))|(1<<(SV2017ParserKW_TRIREG-239))|(1<<(SV2017ParserKW_TYPE-239))|(1<<(SV2017ParserKW_TYPE_OPTION-239))|(1<<(SV2017ParserKW_TYPEDEF-239))|(1<<(SV2017ParserKW_UNION-239))|(1<<(SV2017ParserKW_UNSIGNED-239)))) != 0) || (((_la-271)&-(0x1f+1)) == 0 && ((1<<uint((_la-271)))&((1<<(SV2017ParserKW_UWIRE-271))|(1<<(SV2017ParserKW_VAR-271))|(1<<(SV2017ParserKW_VIRTUAL-271))|(1<<(SV2017ParserKW_WAND-271))|(1<<(SV2017ParserKW_WIRE-271))|(1<<(SV2017ParserKW_WOR-271))|(1<<(SV2017ParserKW_XNOR-271))|(1<<(SV2017ParserKW_XOR-271))|(1<<(SV2017ParserC_IDENTIFIER-271))|(1<<(SV2017ParserTICK_IDENTIFIER-271))|(1<<(SV2017ParserESCAPED_IDENTIFIER-271)))) != 0) || (((_la-303)&-(0x1f+1)) == 0 && ((1<<uint((_la-303)))&((1<<(SV2017ParserSIMPLE_IDENTIFIER-303))|(1<<(SV2017ParserSEMI-303))|(1<<(SV2017ParserLPAREN-303))|(1<<(SV2017ParserLSQUARE_BR-303)))) != 0) {
		{
			p.SetState(7050)
			p.Generate_item()
		}

		p.SetState(7055)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(7056)
		p.Match(SV2017ParserKW_ENDGENERATE)
	}

	return localctx
}

// IGenvar_expressionContext is an interface to support dynamic dispatch.
type IGenvar_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGenvar_expressionContext differentiates from other interfaces.
	IsGenvar_expressionContext()
}

type Genvar_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGenvar_expressionContext() *Genvar_expressionContext {
	var p = new(Genvar_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_genvar_expression
	return p
}

func (*Genvar_expressionContext) IsGenvar_expressionContext() {}

func NewGenvar_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Genvar_expressionContext {
	var p = new(Genvar_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_genvar_expression

	return p
}

func (s *Genvar_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Genvar_expressionContext) Constant_expression() IConstant_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_expressionContext)
}

func (s *Genvar_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Genvar_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Genvar_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterGenvar_expression(s)
	}
}

func (s *Genvar_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitGenvar_expression(s)
	}
}

func (p *SV2017Parser) Genvar_expression() (localctx IGenvar_expressionContext) {
	localctx = NewGenvar_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1030, SV2017ParserRULE_genvar_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7058)
		p.Constant_expression()
	}

	return localctx
}

// ILoop_generate_constructContext is an interface to support dynamic dispatch.
type ILoop_generate_constructContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoop_generate_constructContext differentiates from other interfaces.
	IsLoop_generate_constructContext()
}

type Loop_generate_constructContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoop_generate_constructContext() *Loop_generate_constructContext {
	var p = new(Loop_generate_constructContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_loop_generate_construct
	return p
}

func (*Loop_generate_constructContext) IsLoop_generate_constructContext() {}

func NewLoop_generate_constructContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Loop_generate_constructContext {
	var p = new(Loop_generate_constructContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_loop_generate_construct

	return p
}

func (s *Loop_generate_constructContext) GetParser() antlr.Parser { return s.parser }

func (s *Loop_generate_constructContext) KW_FOR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_FOR, 0)
}

func (s *Loop_generate_constructContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Loop_generate_constructContext) Genvar_initialization() IGenvar_initializationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenvar_initializationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenvar_initializationContext)
}

func (s *Loop_generate_constructContext) AllSEMI() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserSEMI)
}

func (s *Loop_generate_constructContext) SEMI(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, i)
}

func (s *Loop_generate_constructContext) Genvar_expression() IGenvar_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenvar_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenvar_expressionContext)
}

func (s *Loop_generate_constructContext) Genvar_iteration() IGenvar_iterationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenvar_iterationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenvar_iterationContext)
}

func (s *Loop_generate_constructContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Loop_generate_constructContext) Generate_item() IGenerate_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenerate_itemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenerate_itemContext)
}

func (s *Loop_generate_constructContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Loop_generate_constructContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Loop_generate_constructContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterLoop_generate_construct(s)
	}
}

func (s *Loop_generate_constructContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitLoop_generate_construct(s)
	}
}

func (p *SV2017Parser) Loop_generate_construct() (localctx ILoop_generate_constructContext) {
	localctx = NewLoop_generate_constructContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1032, SV2017ParserRULE_loop_generate_construct)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7060)
		p.Match(SV2017ParserKW_FOR)
	}
	{
		p.SetState(7061)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(7062)
		p.Genvar_initialization()
	}
	{
		p.SetState(7063)
		p.Match(SV2017ParserSEMI)
	}
	{
		p.SetState(7064)
		p.Genvar_expression()
	}
	{
		p.SetState(7065)
		p.Match(SV2017ParserSEMI)
	}
	{
		p.SetState(7066)
		p.Genvar_iteration()
	}
	{
		p.SetState(7067)
		p.Match(SV2017ParserRPAREN)
	}
	{
		p.SetState(7068)
		p.Generate_item()
	}

	return localctx
}

// IGenvar_initializationContext is an interface to support dynamic dispatch.
type IGenvar_initializationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGenvar_initializationContext differentiates from other interfaces.
	IsGenvar_initializationContext()
}

type Genvar_initializationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGenvar_initializationContext() *Genvar_initializationContext {
	var p = new(Genvar_initializationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_genvar_initialization
	return p
}

func (*Genvar_initializationContext) IsGenvar_initializationContext() {}

func NewGenvar_initializationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Genvar_initializationContext {
	var p = new(Genvar_initializationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_genvar_initialization

	return p
}

func (s *Genvar_initializationContext) GetParser() antlr.Parser { return s.parser }

func (s *Genvar_initializationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Genvar_initializationContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserASSIGN, 0)
}

func (s *Genvar_initializationContext) Constant_expression() IConstant_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_expressionContext)
}

func (s *Genvar_initializationContext) KW_GENVAR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_GENVAR, 0)
}

func (s *Genvar_initializationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Genvar_initializationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Genvar_initializationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterGenvar_initialization(s)
	}
}

func (s *Genvar_initializationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitGenvar_initialization(s)
	}
}

func (p *SV2017Parser) Genvar_initialization() (localctx IGenvar_initializationContext) {
	localctx = NewGenvar_initializationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1034, SV2017ParserRULE_genvar_initialization)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(7071)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_GENVAR {
		{
			p.SetState(7070)
			p.Match(SV2017ParserKW_GENVAR)
		}

	}
	{
		p.SetState(7073)
		p.Identifier()
	}
	{
		p.SetState(7074)
		p.Match(SV2017ParserASSIGN)
	}
	{
		p.SetState(7075)
		p.Constant_expression()
	}

	return localctx
}

// IGenvar_iterationContext is an interface to support dynamic dispatch.
type IGenvar_iterationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGenvar_iterationContext differentiates from other interfaces.
	IsGenvar_iterationContext()
}

type Genvar_iterationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGenvar_iterationContext() *Genvar_iterationContext {
	var p = new(Genvar_iterationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_genvar_iteration
	return p
}

func (*Genvar_iterationContext) IsGenvar_iterationContext() {}

func NewGenvar_iterationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Genvar_iterationContext {
	var p = new(Genvar_iterationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_genvar_iteration

	return p
}

func (s *Genvar_iterationContext) GetParser() antlr.Parser { return s.parser }

func (s *Genvar_iterationContext) CopyFrom(ctx *Genvar_iterationContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Genvar_iterationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Genvar_iterationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type GenIterPrefixContext struct {
	*Genvar_iterationContext
}

func NewGenIterPrefixContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GenIterPrefixContext {
	var p = new(GenIterPrefixContext)

	p.Genvar_iterationContext = NewEmptyGenvar_iterationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Genvar_iterationContext))

	return p
}

func (s *GenIterPrefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenIterPrefixContext) Inc_or_dec_operator() IInc_or_dec_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInc_or_dec_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInc_or_dec_operatorContext)
}

func (s *GenIterPrefixContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *GenIterPrefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterGenIterPrefix(s)
	}
}

func (s *GenIterPrefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitGenIterPrefix(s)
	}
}

type GenIterPostfixContext struct {
	*Genvar_iterationContext
}

func NewGenIterPostfixContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GenIterPostfixContext {
	var p = new(GenIterPostfixContext)

	p.Genvar_iterationContext = NewEmptyGenvar_iterationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Genvar_iterationContext))

	return p
}

func (s *GenIterPostfixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenIterPostfixContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *GenIterPostfixContext) Assignment_operator() IAssignment_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignment_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignment_operatorContext)
}

func (s *GenIterPostfixContext) Genvar_expression() IGenvar_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenvar_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenvar_expressionContext)
}

func (s *GenIterPostfixContext) Inc_or_dec_operator() IInc_or_dec_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInc_or_dec_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInc_or_dec_operatorContext)
}

func (s *GenIterPostfixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterGenIterPostfix(s)
	}
}

func (s *GenIterPostfixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitGenIterPostfix(s)
	}
}

func (p *SV2017Parser) Genvar_iteration() (localctx IGenvar_iterationContext) {
	localctx = NewGenvar_iterationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1036, SV2017ParserRULE_genvar_iteration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7087)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_SAMPLE, SV2017ParserKW_STD, SV2017ParserKW_TYPE_OPTION, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER:
		localctx = NewGenIterPostfixContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7077)
			p.Identifier()
		}
		p.SetState(7082)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SV2017ParserASSIGN, SV2017ParserPLUS_ASSIGN, SV2017ParserMINUS_ASSIGN, SV2017ParserMUL_ASSIGN, SV2017ParserDIV_ASSIGN, SV2017ParserMOD_ASSIGN, SV2017ParserAND_ASSIGN, SV2017ParserOR_ASSIGN, SV2017ParserXOR_ASSIGN, SV2017ParserSHIFT_LEFT_ASSIGN, SV2017ParserSHIFT_RIGHT_ASSIGN, SV2017ParserARITH_SHIFT_LEFT_ASSIGN, SV2017ParserARITH_SHIFT_RIGHT_ASSIGN:
			{
				p.SetState(7078)
				p.Assignment_operator()
			}
			{
				p.SetState(7079)
				p.Genvar_expression()
			}

		case SV2017ParserINCR, SV2017ParserDECR:
			{
				p.SetState(7081)
				p.Inc_or_dec_operator()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case SV2017ParserINCR, SV2017ParserDECR:
		localctx = NewGenIterPrefixContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7084)
			p.Inc_or_dec_operator()
		}
		{
			p.SetState(7085)
			p.Identifier()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IConditional_generate_constructContext is an interface to support dynamic dispatch.
type IConditional_generate_constructContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConditional_generate_constructContext differentiates from other interfaces.
	IsConditional_generate_constructContext()
}

type Conditional_generate_constructContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditional_generate_constructContext() *Conditional_generate_constructContext {
	var p = new(Conditional_generate_constructContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_conditional_generate_construct
	return p
}

func (*Conditional_generate_constructContext) IsConditional_generate_constructContext() {}

func NewConditional_generate_constructContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Conditional_generate_constructContext {
	var p = new(Conditional_generate_constructContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_conditional_generate_construct

	return p
}

func (s *Conditional_generate_constructContext) GetParser() antlr.Parser { return s.parser }

func (s *Conditional_generate_constructContext) If_generate_construct() IIf_generate_constructContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_generate_constructContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_generate_constructContext)
}

func (s *Conditional_generate_constructContext) Case_generate_construct() ICase_generate_constructContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICase_generate_constructContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICase_generate_constructContext)
}

func (s *Conditional_generate_constructContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Conditional_generate_constructContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Conditional_generate_constructContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterConditional_generate_construct(s)
	}
}

func (s *Conditional_generate_constructContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitConditional_generate_construct(s)
	}
}

func (p *SV2017Parser) Conditional_generate_construct() (localctx IConditional_generate_constructContext) {
	localctx = NewConditional_generate_constructContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1038, SV2017ParserRULE_conditional_generate_construct)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7091)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_IF:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7089)
			p.If_generate_construct()
		}

	case SV2017ParserKW_CASE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7090)
			p.Case_generate_construct()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IIf_generate_constructContext is an interface to support dynamic dispatch.
type IIf_generate_constructContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIf_generate_constructContext differentiates from other interfaces.
	IsIf_generate_constructContext()
}

type If_generate_constructContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIf_generate_constructContext() *If_generate_constructContext {
	var p = new(If_generate_constructContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_if_generate_construct
	return p
}

func (*If_generate_constructContext) IsIf_generate_constructContext() {}

func NewIf_generate_constructContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *If_generate_constructContext {
	var p = new(If_generate_constructContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_if_generate_construct

	return p
}

func (s *If_generate_constructContext) GetParser() antlr.Parser { return s.parser }

func (s *If_generate_constructContext) KW_IF() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_IF, 0)
}

func (s *If_generate_constructContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *If_generate_constructContext) Constant_expression() IConstant_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_expressionContext)
}

func (s *If_generate_constructContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *If_generate_constructContext) AllGenerate_item() []IGenerate_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IGenerate_itemContext)(nil)).Elem())
	var tst = make([]IGenerate_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IGenerate_itemContext)
		}
	}

	return tst
}

func (s *If_generate_constructContext) Generate_item(i int) IGenerate_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenerate_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IGenerate_itemContext)
}

func (s *If_generate_constructContext) KW_ELSE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ELSE, 0)
}

func (s *If_generate_constructContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *If_generate_constructContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *If_generate_constructContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterIf_generate_construct(s)
	}
}

func (s *If_generate_constructContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitIf_generate_construct(s)
	}
}

func (p *SV2017Parser) If_generate_construct() (localctx IIf_generate_constructContext) {
	localctx = NewIf_generate_constructContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1040, SV2017ParserRULE_if_generate_construct)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7093)
		p.Match(SV2017ParserKW_IF)
	}
	{
		p.SetState(7094)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(7095)
		p.Constant_expression()
	}
	{
		p.SetState(7096)
		p.Match(SV2017ParserRPAREN)
	}
	{
		p.SetState(7097)
		p.Generate_item()
	}
	p.SetState(7101)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 927, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(7098)
			p.Match(SV2017ParserKW_ELSE)
		}
		{
			p.SetState(7099)
			p.Generate_item()
		}

	case 2:

	}

	return localctx
}

// ICase_generate_constructContext is an interface to support dynamic dispatch.
type ICase_generate_constructContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCase_generate_constructContext differentiates from other interfaces.
	IsCase_generate_constructContext()
}

type Case_generate_constructContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCase_generate_constructContext() *Case_generate_constructContext {
	var p = new(Case_generate_constructContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_case_generate_construct
	return p
}

func (*Case_generate_constructContext) IsCase_generate_constructContext() {}

func NewCase_generate_constructContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Case_generate_constructContext {
	var p = new(Case_generate_constructContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_case_generate_construct

	return p
}

func (s *Case_generate_constructContext) GetParser() antlr.Parser { return s.parser }

func (s *Case_generate_constructContext) KW_CASE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_CASE, 0)
}

func (s *Case_generate_constructContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Case_generate_constructContext) Constant_expression() IConstant_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_expressionContext)
}

func (s *Case_generate_constructContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Case_generate_constructContext) KW_ENDCASE() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_ENDCASE, 0)
}

func (s *Case_generate_constructContext) AllCase_generate_item() []ICase_generate_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICase_generate_itemContext)(nil)).Elem())
	var tst = make([]ICase_generate_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICase_generate_itemContext)
		}
	}

	return tst
}

func (s *Case_generate_constructContext) Case_generate_item(i int) ICase_generate_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICase_generate_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICase_generate_itemContext)
}

func (s *Case_generate_constructContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Case_generate_constructContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Case_generate_constructContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCase_generate_construct(s)
	}
}

func (s *Case_generate_constructContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCase_generate_construct(s)
	}
}

func (p *SV2017Parser) Case_generate_construct() (localctx ICase_generate_constructContext) {
	localctx = NewCase_generate_constructContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1042, SV2017ParserRULE_case_generate_construct)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7103)
		p.Match(SV2017ParserKW_CASE)
	}
	{
		p.SetState(7104)
		p.Match(SV2017ParserLPAREN)
	}
	{
		p.SetState(7105)
		p.Constant_expression()
	}
	{
		p.SetState(7106)
		p.Match(SV2017ParserRPAREN)
	}
	p.SetState(7108)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56))|(1<<(SV2017ParserKW_DEFAULT-56)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TAGGED-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserTIME_LITERAL-260)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(SV2017ParserANY_BASED_NUMBER-292))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-292))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-292))|(1<<(SV2017ParserFIXED_POINT_NUMBER-292))|(1<<(SV2017ParserUNSIGNED_NUMBER-292))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-292))|(1<<(SV2017ParserSTRING_LITERAL-292))|(1<<(SV2017ParserC_IDENTIFIER-292))|(1<<(SV2017ParserTICK_IDENTIFIER-292))|(1<<(SV2017ParserESCAPED_IDENTIFIER-292))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-292))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-292))|(1<<(SV2017ParserLPAREN-292))|(1<<(SV2017ParserLBRACE-292))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-292))|(1<<(SV2017ParserDOLAR-292))|(1<<(SV2017ParserNOT-292))|(1<<(SV2017ParserNEG-292))|(1<<(SV2017ParserNAND-292))|(1<<(SV2017ParserNOR-292)))) != 0) || (((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324))|(1<<(SV2017ParserPLUS-324)))) != 0) || (((_la-356)&-(0x1f+1)) == 0 && ((1<<uint((_la-356)))&((1<<(SV2017ParserMINUS-356))|(1<<(SV2017ParserAMPERSAND-356))|(1<<(SV2017ParserBAR-356))|(1<<(SV2017ParserINCR-356))|(1<<(SV2017ParserDECR-356)))) != 0) {
		{
			p.SetState(7107)
			p.Case_generate_item()
		}

		p.SetState(7110)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(7112)
		p.Match(SV2017ParserKW_ENDCASE)
	}

	return localctx
}

// ICase_generate_itemContext is an interface to support dynamic dispatch.
type ICase_generate_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCase_generate_itemContext differentiates from other interfaces.
	IsCase_generate_itemContext()
}

type Case_generate_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCase_generate_itemContext() *Case_generate_itemContext {
	var p = new(Case_generate_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_case_generate_item
	return p
}

func (*Case_generate_itemContext) IsCase_generate_itemContext() {}

func NewCase_generate_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Case_generate_itemContext {
	var p = new(Case_generate_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_case_generate_item

	return p
}

func (s *Case_generate_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Case_generate_itemContext) Generate_item() IGenerate_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenerate_itemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenerate_itemContext)
}

func (s *Case_generate_itemContext) KW_DEFAULT() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DEFAULT, 0)
}

func (s *Case_generate_itemContext) AllConstant_expression() []IConstant_expressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConstant_expressionContext)(nil)).Elem())
	var tst = make([]IConstant_expressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConstant_expressionContext)
		}
	}

	return tst
}

func (s *Case_generate_itemContext) Constant_expression(i int) IConstant_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_expressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConstant_expressionContext)
}

func (s *Case_generate_itemContext) COLON() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, 0)
}

func (s *Case_generate_itemContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOMMA)
}

func (s *Case_generate_itemContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, i)
}

func (s *Case_generate_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Case_generate_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Case_generate_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCase_generate_item(s)
	}
}

func (s *Case_generate_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCase_generate_item(s)
	}
}

func (p *SV2017Parser) Case_generate_item() (localctx ICase_generate_itemContext) {
	localctx = NewCase_generate_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1044, SV2017ParserRULE_case_generate_item)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(7128)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_DEFAULT:
		{
			p.SetState(7114)
			p.Match(SV2017ParserKW_DEFAULT)
		}
		p.SetState(7116)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserCOLON {
			{
				p.SetState(7115)
				p.Match(SV2017ParserCOLON)
			}

		}

	case SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_FATAL, SV2017ParserKW_DOLAR_FULLSKEW, SV2017ParserKW_DOLAR_HOLD, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_NOCHANGE, SV2017ParserKW_DOLAR_PERIOD, SV2017ParserKW_DOLAR_RECOVERY, SV2017ParserKW_DOLAR_RECREM, SV2017ParserKW_DOLAR_REMOVAL, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_SETUP, SV2017ParserKW_DOLAR_SETUPHOLD, SV2017ParserKW_DOLAR_SKEW, SV2017ParserKW_DOLAR_TIMESKEW, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_DOLAR_WARNING, SV2017ParserKW_DOLAR_WIDTH, SV2017ParserKW_BIT, SV2017ParserKW_BYTE, SV2017ParserKW_CONST, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_LOCAL, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_NULL, SV2017ParserKW_OPTION, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_SAMPLE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_SUPER, SV2017ParserKW_TAGGED, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_UNSIGNED, SV2017ParserTIME_LITERAL, SV2017ParserANY_BASED_NUMBER, SV2017ParserBASED_NUMBER_WITH_SIZE, SV2017ParserREAL_NUMBER_WITH_EXP, SV2017ParserFIXED_POINT_NUMBER, SV2017ParserUNSIGNED_NUMBER, SV2017ParserUNBASED_UNSIZED_LITERAL, SV2017ParserSTRING_LITERAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSYSTEM_TF_IDENTIFIER, SV2017ParserLPAREN, SV2017ParserLBRACE, SV2017ParserAPOSTROPHE_LBRACE, SV2017ParserDOLAR, SV2017ParserNOT, SV2017ParserNEG, SV2017ParserNAND, SV2017ParserNOR, SV2017ParserXOR, SV2017ParserNXOR, SV2017ParserXORN, SV2017ParserPLUS, SV2017ParserMINUS, SV2017ParserAMPERSAND, SV2017ParserBAR, SV2017ParserINCR, SV2017ParserDECR:
		{
			p.SetState(7118)
			p.Constant_expression()
		}
		p.SetState(7123)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SV2017ParserCOMMA {
			{
				p.SetState(7119)
				p.Match(SV2017ParserCOMMA)
			}
			{
				p.SetState(7120)
				p.Constant_expression()
			}

			p.SetState(7125)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(7126)
			p.Match(SV2017ParserCOLON)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(7130)
		p.Generate_item()
	}

	return localctx
}

// IGenerate_begin_end_blockContext is an interface to support dynamic dispatch.
type IGenerate_begin_end_blockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGenerate_begin_end_blockContext differentiates from other interfaces.
	IsGenerate_begin_end_blockContext()
}

type Generate_begin_end_blockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGenerate_begin_end_blockContext() *Generate_begin_end_blockContext {
	var p = new(Generate_begin_end_blockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_generate_begin_end_block
	return p
}

func (*Generate_begin_end_blockContext) IsGenerate_begin_end_blockContext() {}

func NewGenerate_begin_end_blockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Generate_begin_end_blockContext {
	var p = new(Generate_begin_end_blockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_generate_begin_end_block

	return p
}

func (s *Generate_begin_end_blockContext) GetParser() antlr.Parser { return s.parser }

func (s *Generate_begin_end_blockContext) KW_BEGIN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_BEGIN, 0)
}

func (s *Generate_begin_end_blockContext) KW_END() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_END, 0)
}

func (s *Generate_begin_end_blockContext) AllCOLON() []antlr.TerminalNode {
	return s.GetTokens(SV2017ParserCOLON)
}

func (s *Generate_begin_end_blockContext) COLON(i int) antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOLON, i)
}

func (s *Generate_begin_end_blockContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Generate_begin_end_blockContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Generate_begin_end_blockContext) AllGenerate_item() []IGenerate_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IGenerate_itemContext)(nil)).Elem())
	var tst = make([]IGenerate_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IGenerate_itemContext)
		}
	}

	return tst
}

func (s *Generate_begin_end_blockContext) Generate_item(i int) IGenerate_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenerate_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IGenerate_itemContext)
}

func (s *Generate_begin_end_blockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Generate_begin_end_blockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Generate_begin_end_blockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterGenerate_begin_end_block(s)
	}
}

func (s *Generate_begin_end_blockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitGenerate_begin_end_block(s)
	}
}

func (p *SV2017Parser) Generate_begin_end_block() (localctx IGenerate_begin_end_blockContext) {
	localctx = NewGenerate_begin_end_blockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1046, SV2017ParserRULE_generate_begin_end_block)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(7135)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SV2017ParserKW_OPTION || _la == SV2017ParserKW_RANDOMIZE || _la == SV2017ParserKW_SAMPLE || _la == SV2017ParserKW_STD || _la == SV2017ParserKW_TYPE_OPTION || (((_la-299)&-(0x1f+1)) == 0 && ((1<<uint((_la-299)))&((1<<(SV2017ParserC_IDENTIFIER-299))|(1<<(SV2017ParserTICK_IDENTIFIER-299))|(1<<(SV2017ParserESCAPED_IDENTIFIER-299))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-299)))) != 0) {
		{
			p.SetState(7132)
			p.Identifier()
		}
		{
			p.SetState(7133)
			p.Match(SV2017ParserCOLON)
		}

	}
	{
		p.SetState(7137)
		p.Match(SV2017ParserKW_BEGIN)
	}
	p.SetState(7141)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserCOLON:
		{
			p.SetState(7138)
			p.Match(SV2017ParserCOLON)
		}
		{
			p.SetState(7139)
			p.Identifier()
		}

	case SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_FATAL, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_DOLAR_WARNING, SV2017ParserKW_ALIAS, SV2017ParserKW_ALWAYS, SV2017ParserKW_ALWAYS_COMB, SV2017ParserKW_ALWAYS_FF, SV2017ParserKW_ALWAYS_LATCH, SV2017ParserKW_AND, SV2017ParserKW_ASSERT, SV2017ParserKW_ASSIGN, SV2017ParserKW_ASSUME, SV2017ParserKW_AUTOMATIC, SV2017ParserKW_BEGIN, SV2017ParserKW_BIND, SV2017ParserKW_BIT, SV2017ParserKW_BUF, SV2017ParserKW_BUFIF0, SV2017ParserKW_BUFIF1, SV2017ParserKW_BYTE, SV2017ParserKW_CASE, SV2017ParserKW_CHANDLE, SV2017ParserKW_CHECKER, SV2017ParserKW_CLASS, SV2017ParserKW_CLOCKING, SV2017ParserKW_CMOS, SV2017ParserKW_CONST, SV2017ParserKW_CONSTRAINT, SV2017ParserKW_COVER, SV2017ParserKW_COVERGROUP, SV2017ParserKW_DEFAULT, SV2017ParserKW_DEFPARAM, SV2017ParserKW_END, SV2017ParserKW_ENUM, SV2017ParserKW_EVENT, SV2017ParserKW_EXPORT, SV2017ParserKW_EXTERN, SV2017ParserKW_FINAL, SV2017ParserKW_FOR, SV2017ParserKW_FUNCTION, SV2017ParserKW_GENERATE, SV2017ParserKW_GENVAR, SV2017ParserKW_GLOBAL, SV2017ParserKW_IF, SV2017ParserKW_IMPORT, SV2017ParserKW_INITIAL, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_INTERCONNECT, SV2017ParserKW_INTERFACE, SV2017ParserKW_LET, SV2017ParserKW_LOCAL, SV2017ParserKW_LOCALPARAM, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_NAND, SV2017ParserKW_NETTYPE, SV2017ParserKW_NMOS, SV2017ParserKW_NOR, SV2017ParserKW_NONE, SV2017ParserKW_NOT, SV2017ParserKW_NOTIF0, SV2017ParserKW_NOTIF1, SV2017ParserKW_OPTION, SV2017ParserKW_OR, SV2017ParserKW_PARAMETER, SV2017ParserKW_PMOS, SV2017ParserKW_PROPERTY, SV2017ParserKW_PULLDOWN, SV2017ParserKW_PULLUP, SV2017ParserKW_RAND, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_RCMOS, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_RESTRICT, SV2017ParserKW_RNMOS, SV2017ParserKW_RPMOS, SV2017ParserKW_RTRAN, SV2017ParserKW_RTRANIF0, SV2017ParserKW_RTRANIF1, SV2017ParserKW_SAMPLE, SV2017ParserKW_SEQUENCE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_STATIC, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_SUPPLY0, SV2017ParserKW_SUPPLY1, SV2017ParserKW_TASK, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TRAN, SV2017ParserKW_TRANIF0, SV2017ParserKW_TRANIF1, SV2017ParserKW_TRI, SV2017ParserKW_TRI0, SV2017ParserKW_TRI1, SV2017ParserKW_TRIAND, SV2017ParserKW_TRIOR, SV2017ParserKW_TRIREG, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_TYPEDEF, SV2017ParserKW_UNION, SV2017ParserKW_UNSIGNED, SV2017ParserKW_UWIRE, SV2017ParserKW_VAR, SV2017ParserKW_VIRTUAL, SV2017ParserKW_WAND, SV2017ParserKW_WIRE, SV2017ParserKW_WOR, SV2017ParserKW_XNOR, SV2017ParserKW_XOR, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSEMI, SV2017ParserLPAREN, SV2017ParserLSQUARE_BR:

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(7146)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_ALIAS-20))|(1<<(SV2017ParserKW_ALWAYS-20))|(1<<(SV2017ParserKW_ALWAYS_COMB-20))|(1<<(SV2017ParserKW_ALWAYS_FF-20))|(1<<(SV2017ParserKW_ALWAYS_LATCH-20))|(1<<(SV2017ParserKW_AND-20))|(1<<(SV2017ParserKW_ASSERT-20))|(1<<(SV2017ParserKW_ASSIGN-20))|(1<<(SV2017ParserKW_ASSUME-20))|(1<<(SV2017ParserKW_AUTOMATIC-20)))) != 0) || (((_la-52)&-(0x1f+1)) == 0 && ((1<<uint((_la-52)))&((1<<(SV2017ParserKW_BEGIN-52))|(1<<(SV2017ParserKW_BIND-52))|(1<<(SV2017ParserKW_BIT-52))|(1<<(SV2017ParserKW_BUF-52))|(1<<(SV2017ParserKW_BUFIF0-52))|(1<<(SV2017ParserKW_BUFIF1-52))|(1<<(SV2017ParserKW_BYTE-52))|(1<<(SV2017ParserKW_CASE-52))|(1<<(SV2017ParserKW_CHANDLE-52))|(1<<(SV2017ParserKW_CHECKER-52))|(1<<(SV2017ParserKW_CLASS-52))|(1<<(SV2017ParserKW_CLOCKING-52))|(1<<(SV2017ParserKW_CMOS-52))|(1<<(SV2017ParserKW_CONST-52))|(1<<(SV2017ParserKW_CONSTRAINT-52))|(1<<(SV2017ParserKW_COVER-52))|(1<<(SV2017ParserKW_COVERGROUP-52))|(1<<(SV2017ParserKW_DEFAULT-52))|(1<<(SV2017ParserKW_DEFPARAM-52)))) != 0) || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(SV2017ParserKW_ENUM-107))|(1<<(SV2017ParserKW_EVENT-107))|(1<<(SV2017ParserKW_EXPORT-107))|(1<<(SV2017ParserKW_EXTERN-107))|(1<<(SV2017ParserKW_FINAL-107))|(1<<(SV2017ParserKW_FOR-107))|(1<<(SV2017ParserKW_FUNCTION-107))|(1<<(SV2017ParserKW_GENERATE-107))|(1<<(SV2017ParserKW_GENVAR-107))|(1<<(SV2017ParserKW_GLOBAL-107))|(1<<(SV2017ParserKW_IF-107))|(1<<(SV2017ParserKW_IMPORT-107))|(1<<(SV2017ParserKW_INITIAL-107)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_INTERCONNECT-141))|(1<<(SV2017ParserKW_INTERFACE-141))|(1<<(SV2017ParserKW_LET-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOCALPARAM-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141))|(1<<(SV2017ParserKW_NAND-141))|(1<<(SV2017ParserKW_NETTYPE-141))|(1<<(SV2017ParserKW_NMOS-141))|(1<<(SV2017ParserKW_NOR-141))|(1<<(SV2017ParserKW_NONE-141))|(1<<(SV2017ParserKW_NOT-141))|(1<<(SV2017ParserKW_NOTIF0-141))|(1<<(SV2017ParserKW_NOTIF1-141)))) != 0) || (((_la-174)&-(0x1f+1)) == 0 && ((1<<uint((_la-174)))&((1<<(SV2017ParserKW_OPTION-174))|(1<<(SV2017ParserKW_OR-174))|(1<<(SV2017ParserKW_PARAMETER-174))|(1<<(SV2017ParserKW_PMOS-174))|(1<<(SV2017ParserKW_PROPERTY-174))|(1<<(SV2017ParserKW_PULLDOWN-174))|(1<<(SV2017ParserKW_PULLUP-174))|(1<<(SV2017ParserKW_RAND-174))|(1<<(SV2017ParserKW_RANDOMIZE-174))|(1<<(SV2017ParserKW_RCMOS-174))|(1<<(SV2017ParserKW_REAL-174))|(1<<(SV2017ParserKW_REALTIME-174))|(1<<(SV2017ParserKW_REG-174)))) != 0) || (((_la-207)&-(0x1f+1)) == 0 && ((1<<uint((_la-207)))&((1<<(SV2017ParserKW_RESTRICT-207))|(1<<(SV2017ParserKW_RNMOS-207))|(1<<(SV2017ParserKW_RPMOS-207))|(1<<(SV2017ParserKW_RTRAN-207))|(1<<(SV2017ParserKW_RTRANIF0-207))|(1<<(SV2017ParserKW_RTRANIF1-207))|(1<<(SV2017ParserKW_SAMPLE-207))|(1<<(SV2017ParserKW_SEQUENCE-207))|(1<<(SV2017ParserKW_SHORTINT-207))|(1<<(SV2017ParserKW_SHORTREAL-207))|(1<<(SV2017ParserKW_SIGNED-207))|(1<<(SV2017ParserKW_STATIC-207))|(1<<(SV2017ParserKW_STD-207))|(1<<(SV2017ParserKW_STRING-207))|(1<<(SV2017ParserKW_STRUCT-207))|(1<<(SV2017ParserKW_SUPER-207)))) != 0) || (((_la-239)&-(0x1f+1)) == 0 && ((1<<uint((_la-239)))&((1<<(SV2017ParserKW_SUPPLY0-239))|(1<<(SV2017ParserKW_SUPPLY1-239))|(1<<(SV2017ParserKW_TASK-239))|(1<<(SV2017ParserKW_THIS-239))|(1<<(SV2017ParserKW_TIME-239))|(1<<(SV2017ParserKW_TRAN-239))|(1<<(SV2017ParserKW_TRANIF0-239))|(1<<(SV2017ParserKW_TRANIF1-239))|(1<<(SV2017ParserKW_TRI-239))|(1<<(SV2017ParserKW_TRI0-239))|(1<<(SV2017ParserKW_TRI1-239))|(1<<(SV2017ParserKW_TRIAND-239))|(1<<(SV2017ParserKW_TRIOR-239))|(1<<(SV2017ParserKW_TRIREG-239))|(1<<(SV2017ParserKW_TYPE-239))|(1<<(SV2017ParserKW_TYPE_OPTION-239))|(1<<(SV2017ParserKW_TYPEDEF-239))|(1<<(SV2017ParserKW_UNION-239))|(1<<(SV2017ParserKW_UNSIGNED-239)))) != 0) || (((_la-271)&-(0x1f+1)) == 0 && ((1<<uint((_la-271)))&((1<<(SV2017ParserKW_UWIRE-271))|(1<<(SV2017ParserKW_VAR-271))|(1<<(SV2017ParserKW_VIRTUAL-271))|(1<<(SV2017ParserKW_WAND-271))|(1<<(SV2017ParserKW_WIRE-271))|(1<<(SV2017ParserKW_WOR-271))|(1<<(SV2017ParserKW_XNOR-271))|(1<<(SV2017ParserKW_XOR-271))|(1<<(SV2017ParserC_IDENTIFIER-271))|(1<<(SV2017ParserTICK_IDENTIFIER-271))|(1<<(SV2017ParserESCAPED_IDENTIFIER-271)))) != 0) || (((_la-303)&-(0x1f+1)) == 0 && ((1<<uint((_la-303)))&((1<<(SV2017ParserSIMPLE_IDENTIFIER-303))|(1<<(SV2017ParserSEMI-303))|(1<<(SV2017ParserLPAREN-303))|(1<<(SV2017ParserLSQUARE_BR-303)))) != 0) {
		{
			p.SetState(7143)
			p.Generate_item()
		}

		p.SetState(7148)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(7149)
		p.Match(SV2017ParserKW_END)
	}
	p.SetState(7153)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserCOLON:
		{
			p.SetState(7150)
			p.Match(SV2017ParserCOLON)
		}
		{
			p.SetState(7151)
			p.Identifier()
		}

	case SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_FATAL, SV2017ParserKW_DOLAR_FULLSKEW, SV2017ParserKW_DOLAR_HOLD, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_NOCHANGE, SV2017ParserKW_DOLAR_PERIOD, SV2017ParserKW_DOLAR_RECOVERY, SV2017ParserKW_DOLAR_RECREM, SV2017ParserKW_DOLAR_REMOVAL, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_SETUP, SV2017ParserKW_DOLAR_SETUPHOLD, SV2017ParserKW_DOLAR_SKEW, SV2017ParserKW_DOLAR_TIMESKEW, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_DOLAR_WARNING, SV2017ParserKW_DOLAR_WIDTH, SV2017ParserKW_ALIAS, SV2017ParserKW_ALWAYS, SV2017ParserKW_ALWAYS_COMB, SV2017ParserKW_ALWAYS_FF, SV2017ParserKW_ALWAYS_LATCH, SV2017ParserKW_AND, SV2017ParserKW_ASSERT, SV2017ParserKW_ASSIGN, SV2017ParserKW_ASSUME, SV2017ParserKW_AUTOMATIC, SV2017ParserKW_BEGIN, SV2017ParserKW_BIND, SV2017ParserKW_BIT, SV2017ParserKW_BUF, SV2017ParserKW_BUFIF0, SV2017ParserKW_BUFIF1, SV2017ParserKW_BYTE, SV2017ParserKW_CASE, SV2017ParserKW_CHANDLE, SV2017ParserKW_CHECKER, SV2017ParserKW_CLASS, SV2017ParserKW_CLOCKING, SV2017ParserKW_CMOS, SV2017ParserKW_CONST, SV2017ParserKW_CONSTRAINT, SV2017ParserKW_COVER, SV2017ParserKW_COVERGROUP, SV2017ParserKW_DEFAULT, SV2017ParserKW_DEFPARAM, SV2017ParserKW_ELSE, SV2017ParserKW_END, SV2017ParserKW_ENDCASE, SV2017ParserKW_ENDCHECKER, SV2017ParserKW_ENDGENERATE, SV2017ParserKW_ENDINTERFACE, SV2017ParserKW_ENDMODULE, SV2017ParserKW_ENDPROGRAM, SV2017ParserKW_ENUM, SV2017ParserKW_EVENT, SV2017ParserKW_EXPORT, SV2017ParserKW_EXTERN, SV2017ParserKW_FINAL, SV2017ParserKW_FOR, SV2017ParserKW_FUNCTION, SV2017ParserKW_GENERATE, SV2017ParserKW_GENVAR, SV2017ParserKW_GLOBAL, SV2017ParserKW_IF, SV2017ParserKW_IMPORT, SV2017ParserKW_INITIAL, SV2017ParserKW_INOUT, SV2017ParserKW_INPUT, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_INTERCONNECT, SV2017ParserKW_INTERFACE, SV2017ParserKW_LET, SV2017ParserKW_LOCAL, SV2017ParserKW_LOCALPARAM, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_MACROMODULE, SV2017ParserKW_MODPORT, SV2017ParserKW_MODULE, SV2017ParserKW_NAND, SV2017ParserKW_NETTYPE, SV2017ParserKW_NMOS, SV2017ParserKW_NOR, SV2017ParserKW_NONE, SV2017ParserKW_NOT, SV2017ParserKW_NOTIF0, SV2017ParserKW_NOTIF1, SV2017ParserKW_NULL, SV2017ParserKW_OPTION, SV2017ParserKW_OR, SV2017ParserKW_OUTPUT, SV2017ParserKW_PARAMETER, SV2017ParserKW_PMOS, SV2017ParserKW_PROGRAM, SV2017ParserKW_PROPERTY, SV2017ParserKW_PULLDOWN, SV2017ParserKW_PULLUP, SV2017ParserKW_RAND, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_RCMOS, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REF, SV2017ParserKW_REG, SV2017ParserKW_RESTRICT, SV2017ParserKW_RNMOS, SV2017ParserKW_RPMOS, SV2017ParserKW_RTRAN, SV2017ParserKW_RTRANIF0, SV2017ParserKW_RTRANIF1, SV2017ParserKW_SAMPLE, SV2017ParserKW_SEQUENCE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_SPECIFY, SV2017ParserKW_SPECPARAM, SV2017ParserKW_STATIC, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_SUPPLY0, SV2017ParserKW_SUPPLY1, SV2017ParserKW_TAGGED, SV2017ParserKW_TASK, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TIMEPRECISION, SV2017ParserKW_TIMEUNIT, SV2017ParserKW_TRAN, SV2017ParserKW_TRANIF0, SV2017ParserKW_TRANIF1, SV2017ParserKW_TRI, SV2017ParserKW_TRI0, SV2017ParserKW_TRI1, SV2017ParserKW_TRIAND, SV2017ParserKW_TRIOR, SV2017ParserKW_TRIREG, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_TYPEDEF, SV2017ParserKW_UNION, SV2017ParserKW_UNSIGNED, SV2017ParserKW_UWIRE, SV2017ParserKW_VAR, SV2017ParserKW_VIRTUAL, SV2017ParserKW_WAND, SV2017ParserKW_WIRE, SV2017ParserKW_WOR, SV2017ParserKW_XNOR, SV2017ParserKW_XOR, SV2017ParserTIME_LITERAL, SV2017ParserANY_BASED_NUMBER, SV2017ParserBASED_NUMBER_WITH_SIZE, SV2017ParserREAL_NUMBER_WITH_EXP, SV2017ParserFIXED_POINT_NUMBER, SV2017ParserUNSIGNED_NUMBER, SV2017ParserUNBASED_UNSIZED_LITERAL, SV2017ParserSTRING_LITERAL, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSYSTEM_TF_IDENTIFIER, SV2017ParserSEMI, SV2017ParserLPAREN, SV2017ParserLSQUARE_BR, SV2017ParserLBRACE, SV2017ParserAPOSTROPHE_LBRACE, SV2017ParserDOLAR, SV2017ParserNOT, SV2017ParserNEG, SV2017ParserNAND, SV2017ParserNOR, SV2017ParserXOR, SV2017ParserNXOR, SV2017ParserXORN, SV2017ParserDOT, SV2017ParserPLUS, SV2017ParserMINUS, SV2017ParserAMPERSAND, SV2017ParserBAR, SV2017ParserINCR, SV2017ParserDECR:

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IGenerate_item_itemContext is an interface to support dynamic dispatch.
type IGenerate_item_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGenerate_item_itemContext differentiates from other interfaces.
	IsGenerate_item_itemContext()
}

type Generate_item_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGenerate_item_itemContext() *Generate_item_itemContext {
	var p = new(Generate_item_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_generate_item_item
	return p
}

func (*Generate_item_itemContext) IsGenerate_item_itemContext() {}

func NewGenerate_item_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Generate_item_itemContext {
	var p = new(Generate_item_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_generate_item_item

	return p
}

func (s *Generate_item_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Generate_item_itemContext) Core_item_item() ICore_item_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICore_item_itemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICore_item_itemContext)
}

func (s *Generate_item_itemContext) Extern_tf_declaration() IExtern_tf_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExtern_tf_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExtern_tf_declarationContext)
}

func (s *Generate_item_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Generate_item_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Generate_item_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterGenerate_item_item(s)
	}
}

func (s *Generate_item_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitGenerate_item_item(s)
	}
}

func (p *SV2017Parser) Generate_item_item() (localctx IGenerate_item_itemContext) {
	localctx = NewGenerate_item_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1048, SV2017ParserRULE_generate_item_item)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7157)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_FATAL, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_DOLAR_WARNING, SV2017ParserKW_ALIAS, SV2017ParserKW_ALWAYS, SV2017ParserKW_ALWAYS_COMB, SV2017ParserKW_ALWAYS_FF, SV2017ParserKW_ALWAYS_LATCH, SV2017ParserKW_AND, SV2017ParserKW_ASSERT, SV2017ParserKW_ASSIGN, SV2017ParserKW_ASSUME, SV2017ParserKW_AUTOMATIC, SV2017ParserKW_BIND, SV2017ParserKW_BIT, SV2017ParserKW_BUF, SV2017ParserKW_BUFIF0, SV2017ParserKW_BUFIF1, SV2017ParserKW_BYTE, SV2017ParserKW_CASE, SV2017ParserKW_CHANDLE, SV2017ParserKW_CHECKER, SV2017ParserKW_CLASS, SV2017ParserKW_CLOCKING, SV2017ParserKW_CMOS, SV2017ParserKW_CONST, SV2017ParserKW_CONSTRAINT, SV2017ParserKW_COVER, SV2017ParserKW_COVERGROUP, SV2017ParserKW_DEFAULT, SV2017ParserKW_DEFPARAM, SV2017ParserKW_ENUM, SV2017ParserKW_EVENT, SV2017ParserKW_EXPORT, SV2017ParserKW_FINAL, SV2017ParserKW_FOR, SV2017ParserKW_FUNCTION, SV2017ParserKW_GENVAR, SV2017ParserKW_GLOBAL, SV2017ParserKW_IF, SV2017ParserKW_IMPORT, SV2017ParserKW_INITIAL, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_INTERCONNECT, SV2017ParserKW_INTERFACE, SV2017ParserKW_LET, SV2017ParserKW_LOCAL, SV2017ParserKW_LOCALPARAM, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_NAND, SV2017ParserKW_NETTYPE, SV2017ParserKW_NMOS, SV2017ParserKW_NOR, SV2017ParserKW_NONE, SV2017ParserKW_NOT, SV2017ParserKW_NOTIF0, SV2017ParserKW_NOTIF1, SV2017ParserKW_OPTION, SV2017ParserKW_OR, SV2017ParserKW_PARAMETER, SV2017ParserKW_PMOS, SV2017ParserKW_PROPERTY, SV2017ParserKW_PULLDOWN, SV2017ParserKW_PULLUP, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_RCMOS, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_RESTRICT, SV2017ParserKW_RNMOS, SV2017ParserKW_RPMOS, SV2017ParserKW_RTRAN, SV2017ParserKW_RTRANIF0, SV2017ParserKW_RTRANIF1, SV2017ParserKW_SAMPLE, SV2017ParserKW_SEQUENCE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_STATIC, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_SUPPLY0, SV2017ParserKW_SUPPLY1, SV2017ParserKW_TASK, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TRAN, SV2017ParserKW_TRANIF0, SV2017ParserKW_TRANIF1, SV2017ParserKW_TRI, SV2017ParserKW_TRI0, SV2017ParserKW_TRI1, SV2017ParserKW_TRIAND, SV2017ParserKW_TRIOR, SV2017ParserKW_TRIREG, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_TYPEDEF, SV2017ParserKW_UNION, SV2017ParserKW_UNSIGNED, SV2017ParserKW_UWIRE, SV2017ParserKW_VAR, SV2017ParserKW_VIRTUAL, SV2017ParserKW_WAND, SV2017ParserKW_WIRE, SV2017ParserKW_WOR, SV2017ParserKW_XNOR, SV2017ParserKW_XOR, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSEMI, SV2017ParserLSQUARE_BR:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7155)
			p.Core_item_item()
		}

	case SV2017ParserKW_EXTERN:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7156)
			p.Extern_tf_declaration()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IGenerate_itemContext is an interface to support dynamic dispatch.
type IGenerate_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGenerate_itemContext differentiates from other interfaces.
	IsGenerate_itemContext()
}

type Generate_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGenerate_itemContext() *Generate_itemContext {
	var p = new(Generate_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_generate_item
	return p
}

func (*Generate_itemContext) IsGenerate_itemContext() {}

func NewGenerate_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Generate_itemContext {
	var p = new(Generate_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_generate_item

	return p
}

func (s *Generate_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Generate_itemContext) CopyFrom(ctx *Generate_itemContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Generate_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Generate_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type GenItemGenBlockContext struct {
	*Generate_itemContext
}

func NewGenItemGenBlockContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GenItemGenBlockContext {
	var p = new(GenItemGenBlockContext)

	p.Generate_itemContext = NewEmptyGenerate_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Generate_itemContext))

	return p
}

func (s *GenItemGenBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenItemGenBlockContext) Generate_begin_end_block() IGenerate_begin_end_blockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenerate_begin_end_blockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenerate_begin_end_blockContext)
}

func (s *GenItemGenBlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterGenItemGenBlock(s)
	}
}

func (s *GenItemGenBlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitGenItemGenBlock(s)
	}
}

type GenItemDataDeclContext struct {
	*Generate_itemContext
}

func NewGenItemDataDeclContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GenItemDataDeclContext {
	var p = new(GenItemDataDeclContext)

	p.Generate_itemContext = NewEmptyGenerate_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Generate_itemContext))

	return p
}

func (s *GenItemDataDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenItemDataDeclContext) KW_RAND() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_RAND, 0)
}

func (s *GenItemDataDeclContext) Data_declaration() IData_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_declarationContext)
}

func (s *GenItemDataDeclContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterGenItemDataDecl(s)
	}
}

func (s *GenItemDataDeclContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitGenItemDataDecl(s)
	}
}

type GenItemItemContext struct {
	*Generate_itemContext
}

func NewGenItemItemContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GenItemItemContext {
	var p = new(GenItemItemContext)

	p.Generate_itemContext = NewEmptyGenerate_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Generate_itemContext))

	return p
}

func (s *GenItemItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenItemItemContext) Generate_item_item() IGenerate_item_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenerate_item_itemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenerate_item_itemContext)
}

func (s *GenItemItemContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *GenItemItemContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *GenItemItemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterGenItemItem(s)
	}
}

func (s *GenItemItemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitGenItemItem(s)
	}
}

type GenItemGenRegContext struct {
	*Generate_itemContext
}

func NewGenItemGenRegContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GenItemGenRegContext {
	var p = new(GenItemGenRegContext)

	p.Generate_itemContext = NewEmptyGenerate_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Generate_itemContext))

	return p
}

func (s *GenItemGenRegContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenItemGenRegContext) Generate_region() IGenerate_regionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenerate_regionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenerate_regionContext)
}

func (s *GenItemGenRegContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterGenItemGenReg(s)
	}
}

func (s *GenItemGenRegContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitGenItemGenReg(s)
	}
}

func (p *SV2017Parser) Generate_item() (localctx IGenerate_itemContext) {
	localctx = NewGenerate_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1050, SV2017ParserRULE_generate_item)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(7170)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 938, p.GetParserRuleContext()) {
	case 1:
		localctx = NewGenItemItemContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		p.SetState(7162)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 937, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(7159)
					p.Attribute_instance()
				}

			}
			p.SetState(7164)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 937, p.GetParserRuleContext())
		}
		{
			p.SetState(7165)
			p.Generate_item_item()
		}

	case 2:
		localctx = NewGenItemDataDeclContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7166)
			p.Match(SV2017ParserKW_RAND)
		}
		{
			p.SetState(7167)
			p.Data_declaration()
		}

	case 3:
		localctx = NewGenItemGenRegContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7168)
			p.Generate_region()
		}

	case 4:
		localctx = NewGenItemGenBlockContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(7169)
			p.Generate_begin_end_block()
		}

	}

	return localctx
}

// IProgram_generate_itemContext is an interface to support dynamic dispatch.
type IProgram_generate_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProgram_generate_itemContext differentiates from other interfaces.
	IsProgram_generate_itemContext()
}

type Program_generate_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProgram_generate_itemContext() *Program_generate_itemContext {
	var p = new(Program_generate_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_program_generate_item
	return p
}

func (*Program_generate_itemContext) IsProgram_generate_itemContext() {}

func NewProgram_generate_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Program_generate_itemContext {
	var p = new(Program_generate_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_program_generate_item

	return p
}

func (s *Program_generate_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Program_generate_itemContext) Loop_generate_construct() ILoop_generate_constructContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoop_generate_constructContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoop_generate_constructContext)
}

func (s *Program_generate_itemContext) Conditional_generate_construct() IConditional_generate_constructContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditional_generate_constructContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditional_generate_constructContext)
}

func (s *Program_generate_itemContext) Generate_region() IGenerate_regionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenerate_regionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenerate_regionContext)
}

func (s *Program_generate_itemContext) Elaboration_system_task() IElaboration_system_taskContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElaboration_system_taskContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElaboration_system_taskContext)
}

func (s *Program_generate_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Program_generate_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Program_generate_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterProgram_generate_item(s)
	}
}

func (s *Program_generate_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitProgram_generate_item(s)
	}
}

func (p *SV2017Parser) Program_generate_item() (localctx IProgram_generate_itemContext) {
	localctx = NewProgram_generate_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1052, SV2017ParserRULE_program_generate_item)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7176)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_FOR:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7172)
			p.Loop_generate_construct()
		}

	case SV2017ParserKW_CASE, SV2017ParserKW_IF:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7173)
			p.Conditional_generate_construct()
		}

	case SV2017ParserKW_GENERATE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7174)
			p.Generate_region()
		}

	case SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_FATAL, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_WARNING:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(7175)
			p.Elaboration_system_task()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IElaboration_system_taskContext is an interface to support dynamic dispatch.
type IElaboration_system_taskContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElaboration_system_taskContext differentiates from other interfaces.
	IsElaboration_system_taskContext()
}

type Elaboration_system_taskContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElaboration_system_taskContext() *Elaboration_system_taskContext {
	var p = new(Elaboration_system_taskContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_elaboration_system_task
	return p
}

func (*Elaboration_system_taskContext) IsElaboration_system_taskContext() {}

func NewElaboration_system_taskContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Elaboration_system_taskContext {
	var p = new(Elaboration_system_taskContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_elaboration_system_task

	return p
}

func (s *Elaboration_system_taskContext) GetParser() antlr.Parser { return s.parser }

func (s *Elaboration_system_taskContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *Elaboration_system_taskContext) KW_DOLAR_FATAL() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DOLAR_FATAL, 0)
}

func (s *Elaboration_system_taskContext) KW_DOLAR_ERROR() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DOLAR_ERROR, 0)
}

func (s *Elaboration_system_taskContext) KW_DOLAR_WARNING() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DOLAR_WARNING, 0)
}

func (s *Elaboration_system_taskContext) KW_DOLAR_INFO() antlr.TerminalNode {
	return s.GetToken(SV2017ParserKW_DOLAR_INFO, 0)
}

func (s *Elaboration_system_taskContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserLPAREN, 0)
}

func (s *Elaboration_system_taskContext) UNSIGNED_NUMBER() antlr.TerminalNode {
	return s.GetToken(SV2017ParserUNSIGNED_NUMBER, 0)
}

func (s *Elaboration_system_taskContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(SV2017ParserRPAREN, 0)
}

func (s *Elaboration_system_taskContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SV2017ParserCOMMA, 0)
}

func (s *Elaboration_system_taskContext) List_of_arguments() IList_of_argumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_argumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_argumentsContext)
}

func (s *Elaboration_system_taskContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Elaboration_system_taskContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Elaboration_system_taskContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterElaboration_system_task(s)
	}
}

func (s *Elaboration_system_taskContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitElaboration_system_task(s)
	}
}

func (p *SV2017Parser) Elaboration_system_task() (localctx IElaboration_system_taskContext) {
	localctx = NewElaboration_system_taskContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1054, SV2017ParserRULE_elaboration_system_task)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(7198)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_DOLAR_FATAL:
		{
			p.SetState(7178)
			p.Match(SV2017ParserKW_DOLAR_FATAL)
		}
		p.SetState(7188)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserLPAREN {
			{
				p.SetState(7179)
				p.Match(SV2017ParserLPAREN)
			}
			{
				p.SetState(7180)
				p.Match(SV2017ParserUNSIGNED_NUMBER)
			}
			p.SetState(7185)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SV2017ParserCOMMA {
				{
					p.SetState(7181)
					p.Match(SV2017ParserCOMMA)
				}
				p.SetState(7183)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TAGGED-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserTIME_LITERAL-260)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(SV2017ParserANY_BASED_NUMBER-292))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-292))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-292))|(1<<(SV2017ParserFIXED_POINT_NUMBER-292))|(1<<(SV2017ParserUNSIGNED_NUMBER-292))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-292))|(1<<(SV2017ParserSTRING_LITERAL-292))|(1<<(SV2017ParserC_IDENTIFIER-292))|(1<<(SV2017ParserTICK_IDENTIFIER-292))|(1<<(SV2017ParserESCAPED_IDENTIFIER-292))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-292))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-292))|(1<<(SV2017ParserLPAREN-292))|(1<<(SV2017ParserLBRACE-292))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-292))|(1<<(SV2017ParserDOLAR-292))|(1<<(SV2017ParserNOT-292))|(1<<(SV2017ParserNEG-292))|(1<<(SV2017ParserNAND-292))|(1<<(SV2017ParserNOR-292)))) != 0) || (((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324))|(1<<(SV2017ParserCOMMA-324))|(1<<(SV2017ParserDOT-324))|(1<<(SV2017ParserPLUS-324)))) != 0) || (((_la-356)&-(0x1f+1)) == 0 && ((1<<uint((_la-356)))&((1<<(SV2017ParserMINUS-356))|(1<<(SV2017ParserAMPERSAND-356))|(1<<(SV2017ParserBAR-356))|(1<<(SV2017ParserINCR-356))|(1<<(SV2017ParserDECR-356)))) != 0) {
					{
						p.SetState(7182)
						p.List_of_arguments()
					}

				}

			}
			{
				p.SetState(7187)
				p.Match(SV2017ParserRPAREN)
			}

		}

	case SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_WARNING:
		{
			p.SetState(7190)
			_la = p.GetTokenStream().LA(1)

			if !(((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20)))) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(7196)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SV2017ParserLPAREN {
			{
				p.SetState(7191)
				p.Match(SV2017ParserLPAREN)
			}
			p.SetState(7193)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(SV2017ParserKW_DOLAR_ERROR-20))|(1<<(SV2017ParserKW_DOLAR_FATAL-20))|(1<<(SV2017ParserKW_DOLAR_FULLSKEW-20))|(1<<(SV2017ParserKW_DOLAR_HOLD-20))|(1<<(SV2017ParserKW_DOLAR_INFO-20))|(1<<(SV2017ParserKW_DOLAR_NOCHANGE-20))|(1<<(SV2017ParserKW_DOLAR_PERIOD-20))|(1<<(SV2017ParserKW_DOLAR_RECOVERY-20))|(1<<(SV2017ParserKW_DOLAR_RECREM-20))|(1<<(SV2017ParserKW_DOLAR_REMOVAL-20))|(1<<(SV2017ParserKW_DOLAR_ROOT-20))|(1<<(SV2017ParserKW_DOLAR_SETUP-20))|(1<<(SV2017ParserKW_DOLAR_SETUPHOLD-20))|(1<<(SV2017ParserKW_DOLAR_SKEW-20))|(1<<(SV2017ParserKW_DOLAR_TIMESKEW-20))|(1<<(SV2017ParserKW_DOLAR_UNIT-20))|(1<<(SV2017ParserKW_DOLAR_WARNING-20))|(1<<(SV2017ParserKW_DOLAR_WIDTH-20)))) != 0) || (((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SV2017ParserKW_BIT-56))|(1<<(SV2017ParserKW_BYTE-56))|(1<<(SV2017ParserKW_CONST-56)))) != 0) || (((_la-141)&-(0x1f+1)) == 0 && ((1<<uint((_la-141)))&((1<<(SV2017ParserKW_INT-141))|(1<<(SV2017ParserKW_INTEGER-141))|(1<<(SV2017ParserKW_LOCAL-141))|(1<<(SV2017ParserKW_LOGIC-141))|(1<<(SV2017ParserKW_LONGINT-141)))) != 0) || (((_la-173)&-(0x1f+1)) == 0 && ((1<<uint((_la-173)))&((1<<(SV2017ParserKW_NULL-173))|(1<<(SV2017ParserKW_OPTION-173))|(1<<(SV2017ParserKW_RANDOMIZE-173))|(1<<(SV2017ParserKW_REAL-173))|(1<<(SV2017ParserKW_REALTIME-173))|(1<<(SV2017ParserKW_REG-173)))) != 0) || (((_la-219)&-(0x1f+1)) == 0 && ((1<<uint((_la-219)))&((1<<(SV2017ParserKW_SAMPLE-219))|(1<<(SV2017ParserKW_SHORTINT-219))|(1<<(SV2017ParserKW_SHORTREAL-219))|(1<<(SV2017ParserKW_SIGNED-219))|(1<<(SV2017ParserKW_STD-219))|(1<<(SV2017ParserKW_STRING-219))|(1<<(SV2017ParserKW_SUPER-219))|(1<<(SV2017ParserKW_TAGGED-219))|(1<<(SV2017ParserKW_THIS-219))|(1<<(SV2017ParserKW_TIME-219)))) != 0) || (((_la-260)&-(0x1f+1)) == 0 && ((1<<uint((_la-260)))&((1<<(SV2017ParserKW_TYPE-260))|(1<<(SV2017ParserKW_TYPE_OPTION-260))|(1<<(SV2017ParserKW_UNSIGNED-260))|(1<<(SV2017ParserTIME_LITERAL-260)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(SV2017ParserANY_BASED_NUMBER-292))|(1<<(SV2017ParserBASED_NUMBER_WITH_SIZE-292))|(1<<(SV2017ParserREAL_NUMBER_WITH_EXP-292))|(1<<(SV2017ParserFIXED_POINT_NUMBER-292))|(1<<(SV2017ParserUNSIGNED_NUMBER-292))|(1<<(SV2017ParserUNBASED_UNSIZED_LITERAL-292))|(1<<(SV2017ParserSTRING_LITERAL-292))|(1<<(SV2017ParserC_IDENTIFIER-292))|(1<<(SV2017ParserTICK_IDENTIFIER-292))|(1<<(SV2017ParserESCAPED_IDENTIFIER-292))|(1<<(SV2017ParserSIMPLE_IDENTIFIER-292))|(1<<(SV2017ParserSYSTEM_TF_IDENTIFIER-292))|(1<<(SV2017ParserLPAREN-292))|(1<<(SV2017ParserLBRACE-292))|(1<<(SV2017ParserAPOSTROPHE_LBRACE-292))|(1<<(SV2017ParserDOLAR-292))|(1<<(SV2017ParserNOT-292))|(1<<(SV2017ParserNEG-292))|(1<<(SV2017ParserNAND-292))|(1<<(SV2017ParserNOR-292)))) != 0) || (((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(SV2017ParserXOR-324))|(1<<(SV2017ParserNXOR-324))|(1<<(SV2017ParserXORN-324))|(1<<(SV2017ParserCOMMA-324))|(1<<(SV2017ParserDOT-324))|(1<<(SV2017ParserPLUS-324)))) != 0) || (((_la-356)&-(0x1f+1)) == 0 && ((1<<uint((_la-356)))&((1<<(SV2017ParserMINUS-356))|(1<<(SV2017ParserAMPERSAND-356))|(1<<(SV2017ParserBAR-356))|(1<<(SV2017ParserINCR-356))|(1<<(SV2017ParserDECR-356)))) != 0) {
				{
					p.SetState(7192)
					p.List_of_arguments()
				}

			}
			{
				p.SetState(7195)
				p.Match(SV2017ParserRPAREN)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(7200)
		p.Match(SV2017ParserSEMI)
	}

	return localctx
}

// ICore_item_itemContext is an interface to support dynamic dispatch.
type ICore_item_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCore_item_itemContext differentiates from other interfaces.
	IsCore_item_itemContext()
}

type Core_item_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCore_item_itemContext() *Core_item_itemContext {
	var p = new(Core_item_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_core_item_item
	return p
}

func (*Core_item_itemContext) IsCore_item_itemContext() {}

func NewCore_item_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Core_item_itemContext {
	var p = new(Core_item_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_core_item_item

	return p
}

func (s *Core_item_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Core_item_itemContext) CopyFrom(ctx *Core_item_itemContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Core_item_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Core_item_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type CoreItemClassContext struct {
	*Core_item_itemContext
}

func NewCoreItemClassContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CoreItemClassContext {
	var p = new(CoreItemClassContext)

	p.Core_item_itemContext = NewEmptyCore_item_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Core_item_itemContext))

	return p
}

func (s *CoreItemClassContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoreItemClassContext) Class_declaration() IClass_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_declarationContext)
}

func (s *CoreItemClassContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCoreItemClass(s)
	}
}

func (s *CoreItemClassContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCoreItemClass(s)
	}
}

type CoreItemGateContext struct {
	*Core_item_itemContext
}

func NewCoreItemGateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CoreItemGateContext {
	var p = new(CoreItemGateContext)

	p.Core_item_itemContext = NewEmptyCore_item_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Core_item_itemContext))

	return p
}

func (s *CoreItemGateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoreItemGateContext) Gate_instantiation() IGate_instantiationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGate_instantiationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGate_instantiationContext)
}

func (s *CoreItemGateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCoreItemGate(s)
	}
}

func (s *CoreItemGateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCoreItemGate(s)
	}
}

type CoreItemParamOverContext struct {
	*Core_item_itemContext
}

func NewCoreItemParamOverContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CoreItemParamOverContext {
	var p = new(CoreItemParamOverContext)

	p.Core_item_itemContext = NewEmptyCore_item_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Core_item_itemContext))

	return p
}

func (s *CoreItemParamOverContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoreItemParamOverContext) Parameter_override() IParameter_overrideContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameter_overrideContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameter_overrideContext)
}

func (s *CoreItemParamOverContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCoreItemParamOver(s)
	}
}

func (s *CoreItemParamOverContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCoreItemParamOver(s)
	}
}

type CoreItemElabContext struct {
	*Core_item_itemContext
}

func NewCoreItemElabContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CoreItemElabContext {
	var p = new(CoreItemElabContext)

	p.Core_item_itemContext = NewEmptyCore_item_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Core_item_itemContext))

	return p
}

func (s *CoreItemElabContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoreItemElabContext) Elaboration_system_task() IElaboration_system_taskContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElaboration_system_taskContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElaboration_system_taskContext)
}

func (s *CoreItemElabContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCoreItemElab(s)
	}
}

func (s *CoreItemElabContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCoreItemElab(s)
	}
}

type CoreItemIntfContext struct {
	*Core_item_itemContext
}

func NewCoreItemIntfContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CoreItemIntfContext {
	var p = new(CoreItemIntfContext)

	p.Core_item_itemContext = NewEmptyCore_item_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Core_item_itemContext))

	return p
}

func (s *CoreItemIntfContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoreItemIntfContext) Interface_class_declaration() IInterface_class_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterface_class_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInterface_class_declarationContext)
}

func (s *CoreItemIntfContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCoreItemIntf(s)
	}
}

func (s *CoreItemIntfContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCoreItemIntf(s)
	}
}

type CoreItemInitialContext struct {
	*Core_item_itemContext
}

func NewCoreItemInitialContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CoreItemInitialContext {
	var p = new(CoreItemInitialContext)

	p.Core_item_itemContext = NewEmptyCore_item_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Core_item_itemContext))

	return p
}

func (s *CoreItemInitialContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoreItemInitialContext) Initial_construct() IInitial_constructContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitial_constructContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitial_constructContext)
}

func (s *CoreItemInitialContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCoreItemInitial(s)
	}
}

func (s *CoreItemInitialContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCoreItemInitial(s)
	}
}

type CoreItemCoverContext struct {
	*Core_item_itemContext
}

func NewCoreItemCoverContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CoreItemCoverContext {
	var p = new(CoreItemCoverContext)

	p.Core_item_itemContext = NewEmptyCore_item_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Core_item_itemContext))

	return p
}

func (s *CoreItemCoverContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoreItemCoverContext) Covergroup_declaration() ICovergroup_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICovergroup_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICovergroup_declarationContext)
}

func (s *CoreItemCoverContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCoreItemCover(s)
	}
}

func (s *CoreItemCoverContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCoreItemCover(s)
	}
}

type CoreItemNetAliasContext struct {
	*Core_item_itemContext
}

func NewCoreItemNetAliasContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CoreItemNetAliasContext {
	var p = new(CoreItemNetAliasContext)

	p.Core_item_itemContext = NewEmptyCore_item_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Core_item_itemContext))

	return p
}

func (s *CoreItemNetAliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoreItemNetAliasContext) Net_alias() INet_aliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INet_aliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INet_aliasContext)
}

func (s *CoreItemNetAliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCoreItemNetAlias(s)
	}
}

func (s *CoreItemNetAliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCoreItemNetAlias(s)
	}
}

type CoreItemBindContext struct {
	*Core_item_itemContext
}

func NewCoreItemBindContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CoreItemBindContext {
	var p = new(CoreItemBindContext)

	p.Core_item_itemContext = NewEmptyCore_item_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Core_item_itemContext))

	return p
}

func (s *CoreItemBindContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoreItemBindContext) Bind_directive() IBind_directiveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBind_directiveContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBind_directiveContext)
}

func (s *CoreItemBindContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCoreItemBind(s)
	}
}

func (s *CoreItemBindContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCoreItemBind(s)
	}
}

type CoreItemSeqContext struct {
	*Core_item_itemContext
}

func NewCoreItemSeqContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CoreItemSeqContext {
	var p = new(CoreItemSeqContext)

	p.Core_item_itemContext = NewEmptyCore_item_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Core_item_itemContext))

	return p
}

func (s *CoreItemSeqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoreItemSeqContext) Sequence_declaration() ISequence_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISequence_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISequence_declarationContext)
}

func (s *CoreItemSeqContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCoreItemSeq(s)
	}
}

func (s *CoreItemSeqContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCoreItemSeq(s)
	}
}

type CoreItemLoopContext struct {
	*Core_item_itemContext
}

func NewCoreItemLoopContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CoreItemLoopContext {
	var p = new(CoreItemLoopContext)

	p.Core_item_itemContext = NewEmptyCore_item_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Core_item_itemContext))

	return p
}

func (s *CoreItemLoopContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoreItemLoopContext) Loop_generate_construct() ILoop_generate_constructContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoop_generate_constructContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoop_generate_constructContext)
}

func (s *CoreItemLoopContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCoreItemLoop(s)
	}
}

func (s *CoreItemLoopContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCoreItemLoop(s)
	}
}

type CoreItemNetContext struct {
	*Core_item_itemContext
}

func NewCoreItemNetContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CoreItemNetContext {
	var p = new(CoreItemNetContext)

	p.Core_item_itemContext = NewEmptyCore_item_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Core_item_itemContext))

	return p
}

func (s *CoreItemNetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoreItemNetContext) Net_declaration() INet_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INet_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INet_declarationContext)
}

func (s *CoreItemNetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCoreItemNet(s)
	}
}

func (s *CoreItemNetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCoreItemNet(s)
	}
}

type CoreItemDPIContext struct {
	*Core_item_itemContext
}

func NewCoreItemDPIContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CoreItemDPIContext {
	var p = new(CoreItemDPIContext)

	p.Core_item_itemContext = NewEmptyCore_item_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Core_item_itemContext))

	return p
}

func (s *CoreItemDPIContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoreItemDPIContext) Dpi_import_export() IDpi_import_exportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDpi_import_exportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDpi_import_exportContext)
}

func (s *CoreItemDPIContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCoreItemDPI(s)
	}
}

func (s *CoreItemDPIContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCoreItemDPI(s)
	}
}

type CoreItemLetContext struct {
	*Core_item_itemContext
}

func NewCoreItemLetContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CoreItemLetContext {
	var p = new(CoreItemLetContext)

	p.Core_item_itemContext = NewEmptyCore_item_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Core_item_itemContext))

	return p
}

func (s *CoreItemLetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoreItemLetContext) Let_declaration() ILet_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILet_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILet_declarationContext)
}

func (s *CoreItemLetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCoreItemLet(s)
	}
}

func (s *CoreItemLetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCoreItemLet(s)
	}
}

type CoreItemClockContext struct {
	*Core_item_itemContext
}

func NewCoreItemClockContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CoreItemClockContext {
	var p = new(CoreItemClockContext)

	p.Core_item_itemContext = NewEmptyCore_item_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Core_item_itemContext))

	return p
}

func (s *CoreItemClockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoreItemClockContext) Clocking_declaration() IClocking_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClocking_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClocking_declarationContext)
}

func (s *CoreItemClockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCoreItemClock(s)
	}
}

func (s *CoreItemClockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCoreItemClock(s)
	}
}

type CoreItemExternContext struct {
	*Core_item_itemContext
}

func NewCoreItemExternContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CoreItemExternContext {
	var p = new(CoreItemExternContext)

	p.Core_item_itemContext = NewEmptyCore_item_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Core_item_itemContext))

	return p
}

func (s *CoreItemExternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoreItemExternContext) Extern_constraint_declaration() IExtern_constraint_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExtern_constraint_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExtern_constraint_declarationContext)
}

func (s *CoreItemExternContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCoreItemExtern(s)
	}
}

func (s *CoreItemExternContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCoreItemExtern(s)
	}
}

type CoreItemAssertContext struct {
	*Core_item_itemContext
}

func NewCoreItemAssertContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CoreItemAssertContext {
	var p = new(CoreItemAssertContext)

	p.Core_item_itemContext = NewEmptyCore_item_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Core_item_itemContext))

	return p
}

func (s *CoreItemAssertContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoreItemAssertContext) Assertion_item() IAssertion_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssertion_itemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssertion_itemContext)
}

func (s *CoreItemAssertContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCoreItemAssert(s)
	}
}

func (s *CoreItemAssertContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCoreItemAssert(s)
	}
}

type CoreItemParamContext struct {
	*Core_item_itemContext
}

func NewCoreItemParamContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CoreItemParamContext {
	var p = new(CoreItemParamContext)

	p.Core_item_itemContext = NewEmptyCore_item_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Core_item_itemContext))

	return p
}

func (s *CoreItemParamContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoreItemParamContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *CoreItemParamContext) Default_clocking_or_dissable_construct() IDefault_clocking_or_dissable_constructContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefault_clocking_or_dissable_constructContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefault_clocking_or_dissable_constructContext)
}

func (s *CoreItemParamContext) Local_parameter_declaration() ILocal_parameter_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILocal_parameter_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILocal_parameter_declarationContext)
}

func (s *CoreItemParamContext) Parameter_declaration() IParameter_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameter_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameter_declarationContext)
}

func (s *CoreItemParamContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCoreItemParam(s)
	}
}

func (s *CoreItemParamContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCoreItemParam(s)
	}
}

type CoreItemDataContext struct {
	*Core_item_itemContext
}

func NewCoreItemDataContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CoreItemDataContext {
	var p = new(CoreItemDataContext)

	p.Core_item_itemContext = NewEmptyCore_item_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Core_item_itemContext))

	return p
}

func (s *CoreItemDataContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoreItemDataContext) Data_declaration() IData_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_declarationContext)
}

func (s *CoreItemDataContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCoreItemData(s)
	}
}

func (s *CoreItemDataContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCoreItemData(s)
	}
}

type CoreItemGenVarContext struct {
	*Core_item_itemContext
}

func NewCoreItemGenVarContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CoreItemGenVarContext {
	var p = new(CoreItemGenVarContext)

	p.Core_item_itemContext = NewEmptyCore_item_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Core_item_itemContext))

	return p
}

func (s *CoreItemGenVarContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoreItemGenVarContext) Genvar_declaration() IGenvar_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenvar_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenvar_declarationContext)
}

func (s *CoreItemGenVarContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCoreItemGenVar(s)
	}
}

func (s *CoreItemGenVarContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCoreItemGenVar(s)
	}
}

type CoreItemClassConsContext struct {
	*Core_item_itemContext
}

func NewCoreItemClassConsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CoreItemClassConsContext {
	var p = new(CoreItemClassConsContext)

	p.Core_item_itemContext = NewEmptyCore_item_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Core_item_itemContext))

	return p
}

func (s *CoreItemClassConsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoreItemClassConsContext) Class_constructor_declaration() IClass_constructor_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_constructor_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_constructor_declarationContext)
}

func (s *CoreItemClassConsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCoreItemClassCons(s)
	}
}

func (s *CoreItemClassConsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCoreItemClassCons(s)
	}
}

type CoreItemCondGenContext struct {
	*Core_item_itemContext
}

func NewCoreItemCondGenContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CoreItemCondGenContext {
	var p = new(CoreItemCondGenContext)

	p.Core_item_itemContext = NewEmptyCore_item_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Core_item_itemContext))

	return p
}

func (s *CoreItemCondGenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoreItemCondGenContext) Conditional_generate_construct() IConditional_generate_constructContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditional_generate_constructContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditional_generate_constructContext)
}

func (s *CoreItemCondGenContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCoreItemCondGen(s)
	}
}

func (s *CoreItemCondGenContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCoreItemCondGen(s)
	}
}

type CoreItemUdpContext struct {
	*Core_item_itemContext
}

func NewCoreItemUdpContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CoreItemUdpContext {
	var p = new(CoreItemUdpContext)

	p.Core_item_itemContext = NewEmptyCore_item_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Core_item_itemContext))

	return p
}

func (s *CoreItemUdpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoreItemUdpContext) Udp_instantiation() IUdp_instantiationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUdp_instantiationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUdp_instantiationContext)
}

func (s *CoreItemUdpContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCoreItemUdp(s)
	}
}

func (s *CoreItemUdpContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCoreItemUdp(s)
	}
}

type CoreItemTaskContext struct {
	*Core_item_itemContext
}

func NewCoreItemTaskContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CoreItemTaskContext {
	var p = new(CoreItemTaskContext)

	p.Core_item_itemContext = NewEmptyCore_item_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Core_item_itemContext))

	return p
}

func (s *CoreItemTaskContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoreItemTaskContext) Task_declaration() ITask_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITask_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITask_declarationContext)
}

func (s *CoreItemTaskContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCoreItemTask(s)
	}
}

func (s *CoreItemTaskContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCoreItemTask(s)
	}
}

type CoreItemPropertyContext struct {
	*Core_item_itemContext
}

func NewCoreItemPropertyContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CoreItemPropertyContext {
	var p = new(CoreItemPropertyContext)

	p.Core_item_itemContext = NewEmptyCore_item_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Core_item_itemContext))

	return p
}

func (s *CoreItemPropertyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoreItemPropertyContext) Property_declaration() IProperty_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProperty_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProperty_declarationContext)
}

func (s *CoreItemPropertyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCoreItemProperty(s)
	}
}

func (s *CoreItemPropertyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCoreItemProperty(s)
	}
}

type CoreItemFinalContext struct {
	*Core_item_itemContext
}

func NewCoreItemFinalContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CoreItemFinalContext {
	var p = new(CoreItemFinalContext)

	p.Core_item_itemContext = NewEmptyCore_item_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Core_item_itemContext))

	return p
}

func (s *CoreItemFinalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoreItemFinalContext) Final_construct() IFinal_constructContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFinal_constructContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFinal_constructContext)
}

func (s *CoreItemFinalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCoreItemFinal(s)
	}
}

func (s *CoreItemFinalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCoreItemFinal(s)
	}
}

type CoreItemAlwaysContext struct {
	*Core_item_itemContext
}

func NewCoreItemAlwaysContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CoreItemAlwaysContext {
	var p = new(CoreItemAlwaysContext)

	p.Core_item_itemContext = NewEmptyCore_item_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Core_item_itemContext))

	return p
}

func (s *CoreItemAlwaysContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoreItemAlwaysContext) Always_construct() IAlways_constructContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlways_constructContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlways_constructContext)
}

func (s *CoreItemAlwaysContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCoreItemAlways(s)
	}
}

func (s *CoreItemAlwaysContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCoreItemAlways(s)
	}
}

type CoreItemCheckerContext struct {
	*Core_item_itemContext
}

func NewCoreItemCheckerContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CoreItemCheckerContext {
	var p = new(CoreItemCheckerContext)

	p.Core_item_itemContext = NewEmptyCore_item_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Core_item_itemContext))

	return p
}

func (s *CoreItemCheckerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoreItemCheckerContext) Checker_declaration() IChecker_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChecker_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChecker_declarationContext)
}

func (s *CoreItemCheckerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCoreItemChecker(s)
	}
}

func (s *CoreItemCheckerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCoreItemChecker(s)
	}
}

type CoreItemContinuousContext struct {
	*Core_item_itemContext
}

func NewCoreItemContinuousContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CoreItemContinuousContext {
	var p = new(CoreItemContinuousContext)

	p.Core_item_itemContext = NewEmptyCore_item_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Core_item_itemContext))

	return p
}

func (s *CoreItemContinuousContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoreItemContinuousContext) Continuous_assign() IContinuous_assignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContinuous_assignContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IContinuous_assignContext)
}

func (s *CoreItemContinuousContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCoreItemContinuous(s)
	}
}

func (s *CoreItemContinuousContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCoreItemContinuous(s)
	}
}

type CoreItemInstanceContext struct {
	*Core_item_itemContext
}

func NewCoreItemInstanceContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CoreItemInstanceContext {
	var p = new(CoreItemInstanceContext)

	p.Core_item_itemContext = NewEmptyCore_item_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Core_item_itemContext))

	return p
}

func (s *CoreItemInstanceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoreItemInstanceContext) Module_or_interface_or_program_or_udp_instantiation() IModule_or_interface_or_program_or_udp_instantiationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModule_or_interface_or_program_or_udp_instantiationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModule_or_interface_or_program_or_udp_instantiationContext)
}

func (s *CoreItemInstanceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCoreItemInstance(s)
	}
}

func (s *CoreItemInstanceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCoreItemInstance(s)
	}
}

type CoreItemFunctionContext struct {
	*Core_item_itemContext
}

func NewCoreItemFunctionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CoreItemFunctionContext {
	var p = new(CoreItemFunctionContext)

	p.Core_item_itemContext = NewEmptyCore_item_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Core_item_itemContext))

	return p
}

func (s *CoreItemFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoreItemFunctionContext) Function_declaration() IFunction_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_declarationContext)
}

func (s *CoreItemFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterCoreItemFunction(s)
	}
}

func (s *CoreItemFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitCoreItemFunction(s)
	}
}

func (p *SV2017Parser) Core_item_item() (localctx ICore_item_itemContext) {
	localctx = NewCore_item_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1056, SV2017ParserRULE_core_item_item)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7238)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 947, p.GetParserRuleContext()) {
	case 1:
		localctx = NewCoreItemParamOverContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7202)
			p.Parameter_override()
		}

	case 2:
		localctx = NewCoreItemGateContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7203)
			p.Gate_instantiation()
		}

	case 3:
		localctx = NewCoreItemUdpContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7204)
			p.Udp_instantiation()
		}

	case 4:
		localctx = NewCoreItemInstanceContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(7205)
			p.Module_or_interface_or_program_or_udp_instantiation()
		}

	case 5:
		localctx = NewCoreItemParamContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		p.SetState(7209)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SV2017ParserKW_DEFAULT:
			{
				p.SetState(7206)
				p.Default_clocking_or_dissable_construct()
			}

		case SV2017ParserKW_LOCALPARAM:
			{
				p.SetState(7207)
				p.Local_parameter_declaration()
			}

		case SV2017ParserKW_PARAMETER:
			{
				p.SetState(7208)
				p.Parameter_declaration()
			}

		case SV2017ParserSEMI:

		default:
		}
		{
			p.SetState(7211)
			p.Match(SV2017ParserSEMI)
		}

	case 6:
		localctx = NewCoreItemNetContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(7212)
			p.Net_declaration()
		}

	case 7:
		localctx = NewCoreItemDataContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(7213)
			p.Data_declaration()
		}

	case 8:
		localctx = NewCoreItemTaskContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(7214)
			p.Task_declaration()
		}

	case 9:
		localctx = NewCoreItemFunctionContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(7215)
			p.Function_declaration()
		}

	case 10:
		localctx = NewCoreItemCheckerContext(p, localctx)
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(7216)
			p.Checker_declaration()
		}

	case 11:
		localctx = NewCoreItemDPIContext(p, localctx)
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(7217)
			p.Dpi_import_export()
		}

	case 12:
		localctx = NewCoreItemExternContext(p, localctx)
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(7218)
			p.Extern_constraint_declaration()
		}

	case 13:
		localctx = NewCoreItemClassContext(p, localctx)
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(7219)
			p.Class_declaration()
		}

	case 14:
		localctx = NewCoreItemIntfContext(p, localctx)
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(7220)
			p.Interface_class_declaration()
		}

	case 15:
		localctx = NewCoreItemClassConsContext(p, localctx)
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(7221)
			p.Class_constructor_declaration()
		}

	case 16:
		localctx = NewCoreItemCoverContext(p, localctx)
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(7222)
			p.Covergroup_declaration()
		}

	case 17:
		localctx = NewCoreItemPropertyContext(p, localctx)
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(7223)
			p.Property_declaration()
		}

	case 18:
		localctx = NewCoreItemSeqContext(p, localctx)
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(7224)
			p.Sequence_declaration()
		}

	case 19:
		localctx = NewCoreItemLetContext(p, localctx)
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(7225)
			p.Let_declaration()
		}

	case 20:
		localctx = NewCoreItemGenVarContext(p, localctx)
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(7226)
			p.Genvar_declaration()
		}

	case 21:
		localctx = NewCoreItemClockContext(p, localctx)
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(7227)
			p.Clocking_declaration()
		}

	case 22:
		localctx = NewCoreItemAssertContext(p, localctx)
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(7228)
			p.Assertion_item()
		}

	case 23:
		localctx = NewCoreItemBindContext(p, localctx)
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(7229)
			p.Bind_directive()
		}

	case 24:
		localctx = NewCoreItemContinuousContext(p, localctx)
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(7230)
			p.Continuous_assign()
		}

	case 25:
		localctx = NewCoreItemNetAliasContext(p, localctx)
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(7231)
			p.Net_alias()
		}

	case 26:
		localctx = NewCoreItemInitialContext(p, localctx)
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(7232)
			p.Initial_construct()
		}

	case 27:
		localctx = NewCoreItemFinalContext(p, localctx)
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(7233)
			p.Final_construct()
		}

	case 28:
		localctx = NewCoreItemAlwaysContext(p, localctx)
		p.EnterOuterAlt(localctx, 28)
		{
			p.SetState(7234)
			p.Always_construct()
		}

	case 29:
		localctx = NewCoreItemLoopContext(p, localctx)
		p.EnterOuterAlt(localctx, 29)
		{
			p.SetState(7235)
			p.Loop_generate_construct()
		}

	case 30:
		localctx = NewCoreItemCondGenContext(p, localctx)
		p.EnterOuterAlt(localctx, 30)
		{
			p.SetState(7236)
			p.Conditional_generate_construct()
		}

	case 31:
		localctx = NewCoreItemElabContext(p, localctx)
		p.EnterOuterAlt(localctx, 31)
		{
			p.SetState(7237)
			p.Elaboration_system_task()
		}

	}

	return localctx
}

// IModule_item_itemContext is an interface to support dynamic dispatch.
type IModule_item_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModule_item_itemContext differentiates from other interfaces.
	IsModule_item_itemContext()
}

type Module_item_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModule_item_itemContext() *Module_item_itemContext {
	var p = new(Module_item_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_module_item_item
	return p
}

func (*Module_item_itemContext) IsModule_item_itemContext() {}

func NewModule_item_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Module_item_itemContext {
	var p = new(Module_item_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_module_item_item

	return p
}

func (s *Module_item_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Module_item_itemContext) Core_item_item() ICore_item_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICore_item_itemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICore_item_itemContext)
}

func (s *Module_item_itemContext) Specparam_declaration() ISpecparam_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISpecparam_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISpecparam_declarationContext)
}

func (s *Module_item_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Module_item_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Module_item_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterModule_item_item(s)
	}
}

func (s *Module_item_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitModule_item_item(s)
	}
}

func (p *SV2017Parser) Module_item_item() (localctx IModule_item_itemContext) {
	localctx = NewModule_item_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1058, SV2017ParserRULE_module_item_item)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7242)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SV2017ParserKW_DOLAR_ERROR, SV2017ParserKW_DOLAR_FATAL, SV2017ParserKW_DOLAR_INFO, SV2017ParserKW_DOLAR_ROOT, SV2017ParserKW_DOLAR_UNIT, SV2017ParserKW_DOLAR_WARNING, SV2017ParserKW_ALIAS, SV2017ParserKW_ALWAYS, SV2017ParserKW_ALWAYS_COMB, SV2017ParserKW_ALWAYS_FF, SV2017ParserKW_ALWAYS_LATCH, SV2017ParserKW_AND, SV2017ParserKW_ASSERT, SV2017ParserKW_ASSIGN, SV2017ParserKW_ASSUME, SV2017ParserKW_AUTOMATIC, SV2017ParserKW_BIND, SV2017ParserKW_BIT, SV2017ParserKW_BUF, SV2017ParserKW_BUFIF0, SV2017ParserKW_BUFIF1, SV2017ParserKW_BYTE, SV2017ParserKW_CASE, SV2017ParserKW_CHANDLE, SV2017ParserKW_CHECKER, SV2017ParserKW_CLASS, SV2017ParserKW_CLOCKING, SV2017ParserKW_CMOS, SV2017ParserKW_CONST, SV2017ParserKW_CONSTRAINT, SV2017ParserKW_COVER, SV2017ParserKW_COVERGROUP, SV2017ParserKW_DEFAULT, SV2017ParserKW_DEFPARAM, SV2017ParserKW_ENUM, SV2017ParserKW_EVENT, SV2017ParserKW_EXPORT, SV2017ParserKW_FINAL, SV2017ParserKW_FOR, SV2017ParserKW_FUNCTION, SV2017ParserKW_GENVAR, SV2017ParserKW_GLOBAL, SV2017ParserKW_IF, SV2017ParserKW_IMPORT, SV2017ParserKW_INITIAL, SV2017ParserKW_INT, SV2017ParserKW_INTEGER, SV2017ParserKW_INTERCONNECT, SV2017ParserKW_INTERFACE, SV2017ParserKW_LET, SV2017ParserKW_LOCAL, SV2017ParserKW_LOCALPARAM, SV2017ParserKW_LOGIC, SV2017ParserKW_LONGINT, SV2017ParserKW_NAND, SV2017ParserKW_NETTYPE, SV2017ParserKW_NMOS, SV2017ParserKW_NOR, SV2017ParserKW_NONE, SV2017ParserKW_NOT, SV2017ParserKW_NOTIF0, SV2017ParserKW_NOTIF1, SV2017ParserKW_OPTION, SV2017ParserKW_OR, SV2017ParserKW_PARAMETER, SV2017ParserKW_PMOS, SV2017ParserKW_PROPERTY, SV2017ParserKW_PULLDOWN, SV2017ParserKW_PULLUP, SV2017ParserKW_RANDOMIZE, SV2017ParserKW_RCMOS, SV2017ParserKW_REAL, SV2017ParserKW_REALTIME, SV2017ParserKW_REG, SV2017ParserKW_RESTRICT, SV2017ParserKW_RNMOS, SV2017ParserKW_RPMOS, SV2017ParserKW_RTRAN, SV2017ParserKW_RTRANIF0, SV2017ParserKW_RTRANIF1, SV2017ParserKW_SAMPLE, SV2017ParserKW_SEQUENCE, SV2017ParserKW_SHORTINT, SV2017ParserKW_SHORTREAL, SV2017ParserKW_SIGNED, SV2017ParserKW_STATIC, SV2017ParserKW_STD, SV2017ParserKW_STRING, SV2017ParserKW_STRUCT, SV2017ParserKW_SUPER, SV2017ParserKW_SUPPLY0, SV2017ParserKW_SUPPLY1, SV2017ParserKW_TASK, SV2017ParserKW_THIS, SV2017ParserKW_TIME, SV2017ParserKW_TRAN, SV2017ParserKW_TRANIF0, SV2017ParserKW_TRANIF1, SV2017ParserKW_TRI, SV2017ParserKW_TRI0, SV2017ParserKW_TRI1, SV2017ParserKW_TRIAND, SV2017ParserKW_TRIOR, SV2017ParserKW_TRIREG, SV2017ParserKW_TYPE, SV2017ParserKW_TYPE_OPTION, SV2017ParserKW_TYPEDEF, SV2017ParserKW_UNION, SV2017ParserKW_UNSIGNED, SV2017ParserKW_UWIRE, SV2017ParserKW_VAR, SV2017ParserKW_VIRTUAL, SV2017ParserKW_WAND, SV2017ParserKW_WIRE, SV2017ParserKW_WOR, SV2017ParserKW_XNOR, SV2017ParserKW_XOR, SV2017ParserC_IDENTIFIER, SV2017ParserTICK_IDENTIFIER, SV2017ParserESCAPED_IDENTIFIER, SV2017ParserSIMPLE_IDENTIFIER, SV2017ParserSEMI, SV2017ParserLSQUARE_BR:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7240)
			p.Core_item_item()
		}

	case SV2017ParserKW_SPECPARAM:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7241)
			p.Specparam_declaration()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IModule_itemContext is an interface to support dynamic dispatch.
type IModule_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModule_itemContext differentiates from other interfaces.
	IsModule_itemContext()
}

type Module_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModule_itemContext() *Module_itemContext {
	var p = new(Module_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SV2017ParserRULE_module_item
	return p
}

func (*Module_itemContext) IsModule_itemContext() {}

func NewModule_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Module_itemContext {
	var p = new(Module_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SV2017ParserRULE_module_item

	return p
}

func (s *Module_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Module_itemContext) CopyFrom(ctx *Module_itemContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Module_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Module_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ModuleItemItemContext struct {
	*Module_itemContext
}

func NewModuleItemItemContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ModuleItemItemContext {
	var p = new(ModuleItemItemContext)

	p.Module_itemContext = NewEmptyModule_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Module_itemContext))

	return p
}

func (s *ModuleItemItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ModuleItemItemContext) Module_item_item() IModule_item_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModule_item_itemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModule_item_itemContext)
}

func (s *ModuleItemItemContext) AllAttribute_instance() []IAttribute_instanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem())
	var tst = make([]IAttribute_instanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_instanceContext)
		}
	}

	return tst
}

func (s *ModuleItemItemContext) Attribute_instance(i int) IAttribute_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_instanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_instanceContext)
}

func (s *ModuleItemItemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterModuleItemItem(s)
	}
}

func (s *ModuleItemItemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitModuleItemItem(s)
	}
}

type ModuleIntfDeclContext struct {
	*Module_itemContext
}

func NewModuleIntfDeclContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ModuleIntfDeclContext {
	var p = new(ModuleIntfDeclContext)

	p.Module_itemContext = NewEmptyModule_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Module_itemContext))

	return p
}

func (s *ModuleIntfDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ModuleIntfDeclContext) Interface_declaration() IInterface_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterface_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInterface_declarationContext)
}

func (s *ModuleIntfDeclContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterModuleIntfDecl(s)
	}
}

func (s *ModuleIntfDeclContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitModuleIntfDecl(s)
	}
}

type ModuleProgDeclContext struct {
	*Module_itemContext
}

func NewModuleProgDeclContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ModuleProgDeclContext {
	var p = new(ModuleProgDeclContext)

	p.Module_itemContext = NewEmptyModule_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Module_itemContext))

	return p
}

func (s *ModuleProgDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ModuleProgDeclContext) Program_declaration() IProgram_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProgram_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProgram_declarationContext)
}

func (s *ModuleProgDeclContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterModuleProgDecl(s)
	}
}

func (s *ModuleProgDeclContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitModuleProgDecl(s)
	}
}

type ModuleDeclContext struct {
	*Module_itemContext
}

func NewModuleDeclContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ModuleDeclContext {
	var p = new(ModuleDeclContext)

	p.Module_itemContext = NewEmptyModule_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Module_itemContext))

	return p
}

func (s *ModuleDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ModuleDeclContext) Module_declaration() IModule_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModule_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModule_declarationContext)
}

func (s *ModuleDeclContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterModuleDecl(s)
	}
}

func (s *ModuleDeclContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitModuleDecl(s)
	}
}

type ModuleSpecBlockContext struct {
	*Module_itemContext
}

func NewModuleSpecBlockContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ModuleSpecBlockContext {
	var p = new(ModuleSpecBlockContext)

	p.Module_itemContext = NewEmptyModule_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Module_itemContext))

	return p
}

func (s *ModuleSpecBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ModuleSpecBlockContext) Specify_block() ISpecify_blockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISpecify_blockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISpecify_blockContext)
}

func (s *ModuleSpecBlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterModuleSpecBlock(s)
	}
}

func (s *ModuleSpecBlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitModuleSpecBlock(s)
	}
}

type ModuleGenRegContext struct {
	*Module_itemContext
}

func NewModuleGenRegContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ModuleGenRegContext {
	var p = new(ModuleGenRegContext)

	p.Module_itemContext = NewEmptyModule_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Module_itemContext))

	return p
}

func (s *ModuleGenRegContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ModuleGenRegContext) Generate_region() IGenerate_regionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenerate_regionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenerate_regionContext)
}

func (s *ModuleGenRegContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterModuleGenReg(s)
	}
}

func (s *ModuleGenRegContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitModuleGenReg(s)
	}
}

type ModuleTimeDeclContext struct {
	*Module_itemContext
}

func NewModuleTimeDeclContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ModuleTimeDeclContext {
	var p = new(ModuleTimeDeclContext)

	p.Module_itemContext = NewEmptyModule_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Module_itemContext))

	return p
}

func (s *ModuleTimeDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ModuleTimeDeclContext) Timeunits_declaration() ITimeunits_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITimeunits_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITimeunits_declarationContext)
}

func (s *ModuleTimeDeclContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterModuleTimeDecl(s)
	}
}

func (s *ModuleTimeDeclContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitModuleTimeDecl(s)
	}
}

type ModulePortDeclContext struct {
	*Module_itemContext
}

func NewModulePortDeclContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ModulePortDeclContext {
	var p = new(ModulePortDeclContext)

	p.Module_itemContext = NewEmptyModule_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Module_itemContext))

	return p
}

func (s *ModulePortDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ModulePortDeclContext) Nonansi_port_declaration() INonansi_port_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INonansi_port_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INonansi_port_declarationContext)
}

func (s *ModulePortDeclContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SV2017ParserSEMI, 0)
}

func (s *ModulePortDeclContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.EnterModulePortDecl(s)
	}
}

func (s *ModulePortDeclContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SV2017ParserListener); ok {
		listenerT.ExitModulePortDecl(s)
	}
}

func (p *SV2017Parser) Module_item() (localctx IModule_itemContext) {
	localctx = NewModule_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1060, SV2017ParserRULE_module_item)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(7260)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 950, p.GetParserRuleContext()) {
	case 1:
		localctx = NewModuleGenRegContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7244)
			p.Generate_region()
		}

	case 2:
		localctx = NewModuleItemItemContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		p.SetState(7248)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 949, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(7245)
					p.Attribute_instance()
				}

			}
			p.SetState(7250)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 949, p.GetParserRuleContext())
		}
		{
			p.SetState(7251)
			p.Module_item_item()
		}

	case 3:
		localctx = NewModuleSpecBlockContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7252)
			p.Specify_block()
		}

	case 4:
		localctx = NewModuleProgDeclContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(7253)
			p.Program_declaration()
		}

	case 5:
		localctx = NewModuleDeclContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(7254)
			p.Module_declaration()
		}

	case 6:
		localctx = NewModuleIntfDeclContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(7255)
			p.Interface_declaration()
		}

	case 7:
		localctx = NewModuleTimeDeclContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(7256)
			p.Timeunits_declaration()
		}

	case 8:
		localctx = NewModulePortDeclContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(7257)
			p.Nonansi_port_declaration()
		}
		{
			p.SetState(7258)
			p.Match(SV2017ParserSEMI)
		}

	}

	return localctx
}

func (p *SV2017Parser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 201:
		var t *Property_exprContext = nil
		if localctx != nil {
			t = localctx.(*Property_exprContext)
		}
		return p.Property_expr_Sempred(t, predIndex)

	case 220:
		var t *Sequence_exprContext = nil
		if localctx != nil {
			t = localctx.(*Sequence_exprContext)
		}
		return p.Sequence_expr_Sempred(t, predIndex)

	case 242:
		var t *Select_expressionContext = nil
		if localctx != nil {
			t = localctx.(*Select_expressionContext)
		}
		return p.Select_expression_Sempred(t, predIndex)

	case 259:
		var t *Block_event_expressionContext = nil
		if localctx != nil {
			t = localctx.(*Block_event_expressionContext)
		}
		return p.Block_event_expression_Sempred(t, predIndex)

	case 296:
		var t *PrimaryContext = nil
		if localctx != nil {
			t = localctx.(*PrimaryContext)
		}
		return p.Primary_Sempred(t, predIndex)

	case 299:
		var t *ExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionContext)
		}
		return p.Expression_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *SV2017Parser) Property_expr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *SV2017Parser) Sequence_expr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 1:
		return p.Precpred(p.GetParserRuleContext(), 3)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *SV2017Parser) Select_expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 2:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *SV2017Parser) Block_event_expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 4:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *SV2017Parser) Primary_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 5:
		return p.Precpred(p.GetParserRuleContext(), 14)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 13)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 12)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 11)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 11:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 12:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *SV2017Parser) Expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 13:
		return p.Precpred(p.GetParserRuleContext(), 15)

	case 14:
		return p.Precpred(p.GetParserRuleContext(), 14)

	case 15:
		return p.Precpred(p.GetParserRuleContext(), 13)

	case 16:
		return p.Precpred(p.GetParserRuleContext(), 12)

	case 17:
		return p.Precpred(p.GetParserRuleContext(), 11)

	case 18:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 19:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 20:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 21:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 22:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 23:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 24:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 25:
		return p.Precpred(p.GetParserRuleContext(), 1)

	case 26:
		return p.Precpred(p.GetParserRuleContext(), 10)

	case 27:
		return p.Precpred(p.GetParserRuleContext(), 3)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
